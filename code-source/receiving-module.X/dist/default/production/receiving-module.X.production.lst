

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu May 28 22:29:08 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	text52,local,class=CODE,merge=1,delta=2
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	psect	text54,local,class=CODE,merge=1,delta=2
    72                           	psect	text55,local,class=CODE,merge=1,delta=2
    73                           	psect	text56,local,class=CODE,merge=1,delta=2
    74                           	psect	text57,local,class=CODE,merge=1,delta=2
    75                           	psect	text58,local,class=CODE,merge=1,delta=2
    76                           	psect	text59,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	dabs	1,0x7E,2
    86  0000                     
    87                           ; Version 2.10
    88                           ; Generated 31/07/2019 GMT
    89                           ; 
    90                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC16F886 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  001D                     	;# 
   153  001E                     	;# 
   154  001F                     	;# 
   155  0081                     	;# 
   156  0085                     	;# 
   157  0086                     	;# 
   158  0087                     	;# 
   159  0089                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  008F                     	;# 
   164  0090                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0093                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0097                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009A                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  009F                     	;# 
   182  0105                     	;# 
   183  0107                     	;# 
   184  0108                     	;# 
   185  0109                     	;# 
   186  010C                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  010F                     	;# 
   191  0185                     	;# 
   192  0187                     	;# 
   193  0188                     	;# 
   194  0189                     	;# 
   195  018C                     	;# 
   196  018D                     	;# 
   197  0000                     	;# 
   198  0001                     	;# 
   199  0002                     	;# 
   200  0003                     	;# 
   201  0004                     	;# 
   202  0005                     	;# 
   203  0006                     	;# 
   204  0007                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000D                     	;# 
   210  000E                     	;# 
   211  000E                     	;# 
   212  000F                     	;# 
   213  0010                     	;# 
   214  0011                     	;# 
   215  0012                     	;# 
   216  0013                     	;# 
   217  0014                     	;# 
   218  0015                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  001D                     	;# 
   229  001E                     	;# 
   230  001F                     	;# 
   231  0081                     	;# 
   232  0085                     	;# 
   233  0086                     	;# 
   234  0087                     	;# 
   235  0089                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  008E                     	;# 
   239  008F                     	;# 
   240  0090                     	;# 
   241  0091                     	;# 
   242  0092                     	;# 
   243  0093                     	;# 
   244  0093                     	;# 
   245  0093                     	;# 
   246  0094                     	;# 
   247  0095                     	;# 
   248  0096                     	;# 
   249  0097                     	;# 
   250  0098                     	;# 
   251  0099                     	;# 
   252  009A                     	;# 
   253  009B                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  009F                     	;# 
   258  0105                     	;# 
   259  0107                     	;# 
   260  0108                     	;# 
   261  0109                     	;# 
   262  010C                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  010F                     	;# 
   267  0185                     	;# 
   268  0187                     	;# 
   269  0188                     	;# 
   270  0189                     	;# 
   271  018C                     	;# 
   272  018D                     	;# 
   273  0000                     	;# 
   274  0001                     	;# 
   275  0002                     	;# 
   276  0003                     	;# 
   277  0004                     	;# 
   278  0005                     	;# 
   279  0006                     	;# 
   280  0007                     	;# 
   281  0009                     	;# 
   282  000A                     	;# 
   283  000B                     	;# 
   284  000C                     	;# 
   285  000D                     	;# 
   286  000E                     	;# 
   287  000E                     	;# 
   288  000F                     	;# 
   289  0010                     	;# 
   290  0011                     	;# 
   291  0012                     	;# 
   292  0013                     	;# 
   293  0014                     	;# 
   294  0015                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0017                     	;# 
   298  0018                     	;# 
   299  0019                     	;# 
   300  001A                     	;# 
   301  001B                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  001D                     	;# 
   305  001E                     	;# 
   306  001F                     	;# 
   307  0081                     	;# 
   308  0085                     	;# 
   309  0086                     	;# 
   310  0087                     	;# 
   311  0089                     	;# 
   312  008C                     	;# 
   313  008D                     	;# 
   314  008E                     	;# 
   315  008F                     	;# 
   316  0090                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0093                     	;# 
   320  0093                     	;# 
   321  0093                     	;# 
   322  0094                     	;# 
   323  0095                     	;# 
   324  0096                     	;# 
   325  0097                     	;# 
   326  0098                     	;# 
   327  0099                     	;# 
   328  009A                     	;# 
   329  009B                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  0105                     	;# 
   335  0107                     	;# 
   336  0108                     	;# 
   337  0109                     	;# 
   338  010C                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  010F                     	;# 
   343  0185                     	;# 
   344  0187                     	;# 
   345  0188                     	;# 
   346  0189                     	;# 
   347  018C                     	;# 
   348  018D                     	;# 
   349  0000                     	;# 
   350  0001                     	;# 
   351  0002                     	;# 
   352  0003                     	;# 
   353  0004                     	;# 
   354  0005                     	;# 
   355  0006                     	;# 
   356  0007                     	;# 
   357  0009                     	;# 
   358  000A                     	;# 
   359  000B                     	;# 
   360  000C                     	;# 
   361  000D                     	;# 
   362  000E                     	;# 
   363  000E                     	;# 
   364  000F                     	;# 
   365  0010                     	;# 
   366  0011                     	;# 
   367  0012                     	;# 
   368  0013                     	;# 
   369  0014                     	;# 
   370  0015                     	;# 
   371  0015                     	;# 
   372  0016                     	;# 
   373  0017                     	;# 
   374  0018                     	;# 
   375  0019                     	;# 
   376  001A                     	;# 
   377  001B                     	;# 
   378  001B                     	;# 
   379  001C                     	;# 
   380  001D                     	;# 
   381  001E                     	;# 
   382  001F                     	;# 
   383  0081                     	;# 
   384  0085                     	;# 
   385  0086                     	;# 
   386  0087                     	;# 
   387  0089                     	;# 
   388  008C                     	;# 
   389  008D                     	;# 
   390  008E                     	;# 
   391  008F                     	;# 
   392  0090                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0093                     	;# 
   396  0093                     	;# 
   397  0093                     	;# 
   398  0094                     	;# 
   399  0095                     	;# 
   400  0096                     	;# 
   401  0097                     	;# 
   402  0098                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  009F                     	;# 
   410  0105                     	;# 
   411  0107                     	;# 
   412  0108                     	;# 
   413  0109                     	;# 
   414  010C                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010E                     	;# 
   418  010F                     	;# 
   419  0185                     	;# 
   420  0187                     	;# 
   421  0188                     	;# 
   422  0189                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  0000                     	;# 
   426  0001                     	;# 
   427  0002                     	;# 
   428  0003                     	;# 
   429  0004                     	;# 
   430  0005                     	;# 
   431  0006                     	;# 
   432  0007                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  000E                     	;# 
   440  000F                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0013                     	;# 
   445  0014                     	;# 
   446  0015                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001D                     	;# 
   457  001E                     	;# 
   458  001F                     	;# 
   459  0081                     	;# 
   460  0085                     	;# 
   461  0086                     	;# 
   462  0087                     	;# 
   463  0089                     	;# 
   464  008C                     	;# 
   465  008D                     	;# 
   466  008E                     	;# 
   467  008F                     	;# 
   468  0090                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0093                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0095                     	;# 
   476  0096                     	;# 
   477  0097                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009A                     	;# 
   481  009B                     	;# 
   482  009C                     	;# 
   483  009D                     	;# 
   484  009E                     	;# 
   485  009F                     	;# 
   486  0105                     	;# 
   487  0107                     	;# 
   488  0108                     	;# 
   489  0109                     	;# 
   490  010C                     	;# 
   491  010C                     	;# 
   492  010D                     	;# 
   493  010E                     	;# 
   494  010F                     	;# 
   495  0185                     	;# 
   496  0187                     	;# 
   497  0188                     	;# 
   498  0189                     	;# 
   499  018C                     	;# 
   500  018D                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  000E                     	;# 
   516  000F                     	;# 
   517  0010                     	;# 
   518  0011                     	;# 
   519  0012                     	;# 
   520  0013                     	;# 
   521  0014                     	;# 
   522  0015                     	;# 
   523  0015                     	;# 
   524  0016                     	;# 
   525  0017                     	;# 
   526  0018                     	;# 
   527  0019                     	;# 
   528  001A                     	;# 
   529  001B                     	;# 
   530  001B                     	;# 
   531  001C                     	;# 
   532  001D                     	;# 
   533  001E                     	;# 
   534  001F                     	;# 
   535  0081                     	;# 
   536  0085                     	;# 
   537  0086                     	;# 
   538  0087                     	;# 
   539  0089                     	;# 
   540  008C                     	;# 
   541  008D                     	;# 
   542  008E                     	;# 
   543  008F                     	;# 
   544  0090                     	;# 
   545  0091                     	;# 
   546  0092                     	;# 
   547  0093                     	;# 
   548  0093                     	;# 
   549  0093                     	;# 
   550  0094                     	;# 
   551  0095                     	;# 
   552  0096                     	;# 
   553  0097                     	;# 
   554  0098                     	;# 
   555  0099                     	;# 
   556  009A                     	;# 
   557  009B                     	;# 
   558  009C                     	;# 
   559  009D                     	;# 
   560  009E                     	;# 
   561  009F                     	;# 
   562  0105                     	;# 
   563  0107                     	;# 
   564  0108                     	;# 
   565  0109                     	;# 
   566  010C                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0185                     	;# 
   572  0187                     	;# 
   573  0188                     	;# 
   574  0189                     	;# 
   575  018C                     	;# 
   576  018D                     	;# 
   577  0000                     	;# 
   578  0001                     	;# 
   579  0002                     	;# 
   580  0003                     	;# 
   581  0004                     	;# 
   582  0005                     	;# 
   583  0006                     	;# 
   584  0007                     	;# 
   585  0009                     	;# 
   586  000A                     	;# 
   587  000B                     	;# 
   588  000C                     	;# 
   589  000D                     	;# 
   590  000E                     	;# 
   591  000E                     	;# 
   592  000F                     	;# 
   593  0010                     	;# 
   594  0011                     	;# 
   595  0012                     	;# 
   596  0013                     	;# 
   597  0014                     	;# 
   598  0015                     	;# 
   599  0015                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001B                     	;# 
   607  001C                     	;# 
   608  001D                     	;# 
   609  001E                     	;# 
   610  001F                     	;# 
   611  0081                     	;# 
   612  0085                     	;# 
   613  0086                     	;# 
   614  0087                     	;# 
   615  0089                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  008F                     	;# 
   620  0090                     	;# 
   621  0091                     	;# 
   622  0092                     	;# 
   623  0093                     	;# 
   624  0093                     	;# 
   625  0093                     	;# 
   626  0094                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0097                     	;# 
   630  0098                     	;# 
   631  0099                     	;# 
   632  009A                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  0105                     	;# 
   639  0107                     	;# 
   640  0108                     	;# 
   641  0109                     	;# 
   642  010C                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  010F                     	;# 
   647  0185                     	;# 
   648  0187                     	;# 
   649  0188                     	;# 
   650  0189                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0009                     	;# 
   662  000A                     	;# 
   663  000B                     	;# 
   664  000C                     	;# 
   665  000D                     	;# 
   666  000E                     	;# 
   667  000E                     	;# 
   668  000F                     	;# 
   669  0010                     	;# 
   670  0011                     	;# 
   671  0012                     	;# 
   672  0013                     	;# 
   673  0014                     	;# 
   674  0015                     	;# 
   675  0015                     	;# 
   676  0016                     	;# 
   677  0017                     	;# 
   678  0018                     	;# 
   679  0019                     	;# 
   680  001A                     	;# 
   681  001B                     	;# 
   682  001B                     	;# 
   683  001C                     	;# 
   684  001D                     	;# 
   685  001E                     	;# 
   686  001F                     	;# 
   687  0081                     	;# 
   688  0085                     	;# 
   689  0086                     	;# 
   690  0087                     	;# 
   691  0089                     	;# 
   692  008C                     	;# 
   693  008D                     	;# 
   694  008E                     	;# 
   695  008F                     	;# 
   696  0090                     	;# 
   697  0091                     	;# 
   698  0092                     	;# 
   699  0093                     	;# 
   700  0093                     	;# 
   701  0093                     	;# 
   702  0094                     	;# 
   703  0095                     	;# 
   704  0096                     	;# 
   705  0097                     	;# 
   706  0098                     	;# 
   707  0099                     	;# 
   708  009A                     	;# 
   709  009B                     	;# 
   710  009C                     	;# 
   711  009D                     	;# 
   712  009E                     	;# 
   713  009F                     	;# 
   714  0105                     	;# 
   715  0107                     	;# 
   716  0108                     	;# 
   717  0109                     	;# 
   718  010C                     	;# 
   719  010C                     	;# 
   720  010D                     	;# 
   721  010E                     	;# 
   722  010F                     	;# 
   723  0185                     	;# 
   724  0187                     	;# 
   725  0188                     	;# 
   726  0189                     	;# 
   727  018C                     	;# 
   728  018D                     	;# 
   729  0000                     	;# 
   730  0001                     	;# 
   731  0002                     	;# 
   732  0003                     	;# 
   733  0004                     	;# 
   734  0005                     	;# 
   735  0006                     	;# 
   736  0007                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000D                     	;# 
   742  000E                     	;# 
   743  000E                     	;# 
   744  000F                     	;# 
   745  0010                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0013                     	;# 
   749  0014                     	;# 
   750  0015                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001D                     	;# 
   761  001E                     	;# 
   762  001F                     	;# 
   763  0081                     	;# 
   764  0085                     	;# 
   765  0086                     	;# 
   766  0087                     	;# 
   767  0089                     	;# 
   768  008C                     	;# 
   769  008D                     	;# 
   770  008E                     	;# 
   771  008F                     	;# 
   772  0090                     	;# 
   773  0091                     	;# 
   774  0092                     	;# 
   775  0093                     	;# 
   776  0093                     	;# 
   777  0093                     	;# 
   778  0094                     	;# 
   779  0095                     	;# 
   780  0096                     	;# 
   781  0097                     	;# 
   782  0098                     	;# 
   783  0099                     	;# 
   784  009A                     	;# 
   785  009B                     	;# 
   786  009C                     	;# 
   787  009D                     	;# 
   788  009E                     	;# 
   789  009F                     	;# 
   790  0105                     	;# 
   791  0107                     	;# 
   792  0108                     	;# 
   793  0109                     	;# 
   794  010C                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  010F                     	;# 
   799  0185                     	;# 
   800  0187                     	;# 
   801  0188                     	;# 
   802  0189                     	;# 
   803  018C                     	;# 
   804  018D                     	;# 
   805  0000                     	;# 
   806  0001                     	;# 
   807  0002                     	;# 
   808  0003                     	;# 
   809  0004                     	;# 
   810  0005                     	;# 
   811  0006                     	;# 
   812  0007                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000D                     	;# 
   818  000E                     	;# 
   819  000E                     	;# 
   820  000F                     	;# 
   821  0010                     	;# 
   822  0011                     	;# 
   823  0012                     	;# 
   824  0013                     	;# 
   825  0014                     	;# 
   826  0015                     	;# 
   827  0015                     	;# 
   828  0016                     	;# 
   829  0017                     	;# 
   830  0018                     	;# 
   831  0019                     	;# 
   832  001A                     	;# 
   833  001B                     	;# 
   834  001B                     	;# 
   835  001C                     	;# 
   836  001D                     	;# 
   837  001E                     	;# 
   838  001F                     	;# 
   839  0081                     	;# 
   840  0085                     	;# 
   841  0086                     	;# 
   842  0087                     	;# 
   843  0089                     	;# 
   844  008C                     	;# 
   845  008D                     	;# 
   846  008E                     	;# 
   847  008F                     	;# 
   848  0090                     	;# 
   849  0091                     	;# 
   850  0092                     	;# 
   851  0093                     	;# 
   852  0093                     	;# 
   853  0093                     	;# 
   854  0094                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0098                     	;# 
   859  0099                     	;# 
   860  009A                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  009F                     	;# 
   866  0105                     	;# 
   867  0107                     	;# 
   868  0108                     	;# 
   869  0109                     	;# 
   870  010C                     	;# 
   871  010C                     	;# 
   872  010D                     	;# 
   873  010E                     	;# 
   874  010F                     	;# 
   875  0185                     	;# 
   876  0187                     	;# 
   877  0188                     	;# 
   878  0189                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  0000                     	;# 
   882  0001                     	;# 
   883  0002                     	;# 
   884  0003                     	;# 
   885  0004                     	;# 
   886  0005                     	;# 
   887  0006                     	;# 
   888  0007                     	;# 
   889  0009                     	;# 
   890  000A                     	;# 
   891  000B                     	;# 
   892  000C                     	;# 
   893  000D                     	;# 
   894  000E                     	;# 
   895  000E                     	;# 
   896  000F                     	;# 
   897  0010                     	;# 
   898  0011                     	;# 
   899  0012                     	;# 
   900  0013                     	;# 
   901  0014                     	;# 
   902  0015                     	;# 
   903  0015                     	;# 
   904  0016                     	;# 
   905  0017                     	;# 
   906  0018                     	;# 
   907  0019                     	;# 
   908  001A                     	;# 
   909  001B                     	;# 
   910  001B                     	;# 
   911  001C                     	;# 
   912  001D                     	;# 
   913  001E                     	;# 
   914  001F                     	;# 
   915  0081                     	;# 
   916  0085                     	;# 
   917  0086                     	;# 
   918  0087                     	;# 
   919  0089                     	;# 
   920  008C                     	;# 
   921  008D                     	;# 
   922  008E                     	;# 
   923  008F                     	;# 
   924  0090                     	;# 
   925  0091                     	;# 
   926  0092                     	;# 
   927  0093                     	;# 
   928  0093                     	;# 
   929  0093                     	;# 
   930  0094                     	;# 
   931  0095                     	;# 
   932  0096                     	;# 
   933  0097                     	;# 
   934  0098                     	;# 
   935  0099                     	;# 
   936  009A                     	;# 
   937  009B                     	;# 
   938  009C                     	;# 
   939  009D                     	;# 
   940  009E                     	;# 
   941  009F                     	;# 
   942  0105                     	;# 
   943  0107                     	;# 
   944  0108                     	;# 
   945  0109                     	;# 
   946  010C                     	;# 
   947  010C                     	;# 
   948  010D                     	;# 
   949  010E                     	;# 
   950  010F                     	;# 
   951  0185                     	;# 
   952  0187                     	;# 
   953  0188                     	;# 
   954  0189                     	;# 
   955  018C                     	;# 
   956  018D                     	;# 
   957  0000                     	;# 
   958  0001                     	;# 
   959  0002                     	;# 
   960  0003                     	;# 
   961  0004                     	;# 
   962  0005                     	;# 
   963  0006                     	;# 
   964  0007                     	;# 
   965  0009                     	;# 
   966  000A                     	;# 
   967  000B                     	;# 
   968  000C                     	;# 
   969  000D                     	;# 
   970  000E                     	;# 
   971  000E                     	;# 
   972  000F                     	;# 
   973  0010                     	;# 
   974  0011                     	;# 
   975  0012                     	;# 
   976  0013                     	;# 
   977  0014                     	;# 
   978  0015                     	;# 
   979  0015                     	;# 
   980  0016                     	;# 
   981  0017                     	;# 
   982  0018                     	;# 
   983  0019                     	;# 
   984  001A                     	;# 
   985  001B                     	;# 
   986  001B                     	;# 
   987  001C                     	;# 
   988  001D                     	;# 
   989  001E                     	;# 
   990  001F                     	;# 
   991  0081                     	;# 
   992  0085                     	;# 
   993  0086                     	;# 
   994  0087                     	;# 
   995  0089                     	;# 
   996  008C                     	;# 
   997  008D                     	;# 
   998  008E                     	;# 
   999  008F                     	;# 
  1000  0090                     	;# 
  1001  0091                     	;# 
  1002  0092                     	;# 
  1003  0093                     	;# 
  1004  0093                     	;# 
  1005  0093                     	;# 
  1006  0094                     	;# 
  1007  0095                     	;# 
  1008  0096                     	;# 
  1009  0097                     	;# 
  1010  0098                     	;# 
  1011  0099                     	;# 
  1012  009A                     	;# 
  1013  009B                     	;# 
  1014  009C                     	;# 
  1015  009D                     	;# 
  1016  009E                     	;# 
  1017  009F                     	;# 
  1018  0105                     	;# 
  1019  0107                     	;# 
  1020  0108                     	;# 
  1021  0109                     	;# 
  1022  010C                     	;# 
  1023  010C                     	;# 
  1024  010D                     	;# 
  1025  010E                     	;# 
  1026  010F                     	;# 
  1027  0185                     	;# 
  1028  0187                     	;# 
  1029  0188                     	;# 
  1030  0189                     	;# 
  1031  018C                     	;# 
  1032  018D                     	;# 
  1033  0000                     	;# 
  1034  0001                     	;# 
  1035  0002                     	;# 
  1036  0003                     	;# 
  1037  0004                     	;# 
  1038  0005                     	;# 
  1039  0006                     	;# 
  1040  0007                     	;# 
  1041  0009                     	;# 
  1042  000A                     	;# 
  1043  000B                     	;# 
  1044  000C                     	;# 
  1045  000D                     	;# 
  1046  000E                     	;# 
  1047  000E                     	;# 
  1048  000F                     	;# 
  1049  0010                     	;# 
  1050  0011                     	;# 
  1051  0012                     	;# 
  1052  0013                     	;# 
  1053  0014                     	;# 
  1054  0015                     	;# 
  1055  0015                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001B                     	;# 
  1063  001C                     	;# 
  1064  001D                     	;# 
  1065  001E                     	;# 
  1066  001F                     	;# 
  1067  0081                     	;# 
  1068  0085                     	;# 
  1069  0086                     	;# 
  1070  0087                     	;# 
  1071  0089                     	;# 
  1072  008C                     	;# 
  1073  008D                     	;# 
  1074  008E                     	;# 
  1075  008F                     	;# 
  1076  0090                     	;# 
  1077  0091                     	;# 
  1078  0092                     	;# 
  1079  0093                     	;# 
  1080  0093                     	;# 
  1081  0093                     	;# 
  1082  0094                     	;# 
  1083  0095                     	;# 
  1084  0096                     	;# 
  1085  0097                     	;# 
  1086  0098                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009C                     	;# 
  1091  009D                     	;# 
  1092  009E                     	;# 
  1093  009F                     	;# 
  1094  0105                     	;# 
  1095  0107                     	;# 
  1096  0108                     	;# 
  1097  0109                     	;# 
  1098  010C                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  010F                     	;# 
  1103  0185                     	;# 
  1104  0187                     	;# 
  1105  0188                     	;# 
  1106  0189                     	;# 
  1107  018C                     	;# 
  1108  018D                     	;# 
  1109  0000                     	;# 
  1110  0001                     	;# 
  1111  0002                     	;# 
  1112  0003                     	;# 
  1113  0004                     	;# 
  1114  0005                     	;# 
  1115  0006                     	;# 
  1116  0007                     	;# 
  1117  0009                     	;# 
  1118  000A                     	;# 
  1119  000B                     	;# 
  1120  000C                     	;# 
  1121  000D                     	;# 
  1122  000E                     	;# 
  1123  000E                     	;# 
  1124  000F                     	;# 
  1125  0010                     	;# 
  1126  0011                     	;# 
  1127  0012                     	;# 
  1128  0013                     	;# 
  1129  0014                     	;# 
  1130  0015                     	;# 
  1131  0015                     	;# 
  1132  0016                     	;# 
  1133  0017                     	;# 
  1134  0018                     	;# 
  1135  0019                     	;# 
  1136  001A                     	;# 
  1137  001B                     	;# 
  1138  001B                     	;# 
  1139  001C                     	;# 
  1140  001D                     	;# 
  1141  001E                     	;# 
  1142  001F                     	;# 
  1143  0081                     	;# 
  1144  0085                     	;# 
  1145  0086                     	;# 
  1146  0087                     	;# 
  1147  0089                     	;# 
  1148  008C                     	;# 
  1149  008D                     	;# 
  1150  008E                     	;# 
  1151  008F                     	;# 
  1152  0090                     	;# 
  1153  0091                     	;# 
  1154  0092                     	;# 
  1155  0093                     	;# 
  1156  0093                     	;# 
  1157  0093                     	;# 
  1158  0094                     	;# 
  1159  0095                     	;# 
  1160  0096                     	;# 
  1161  0097                     	;# 
  1162  0098                     	;# 
  1163  0099                     	;# 
  1164  009A                     	;# 
  1165  009B                     	;# 
  1166  009C                     	;# 
  1167  009D                     	;# 
  1168  009E                     	;# 
  1169  009F                     	;# 
  1170  0105                     	;# 
  1171  0107                     	;# 
  1172  0108                     	;# 
  1173  0109                     	;# 
  1174  010C                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  010F                     	;# 
  1179  0185                     	;# 
  1180  0187                     	;# 
  1181  0188                     	;# 
  1182  0189                     	;# 
  1183  018C                     	;# 
  1184  018D                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  000E                     	;# 
  1200  000F                     	;# 
  1201  0010                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0013                     	;# 
  1205  0014                     	;# 
  1206  0015                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  001D                     	;# 
  1217  001E                     	;# 
  1218  001F                     	;# 
  1219  0081                     	;# 
  1220  0085                     	;# 
  1221  0086                     	;# 
  1222  0087                     	;# 
  1223  0089                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  008F                     	;# 
  1228  0090                     	;# 
  1229  0091                     	;# 
  1230  0092                     	;# 
  1231  0093                     	;# 
  1232  0093                     	;# 
  1233  0093                     	;# 
  1234  0094                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0097                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009E                     	;# 
  1245  009F                     	;# 
  1246  0105                     	;# 
  1247  0107                     	;# 
  1248  0108                     	;# 
  1249  0109                     	;# 
  1250  010C                     	;# 
  1251  010C                     	;# 
  1252  010D                     	;# 
  1253  010E                     	;# 
  1254  010F                     	;# 
  1255  0185                     	;# 
  1256  0187                     	;# 
  1257  0188                     	;# 
  1258  0189                     	;# 
  1259  018C                     	;# 
  1260  018D                     	;# 
  1261                           
  1262                           	psect	idataBANK0
  1263  07FC                     __pidataBANK0:	
  1264                           
  1265                           ;initializer for Display7SegmentText@enable_digit
  1266  07FC  3401               	retlw	1
  1267                           
  1268                           	psect	strings
  1269  1000                     __pstrings:	
  1270  1000                     stringtab:	
  1271  1000                     __stringtab:	
  1272  1000                     stringcode:	
  1273                           ;	String table - string pointers are 1 byte each
  1274                           
  1275  1000                     stringdir:	
  1276  1000  3010               	movlw	high stringdir
  1277  1001  008A               	movwf	10
  1278  1002  0804               	movf	4,w
  1279  1003  0A84               	incf	4,f
  1280  1004  0782               	addwf	2,f
  1281  1005                     __stringbase:	
  1282  1005  3400               	retlw	0
  1283  1006                     __end_of__stringtab:	
  1284  1006                     PlayRing@melody:	
  1285  1006  3493               	retlw	147
  1286  1007  3402               	retlw	2
  1287  1008  340B               	retlw	11
  1288  1009  3402               	retlw	2
  1289  100A  344B               	retlw	75
  1290  100B  3402               	retlw	2
  1291  100C  3488               	retlw	136
  1292  100D  3401               	retlw	1
  1293  100E  3401               	retlw	1
  1294  100F  3400               	retlw	0
  1295  1010  3488               	retlw	136
  1296  1011  3401               	retlw	1
  1297  1012  344B               	retlw	75
  1298  1013  3402               	retlw	2
  1299  1014  3493               	retlw	147
  1300  1015  3402               	retlw	2
  1301  1016  340B               	retlw	11
  1302  1017  3402               	retlw	2
  1303  1018                     __end_ofPlayRing@melody:	
  1304  1018                     PlayRing@beats:	
  1305  1018  3404               	retlw	4
  1306  1019  3404               	retlw	4
  1307  101A  3404               	retlw	4
  1308  101B  3402               	retlw	2
  1309  101C  3440               	retlw	64
  1310  101D  3404               	retlw	4
  1311  101E  3404               	retlw	4
  1312  101F  3404               	retlw	4
  1313  1020  3402               	retlw	2
  1314  1021                     __end_ofPlayRing@beats:	
  1315  1021                     Is_Valid_Date@k_min_valid_year:	
  1316  1021  34D0               	retlw	208
  1317  1022  3407               	retlw	7
  1318  1023                     __end_ofIs_Valid_Date@k_min_valid_year:	
  1319  1023                     Is_Valid_Date@k_max_valid_year:	
  1320  1023  34B7               	retlw	183
  1321  1024  340B               	retlw	11
  1322  1025                     __end_ofIs_Valid_Date@k_max_valid_year:	
  1323  1025                     PlayRing@tempo:	
  1324  1025  3408               	retlw	8
  1325  1026  3407               	retlw	7
  1326  1027                     __end_ofPlayRing@tempo:	
  1327  1027                     CRC16@generator:	
  1328  1027  3421               	retlw	33
  1329  1028  3410               	retlw	16
  1330  1029                     __end_ofCRC16@generator:	
  1331  0015                     _CCPR1	set	21
  1332  000E                     _TMR1	set	14
  1333  001B                     _CCPR2	set	27
  1334  0013                     _SSPBUF	set	19
  1335  0014                     _SSPCONbits	set	20
  1336  0005                     _PORTAbits	set	5
  1337  0006                     _PORTBbits	set	6
  1338  0007                     _PORTCbits	set	7
  1339  0017                     _CCP1CONbits	set	23
  1340  001D                     _CCP2CONbits	set	29
  1341  0010                     _T1CONbits	set	16
  1342  000B                     _INTCONbits	set	11
  1343  0007                     _PORTC	set	7
  1344  0006                     _PORTB	set	6
  1345  006C                     _EEIF	set	108
  1346  0062                     _CCP1IF	set	98
  1347  0068                     _CCP2IF	set	104
  1348  005A                     _TMR0IF	set	90
  1349  005D                     _TMR0IE	set	93
  1350  0094                     _SSPSTATbits	set	148
  1351  0091                     _SSPCON2bits	set	145
  1352  0094                     _SSPSTAT	set	148
  1353  0091                     _SSPCON2	set	145
  1354  0093                     _SSPADD	set	147
  1355  008D                     _PIE2bits	set	141
  1356  0081                     _OPTION_REGbits	set	129
  1357  008F                     _OSCCONbits	set	143
  1358  048C                     _ACKEN	set	1164
  1359  048D                     _ACKDT	set	1165
  1360  048B                     _RCEN	set	1163
  1361  0462                     _CCP1IE	set	1122
  1362  0468                     _CCP2IE	set	1128
  1363  0437                     _TRISB7	set	1079
  1364  0436                     _TRISB6	set	1078
  1365  0435                     _TRISB5	set	1077
  1366  0434                     _TRISB4	set	1076
  1367  0433                     _TRISB3	set	1075
  1368  0432                     _TRISB2	set	1074
  1369  0431                     _TRISB1	set	1073
  1370  0430                     _TRISB0	set	1072
  1371  042F                     _TRISA7	set	1071
  1372  042E                     _TRISA6	set	1070
  1373  042D                     _TRISA5	set	1069
  1374  042C                     _TRISA4	set	1068
  1375  042B                     _TRISA3	set	1067
  1376  042A                     _TRISA2	set	1066
  1377  0429                     _TRISA1	set	1065
  1378  0428                     _TRISA0	set	1064
  1379  043F                     _TRISC7	set	1087
  1380  043E                     _TRISC6	set	1086
  1381  043D                     _TRISC5	set	1085
  1382  043C                     _TRISC4	set	1084
  1383  043B                     _TRISC3	set	1083
  1384  043A                     _TRISC2	set	1082
  1385  0439                     _TRISC1	set	1081
  1386  0438                     _TRISC0	set	1080
  1387  010C                     _EEDAT	set	268
  1388  010D                     _EEADR	set	269
  1389  018D                     _EECON2	set	397
  1390  0189                     _ANSELH	set	393
  1391  0188                     _ANSEL	set	392
  1392  0C60                     _RD	set	3168
  1393  0C67                     _EEPGD	set	3175
  1394  0C61                     _WR	set	3169
  1395  0C62                     _WREN	set	3170
  1396  1029                     STR_8:	
  1397  1029  3473               	retlw	115	;'s'
  1398  102A  3465               	retlw	101	;'e'
  1399  102B  3474               	retlw	116	;'t'
  1400  102C  3431               	retlw	49	;'1'
  1401  102D  3400               	retlw	0
  1402  102E                     STR_7:	
  1403  102E  3473               	retlw	115	;'s'
  1404  102F  3465               	retlw	101	;'e'
  1405  1030  3474               	retlw	116	;'t'
  1406  1031  3432               	retlw	50	;'2'
  1407  1032  3400               	retlw	0
  1408  1033                     STR_9:	
  1409  1033  3473               	retlw	115	;'s'
  1410  1034  3472               	retlw	114	;'r'
  1411  1035  3474               	retlw	116	;'t'
  1412  1036  3463               	retlw	99	;'c'
  1413  1037  3400               	retlw	0
  1414  1038                     STR_13:	
  1415  1038  3462               	retlw	98	;'b'
  1416  1039  3461               	retlw	97	;'a'
  1417  103A  3464               	retlw	100	;'d'
  1418  103B  3464               	retlw	100	;'d'
  1419  103C  3400               	retlw	0
  1420  103D                     STR_19:	
  1421  103D  3466               	retlw	102	;'f'
  1422  103E  3472               	retlw	114	;'r'
  1423  103F  3469               	retlw	105	;'i'
  1424  1040  3464               	retlw	100	;'d'
  1425  1041  3400               	retlw	0
  1426  1042                     STR_15:	
  1427  1042  346D               	retlw	109	;'m'
  1428  1043  346F               	retlw	111	;'o'
  1429  1044  346E               	retlw	110	;'n'
  1430  1045  3464               	retlw	100	;'d'
  1431  1046  3400               	retlw	0
  1432  1047                     STR_21:	
  1433  1047  3473               	retlw	115	;'s'
  1434  1048  3475               	retlw	117	;'u'
  1435  1049  346E               	retlw	110	;'n'
  1436  104A  3464               	retlw	100	;'d'
  1437  104B  3400               	retlw	0
  1438  104C                     STR_17:	
  1439  104C  3477               	retlw	119	;'w'
  1440  104D  3465               	retlw	101	;'e'
  1441  104E  3464               	retlw	100	;'d'
  1442  104F  3465               	retlw	101	;'e'
  1443  1050  3400               	retlw	0
  1444  1051                     STR_10:	
  1445  1051  3473               	retlw	115	;'s'
  1446  1052  3461               	retlw	97	;'a'
  1447  1053  3476               	retlw	118	;'v'
  1448  1054  3465               	retlw	101	;'e'
  1449  1055  3400               	retlw	0
  1450  1056                     STR_18:	
  1451  1056  3474               	retlw	116	;'t'
  1452  1057  3468               	retlw	104	;'h'
  1453  1058  3475               	retlw	117	;'u'
  1454  1059  3472               	retlw	114	;'r'
  1455  105A  3400               	retlw	0
  1456  105B                     STR_16:	
  1457  105B  3474               	retlw	116	;'t'
  1458  105C  3475               	retlw	117	;'u'
  1459  105D  3465               	retlw	101	;'e'
  1460  105E  3473               	retlw	115	;'s'
  1461  105F  3400               	retlw	0
  1462  1060                     STR_20:	
  1463  1060  3473               	retlw	115	;'s'
  1464  1061  3461               	retlw	97	;'a'
  1465  1062  3474               	retlw	116	;'t'
  1466  1063  3475               	retlw	117	;'u'
  1467  1064  3400               	retlw	0
  1468  1065                     STR_2:	
  1469  1065  342A               	retlw	42	;'*'
  1470  1066  342A               	retlw	42	;'*'
  1471  1067  342A               	retlw	42	;'*'
  1472  1068  342A               	retlw	42	;'*'
  1473  1069  3400               	retlw	0
  1474  106A                     STR_1:	
  1475  106A  3462               	retlw	98	;'b'
  1476  106B  3472               	retlw	114	;'r'
  1477  106C  3461               	retlw	97	;'a'
  1478  106D  346D               	retlw	109	;'m'
  1479  106E  3400               	retlw	0
  1480  106F                     STR_5:	
  1481  106F  3464               	retlw	100	;'d'
  1482  1070  347A               	retlw	122	;'z'
  1483  1071  3477               	retlw	119	;'w'
  1484  1072  346F               	retlw	111	;'o'
  1485  1073  3400               	retlw	0
  1486  1074                     STR_3:	
  1487  1074  3466               	retlw	102	;'f'
  1488  1075  3475               	retlw	117	;'u'
  1489  1076  3472               	retlw	114	;'r'
  1490  1077  3474               	retlw	116	;'t'
  1491  1078  3400               	retlw	0
  1492  1065                     
  1493                           ; #config settings
  1494  0000                     
  1495                           	psect	cinit
  1496  0013                     start_initialization:	
  1497  0013                     __initialization:	
  1498                           
  1499                           ; Initialize objects allocated to BANK0
  1500  0013  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1501  0018  00DE               	movwf	__pdataBANK0& (0+127)
  1502                           
  1503                           ; Clear objects allocated to BANK3
  1504  0019  1783               	bsf	3,7	;select IRP bank2
  1505  001A  3090               	movlw	low __pbssBANK3
  1506  001B  0084               	movwf	4
  1507  001C  30D6               	movlw	low (__pbssBANK3+70)
  1508  001D  160A  158A  2074  120A  118A  	fcall	clear_ram0
  1509                           
  1510                           ; Clear objects allocated to BANK2
  1511  0022  3010               	movlw	low __pbssBANK2
  1512  0023  0084               	movwf	4
  1513  0024  302E               	movlw	low (__pbssBANK2+30)
  1514  0025  160A  158A  2074  120A  118A  	fcall	clear_ram0
  1515                           
  1516                           ; Clear objects allocated to BANK1
  1517  002A  1383               	bcf	3,7	;select IRP bank0
  1518  002B  30A0               	movlw	low __pbssBANK1
  1519  002C  0084               	movwf	4
  1520  002D  30D2               	movlw	low (__pbssBANK1+50)
  1521  002E  160A  158A  2074   	fcall	clear_ram0
  1522                           
  1523                           ; Clear objects allocated to BANK0
  1524  0031  01D9               	clrf	__pbssBANK0& (0+127)
  1525  0032  01DA               	clrf	(__pbssBANK0+1)& (0+127)
  1526  0033  01DB               	clrf	(__pbssBANK0+2)& (0+127)
  1527  0034  01DC               	clrf	(__pbssBANK0+3)& (0+127)
  1528  0035  01DD               	clrf	(__pbssBANK0+4)& (0+127)
  1529  0036                     end_of_initialization:	
  1530                           ;End of C runtime variable initialization code
  1531                           
  1532  0036                     __end_of__initialization:	
  1533  0036  0183               	clrf	3
  1534  0037  160A  158A  2B74   	ljmp	_main	;jump to C main() function
  1535                           
  1536                           	psect	bssBANK0
  1537  0059                     __pbssBANK0:	
  1538  0059                     _g_generic_timer:	
  1539  0059                     	ds	2
  1540  005B                     Menu_Set_Param_Time_Limit@change_digit:	
  1541  005B                     	ds	1
  1542  005C                     FrameBuffer@write_pointer:	
  1543  005C                     	ds	1
  1544  005D                     FrameBuffer@read_pointer:	
  1545  005D                     	ds	1
  1546                           
  1547                           	psect	dataBANK0
  1548  005E                     __pdataBANK0:	
  1549  005E                     Display7SegmentText@enable_digit:	
  1550  005E                     	ds	1
  1551                           
  1552                           	psect	bssBANK1
  1553  00A0                     __pbssBANK1:	
  1554  00A0                     _g_button_timer:	
  1555  00A0                     	ds	2
  1556  00A2                     _g_pwm_freq:	
  1557  00A2                     	ds	2
  1558  00A4                     Menu_Set_Param_Time_Limit@flag:	
  1559  00A4                     	ds	1
  1560  00A5                     ManchesterDecode@sync_flag:	
  1561  00A5                     	ds	1
  1562  00A6                     ManchesterDecode@next_edge_also_T_flag:	
  1563  00A6                     	ds	1
  1564  00A7                     ManchesterDecode@start_data_flag:	
  1565  00A7                     	ds	1
  1566  00A8                     ManchesterDecode@data_counter:	
  1567  00A8                     	ds	1
  1568  00A9                     ManchesterDecode@bit_pos:	
  1569  00A9                     	ds	1
  1570  00AA                     ISR@display_timer:	
  1571  00AA                     	ds	1
  1572  00AB                     ISR@set_flag:	
  1573  00AB                     	ds	1
  1574  00AC                     _g_decimal_point:	
  1575  00AC                     	ds	1
  1576  00AD                     _g_display_controll:	
  1577  00AD                     	ds	1
  1578  00AE                     _g_reciver_ccp2_isr_fire_flag:	
  1579  00AE                     	ds	1
  1580  00AF                     FrameBuffer@write_pointer_mem:	
  1581  00AF                     	ds	1
  1582  00B0                     Button_Init@set_right:	
  1583  00B0                     	ds	7
  1584  00B7                     Button_Init@set_time2:	
  1585  00B7                     	ds	7
  1586  00BE                     Button_Init@set_time1:	
  1587  00BE                     	ds	7
  1588  00C5                     Button_Init@set_rtc:	
  1589  00C5                     	ds	7
  1590  00CC                     _g_display_text:	
  1591  00CC                     	ds	4
  1592  00D0                     ManchesterDecode@decoded_byte:	
  1593  00D0                     	ds	1
  1594  00D1                     ISR@edge_dir:	
  1595  00D1                     	ds	1
  1596                           
  1597                           	psect	bssBANK3
  1598  0190                     __pbssBANK3:	
  1599  0190                     Menu_Init@time_limit_free_day_2:	
  1600  0190                     	ds	8
  1601  0198                     Menu_Init@time_limit_free_day_1:	
  1602  0198                     	ds	8
  1603  01A0                     Menu_Init@time_limit_work_day_2:	
  1604  01A0                     	ds	8
  1605  01A8                     Menu_Init@time_limit_work_day_1:	
  1606  01A8                     	ds	8
  1607  01B0                     Menu_Init@year:	
  1608  01B0                     	ds	8
  1609  01B8                     Menu_Init@day_month:	
  1610  01B8                     	ds	8
  1611  01C0                     Menu_Init@hours_minutes:	
  1612  01C0                     	ds	8
  1613  01C8                     Button_Init@set_down:	
  1614  01C8                     	ds	7
  1615  01CF                     Button_Init@set_up:	
  1616  01CF                     	ds	7
  1617                           
  1618                           	psect	bssBANK2
  1619  0110                     __pbssBANK2:	
  1620  0110                     FrameBuffer@buffer:	
  1621  0110                     	ds	30
  1622                           
  1623                           	psect	clrtext
  1624  1874                     clear_ram0:	
  1625                           ;	Called with FSR containing the base address, and
  1626                           ;	W with the last address+1
  1627                           
  1628  1874  0064               	clrwdt	;clear the watchdog before getting into this loop
  1629  1875                     clrloop0:	
  1630  1875  0180               	clrf	0	;clear RAM location pointed to by FSR
  1631  1876  0A84               	incf	4,f	;increment pointer
  1632  1877  0604               	xorwf	4,w	;XOR with final address
  1633  1878  1903               	btfsc	3,2	;have we reached the end yet?
  1634  1879  3400               	retlw	0	;all done for this memory range, return
  1635  187A  0604               	xorwf	4,w	;XOR again to restore value
  1636  187B  2875               	goto	clrloop0	;do the next byte
  1637                           
  1638                           	psect	cstackBANK3
  1639  01D6                     __pcstackBANK3:	
  1640  01D6                     main@data_rcv:	
  1641                           
  1642                           ; 5 bytes @ 0x0
  1643  01D6                     	ds	5
  1644  01DB                     main@keydef:	
  1645                           
  1646                           ; 6 bytes @ 0x5
  1647  01DB                     	ds	6
  1648  01E1                     main@time:	
  1649                           
  1650                           ; 7 bytes @ 0xB
  1651  01E1                     	ds	7
  1652  01E8                     main@menudef:	
  1653                           
  1654                           ; 7 bytes @ 0x12
  1655  01E8                     	ds	7
  1656                           
  1657                           	psect	cstackBANK1
  1658  00D2                     __pcstackBANK1:	
  1659  00D2                     Menu_Set_Time@key:	
  1660                           
  1661                           ; 1 bytes @ 0x0
  1662  00D2                     	ds	1
  1663  00D3                     Menu_Set_Time@check_button:	
  1664                           
  1665                           ; 1 bytes @ 0x1
  1666  00D3                     	ds	1
  1667  00D4                     Menu_Set_Time@current_menu_ptr:	
  1668                           
  1669                           ; 2 bytes @ 0x2
  1670  00D4                     	ds	2
  1671  00D6                     Menu_Set_Time@menudef:	
  1672                           
  1673                           ; 1 bytes @ 0x4
  1674  00D6                     	ds	1
  1675  00D7                     Menu_Set_Time@current_menu:	
  1676                           
  1677                           ; 8 bytes @ 0x5
  1678  00D7                     	ds	8
  1679  00DF                     Menu_Set_Time@time:	
  1680                           
  1681                           ; 7 bytes @ 0xD
  1682  00DF                     	ds	7
  1683                           
  1684                           	psect	cstackCOMMON
  1685  0070                     __pcstackCOMMON:	
  1686  0070                     ?_Init_I2C:	
  1687  0070                     ?_Button_Init:	
  1688                           ; 1 bytes @ 0x0
  1689                           
  1690  0070                     ?_Menu_Init:	
  1691                           ; 1 bytes @ 0x0
  1692                           
  1693  0070                     ?_PlayRing:	
  1694                           ; 1 bytes @ 0x0
  1695                           
  1696  0070                     ?_I2C_Master_Start:	
  1697                           ; 1 bytes @ 0x0
  1698                           
  1699  0070                     ?_I2C_Master_Stop:	
  1700                           ; 1 bytes @ 0x0
  1701                           
  1702  0070                     ?_I2C_Master_Read:	
  1703                           ; 1 bytes @ 0x0
  1704                           
  1705  0070                     ?_Display_Weekday:	
  1706                           ; 1 bytes @ 0x0
  1707                           
  1708  0070                     ?_Read_EEprom:	
  1709                           ; 1 bytes @ 0x0
  1710                           
  1711  0070                     ?_Global_Inits:	
  1712                           ; 1 bytes @ 0x0
  1713                           
  1714  0070                     ?_InterruptConfig:	
  1715                           ; 1 bytes @ 0x0
  1716                           
  1717  0070                     ?_ISR:	
  1718                           ; 1 bytes @ 0x0
  1719                           
  1720  0070                     ?_main:	
  1721                           ; 1 bytes @ 0x0
  1722                           
  1723  0070                     ?_CRC_check:	
  1724                           ; 1 bytes @ 0x0
  1725                           
  1726  0070                     ?_Check_Event:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0070                     ?_Init_CompareMode:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0070                     ?_Init_CaptureMode:	
  1733                           ; 1 bytes @ 0x0
  1734                           
  1735  0070                     ?_SignAnodeData:	
  1736                           ; 1 bytes @ 0x0
  1737                           
  1738  0070                     ?_Disable_All_Digits:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0070                     ?_BCD_2_DEC:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0070                     ?_DEC_2_BCD:	
  1745                           ; 1 bytes @ 0x0
  1746                           
  1747  0070                     ?_PCF8583_Read_Byte:	
  1748                           ; 1 bytes @ 0x0
  1749                           
  1750  0070                     ?_PCF8583_Set_Date_Time:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0070                     ?_I2C_Master_Wait:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ?_Button_Handler:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759  0070                     ?i1_FrameBuffer:	
  1760                           ; 1 bytes @ 0x0
  1761                           
  1762  0070                     ?i1_SignAnodeData:	
  1763                           ; 1 bytes @ 0x0
  1764                           
  1765  0070                     ??i1_SignAnodeData:	
  1766                           ; 1 bytes @ 0x0
  1767                           
  1768  0070                     ?i1_Disable_All_Digits:	
  1769                           ; 1 bytes @ 0x0
  1770                           
  1771  0070                     ??i1_Disable_All_Digits:	
  1772                           ; 1 bytes @ 0x0
  1773                           
  1774  0070                     i1FrameBuffer@mode:	
  1775                           ; 1 bytes @ 0x0
  1776                           
  1777                           
  1778                           ; 1 bytes @ 0x0
  1779  0070                     	ds	1
  1780  0071                     ??i1_FrameBuffer:	
  1781                           
  1782                           ; 1 bytes @ 0x1
  1783  0071                     	ds	1
  1784  0072                     i1FrameBuffer@data:	
  1785  0072                     i1SignAnodeData@sign:	
  1786                           ; 1 bytes @ 0x2
  1787                           
  1788                           
  1789                           ; 1 bytes @ 0x2
  1790  0072                     	ds	1
  1791  0073                     ?_ManchesterDecode:	
  1792  0073                     ?i1_SetAnodeOutputs:	
  1793                           ; 1 bytes @ 0x3
  1794                           
  1795  0073                     ManchesterDecode@pulse_time:	
  1796                           ; 1 bytes @ 0x3
  1797                           
  1798  0073                     i1SetAnodeOutputs@decimal_point:	
  1799                           ; 1 bytes @ 0x3
  1800                           
  1801                           
  1802                           ; 1 bytes @ 0x3
  1803  0073                     	ds	1
  1804  0074                     ??_ManchesterDecode:	
  1805  0074                     ??i1_SetAnodeOutputs:	
  1806                           ; 1 bytes @ 0x4
  1807                           
  1808                           
  1809                           ; 1 bytes @ 0x4
  1810  0074                     	ds	1
  1811  0075                     i1SetAnodeOutputs@sign:	
  1812                           
  1813                           ; 1 bytes @ 0x5
  1814  0075                     	ds	1
  1815  0076                     ?i1_OneDigitHandler:	
  1816  0076                     i1OneDigitHandler@digit_number:	
  1817                           ; 1 bytes @ 0x6
  1818                           
  1819                           
  1820                           ; 1 bytes @ 0x6
  1821  0076                     	ds	1
  1822  0077                     i1OneDigitHandler@decimal_point:	
  1823                           
  1824                           ; 1 bytes @ 0x7
  1825  0077                     	ds	1
  1826  0078                     ??i1_OneDigitHandler:	
  1827  0078                     ManchesterDecode@edge_dir:	
  1828                           ; 1 bytes @ 0x8
  1829                           
  1830                           
  1831                           ; 1 bytes @ 0x8
  1832  0078                     	ds	2
  1833  007A                     i1OneDigitHandler@sign:	
  1834                           
  1835                           ; 1 bytes @ 0xA
  1836  007A                     	ds	1
  1837  007B                     ?i1_Display7SegmentText:	
  1838  007B                     i1Display7SegmentText@decimal_point:	
  1839                           ; 1 bytes @ 0xB
  1840                           
  1841                           
  1842                           ; 1 bytes @ 0xB
  1843  007B                     	ds	1
  1844  007C                     ??i1_Display7SegmentText:	
  1845                           
  1846                           ; 1 bytes @ 0xC
  1847  007C                     	ds	1
  1848  007D                     i1Display7SegmentText@text:	
  1849                           
  1850                           ; 1 bytes @ 0xD
  1851  007D                     	ds	1
  1852                           
  1853                           	psect	cstackBANK0
  1854  0020                     __pcstackBANK0:	
  1855  0020                     ??_ISR:	
  1856                           
  1857                           ; 1 bytes @ 0x0
  1858  0020                     	ds	4
  1859  0024                     ISR@pulse_time:	
  1860                           
  1861                           ; 2 bytes @ 0x4
  1862  0024                     	ds	2
  1863  0026                     ??_Init_I2C:	
  1864  0026                     ??_Button_Init:	
  1865                           ; 1 bytes @ 0x6
  1866                           
  1867  0026                     ?_Display_7Seg_Text:	
  1868                           ; 1 bytes @ 0x6
  1869                           
  1870  0026                     ??_I2C_Master_Start:	
  1871                           ; 1 bytes @ 0x6
  1872                           
  1873  0026                     ?_I2C_Master_Write:	
  1874                           ; 1 bytes @ 0x6
  1875                           
  1876  0026                     ??_I2C_Master_Stop:	
  1877                           ; 1 bytes @ 0x6
  1878                           
  1879  0026                     ??_I2C_Master_Read:	
  1880                           ; 1 bytes @ 0x6
  1881                           
  1882  0026                     ?_Write_EEprom:	
  1883                           ; 1 bytes @ 0x6
  1884                           
  1885  0026                     ??_Read_EEprom:	
  1886                           ; 1 bytes @ 0x6
  1887                           
  1888  0026                     ?_FrameBuffer:	
  1889                           ; 1 bytes @ 0x6
  1890                           
  1891  0026                     ??_Global_Inits:	
  1892                           ; 1 bytes @ 0x6
  1893                           
  1894  0026                     ??_InterruptConfig:	
  1895                           ; 1 bytes @ 0x6
  1896                           
  1897  0026                     ??_Init_CompareMode:	
  1898                           ; 1 bytes @ 0x6
  1899                           
  1900  0026                     ??_Init_CaptureMode:	
  1901                           ; 1 bytes @ 0x6
  1902                           
  1903  0026                     ??_SignAnodeData:	
  1904                           ; 1 bytes @ 0x6
  1905                           
  1906  0026                     ??_Disable_All_Digits:	
  1907                           ; 1 bytes @ 0x6
  1908                           
  1909  0026                     ??_I2C_Master_Wait:	
  1910                           ; 1 bytes @ 0x6
  1911                           
  1912  0026                     ?_Key_Press:	
  1913                           ; 1 bytes @ 0x6
  1914                           
  1915  0026                     ?___lbdiv:	
  1916                           ; 1 bytes @ 0x6
  1917                           
  1918  0026                     ?___lbmod:	
  1919                           ; 1 bytes @ 0x6
  1920                           
  1921  0026                     ?_CRC16:	
  1922                           ; 1 bytes @ 0x6
  1923                           
  1924  0026                     ?___wmul:	
  1925                           ; 2 bytes @ 0x6
  1926                           
  1927  0026                     ?___awmod:	
  1928                           ; 2 bytes @ 0x6
  1929                           
  1930  0026                     ?___lmul:	
  1931                           ; 2 bytes @ 0x6
  1932                           
  1933  0026                     ?___lldiv:	
  1934                           ; 4 bytes @ 0x6
  1935                           
  1936  0026                     FrameBuffer@mode:	
  1937                           ; 4 bytes @ 0x6
  1938                           
  1939  0026                     CRC16@size:	
  1940                           ; 1 bytes @ 0x6
  1941                           
  1942  0026                     Display_7Seg_Text@decimal_point:	
  1943                           ; 1 bytes @ 0x6
  1944                           
  1945  0026                     Write_EEprom@adress:	
  1946                           ; 1 bytes @ 0x6
  1947                           
  1948  0026                     Read_EEprom@adress:	
  1949                           ; 1 bytes @ 0x6
  1950                           
  1951  0026                     ___lbdiv@divisor:	
  1952                           ; 1 bytes @ 0x6
  1953                           
  1954  0026                     ___lbmod@divisor:	
  1955                           ; 1 bytes @ 0x6
  1956                           
  1957  0026                     I2C_Master_Write@data:	
  1958                           ; 1 bytes @ 0x6
  1959                           
  1960  0026                     Key_Press@button:	
  1961                           ; 2 bytes @ 0x6
  1962                           
  1963  0026                     ___wmul@multiplier:	
  1964                           ; 2 bytes @ 0x6
  1965                           
  1966  0026                     ___awmod@divisor:	
  1967                           ; 2 bytes @ 0x6
  1968                           
  1969  0026                     ___lmul@multiplier:	
  1970                           ; 2 bytes @ 0x6
  1971                           
  1972  0026                     ___lldiv@divisor:	
  1973                           ; 4 bytes @ 0x6
  1974                           
  1975                           
  1976                           ; 4 bytes @ 0x6
  1977  0026                     	ds	1
  1978  0027                     ??_Display_7Seg_Text:	
  1979  0027                     ?_Read_Limit_From_EEprom:	
  1980                           ; 1 bytes @ 0x7
  1981                           
  1982  0027                     ??_Write_EEprom:	
  1983                           ; 1 bytes @ 0x7
  1984                           
  1985  0027                     ??_FrameBuffer:	
  1986                           ; 1 bytes @ 0x7
  1987                           
  1988  0027                     ??___lbdiv:	
  1989                           ; 1 bytes @ 0x7
  1990                           
  1991  0027                     ??___lbmod:	
  1992                           ; 1 bytes @ 0x7
  1993                           
  1994  0027                     Button_Init@keydef:	
  1995                           ; 1 bytes @ 0x7
  1996                           
  1997  0027                     Read_Limit_From_EEprom@limit2:	
  1998                           ; 1 bytes @ 0x7
  1999                           
  2000  0027                     Write_EEprom@data:	
  2001                           ; 1 bytes @ 0x7
  2002                           
  2003                           
  2004                           ; 1 bytes @ 0x7
  2005  0027                     	ds	1
  2006  0028                     ??_I2C_Master_Write:	
  2007  0028                     ?_Write_Limit_To_EEprom:	
  2008                           ; 1 bytes @ 0x8
  2009                           
  2010  0028                     ??_CRC16:	
  2011                           ; 1 bytes @ 0x8
  2012                           
  2013  0028                     ?_PCF8583_Write_Byte:	
  2014                           ; 1 bytes @ 0x8
  2015                           
  2016  0028                     ??_Key_Press:	
  2017                           ; 1 bytes @ 0x8
  2018                           
  2019  0028                     FrameBuffer@data:	
  2020                           ; 1 bytes @ 0x8
  2021                           
  2022  0028                     SignAnodeData@sign:	
  2023                           ; 1 bytes @ 0x8
  2024                           
  2025  0028                     PCF8583_Write_Byte@data:	
  2026                           ; 1 bytes @ 0x8
  2027                           
  2028  0028                     I2C_Master_Read@ack:	
  2029                           ; 1 bytes @ 0x8
  2030                           
  2031  0028                     Write_Limit_To_EEprom@limit2:	
  2032                           ; 1 bytes @ 0x8
  2033                           
  2034  0028                     Read_Limit_From_EEprom@limit_type:	
  2035                           ; 1 bytes @ 0x8
  2036                           
  2037  0028                     Display_7Seg_Text@i:	
  2038                           ; 1 bytes @ 0x8
  2039                           
  2040  0028                     ___lbdiv@dividend:	
  2041                           ; 1 bytes @ 0x8
  2042                           
  2043  0028                     ___wmul@multiplicand:	
  2044                           ; 1 bytes @ 0x8
  2045                           
  2046  0028                     ___awmod@dividend:	
  2047                           ; 2 bytes @ 0x8
  2048                           
  2049                           
  2050                           ; 2 bytes @ 0x8
  2051  0028                     	ds	1
  2052  0029                     ?_SetAnodeOutputs:	
  2053  0029                     ??_Read_Limit_From_EEprom:	
  2054                           ; 1 bytes @ 0x9
  2055                           
  2056  0029                     ??_PCF8583_Write_Byte:	
  2057                           ; 1 bytes @ 0x9
  2058                           
  2059  0029                     ?_FrameDecode:	
  2060                           ; 1 bytes @ 0x9
  2061                           
  2062  0029                     SetAnodeOutputs@decimal_point:	
  2063                           ; 2 bytes @ 0x9
  2064                           
  2065  0029                     Write_Limit_To_EEprom@limit_type:	
  2066                           ; 1 bytes @ 0x9
  2067                           
  2068  0029                     Display_7Seg_Text@text:	
  2069                           ; 1 bytes @ 0x9
  2070                           
  2071  0029                     ___lbdiv@counter:	
  2072                           ; 1 bytes @ 0x9
  2073                           
  2074  0029                     I2C_Master_Read@data:	
  2075                           ; 1 bytes @ 0x9
  2076                           
  2077                           
  2078                           ; 2 bytes @ 0x9
  2079  0029                     	ds	1
  2080  002A                     ??_SetAnodeOutputs:	
  2081  002A                     ??_Display_Weekday:	
  2082                           ; 1 bytes @ 0xA
  2083                           
  2084  002A                     ??_Write_Limit_To_EEprom:	
  2085                           ; 1 bytes @ 0xA
  2086                           
  2087  002A                     ??___wmul:	
  2088                           ; 1 bytes @ 0xA
  2089                           
  2090  002A                     ??___awmod:	
  2091                           ; 1 bytes @ 0xA
  2092                           
  2093  002A                     Read_Limit_From_EEprom@limit1:	
  2094                           ; 1 bytes @ 0xA
  2095                           
  2096  002A                     ___lbdiv@quotient:	
  2097                           ; 1 bytes @ 0xA
  2098                           
  2099  002A                     ___lbmod@dividend:	
  2100                           ; 1 bytes @ 0xA
  2101                           
  2102  002A                     ___wmul@product:	
  2103                           ; 1 bytes @ 0xA
  2104                           
  2105  002A                     ___lmul@multiplicand:	
  2106                           ; 2 bytes @ 0xA
  2107                           
  2108  002A                     ___lldiv@dividend:	
  2109                           ; 4 bytes @ 0xA
  2110                           
  2111                           
  2112                           ; 4 bytes @ 0xA
  2113  002A                     	ds	1
  2114  002B                     ??_Menu_Init:	
  2115  002B                     ??_FrameDecode:	
  2116                           ; 1 bytes @ 0xB
  2117                           
  2118  002B                     ??_PCF8583_Read_Byte:	
  2119                           ; 1 bytes @ 0xB
  2120                           
  2121  002B                     CRC16@data_tab_ptr:	
  2122                           ; 1 bytes @ 0xB
  2123                           
  2124  002B                     SetAnodeOutputs@sign:	
  2125                           ; 1 bytes @ 0xB
  2126                           
  2127  002B                     PCF8583_Write_Byte@address:	
  2128                           ; 1 bytes @ 0xB
  2129                           
  2130  002B                     Write_Limit_To_EEprom@limit1:	
  2131                           ; 1 bytes @ 0xB
  2132                           
  2133  002B                     ___awmod@counter:	
  2134                           ; 1 bytes @ 0xB
  2135                           
  2136  002B                     ___lbmod@counter:	
  2137                           ; 1 bytes @ 0xB
  2138                           
  2139                           
  2140                           ; 1 bytes @ 0xB
  2141  002B                     	ds	1
  2142  002C                     ?_OneDigitHandler:	
  2143  002C                     ?___lwdiv:	
  2144                           ; 1 bytes @ 0xC
  2145                           
  2146  002C                     CRC16@k:	
  2147                           ; 2 bytes @ 0xC
  2148                           
  2149  002C                     OneDigitHandler@digit_number:	
  2150                           ; 1 bytes @ 0xC
  2151                           
  2152  002C                     Menu_Init@menudef:	
  2153                           ; 1 bytes @ 0xC
  2154                           
  2155  002C                     Display_Weekday@weekday:	
  2156                           ; 1 bytes @ 0xC
  2157                           
  2158  002C                     ___awmod@sign:	
  2159                           ; 1 bytes @ 0xC
  2160                           
  2161  002C                     ___lbmod@rem:	
  2162                           ; 1 bytes @ 0xC
  2163                           
  2164  002C                     ___lwdiv@divisor:	
  2165                           ; 1 bytes @ 0xC
  2166                           
  2167                           
  2168                           ; 2 bytes @ 0xC
  2169  002C                     	ds	1
  2170  002D                     ??_DEC_2_BCD:	
  2171  002D                     ?___bmul:	
  2172                           ; 1 bytes @ 0xD
  2173                           
  2174  002D                     ?___awdiv:	
  2175                           ; 1 bytes @ 0xD
  2176                           
  2177  002D                     CRC16@i:	
  2178                           ; 2 bytes @ 0xD
  2179                           
  2180  002D                     FrameDecode@DataRCV:	
  2181                           ; 1 bytes @ 0xD
  2182                           
  2183  002D                     OneDigitHandler@decimal_point:	
  2184                           ; 1 bytes @ 0xD
  2185                           
  2186  002D                     PCF8583_Read_Byte@address:	
  2187                           ; 1 bytes @ 0xD
  2188                           
  2189  002D                     ___bmul@multiplicand:	
  2190                           ; 1 bytes @ 0xD
  2191                           
  2192  002D                     ___awdiv@divisor:	
  2193                           ; 1 bytes @ 0xD
  2194                           
  2195                           
  2196                           ; 2 bytes @ 0xD
  2197  002D                     	ds	1
  2198  002E                     ??_OneDigitHandler:	
  2199  002E                     ??___lmul:	
  2200                           ; 1 bytes @ 0xE
  2201                           
  2202  002E                     ??___bmul:	
  2203                           ; 1 bytes @ 0xE
  2204                           
  2205  002E                     ??___lldiv:	
  2206                           ; 1 bytes @ 0xE
  2207                           
  2208  002E                     FrameDecode@data:	
  2209                           ; 1 bytes @ 0xE
  2210                           
  2211  002E                     PCF8583_Read_Byte@retval:	
  2212                           ; 1 bytes @ 0xE
  2213                           
  2214  002E                     CRC16@crc:	
  2215                           ; 1 bytes @ 0xE
  2216                           
  2217  002E                     ___lwdiv@dividend:	
  2218                           ; 2 bytes @ 0xE
  2219                           
  2220                           
  2221                           ; 2 bytes @ 0xE
  2222  002E                     	ds	1
  2223  002F                     FrameDecode@i:	
  2224  002F                     ___bmul@product:	
  2225                           ; 1 bytes @ 0xF
  2226                           
  2227  002F                     ___awdiv@dividend:	
  2228                           ; 1 bytes @ 0xF
  2229                           
  2230  002F                     ___lmul@product:	
  2231                           ; 2 bytes @ 0xF
  2232                           
  2233  002F                     ___lldiv@quotient:	
  2234                           ; 4 bytes @ 0xF
  2235                           
  2236                           
  2237                           ; 4 bytes @ 0xF
  2238  002F                     	ds	1
  2239  0030                     ??_CRC_check:	
  2240  0030                     ??_Button_Handler:	
  2241                           ; 1 bytes @ 0x10
  2242                           
  2243  0030                     ??___lwdiv:	
  2244                           ; 1 bytes @ 0x10
  2245                           
  2246  0030                     OneDigitHandler@sign:	
  2247                           ; 1 bytes @ 0x10
  2248                           
  2249  0030                     DEC_2_BCD@dec:	
  2250                           ; 1 bytes @ 0x10
  2251                           
  2252  0030                     ___bmul@multiplier:	
  2253                           ; 1 bytes @ 0x10
  2254                           
  2255                           
  2256                           ; 1 bytes @ 0x10
  2257  0030                     	ds	1
  2258  0031                     ?_Display7SegmentText:	
  2259  0031                     ??_BCD_2_DEC:	
  2260                           ; 1 bytes @ 0x11
  2261                           
  2262  0031                     ??_PCF8583_Set_Date_Time:	
  2263                           ; 1 bytes @ 0x11
  2264                           
  2265  0031                     ??___awdiv:	
  2266                           ; 1 bytes @ 0x11
  2267                           
  2268  0031                     Display7SegmentText@decimal_point:	
  2269                           ; 1 bytes @ 0x11
  2270                           
  2271  0031                     Button_Handler@keydef:	
  2272                           ; 1 bytes @ 0x11
  2273                           
  2274  0031                     ___lwdiv@counter:	
  2275                           ; 1 bytes @ 0x11
  2276                           
  2277  0031                     CRC_check@crc_val:	
  2278                           ; 1 bytes @ 0x11
  2279                           
  2280                           
  2281                           ; 2 bytes @ 0x11
  2282  0031                     	ds	1
  2283  0032                     ??_Display7SegmentText:	
  2284  0032                     Button_Handler@button:	
  2285                           ; 1 bytes @ 0x12
  2286                           
  2287  0032                     ___awdiv@counter:	
  2288                           ; 1 bytes @ 0x12
  2289                           
  2290  0032                     ___lwdiv@quotient:	
  2291                           ; 1 bytes @ 0x12
  2292                           
  2293                           
  2294                           ; 2 bytes @ 0x12
  2295  0032                     	ds	1
  2296  0033                     ?_Wait_ms:	
  2297  0033                     CRC_check@DataRCV:	
  2298                           ; 1 bytes @ 0x13
  2299                           
  2300  0033                     Display7SegmentText@text:	
  2301                           ; 1 bytes @ 0x13
  2302                           
  2303  0033                     PCF8583_Set_Date_Time@bcd_sec:	
  2304                           ; 1 bytes @ 0x13
  2305                           
  2306  0033                     ___lldiv@counter:	
  2307                           ; 1 bytes @ 0x13
  2308                           
  2309  0033                     ___awdiv@sign:	
  2310                           ; 1 bytes @ 0x13
  2311                           
  2312  0033                     Wait_ms@time:	
  2313                           ; 1 bytes @ 0x13
  2314                           
  2315                           
  2316                           ; 2 bytes @ 0x13
  2317  0033                     	ds	1
  2318  0034                     ?_Generate_PWM:	
  2319  0034                     ?___lwmod:	
  2320                           ; 1 bytes @ 0x14
  2321                           
  2322  0034                     BCD_2_DEC@bcd:	
  2323                           ; 2 bytes @ 0x14
  2324                           
  2325  0034                     PCF8583_Set_Date_Time@bcd_min:	
  2326                           ; 1 bytes @ 0x14
  2327                           
  2328  0034                     ___awdiv@quotient:	
  2329                           ; 1 bytes @ 0x14
  2330                           
  2331  0034                     ___lwmod@divisor:	
  2332                           ; 2 bytes @ 0x14
  2333                           
  2334  0034                     Generate_PWM@freq:	
  2335                           ; 2 bytes @ 0x14
  2336                           
  2337                           
  2338                           ; 4 bytes @ 0x14
  2339  0034                     	ds	1
  2340  0035                     ?_PCF8583_Read_Time_Date:	
  2341  0035                     ??_Wait_ms:	
  2342                           ; 1 bytes @ 0x15
  2343                           
  2344  0035                     PCF8583_Set_Date_Time@bcd_hrs:	
  2345                           ; 1 bytes @ 0x15
  2346                           
  2347  0035                     PCF8583_Read_Time_Date@time_struct_ptr:	
  2348                           ; 1 bytes @ 0x15
  2349                           
  2350                           
  2351                           ; 2 bytes @ 0x15
  2352  0035                     	ds	1
  2353  0036                     ?_Menu_Set_Param_Time_Limit:	
  2354  0036                     PCF8583_Set_Date_Time@bcd_day:	
  2355                           ; 1 bytes @ 0x16
  2356                           
  2357  0036                     Menu_Set_Param_Time_Limit@menu:	
  2358                           ; 1 bytes @ 0x16
  2359                           
  2360  0036                     ___lwmod@dividend:	
  2361                           ; 2 bytes @ 0x16
  2362                           
  2363                           
  2364                           ; 2 bytes @ 0x16
  2365  0036                     	ds	1
  2366  0037                     ??_PCF8583_Read_Time_Date:	
  2367  0037                     PCF8583_Set_Date_Time@bcd_mon:	
  2368                           ; 1 bytes @ 0x17
  2369                           
  2370                           
  2371                           ; 1 bytes @ 0x17
  2372  0037                     	ds	1
  2373  0038                     ??_Generate_PWM:	
  2374  0038                     ??___lwmod:	
  2375                           ; 1 bytes @ 0x18
  2376                           
  2377  0038                     PCF8583_Set_Date_Time@time_struct_ptr:	
  2378                           ; 1 bytes @ 0x18
  2379                           
  2380  0038                     Menu_Set_Param_Time_Limit@check_button:	
  2381                           ; 1 bytes @ 0x18
  2382                           
  2383                           
  2384                           ; 1 bytes @ 0x18
  2385  0038                     	ds	1
  2386  0039                     ??_Menu_Set_Param_Time_Limit:	
  2387  0039                     ___lwmod@counter:	
  2388                           ; 1 bytes @ 0x19
  2389                           
  2390                           
  2391                           ; 1 bytes @ 0x19
  2392  0039                     	ds	1
  2393  003A                     ?_Is_Leap:	
  2394  003A                     ?_Find_Weekday:	
  2395                           ; 1 bytes @ 0x1A
  2396                           
  2397  003A                     Is_Leap@year:	
  2398                           ; 1 bytes @ 0x1A
  2399                           
  2400  003A                     Find_Weekday@year:	
  2401                           ; 2 bytes @ 0x1A
  2402                           
  2403                           
  2404                           ; 2 bytes @ 0x1A
  2405  003A                     	ds	1
  2406  003B                     PCF8583_Read_Time_Date@year_bits:	
  2407                           
  2408                           ; 1 bytes @ 0x1B
  2409  003B                     	ds	1
  2410  003C                     ??_PlayRing:	
  2411  003C                     ??_Is_Leap:	
  2412                           ; 1 bytes @ 0x1C
  2413                           
  2414  003C                     PCF8583_Read_Time_Date@bcd_sec:	
  2415                           ; 1 bytes @ 0x1C
  2416                           
  2417  003C                     _Is_Leap$1539:	
  2418                           ; 1 bytes @ 0x1C
  2419                           
  2420  003C                     Find_Weekday@month:	
  2421                           ; 1 bytes @ 0x1C
  2422                           
  2423                           
  2424                           ; 2 bytes @ 0x1C
  2425  003C                     	ds	1
  2426  003D                     ?_Is_Valid_Date:	
  2427  003D                     PCF8583_Read_Time_Date@bcd_min:	
  2428                           ; 1 bytes @ 0x1D
  2429                           
  2430  003D                     Is_Valid_Date@m:	
  2431                           ; 1 bytes @ 0x1D
  2432                           
  2433                           
  2434                           ; 1 bytes @ 0x1D
  2435  003D                     	ds	1
  2436  003E                     PCF8583_Read_Time_Date@bcd_hrs:	
  2437  003E                     Is_Valid_Date@y:	
  2438                           ; 1 bytes @ 0x1E
  2439                           
  2440  003E                     Find_Weekday@day:	
  2441                           ; 2 bytes @ 0x1E
  2442                           
  2443                           
  2444                           ; 2 bytes @ 0x1E
  2445  003E                     	ds	1
  2446  003F                     PCF8583_Read_Time_Date@bcd_day:	
  2447                           
  2448                           ; 1 bytes @ 0x1F
  2449  003F                     	ds	1
  2450  0040                     ??_Is_Valid_Date:	
  2451  0040                     ??_Find_Weekday:	
  2452                           ; 1 bytes @ 0x20
  2453                           
  2454  0040                     PlayRing@MELODY_LENGTH:	
  2455                           ; 1 bytes @ 0x20
  2456                           
  2457  0040                     PCF8583_Read_Time_Date@bcd_mon:	
  2458                           ; 1 bytes @ 0x20
  2459                           
  2460  0040                     Is_Valid_Date@d:	
  2461                           ; 1 bytes @ 0x20
  2462                           
  2463                           
  2464                           ; 1 bytes @ 0x20
  2465  0040                     	ds	1
  2466  0041                     PCF8583_Read_Time_Date@year:	
  2467  0041                     PlayRing@j:	
  2468                           ; 1 bytes @ 0x21
  2469                           
  2470                           
  2471                           ; 2 bytes @ 0x21
  2472  0041                     	ds	1
  2473  0042                     ?_Check_Time_Date:	
  2474  0042                     ?_Show_Time:	
  2475                           ; 1 bytes @ 0x22
  2476                           
  2477  0042                     Check_Time_Date@time_limit:	
  2478                           ; 1 bytes @ 0x22
  2479                           
  2480  0042                     Show_Time@keydef:	
  2481                           ; 1 bytes @ 0x22
  2482                           
  2483                           
  2484                           ; 1 bytes @ 0x22
  2485  0042                     	ds	1
  2486  0043                     ??_Check_Time_Date:	
  2487  0043                     ??_Show_Time:	
  2488                           ; 1 bytes @ 0x23
  2489                           
  2490  0043                     PlayRing@i:	
  2491                           ; 1 bytes @ 0x23
  2492                           
  2493  0043                     Check_Time_Date@time_limit_min_2:	
  2494                           ; 1 bytes @ 0x23
  2495                           
  2496                           
  2497                           ; 2 bytes @ 0x23
  2498  0043                     	ds	1
  2499  0044                     ??_Check_Event:	
  2500  0044                     Show_Time@check_button:	
  2501                           ; 1 bytes @ 0x24
  2502                           
  2503                           
  2504                           ; 1 bytes @ 0x24
  2505  0044                     	ds	1
  2506  0045                     Check_Event@DataRCV:	
  2507  0045                     Show_Time@time:	
  2508                           ; 1 bytes @ 0x25
  2509                           
  2510  0045                     Check_Time_Date@current_time_min:	
  2511                           ; 1 bytes @ 0x25
  2512                           
  2513                           
  2514                           ; 2 bytes @ 0x25
  2515  0045                     	ds	2
  2516  0047                     Check_Time_Date@time_limit_min_1:	
  2517                           
  2518                           ; 2 bytes @ 0x27
  2519  0047                     	ds	2
  2520  0049                     Check_Time_Date@time:	
  2521                           
  2522                           ; 1 bytes @ 0x29
  2523  0049                     	ds	1
  2524  004A                     ?_ProcessRCVData:	
  2525  004A                     ProcessRCVData@time:	
  2526                           ; 1 bytes @ 0x2A
  2527                           
  2528                           
  2529                           ; 1 bytes @ 0x2A
  2530  004A                     	ds	1
  2531  004B                     ProcessRCVData@time_limit:	
  2532  004B                     Find_Weekday@wday:	
  2533                           ; 1 bytes @ 0x2B
  2534                           
  2535                           
  2536                           ; 1 bytes @ 0x2B
  2537  004B                     	ds	1
  2538  004C                     ??_ProcessRCVData:	
  2539  004C                     ?_Menu_Set_Time:	
  2540                           ; 1 bytes @ 0x2C
  2541                           
  2542  004C                     Menu_Set_Time@keydef:	
  2543                           ; 1 bytes @ 0x2C
  2544                           
  2545                           
  2546                           ; 1 bytes @ 0x2C
  2547  004C                     	ds	1
  2548  004D                     ProcessRCVData@DataRCV:	
  2549  004D                     Menu_Set_Time@menu_type:	
  2550                           ; 1 bytes @ 0x2D
  2551                           
  2552                           
  2553                           ; 1 bytes @ 0x2D
  2554  004D                     	ds	1
  2555  004E                     ??_Menu_Set_Time:	
  2556                           
  2557                           ; 1 bytes @ 0x2E
  2558  004E                     	ds	3
  2559  0051                     ?_Select_Menu:	
  2560  0051                     Select_Menu@keydef:	
  2561                           ; 1 bytes @ 0x31
  2562                           
  2563                           
  2564                           ; 1 bytes @ 0x31
  2565  0051                     	ds	1
  2566  0052                     Select_Menu@time:	
  2567                           
  2568                           ; 1 bytes @ 0x32
  2569  0052                     	ds	1
  2570  0053                     ??_Select_Menu:	
  2571                           
  2572                           ; 1 bytes @ 0x33
  2573  0053                     	ds	2
  2574  0055                     Select_Menu@menudef:	
  2575                           
  2576                           ; 1 bytes @ 0x35
  2577  0055                     	ds	1
  2578  0056                     Select_Menu@check_button:	
  2579                           
  2580                           ; 1 bytes @ 0x36
  2581  0056                     	ds	1
  2582  0057                     ??_main:	
  2583                           
  2584                           ; 1 bytes @ 0x37
  2585  0057                     	ds	2
  2586                           
  2587                           	psect	maintext
  2588  1B74                     __pmaintext:	
  2589 ;;
  2590 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2591 ;;
  2592 ;; *************** function _main *****************
  2593 ;; Defined at:
  2594 ;;		line 25 in file "main.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;		None
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  menudef         7   18[BANK3 ] struct .
  2599 ;;  time            7   11[BANK3 ] struct .
  2600 ;;  keydef          6    5[BANK3 ] struct .
  2601 ;;  data_rcv        5    0[BANK3 ] struct .
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : B00/0
  2608 ;;		On exit  : 200/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2611 ;;      Params:         0       0       0       0       0
  2612 ;;      Locals:         0       0       0      25       0
  2613 ;;      Temps:          0       2       0       0       0
  2614 ;;      Totals:         0       2       0      25       0
  2615 ;;Total ram usage:       27 bytes
  2616 ;; Hardware stack levels required when called:   10
  2617 ;; This function calls:
  2618 ;;		_Button_Init
  2619 ;;		_Global_Inits
  2620 ;;		_Init_I2C
  2621 ;;		_InterruptConfig
  2622 ;;		_Menu_Init
  2623 ;;		_ProcessRCVData
  2624 ;;		_Select_Menu
  2625 ;; This function is called by:
  2626 ;;		Startup code after reset
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _main
  2632  1B74                     _main:	
  2633                           
  2634                           ;main.c: 27:     Global_Inits();
  2635                           
  2636                           ;incstack = 0
  2637 ;; hardware stack exceeded
  2638                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2639  1B74  160A  158A  2184  160A  158A  	fcall	_Global_Inits
  2640                           
  2641                           ;main.c: 28:     InterruptConfig();
  2642  1B79  160A  118A  207A  160A  158A  	fcall	_InterruptConfig
  2643                           
  2644                           ;main.c: 29:     Init_I2C();
  2645  1B7E  160A  158A  207C  160A  158A  	fcall	_Init_I2C
  2646                           
  2647                           ;main.c: 31:     DataStruct data_rcv;;main.c: 32:     KeyPointerStruct keydef;;main.c: 3
      +                          3:     MenuParamPonterStruct menudef;;main.c: 34:     TimeStruct time;;main.c: 36:     B
      +                          utton_Init(&keydef);
  2648  1B83  30DB               	movlw	(low (main@keydef| (0+256)))& (0+255)
  2649  1B84  160A  118A  24EE  160A  158A  	fcall	_Button_Init
  2650                           
  2651                           ;main.c: 37:     Menu_Init(&menudef);
  2652  1B89  30E8               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2653  1B8A  120A  158A  2306  160A  158A  	fcall	_Menu_Init
  2654  1B8F                     l8378:	
  2655                           
  2656                           ;main.c: 43:     {;main.c: 44:         ProcessRCVData(&data_rcv,&time,&menudef);
  2657  1B8F  30E1               	movlw	(low (main@time| (0+256)))& (0+255)
  2658  1B90  1283               	bcf	3,5	;RP0=0, select bank0
  2659  1B91  1303               	bcf	3,6	;RP1=0, select bank0
  2660  1B92  00D7               	movwf	??_main
  2661  1B93  0857               	movf	??_main,w
  2662  1B94  00CA               	movwf	ProcessRCVData@time
  2663  1B95  30E8               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2664  1B96  00D8               	movwf	??_main+1
  2665  1B97  0858               	movf	??_main+1,w
  2666  1B98  00CB               	movwf	ProcessRCVData@time_limit
  2667  1B99  30D6               	movlw	(low (main@data_rcv| (0+256)))& (0+255)
  2668  1B9A  160A  158A  24F3  160A  158A  	fcall	_ProcessRCVData
  2669                           
  2670                           ;main.c: 45:         Select_Menu(&menudef,&keydef,&time);
  2671  1B9F  30DB               	movlw	(low (main@keydef| (0+256)))& (0+255)
  2672  1BA0  1283               	bcf	3,5	;RP0=0, select bank0
  2673  1BA1  00D7               	movwf	??_main
  2674  1BA2  0857               	movf	??_main,w
  2675  1BA3  00D1               	movwf	Select_Menu@keydef
  2676  1BA4  30E1               	movlw	(low (main@time| (0+256)))& (0+255)
  2677  1BA5  00D8               	movwf	??_main+1
  2678  1BA6  0858               	movf	??_main+1,w
  2679  1BA7  00D2               	movwf	Select_Menu@time
  2680  1BA8  30E8               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2681  1BA9  160A  158A  24AF  160A  158A  	fcall	_Select_Menu
  2682  1BAE  2B8F               	goto	l8378
  2683  1BAF                     __end_of_main:	
  2684                           
  2685                           	psect	text1
  2686  1CAF                     __ptext1:	
  2687 ;; *************** function _Select_Menu *****************
  2688 ;; Defined at:
  2689 ;;		line 555 in file "menu.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  menudef         1    wreg     PTR struct .
  2692 ;;		 -> main@menudef(7), 
  2693 ;;  keydef          1   49[BANK0 ] PTR struct .
  2694 ;;		 -> main@keydef(6), 
  2695 ;;  time            1   50[BANK0 ] PTR struct .
  2696 ;;		 -> main@time(7), 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  menudef         1   53[BANK0 ] PTR struct .
  2699 ;;		 -> main@menudef(7), 
  2700 ;;  check_button    1   54[BANK0 ] unsigned char 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 300/800
  2707 ;;		On exit  : 200/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2710 ;;      Params:         0       2       0       0       0
  2711 ;;      Locals:         0       2       0       0       0
  2712 ;;      Temps:          0       2       0       0       0
  2713 ;;      Totals:         0       6       0       0       0
  2714 ;;Total ram usage:        6 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    9
  2717 ;; This function calls:
  2718 ;;		_Button_Handler
  2719 ;;		_Menu_Set_Time
  2720 ;;		_Show_Time
  2721 ;; This function is called by:
  2722 ;;		_main
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           
  2727                           ;psect for function _Select_Menu
  2728  1CAF                     _Select_Menu:	
  2729                           
  2730                           ;incstack = 0
  2731 ;; hardware stack exceeded
  2732                           ; Regs used in _Select_Menu: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2733                           ;Select_Menu@menudef stored from wreg
  2734  1CAF  00D5               	movwf	Select_Menu@menudef
  2735                           
  2736                           ;menu.c: 555: void Select_Menu(MenuParamPonterStruct *menudef, KeyPointerStruct *keydef,
      +                          ;menu.c: 556:                  TimeStruct *time);menu.c: 557: {;menu.c: 558:     unsigne
      +                          d char check_button;;menu.c: 560:     check_button=Button_Handler(keydef);
  2737  1CB0  0851               	movf	Select_Menu@keydef,w
  2738  1CB1  160A  118A  2344  160A  158A  	fcall	_Button_Handler
  2739  1CB6  00D3               	movwf	??_Select_Menu
  2740  1CB7  0853               	movf	??_Select_Menu,w
  2741  1CB8  00D6               	movwf	Select_Menu@check_button
  2742                           
  2743                           ;menu.c: 561:     if(check_button==k_set_right_short)
  2744  1CB9  3006               	movlw	6
  2745  1CBA  0656               	xorwf	Select_Menu@check_button,w
  2746  1CBB  1D03               	btfss	3,2
  2747  1CBC  2CC6               	goto	l8360
  2748                           
  2749                           ;menu.c: 562:     {;menu.c: 563:         Show_Time(time,keydef);
  2750  1CBD  0851               	movf	Select_Menu@keydef,w
  2751  1CBE  00D3               	movwf	??_Select_Menu
  2752  1CBF  0853               	movf	??_Select_Menu,w
  2753  1CC0  00C2               	movwf	Show_Time@keydef
  2754  1CC1  0852               	movf	Select_Menu@time,w
  2755  1CC2  120A  158A  240C   	fcall	_Show_Time
  2756                           
  2757                           ;menu.c: 565:     }else if(check_button==k_set_rtc_short)
  2758  1CC5  0008               	return
  2759  1CC6                     l8360:	
  2760  1CC6  0856               	movf	Select_Menu@check_button,w
  2761  1CC7  1D03               	btfss	3,2
  2762  1CC8  2CD6               	goto	l8364
  2763                           
  2764                           ;menu.c: 566:     {;menu.c: 567:         Menu_Set_Time(menudef,keydef,2);
  2765  1CC9  0851               	movf	Select_Menu@keydef,w
  2766  1CCA  00D3               	movwf	??_Select_Menu
  2767  1CCB  0853               	movf	??_Select_Menu,w
  2768  1CCC  00CC               	movwf	Menu_Set_Time@keydef
  2769  1CCD  3002               	movlw	2
  2770  1CCE  00D4               	movwf	??_Select_Menu+1
  2771  1CCF  0854               	movf	??_Select_Menu+1,w
  2772  1CD0  00CD               	movwf	Menu_Set_Time@menu_type
  2773  1CD1  0855               	movf	Select_Menu@menudef,w
  2774  1CD2  120A  158A  2586   	fcall	_Menu_Set_Time
  2775                           
  2776                           ;menu.c: 569:     }else if(check_button==k_set_time1_short)
  2777  1CD5  0008               	return
  2778  1CD6                     l8364:	
  2779  1CD6  3002               	movlw	2
  2780  1CD7  0656               	xorwf	Select_Menu@check_button,w
  2781  1CD8  1D03               	btfss	3,2
  2782  1CD9  2CE4               	goto	l8368
  2783                           
  2784                           ;menu.c: 570:     {;menu.c: 571:         Menu_Set_Time(menudef,keydef,0);
  2785  1CDA  0851               	movf	Select_Menu@keydef,w
  2786  1CDB  00D3               	movwf	??_Select_Menu
  2787  1CDC  0853               	movf	??_Select_Menu,w
  2788  1CDD  00CC               	movwf	Menu_Set_Time@keydef
  2789  1CDE  01CD               	clrf	Menu_Set_Time@menu_type
  2790  1CDF  0855               	movf	Select_Menu@menudef,w
  2791  1CE0  120A  158A  2586   	fcall	_Menu_Set_Time
  2792                           
  2793                           ;menu.c: 573:     }else if(check_button==k_set_time2_short)
  2794  1CE3  0008               	return
  2795  1CE4                     l8368:	
  2796  1CE4  3004               	movlw	4
  2797  1CE5  0656               	xorwf	Select_Menu@check_button,w
  2798  1CE6  1D03               	btfss	3,2
  2799  1CE7  0008               	return
  2800                           
  2801                           ;menu.c: 574:     {;menu.c: 575:         Menu_Set_Time(menudef,keydef,1);
  2802  1CE8  0851               	movf	Select_Menu@keydef,w
  2803  1CE9  00D3               	movwf	??_Select_Menu
  2804  1CEA  0853               	movf	??_Select_Menu,w
  2805  1CEB  00CC               	movwf	Menu_Set_Time@keydef
  2806  1CEC  01CD               	clrf	Menu_Set_Time@menu_type
  2807  1CED  0ACD               	incf	Menu_Set_Time@menu_type,f
  2808  1CEE  0855               	movf	Select_Menu@menudef,w
  2809  1CEF  120A  158A  2586   	fcall	_Menu_Set_Time
  2810  1CF2  0008               	return
  2811  1CF3                     __end_of_Select_Menu:	
  2812                           
  2813                           	psect	text2
  2814  0C0C                     __ptext2:	
  2815 ;; *************** function _Show_Time *****************
  2816 ;; Defined at:
  2817 ;;		line 119 in file "menu.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  time            1    wreg     PTR struct .
  2820 ;;		 -> main@time(7), 
  2821 ;;  keydef          1   34[BANK0 ] PTR struct .
  2822 ;;		 -> main@keydef(6), 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  time            1   37[BANK0 ] PTR struct .
  2825 ;;		 -> main@time(7), 
  2826 ;;  check_button    1   36[BANK0 ] unsigned char 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 300/800
  2833 ;;		On exit  : 300/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2836 ;;      Params:         0       1       0       0       0
  2837 ;;      Locals:         0       2       0       0       0
  2838 ;;      Temps:          0       1       0       0       0
  2839 ;;      Totals:         0       4       0       0       0
  2840 ;;Total ram usage:        4 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; Hardware stack levels required when called:    8
  2843 ;; This function calls:
  2844 ;;		_Button_Handler
  2845 ;;		_Disable_All_Digits
  2846 ;;		_Display_Weekday
  2847 ;;		_PCF8583_Read_Time_Date
  2848 ;;		___awdiv
  2849 ;;		___awmod
  2850 ;; This function is called by:
  2851 ;;		_Select_Menu
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           
  2856                           ;psect for function _Show_Time
  2857  0C0C                     _Show_Time:	
  2858                           
  2859                           ;incstack = 0
  2860 ;; hardware stack exceeded
  2861                           ; Regs used in _Show_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2862                           ;Show_Time@time stored from wreg
  2863  0C0C  00C5               	movwf	Show_Time@time
  2864                           
  2865                           ;menu.c: 119: void Show_Time(TimeStruct *time, KeyPointerStruct *keydef);menu.c: 120: {;
      +                          menu.c: 121:     unsigned char check_button;;menu.c: 123:     PCF8583_Read_Time_Date(tim
      +                          e);
  2866  0C0D  0845               	movf	Show_Time@time,w
  2867  0C0E  00B5               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  2868  0C0F  3001               	movlw	1
  2869  0C10  00B6               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  2870  0C11  120A  118A  26CF  120A  158A  	fcall	_PCF8583_Read_Time_Date
  2871                           
  2872                           ;menu.c: 125:     g_display_controll=1;
  2873  0C16  3001               	movlw	1
  2874  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  2875  0C18  00C3               	movwf	??_Show_Time
  2876  0C19  0843               	movf	??_Show_Time,w
  2877  0C1A  1683               	bsf	3,5	;RP0=1, select bank1
  2878  0C1B  00AD               	movwf	_g_display_controll^(0+128)	;volatile
  2879                           
  2880                           ;menu.c: 127:     g_display_text[0]=time->hours/10;
  2881  0C1C  300A               	movlw	10
  2882  0C1D  1283               	bcf	3,5	;RP0=0, select bank0
  2883  0C1E  00AD               	movwf	___awdiv@divisor
  2884  0C1F  3000               	movlw	0
  2885  0C20  00AE               	movwf	___awdiv@divisor+1
  2886  0C21  0845               	movf	Show_Time@time,w
  2887  0C22  3E02               	addlw	2
  2888  0C23  0084               	movwf	4
  2889  0C24  1783               	bsf	3,7	;select IRP bank2
  2890  0C25  0800               	movf	0,w
  2891  0C26  00AF               	movwf	___awdiv@dividend
  2892  0C27  01B0               	clrf	___awdiv@dividend+1
  2893  0C28  1BAF               	btfsc	___awdiv@dividend,7
  2894  0C29  03B0               	decf	___awdiv@dividend+1,f
  2895  0C2A  160A  158A  2629  120A  158A  	fcall	___awdiv
  2896  0C2F  082D               	movf	?___awdiv,w
  2897  0C30  00C3               	movwf	??_Show_Time
  2898  0C31  0843               	movf	??_Show_Time,w
  2899  0C32  1683               	bsf	3,5	;RP0=1, select bank1
  2900  0C33  00CC               	movwf	_g_display_text^(0+128)
  2901                           
  2902                           ;menu.c: 128:     g_display_text[1]=time->hours%10;
  2903  0C34  300A               	movlw	10
  2904  0C35  1283               	bcf	3,5	;RP0=0, select bank0
  2905  0C36  00A6               	movwf	___awmod@divisor
  2906  0C37  3000               	movlw	0
  2907  0C38  00A7               	movwf	___awmod@divisor+1
  2908  0C39  0845               	movf	Show_Time@time,w
  2909  0C3A  3E02               	addlw	2
  2910  0C3B  0084               	movwf	4
  2911  0C3C  1783               	bsf	3,7	;select IRP bank2
  2912  0C3D  0800               	movf	0,w
  2913  0C3E  00A8               	movwf	___awmod@dividend
  2914  0C3F  01A9               	clrf	___awmod@dividend+1
  2915  0C40  1BA8               	btfsc	___awmod@dividend,7
  2916  0C41  03A9               	decf	___awmod@dividend+1,f
  2917  0C42  160A  158A  253D  120A  158A  	fcall	___awmod
  2918  0C47  0826               	movf	?___awmod,w
  2919  0C48  00C3               	movwf	??_Show_Time
  2920  0C49  0843               	movf	??_Show_Time,w
  2921  0C4A  1683               	bsf	3,5	;RP0=1, select bank1
  2922  0C4B  00CD               	movwf	(_g_display_text^(0+128)+1)
  2923                           
  2924                           ;menu.c: 129:     g_display_text[2]=time->minutes/10;
  2925  0C4C  300A               	movlw	10
  2926  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  2927  0C4E  00AD               	movwf	___awdiv@divisor
  2928  0C4F  3000               	movlw	0
  2929  0C50  00AE               	movwf	___awdiv@divisor+1
  2930  0C51  0A45               	incf	Show_Time@time,w
  2931  0C52  0084               	movwf	4
  2932  0C53  1783               	bsf	3,7	;select IRP bank2
  2933  0C54  0800               	movf	0,w
  2934  0C55  00AF               	movwf	___awdiv@dividend
  2935  0C56  01B0               	clrf	___awdiv@dividend+1
  2936  0C57  1BAF               	btfsc	___awdiv@dividend,7
  2937  0C58  03B0               	decf	___awdiv@dividend+1,f
  2938  0C59  160A  158A  2629  120A  158A  	fcall	___awdiv
  2939  0C5E  082D               	movf	?___awdiv,w
  2940  0C5F  00C3               	movwf	??_Show_Time
  2941  0C60  0843               	movf	??_Show_Time,w
  2942  0C61  1683               	bsf	3,5	;RP0=1, select bank1
  2943  0C62  00CE               	movwf	(_g_display_text^(0+128)+2)
  2944                           
  2945                           ;menu.c: 130:     g_display_text[3]=time->minutes%10;
  2946  0C63  300A               	movlw	10
  2947  0C64  1283               	bcf	3,5	;RP0=0, select bank0
  2948  0C65  00A6               	movwf	___awmod@divisor
  2949  0C66  3000               	movlw	0
  2950  0C67  00A7               	movwf	___awmod@divisor+1
  2951  0C68  0A45               	incf	Show_Time@time,w
  2952  0C69  0084               	movwf	4
  2953  0C6A  1783               	bsf	3,7	;select IRP bank2
  2954  0C6B  0800               	movf	0,w
  2955  0C6C  00A8               	movwf	___awmod@dividend
  2956  0C6D  01A9               	clrf	___awmod@dividend+1
  2957  0C6E  1BA8               	btfsc	___awmod@dividend,7
  2958  0C6F  03A9               	decf	___awmod@dividend+1,f
  2959  0C70  160A  158A  253D  120A  158A  	fcall	___awmod
  2960  0C75  0826               	movf	?___awmod,w
  2961  0C76  00C3               	movwf	??_Show_Time
  2962  0C77  0843               	movf	??_Show_Time,w
  2963  0C78  1683               	bsf	3,5	;RP0=1, select bank1
  2964  0C79  00CF               	movwf	(_g_display_text^(0+128)+3)
  2965                           
  2966                           ;menu.c: 132:     g_decimal_point=0b0100;
  2967  0C7A  3004               	movlw	4
  2968  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0C7C  00C3               	movwf	??_Show_Time
  2970  0C7D  0843               	movf	??_Show_Time,w
  2971  0C7E  1683               	bsf	3,5	;RP0=1, select bank1
  2972  0C7F  00AC               	movwf	_g_decimal_point^(0+128)
  2973  0C80                     l697:	
  2974                           ;menu.c: 134:     while(1)
  2975                           
  2976                           
  2977                           ;menu.c: 135:     {;menu.c: 136:         check_button=Button_Handler(keydef);
  2978  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  2979  0C81  0842               	movf	Show_Time@keydef,w
  2980  0C82  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  2981  0C87  00C3               	movwf	??_Show_Time
  2982  0C88  0843               	movf	??_Show_Time,w
  2983  0C89  00C4               	movwf	Show_Time@check_button
  2984                           
  2985                           ;menu.c: 137:         if(check_button==k_set_right_short)
  2986  0C8A  3006               	movlw	6
  2987  0C8B  0644               	xorwf	Show_Time@check_button,w
  2988  0C8C  1D03               	btfss	3,2
  2989  0C8D  2C80               	goto	l697
  2990                           
  2991                           ;menu.c: 138:         {;menu.c: 139:             g_decimal_point=0b0100;
  2992  0C8E  3004               	movlw	4
  2993  0C8F  00C3               	movwf	??_Show_Time
  2994  0C90  0843               	movf	??_Show_Time,w
  2995  0C91  1683               	bsf	3,5	;RP0=1, select bank1
  2996  0C92  00AC               	movwf	_g_decimal_point^(0+128)
  2997                           
  2998                           ;menu.c: 140:             g_display_text[0]=time->day/10;
  2999  0C93  300A               	movlw	10
  3000  0C94  1283               	bcf	3,5	;RP0=0, select bank0
  3001  0C95  00AD               	movwf	___awdiv@divisor
  3002  0C96  3000               	movlw	0
  3003  0C97  00AE               	movwf	___awdiv@divisor+1
  3004  0C98  0845               	movf	Show_Time@time,w
  3005  0C99  3E03               	addlw	3
  3006  0C9A  0084               	movwf	4
  3007  0C9B  1783               	bsf	3,7	;select IRP bank2
  3008  0C9C  0800               	movf	0,w
  3009  0C9D  00AF               	movwf	___awdiv@dividend
  3010  0C9E  01B0               	clrf	___awdiv@dividend+1
  3011  0C9F  1BAF               	btfsc	___awdiv@dividend,7
  3012  0CA0  03B0               	decf	___awdiv@dividend+1,f
  3013  0CA1  160A  158A  2629  120A  158A  	fcall	___awdiv
  3014  0CA6  082D               	movf	?___awdiv,w
  3015  0CA7  00C3               	movwf	??_Show_Time
  3016  0CA8  0843               	movf	??_Show_Time,w
  3017  0CA9  1683               	bsf	3,5	;RP0=1, select bank1
  3018  0CAA  00CC               	movwf	_g_display_text^(0+128)
  3019                           
  3020                           ;menu.c: 141:             g_display_text[1]=time->day%10;
  3021  0CAB  300A               	movlw	10
  3022  0CAC  1283               	bcf	3,5	;RP0=0, select bank0
  3023  0CAD  00A6               	movwf	___awmod@divisor
  3024  0CAE  3000               	movlw	0
  3025  0CAF  00A7               	movwf	___awmod@divisor+1
  3026  0CB0  0845               	movf	Show_Time@time,w
  3027  0CB1  3E03               	addlw	3
  3028  0CB2  0084               	movwf	4
  3029  0CB3  1783               	bsf	3,7	;select IRP bank2
  3030  0CB4  0800               	movf	0,w
  3031  0CB5  00A8               	movwf	___awmod@dividend
  3032  0CB6  01A9               	clrf	___awmod@dividend+1
  3033  0CB7  1BA8               	btfsc	___awmod@dividend,7
  3034  0CB8  03A9               	decf	___awmod@dividend+1,f
  3035  0CB9  160A  158A  253D  120A  158A  	fcall	___awmod
  3036  0CBE  0826               	movf	?___awmod,w
  3037  0CBF  00C3               	movwf	??_Show_Time
  3038  0CC0  0843               	movf	??_Show_Time,w
  3039  0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  3040  0CC2  00CD               	movwf	(_g_display_text^(0+128)+1)
  3041                           
  3042                           ;menu.c: 142:             g_display_text[2]=time->month/10;
  3043  0CC3  300A               	movlw	10
  3044  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  3045  0CC5  00AD               	movwf	___awdiv@divisor
  3046  0CC6  3000               	movlw	0
  3047  0CC7  00AE               	movwf	___awdiv@divisor+1
  3048  0CC8  0845               	movf	Show_Time@time,w
  3049  0CC9  3E04               	addlw	4
  3050  0CCA  0084               	movwf	4
  3051  0CCB  1783               	bsf	3,7	;select IRP bank2
  3052  0CCC  0800               	movf	0,w
  3053  0CCD  00AF               	movwf	___awdiv@dividend
  3054  0CCE  01B0               	clrf	___awdiv@dividend+1
  3055  0CCF  1BAF               	btfsc	___awdiv@dividend,7
  3056  0CD0  03B0               	decf	___awdiv@dividend+1,f
  3057  0CD1  160A  158A  2629  120A  158A  	fcall	___awdiv
  3058  0CD6  082D               	movf	?___awdiv,w
  3059  0CD7  00C3               	movwf	??_Show_Time
  3060  0CD8  0843               	movf	??_Show_Time,w
  3061  0CD9  1683               	bsf	3,5	;RP0=1, select bank1
  3062  0CDA  00CE               	movwf	(_g_display_text^(0+128)+2)
  3063                           
  3064                           ;menu.c: 143:             g_display_text[3]=time->month%10;
  3065  0CDB  300A               	movlw	10
  3066  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  3067  0CDD  00A6               	movwf	___awmod@divisor
  3068  0CDE  3000               	movlw	0
  3069  0CDF  00A7               	movwf	___awmod@divisor+1
  3070  0CE0  0845               	movf	Show_Time@time,w
  3071  0CE1  3E04               	addlw	4
  3072  0CE2  0084               	movwf	4
  3073  0CE3  1783               	bsf	3,7	;select IRP bank2
  3074  0CE4  0800               	movf	0,w
  3075  0CE5  00A8               	movwf	___awmod@dividend
  3076  0CE6  01A9               	clrf	___awmod@dividend+1
  3077  0CE7  1BA8               	btfsc	___awmod@dividend,7
  3078  0CE8  03A9               	decf	___awmod@dividend+1,f
  3079  0CE9  160A  158A  253D  120A  158A  	fcall	___awmod
  3080  0CEE  0826               	movf	?___awmod,w
  3081  0CEF  00C3               	movwf	??_Show_Time
  3082  0CF0  0843               	movf	??_Show_Time,w
  3083  0CF1  1683               	bsf	3,5	;RP0=1, select bank1
  3084  0CF2  00CF               	movwf	(_g_display_text^(0+128)+3)
  3085  0CF3                     l8198:	
  3086                           
  3087                           ;menu.c: 147:             {;menu.c: 148:                 check_button=Button_Handler(key
      +                          def);
  3088  0CF3  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0CF4  0842               	movf	Show_Time@keydef,w
  3090  0CF5  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  3091  0CFA  00C3               	movwf	??_Show_Time
  3092  0CFB  0843               	movf	??_Show_Time,w
  3093  0CFC  00C4               	movwf	Show_Time@check_button
  3094                           
  3095                           ;menu.c: 149:                 if(check_button==k_set_right_short)
  3096  0CFD  3006               	movlw	6
  3097  0CFE  0644               	xorwf	Show_Time@check_button,w
  3098  0CFF  1D03               	btfss	3,2
  3099  0D00  2CF3               	goto	l8198
  3100                           
  3101                           ;menu.c: 150:                 {;menu.c: 151:                     g_decimal_point=0b0000;
  3102  0D01  1683               	bsf	3,5	;RP0=1, select bank1
  3103  0D02  01AC               	clrf	_g_decimal_point^(0+128)
  3104                           
  3105                           ;menu.c: 152:                     g_display_text[0]=2;
  3106  0D03  3002               	movlw	2
  3107  0D04  1283               	bcf	3,5	;RP0=0, select bank0
  3108  0D05  00C3               	movwf	??_Show_Time
  3109  0D06  0843               	movf	??_Show_Time,w
  3110  0D07  1683               	bsf	3,5	;RP0=1, select bank1
  3111  0D08  00CC               	movwf	_g_display_text^(0+128)
  3112                           
  3113                           ;menu.c: 153:                     g_display_text[1]=time->year/100;
  3114  0D09  3064               	movlw	100
  3115  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  3116  0D0B  00AD               	movwf	___awdiv@divisor
  3117  0D0C  3000               	movlw	0
  3118  0D0D  00AE               	movwf	___awdiv@divisor+1
  3119  0D0E  0845               	movf	Show_Time@time,w
  3120  0D0F  3E05               	addlw	5
  3121  0D10  0084               	movwf	4
  3122  0D11  1783               	bsf	3,7	;select IRP bank2
  3123  0D12  0800               	movf	0,w
  3124  0D13  00AF               	movwf	___awdiv@dividend
  3125  0D14  01B0               	clrf	___awdiv@dividend+1
  3126  0D15  1BAF               	btfsc	___awdiv@dividend,7
  3127  0D16  03B0               	decf	___awdiv@dividend+1,f
  3128  0D17  160A  158A  2629  120A  158A  	fcall	___awdiv
  3129  0D1C  082D               	movf	?___awdiv,w
  3130  0D1D  00C3               	movwf	??_Show_Time
  3131  0D1E  0843               	movf	??_Show_Time,w
  3132  0D1F  1683               	bsf	3,5	;RP0=1, select bank1
  3133  0D20  00CD               	movwf	(_g_display_text^(0+128)+1)
  3134                           
  3135                           ;menu.c: 154:                     g_display_text[2]=time->year%100/10;
  3136  0D21  300A               	movlw	10
  3137  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  3138  0D23  00AD               	movwf	___awdiv@divisor
  3139  0D24  3000               	movlw	0
  3140  0D25  00AE               	movwf	___awdiv@divisor+1
  3141  0D26  0845               	movf	Show_Time@time,w
  3142  0D27  3E05               	addlw	5
  3143  0D28  0084               	movwf	4
  3144  0D29  1783               	bsf	3,7	;select IRP bank2
  3145  0D2A  0800               	movf	0,w
  3146  0D2B  00A8               	movwf	___awmod@dividend
  3147  0D2C  01A9               	clrf	___awmod@dividend+1
  3148  0D2D  1BA8               	btfsc	___awmod@dividend,7
  3149  0D2E  03A9               	decf	___awmod@dividend+1,f
  3150  0D2F  3064               	movlw	100
  3151  0D30  00A6               	movwf	___awmod@divisor
  3152  0D31  3000               	movlw	0
  3153  0D32  00A7               	movwf	___awmod@divisor+1
  3154  0D33  160A  158A  253D  120A  158A  	fcall	___awmod
  3155  0D38  0827               	movf	?___awmod+1,w
  3156  0D39  00B0               	movwf	___awdiv@dividend+1
  3157  0D3A  0826               	movf	?___awmod,w
  3158  0D3B  00AF               	movwf	___awdiv@dividend
  3159  0D3C  160A  158A  2629  120A  158A  	fcall	___awdiv
  3160  0D41  082D               	movf	?___awdiv,w
  3161  0D42  00C3               	movwf	??_Show_Time
  3162  0D43  0843               	movf	??_Show_Time,w
  3163  0D44  1683               	bsf	3,5	;RP0=1, select bank1
  3164  0D45  00CE               	movwf	(_g_display_text^(0+128)+2)
  3165                           
  3166                           ;menu.c: 155:                     g_display_text[3]=time->year%10;
  3167  0D46  300A               	movlw	10
  3168  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  3169  0D48  00A6               	movwf	___awmod@divisor
  3170  0D49  3000               	movlw	0
  3171  0D4A  00A7               	movwf	___awmod@divisor+1
  3172  0D4B  0845               	movf	Show_Time@time,w
  3173  0D4C  3E05               	addlw	5
  3174  0D4D  0084               	movwf	4
  3175  0D4E  1783               	bsf	3,7	;select IRP bank2
  3176  0D4F  0800               	movf	0,w
  3177  0D50  00A8               	movwf	___awmod@dividend
  3178  0D51  01A9               	clrf	___awmod@dividend+1
  3179  0D52  1BA8               	btfsc	___awmod@dividend,7
  3180  0D53  03A9               	decf	___awmod@dividend+1,f
  3181  0D54  160A  158A  253D  120A  158A  	fcall	___awmod
  3182  0D59  0826               	movf	?___awmod,w
  3183  0D5A  00C3               	movwf	??_Show_Time
  3184  0D5B  0843               	movf	??_Show_Time,w
  3185  0D5C  1683               	bsf	3,5	;RP0=1, select bank1
  3186  0D5D  00CF               	movwf	(_g_display_text^(0+128)+3)
  3187  0D5E                     l8212:	
  3188                           
  3189                           ;menu.c: 159:                     {;menu.c: 160:                        check_button=But
      +                          ton_Handler(keydef);
  3190  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0D5F  0842               	movf	Show_Time@keydef,w
  3192  0D60  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  3193  0D65  00C3               	movwf	??_Show_Time
  3194  0D66  0843               	movf	??_Show_Time,w
  3195  0D67  00C4               	movwf	Show_Time@check_button
  3196                           
  3197                           ;menu.c: 161:                        if(check_button==k_set_right_short)
  3198  0D68  3006               	movlw	6
  3199  0D69  0644               	xorwf	Show_Time@check_button,w
  3200  0D6A  1D03               	btfss	3,2
  3201  0D6B  2D5E               	goto	l8212
  3202                           
  3203                           ;menu.c: 162:                        {;menu.c: 164:                            Display_W
      +                          eekday(time->weekday);
  3204  0D6C  0845               	movf	Show_Time@time,w
  3205  0D6D  3E06               	addlw	6
  3206  0D6E  0084               	movwf	4
  3207  0D6F  1783               	bsf	3,7	;select IRP bank2
  3208  0D70  0800               	movf	0,w
  3209  0D71  160A  158A  2588  120A  158A  	fcall	_Display_Weekday
  3210  0D76                     l8218:	
  3211                           ;menu.c: 166:                            while(Button_Handler(keydef)!=k_set_right_short
      +                          );
  3212                           
  3213  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  3214  0D77  0842               	movf	Show_Time@keydef,w
  3215  0D78  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  3216  0D7D  3A06               	xorlw	6
  3217  0D7E  1D03               	skipz
  3218  0D7F  2D76               	goto	l8218
  3219                           
  3220                           ;menu.c: 168:                            g_display_controll=0;
  3221  0D80  1683               	bsf	3,5	;RP0=1, select bank1
  3222  0D81  01AD               	clrf	_g_display_controll^(0+128)	;volatile
  3223                           
  3224                           ;menu.c: 169:                            Disable_All_Digits();
  3225  0D82  160A  158A  2067   	fcall	_Disable_All_Digits
  3226  0D85  0008               	return
  3227  0D86                     __end_of_Show_Time:	
  3228                           
  3229                           	psect	text3
  3230  1D88                     __ptext3:	
  3231 ;; *************** function _Display_Weekday *****************
  3232 ;; Defined at:
  3233 ;;		line 660 in file "menu.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  weekday         1    wreg     unsigned char 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  weekday         1   12[BANK0 ] unsigned char 
  3238 ;; Return value:  Size  Location     Type
  3239 ;;                  1    wreg      void 
  3240 ;; Registers used:
  3241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3242 ;; Tracked objects:
  3243 ;;		On entry : B00/800
  3244 ;;		On exit  : 200/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3247 ;;      Params:         0       0       0       0       0
  3248 ;;      Locals:         0       1       0       0       0
  3249 ;;      Temps:          0       2       0       0       0
  3250 ;;      Totals:         0       3       0       0       0
  3251 ;;Total ram usage:        3 bytes
  3252 ;; Hardware stack levels used:    1
  3253 ;; Hardware stack levels required when called:    5
  3254 ;; This function calls:
  3255 ;;		_Display_7Seg_Text
  3256 ;; This function is called by:
  3257 ;;		_Show_Time
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           
  3262                           ;psect for function _Display_Weekday
  3263  1D88                     _Display_Weekday:	
  3264                           
  3265                           ;incstack = 0
  3266                           ; Regs used in _Display_Weekday: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3267                           ;Display_Weekday@weekday stored from wreg
  3268  1D88  00AC               	movwf	Display_Weekday@weekday
  3269                           
  3270                           ;menu.c: 660: void Display_Weekday(unsigned char weekday);menu.c: 661: {;menu.c: 662:   
      +                            switch (weekday)
  3271  1D89  2DB4               	goto	l7186
  3272  1D8A                     l7170:	
  3273  1D8A  01A6               	clrf	Display_7Seg_Text@decimal_point
  3274  1D8B  303D               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  3275  1D8C  160A  158A  2102   	fcall	_Display_7Seg_Text
  3276  1D8F  0008               	return
  3277  1D90                     l7172:	
  3278  1D90  01A6               	clrf	Display_7Seg_Text@decimal_point
  3279  1D91  3056               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  3280  1D92  160A  158A  2102   	fcall	_Display_7Seg_Text
  3281  1D95  0008               	return
  3282  1D96                     l7174:	
  3283  1D96  01A6               	clrf	Display_7Seg_Text@decimal_point
  3284  1D97  3047               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  3285  1D98  160A  158A  2102   	fcall	_Display_7Seg_Text
  3286  1D9B  0008               	return
  3287  1D9C                     l7176:	
  3288  1D9C  01A6               	clrf	Display_7Seg_Text@decimal_point
  3289  1D9D  3051               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  3290  1D9E  160A  158A  2102   	fcall	_Display_7Seg_Text
  3291  1DA1  0008               	return
  3292  1DA2                     l7178:	
  3293  1DA2  01A6               	clrf	Display_7Seg_Text@decimal_point
  3294  1DA3  3038               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  3295  1DA4  160A  158A  2102   	fcall	_Display_7Seg_Text
  3296  1DA7  0008               	return
  3297  1DA8                     l7180:	
  3298  1DA8  01A6               	clrf	Display_7Seg_Text@decimal_point
  3299  1DA9  305B               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  3300  1DAA  160A  158A  2102   	fcall	_Display_7Seg_Text
  3301  1DAD  0008               	return
  3302  1DAE                     l7182:	
  3303  1DAE  01A6               	clrf	Display_7Seg_Text@decimal_point
  3304  1DAF  3042               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  3305  1DB0  160A  158A  2102   	fcall	_Display_7Seg_Text
  3306  1DB3  0008               	return
  3307  1DB4                     l7186:	
  3308  1DB4  082C               	movf	Display_Weekday@weekday,w
  3309  1DB5  00AA               	movwf	??_Display_Weekday
  3310  1DB6  01AB               	clrf	??_Display_Weekday+1
  3311                           
  3312                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3313                           ; Switch size 1, requested type "simple"
  3314                           ; Number of cases is 1, Range of values is 0 to 0
  3315                           ; switch strategies available:
  3316                           ; Name         Instructions Cycles
  3317                           ; simple_byte            4     3 (average)
  3318                           ; direct_byte           11     8 (fixed)
  3319                           ; jumptable            260     6 (fixed)
  3320                           ;	Chosen strategy is simple_byte
  3321  1DB7  082B               	movf	??_Display_Weekday+1,w
  3322  1DB8  3A00               	xorlw	0	; case 0
  3323  1DB9  1903               	skipnz
  3324  1DBA  2DBC               	goto	l8492
  3325  1DBB  2DD3               	goto	l849
  3326  1DBC                     l8492:	
  3327                           
  3328                           ; Switch size 1, requested type "simple"
  3329                           ; Number of cases is 7, Range of values is 0 to 6
  3330                           ; switch strategies available:
  3331                           ; Name         Instructions Cycles
  3332                           ; simple_byte           22    12 (average)
  3333                           ; direct_byte           29     8 (fixed)
  3334                           ; jumptable            260     6 (fixed)
  3335                           ;	Chosen strategy is simple_byte
  3336  1DBC  082A               	movf	??_Display_Weekday,w
  3337  1DBD  3A00               	xorlw	0	; case 0
  3338  1DBE  1903               	skipnz
  3339  1DBF  2D8A               	goto	l7170
  3340  1DC0  3A01               	xorlw	1	; case 1
  3341  1DC1  1903               	skipnz
  3342  1DC2  2D90               	goto	l7172
  3343  1DC3  3A03               	xorlw	3	; case 2
  3344  1DC4  1903               	skipnz
  3345  1DC5  2D96               	goto	l7174
  3346  1DC6  3A01               	xorlw	1	; case 3
  3347  1DC7  1903               	skipnz
  3348  1DC8  2D9C               	goto	l7176
  3349  1DC9  3A07               	xorlw	7	; case 4
  3350  1DCA  1903               	skipnz
  3351  1DCB  2DA2               	goto	l7178
  3352  1DCC  3A01               	xorlw	1	; case 5
  3353  1DCD  1903               	skipnz
  3354  1DCE  2DA8               	goto	l7180
  3355  1DCF  3A03               	xorlw	3	; case 6
  3356  1DD0  1903               	skipnz
  3357  1DD1  2DAE               	goto	l7182
  3358  1DD2  2DD3               	goto	l849
  3359  1DD3                     l849:	
  3360  1DD3  0008               	return
  3361  1DD4                     __end_of_Display_Weekday:	
  3362                           
  3363                           	psect	text4
  3364  0D86                     __ptext4:	
  3365 ;; *************** function _Menu_Set_Time *****************
  3366 ;; Defined at:
  3367 ;;		line 272 in file "menu.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  menudef         1    wreg     PTR struct .
  3370 ;;		 -> main@menudef(7), 
  3371 ;;  keydef          1   44[BANK0 ] PTR struct .
  3372 ;;		 -> main@keydef(6), 
  3373 ;;  menu_type       1   45[BANK0 ] unsigned char 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  menudef         1    4[BANK1 ] PTR struct .
  3376 ;;		 -> main@menudef(7), 
  3377 ;;  current_menu    8    5[BANK1 ] struct MenuParamStruct
  3378 ;;  time            7   13[BANK1 ] struct .
  3379 ;;  current_menu    2    2[BANK1 ] PTR struct MenuParamStru
  3380 ;;		 -> Menu_Set_Time@current_menu(8), NULL(0), Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_work_day_1(8), 
  3381 ;;		 -> Menu_Init@time_limit_free_day_2(8), Menu_Init@time_limit_free_day_1(8), Menu_Init@year(8), Menu_Init@day_month(8
      +), 
  3382 ;;		 -> Menu_Init@hours_minutes(8), 
  3383 ;;  check_button    1    1[BANK1 ] unsigned char 
  3384 ;;  key             1    0[BANK1 ] unsigned char 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 300/800
  3391 ;;		On exit  : B00/100
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3394 ;;      Params:         0       2       0       0       0
  3395 ;;      Locals:         0       0      20       0       0
  3396 ;;      Temps:          0       3       0       0       0
  3397 ;;      Totals:         0       5      20       0       0
  3398 ;;Total ram usage:       25 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    8
  3401 ;; This function calls:
  3402 ;;		_Button_Handler
  3403 ;;		_Display_7Seg_Text
  3404 ;;		_Find_Weekday
  3405 ;;		_Is_Valid_Date
  3406 ;;		_Menu_Set_Param_Time_Limit
  3407 ;;		_PCF8583_Read_Time_Date
  3408 ;;		_PCF8583_Set_Date_Time
  3409 ;;		_Read_Limit_From_EEprom
  3410 ;;		_Write_Limit_To_EEprom
  3411 ;;		___awdiv
  3412 ;;		___awmod
  3413 ;;		___bmul
  3414 ;; This function is called by:
  3415 ;;		_Select_Menu
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _Menu_Set_Time
  3421  0D86                     _Menu_Set_Time:	
  3422                           
  3423                           ;incstack = 0
  3424 ;; hardware stack exceeded
  3425                           ; Regs used in _Menu_Set_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3426                           ;Menu_Set_Time@menudef stored from wreg
  3427  0D86  1683               	bsf	3,5	;RP0=1, select bank1
  3428  0D87  00D6               	movwf	Menu_Set_Time@menudef^(0+128)
  3429                           
  3430                           ;menu.c: 272: void Menu_Set_Time(MenuParamPonterStruct *menudef, KeyPointerStruct *keyde
      +                          f,;menu.c: 273:                    unsigned char menu_type);menu.c: 274: {;menu.c: 275: 
      +                              unsigned char check_button, key;;menu.c: 276:     MenuParamStruct current_menu;;menu
      +                          .c: 277:     MenuParamStruct *current_menu_ptr=&current_menu;
  3431  0D88  30D7               	movlw	(low (Menu_Set_Time@current_menu| 0))& (0+255)
  3432  0D89  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3433  0D8A  3000               	movlw	0
  3434  0D8B  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3435                           
  3436                           ;menu.c: 278:     TimeStruct time;;menu.c: 280:     g_display_controll=1;
  3437  0D8C  3001               	movlw	1
  3438  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  3439  0D8E  00CE               	movwf	??_Menu_Set_Time
  3440  0D8F  084E               	movf	??_Menu_Set_Time,w
  3441  0D90  1683               	bsf	3,5	;RP0=1, select bank1
  3442  0D91  00AD               	movwf	_g_display_controll^(0+128)	;volatile
  3443                           
  3444                           ;menu.c: 282:     if(menu_type==1)
  3445  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  3446  0D93  034D               	decf	Menu_Set_Time@menu_type,w
  3447  0D94  1D03               	btfss	3,2
  3448  0D95  2DCC               	goto	l8242
  3449                           
  3450                           ;menu.c: 283:     {;menu.c: 284:          Display_7Seg_Text("set2", 0);
  3451  0D96  01A6               	clrf	Display_7Seg_Text@decimal_point
  3452  0D97  3029               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3453  0D98  160A  158A  2102  120A  158A  	fcall	_Display_7Seg_Text
  3454                           
  3455                           ;menu.c: 285:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  3456  0D9D  300B               	movlw	11
  3457  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  3458  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  3459  0DA0  00D0               	movwf	??_Menu_Set_Time+2
  3460  0DA1  3026               	movlw	38
  3461  0DA2  00CF               	movwf	??_Menu_Set_Time+1
  3462  0DA3  305D               	movlw	93
  3463  0DA4  00CE               	movwf	??_Menu_Set_Time
  3464  0DA5                     u8457:	
  3465  0DA5  0BCE               	decfsz	??_Menu_Set_Time,f
  3466  0DA6  2DA5               	goto	u8457
  3467  0DA7  0BCF               	decfsz	??_Menu_Set_Time+1,f
  3468  0DA8  2DA5               	goto	u8457
  3469  0DA9  0BD0               	decfsz	??_Menu_Set_Time+2,f
  3470  0DAA  2DA5               	goto	u8457
  3471                           
  3472                           ;menu.c: 287:         Read_Limit_From_EEprom(menudef->time_limit_free_day_1_ptr,
  3473  0DAB  1683               	bsf	3,5	;RP0=1, select bank1
  3474  0DAC  1303               	bcf	3,6	;RP1=0, select bank1
  3475  0DAD  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3476  0DAE  3E06               	addlw	6
  3477  0DAF  0084               	movwf	4
  3478  0DB0  1783               	bsf	3,7	;select IRP bank2
  3479  0DB1  0800               	movf	0,w
  3480  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  3481  0DB3  00CE               	movwf	??_Menu_Set_Time
  3482  0DB4  084E               	movf	??_Menu_Set_Time,w
  3483  0DB5  00A7               	movwf	Read_Limit_From_EEprom@limit2
  3484  0DB6  01A8               	clrf	Read_Limit_From_EEprom@limit_type
  3485  0DB7  0AA8               	incf	Read_Limit_From_EEprom@limit_type,f
  3486  0DB8  1683               	bsf	3,5	;RP0=1, select bank1
  3487  0DB9  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3488  0DBA  3E05               	addlw	5
  3489  0DBB  0084               	movwf	4
  3490  0DBC  0800               	movf	0,w
  3491  0DBD  160A  118A  20F6  120A  158A  	fcall	_Read_Limit_From_EEprom
  3492                           
  3493                           ;menu.c: 291:         current_menu_ptr=menudef->time_limit_free_day_1_ptr;
  3494  0DC2  1683               	bsf	3,5	;RP0=1, select bank1
  3495  0DC3  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3496  0DC4  3E05               	addlw	5
  3497  0DC5  0084               	movwf	4
  3498  0DC6  0800               	movf	0,w
  3499  0DC7  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3500  0DC8  3001               	movlw	1
  3501  0DC9  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3502                           
  3503                           ;menu.c: 292:         key=k_set_time2_short;
  3504  0DCA  3004               	movlw	4
  3505  0DCB  2E03               	goto	L1
  3506  0DCC                     l8242:	
  3507                           ;menu.c: 294:     }else if(menu_type==0)
  3508                           
  3509  0DCC  084D               	movf	Menu_Set_Time@menu_type,w
  3510  0DCD  1D03               	btfss	3,2
  3511  0DCE  2E09               	goto	l8254
  3512                           
  3513                           ;menu.c: 295:     {;menu.c: 296:         Display_7Seg_Text("set1", 0);
  3514  0DCF  01A6               	clrf	Display_7Seg_Text@decimal_point
  3515  0DD0  3024               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3516  0DD1  160A  158A  2102  120A  158A  	fcall	_Display_7Seg_Text
  3517                           
  3518                           ;menu.c: 297:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  3519  0DD6  300B               	movlw	11
  3520  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
  3522  0DD9  00D0               	movwf	??_Menu_Set_Time+2
  3523  0DDA  3026               	movlw	38
  3524  0DDB  00CF               	movwf	??_Menu_Set_Time+1
  3525  0DDC  305D               	movlw	93
  3526  0DDD  00CE               	movwf	??_Menu_Set_Time
  3527  0DDE                     u8467:	
  3528  0DDE  0BCE               	decfsz	??_Menu_Set_Time,f
  3529  0DDF  2DDE               	goto	u8467
  3530  0DE0  0BCF               	decfsz	??_Menu_Set_Time+1,f
  3531  0DE1  2DDE               	goto	u8467
  3532  0DE2  0BD0               	decfsz	??_Menu_Set_Time+2,f
  3533  0DE3  2DDE               	goto	u8467
  3534                           
  3535                           ;menu.c: 298:         Read_Limit_From_EEprom(menudef->time_limit_work_day_1_ptr,
  3536  0DE4  1683               	bsf	3,5	;RP0=1, select bank1
  3537  0DE5  1303               	bcf	3,6	;RP1=0, select bank1
  3538  0DE6  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3539  0DE7  3E04               	addlw	4
  3540  0DE8  0084               	movwf	4
  3541  0DE9  1783               	bsf	3,7	;select IRP bank2
  3542  0DEA  0800               	movf	0,w
  3543  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  3544  0DEC  00CE               	movwf	??_Menu_Set_Time
  3545  0DED  084E               	movf	??_Menu_Set_Time,w
  3546  0DEE  00A7               	movwf	Read_Limit_From_EEprom@limit2
  3547  0DEF  01A8               	clrf	Read_Limit_From_EEprom@limit_type
  3548  0DF0  1683               	bsf	3,5	;RP0=1, select bank1
  3549  0DF1  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3550  0DF2  3E03               	addlw	3
  3551  0DF3  0084               	movwf	4
  3552  0DF4  0800               	movf	0,w
  3553  0DF5  160A  118A  20F6  120A  158A  	fcall	_Read_Limit_From_EEprom
  3554                           
  3555                           ;menu.c: 302:         current_menu_ptr=menudef->time_limit_work_day_1_ptr;
  3556  0DFA  1683               	bsf	3,5	;RP0=1, select bank1
  3557  0DFB  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3558  0DFC  3E03               	addlw	3
  3559  0DFD  0084               	movwf	4
  3560  0DFE  0800               	movf	0,w
  3561  0DFF  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3562  0E00  3001               	movlw	1
  3563  0E01  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3564                           
  3565                           ;menu.c: 303:         key=k_set_time1_short;
  3566  0E02  3002               	movlw	2
  3567  0E03                     L1:	
  3568  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  3569  0E04  00CE               	movwf	??_Menu_Set_Time
  3570  0E05  084E               	movf	??_Menu_Set_Time,w
  3571  0E06  1683               	bsf	3,5	;RP0=1, select bank1
  3572  0E07  00D2               	movwf	Menu_Set_Time@key^(0+128)
  3573                           
  3574                           ;menu.c: 305:     }else if(menu_type==2)
  3575  0E08  2EA4               	goto	l8278
  3576  0E09                     l8254:	
  3577  0E09  3002               	movlw	2
  3578  0E0A  064D               	xorwf	Menu_Set_Time@menu_type,w
  3579  0E0B  1D03               	btfss	3,2
  3580  0E0C  2EA4               	goto	l8278
  3581                           
  3582                           ;menu.c: 306:     {;menu.c: 307:         Display_7Seg_Text("srtc", 0);
  3583  0E0D  01A6               	clrf	Display_7Seg_Text@decimal_point
  3584  0E0E  302E               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3585  0E0F  160A  158A  2102  120A  158A  	fcall	_Display_7Seg_Text
  3586                           
  3587                           ;menu.c: 308:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  3588  0E14  300B               	movlw	11
  3589  0E15  1283               	bcf	3,5	;RP0=0, select bank0
  3590  0E16  1303               	bcf	3,6	;RP1=0, select bank0
  3591  0E17  00D0               	movwf	??_Menu_Set_Time+2
  3592  0E18  3026               	movlw	38
  3593  0E19  00CF               	movwf	??_Menu_Set_Time+1
  3594  0E1A  305D               	movlw	93
  3595  0E1B  00CE               	movwf	??_Menu_Set_Time
  3596  0E1C                     u8477:	
  3597  0E1C  0BCE               	decfsz	??_Menu_Set_Time,f
  3598  0E1D  2E1C               	goto	u8477
  3599  0E1E  0BCF               	decfsz	??_Menu_Set_Time+1,f
  3600  0E1F  2E1C               	goto	u8477
  3601  0E20  0BD0               	decfsz	??_Menu_Set_Time+2,f
  3602  0E21  2E1C               	goto	u8477
  3603                           
  3604                           ;menu.c: 309:         PCF8583_Read_Time_Date(&time);
  3605  0E22  30DF               	movlw	(low (Menu_Set_Time@time| 0))& (0+255)
  3606  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  3607  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  3608  0E25  00B5               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  3609  0E26  3000               	movlw	0
  3610  0E27  00B6               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  3611  0E28  120A  118A  26CF  120A  158A  	fcall	_PCF8583_Read_Time_Date
  3612                           
  3613                           ;menu.c: 311:         menudef->hours_minutes_ptr->param1=time.minutes;
  3614  0E2D  0860               	movf	(Menu_Set_Time@time^(0+128)+1),w
  3615  0E2E  1283               	bcf	3,5	;RP0=0, select bank0
  3616  0E2F  00CE               	movwf	??_Menu_Set_Time
  3617  0E30  1683               	bsf	3,5	;RP0=1, select bank1
  3618  0E31  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3619  0E32  0084               	movwf	4
  3620  0E33  1783               	bsf	3,7	;select IRP bank2
  3621  0E34  0800               	movf	0,w
  3622  0E35  3E06               	addlw	6
  3623  0E36  0084               	movwf	4
  3624  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  3625  0E38  084E               	movf	??_Menu_Set_Time,w
  3626  0E39  0080               	movwf	0
  3627                           
  3628                           ;menu.c: 312:         menudef->hours_minutes_ptr->param=time.hours;
  3629  0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  3630  0E3B  0861               	movf	(Menu_Set_Time@time^(0+128)+2),w
  3631  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  3632  0E3D  00CE               	movwf	??_Menu_Set_Time
  3633  0E3E  1683               	bsf	3,5	;RP0=1, select bank1
  3634  0E3F  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3635  0E40  0084               	movwf	4
  3636  0E41  0800               	movf	0,w
  3637  0E42  3E05               	addlw	5
  3638  0E43  0084               	movwf	4
  3639  0E44  1283               	bcf	3,5	;RP0=0, select bank0
  3640  0E45  084E               	movf	??_Menu_Set_Time,w
  3641  0E46  0080               	movwf	0
  3642                           
  3643                           ;menu.c: 313:         menudef->day_month_ptr->param=time.day;
  3644  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  3645  0E48  0862               	movf	(Menu_Set_Time@time^(0+128)+3),w
  3646  0E49  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0E4A  00CE               	movwf	??_Menu_Set_Time
  3648  0E4B  1683               	bsf	3,5	;RP0=1, select bank1
  3649  0E4C  0A56               	incf	Menu_Set_Time@menudef^(0+128),w
  3650  0E4D  0084               	movwf	4
  3651  0E4E  0800               	movf	0,w
  3652  0E4F  3E05               	addlw	5
  3653  0E50  0084               	movwf	4
  3654  0E51  1283               	bcf	3,5	;RP0=0, select bank0
  3655  0E52  084E               	movf	??_Menu_Set_Time,w
  3656  0E53  0080               	movwf	0
  3657                           
  3658                           ;menu.c: 314:         menudef->day_month_ptr->param1=time.month;
  3659  0E54  1683               	bsf	3,5	;RP0=1, select bank1
  3660  0E55  0863               	movf	(Menu_Set_Time@time^(0+128)+4),w
  3661  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  3662  0E57  00CE               	movwf	??_Menu_Set_Time
  3663  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  3664  0E59  0A56               	incf	Menu_Set_Time@menudef^(0+128),w
  3665  0E5A  0084               	movwf	4
  3666  0E5B  0800               	movf	0,w
  3667  0E5C  3E06               	addlw	6
  3668  0E5D  0084               	movwf	4
  3669  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  3670  0E5F  084E               	movf	??_Menu_Set_Time,w
  3671  0E60  0080               	movwf	0
  3672                           
  3673                           ;menu.c: 316:         menudef->year_ptr->param1=time.year%100;
  3674  0E61  3064               	movlw	100
  3675  0E62  00A6               	movwf	___awmod@divisor
  3676  0E63  3000               	movlw	0
  3677  0E64  00A7               	movwf	___awmod@divisor+1
  3678  0E65  1683               	bsf	3,5	;RP0=1, select bank1
  3679  0E66  0864               	movf	(Menu_Set_Time@time^(0+128)+5),w
  3680  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  3681  0E68  00A8               	movwf	___awmod@dividend
  3682  0E69  01A9               	clrf	___awmod@dividend+1
  3683  0E6A  1BA8               	btfsc	___awmod@dividend,7
  3684  0E6B  03A9               	decf	___awmod@dividend+1,f
  3685  0E6C  160A  158A  253D  120A  158A  	fcall	___awmod
  3686  0E71  0826               	movf	?___awmod,w
  3687  0E72  00CE               	movwf	??_Menu_Set_Time
  3688  0E73  1683               	bsf	3,5	;RP0=1, select bank1
  3689  0E74  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3690  0E75  3E02               	addlw	2
  3691  0E76  0084               	movwf	4
  3692  0E77  1783               	bsf	3,7	;select IRP bank2
  3693  0E78  0800               	movf	0,w
  3694  0E79  3E06               	addlw	6
  3695  0E7A  0084               	movwf	4
  3696  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  3697  0E7C  084E               	movf	??_Menu_Set_Time,w
  3698  0E7D  0080               	movwf	0
  3699                           
  3700                           ;menu.c: 317:         menudef->year_ptr->param=20+time.year/100;
  3701  0E7E  3064               	movlw	100
  3702  0E7F  00AD               	movwf	___awdiv@divisor
  3703  0E80  3000               	movlw	0
  3704  0E81  00AE               	movwf	___awdiv@divisor+1
  3705  0E82  1683               	bsf	3,5	;RP0=1, select bank1
  3706  0E83  0864               	movf	(Menu_Set_Time@time^(0+128)+5),w
  3707  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  3708  0E85  00AF               	movwf	___awdiv@dividend
  3709  0E86  01B0               	clrf	___awdiv@dividend+1
  3710  0E87  1BAF               	btfsc	___awdiv@dividend,7
  3711  0E88  03B0               	decf	___awdiv@dividend+1,f
  3712  0E89  160A  158A  2629  120A  158A  	fcall	___awdiv
  3713  0E8E  082D               	movf	?___awdiv,w
  3714  0E8F  3E14               	addlw	20
  3715  0E90  00CE               	movwf	??_Menu_Set_Time
  3716  0E91  1683               	bsf	3,5	;RP0=1, select bank1
  3717  0E92  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3718  0E93  3E02               	addlw	2
  3719  0E94  0084               	movwf	4
  3720  0E95  1783               	bsf	3,7	;select IRP bank2
  3721  0E96  0800               	movf	0,w
  3722  0E97  3E05               	addlw	5
  3723  0E98  0084               	movwf	4
  3724  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  3725  0E9A  084E               	movf	??_Menu_Set_Time,w
  3726  0E9B  0080               	movwf	0
  3727                           
  3728                           ;menu.c: 319:         current_menu_ptr=menudef->hours_minutes_ptr;
  3729  0E9C  1683               	bsf	3,5	;RP0=1, select bank1
  3730  0E9D  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3731  0E9E  0084               	movwf	4
  3732  0E9F  0800               	movf	0,w
  3733  0EA0  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3734  0EA1  3001               	movlw	1
  3735  0EA2  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3736                           
  3737                           ;menu.c: 320:         key=k_set_rtc_short;
  3738  0EA3  01D2               	clrf	Menu_Set_Time@key^(0+128)
  3739  0EA4                     l8278:	
  3740                           
  3741                           ;menu.c: 324:     g_decimal_point=0b0100;
  3742  0EA4  3004               	movlw	4
  3743  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  3744  0EA6  00CE               	movwf	??_Menu_Set_Time
  3745  0EA7  084E               	movf	??_Menu_Set_Time,w
  3746  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  3747  0EA9  00AC               	movwf	_g_decimal_point^(0+128)
  3748  0EAA                     l8280:	
  3749                           
  3750                           ;menu.c: 327:     {;menu.c: 328:         Menu_Set_Param_Time_Limit(current_menu_ptr, che
      +                          ck_button);
  3751  0EAA  0854               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  3752  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  3753  0EAC  00B6               	movwf	Menu_Set_Param_Time_Limit@menu
  3754  0EAD  1683               	bsf	3,5	;RP0=1, select bank1
  3755  0EAE  0855               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  3756  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  3757  0EB0  00B7               	movwf	Menu_Set_Param_Time_Limit@menu+1
  3758  0EB1  1683               	bsf	3,5	;RP0=1, select bank1
  3759  0EB2  0853               	movf	Menu_Set_Time@check_button^(0+128),w
  3760  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  3761  0EB4  00CE               	movwf	??_Menu_Set_Time
  3762  0EB5  084E               	movf	??_Menu_Set_Time,w
  3763  0EB6  00B8               	movwf	Menu_Set_Param_Time_Limit@check_button
  3764  0EB7  120A  118A  203A  120A  158A  	fcall	_Menu_Set_Param_Time_Limit
  3765                           
  3766                           ;menu.c: 330:         check_button=Button_Handler(keydef);
  3767  0EBC  084C               	movf	Menu_Set_Time@keydef,w
  3768  0EBD  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  3769  0EC2  00CE               	movwf	??_Menu_Set_Time
  3770  0EC3  084E               	movf	??_Menu_Set_Time,w
  3771  0EC4  1683               	bsf	3,5	;RP0=1, select bank1
  3772  0EC5  00D3               	movwf	Menu_Set_Time@check_button^(0+128)
  3773                           
  3774                           ;menu.c: 332:         if(check_button==key)
  3775  0EC6  0853               	movf	Menu_Set_Time@check_button^(0+128),w
  3776  0EC7  0652               	xorwf	Menu_Set_Time@key^(0+128),w
  3777  0EC8  1D03               	skipz
  3778  0EC9  2EAA               	goto	l8280
  3779                           
  3780                           ;menu.c: 333:         {;menu.c: 334:            if(current_menu_ptr->next_menu==0)
  3781  0ECA  0854               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  3782  0ECB  3E07               	addlw	7
  3783  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0ECD  00CE               	movwf	??_Menu_Set_Time
  3785  0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  3786  0ECF  0855               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  3787  0ED0  1803               	skipnc
  3788  0ED1  3E01               	addlw	1
  3789  0ED2  3E00               	addlw	0
  3790  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  3791  0ED4  00CF               	movwf	??_Menu_Set_Time+1
  3792  0ED5  084E               	movf	??_Menu_Set_Time,w
  3793  0ED6  0084               	movwf	4
  3794  0ED7  1783               	bsf	3,7
  3795  0ED8  1C4F               	btfss	??_Menu_Set_Time+1,0
  3796  0ED9  1383               	bcf	3,7
  3797  0EDA  0800               	movf	0,w
  3798  0EDB  1D03               	btfss	3,2
  3799  0EDC  2FDC               	goto	l8324
  3800                           
  3801                           ;menu.c: 335:            {;menu.c: 336:                 if(menu_type==1)
  3802  0EDD  034D               	decf	Menu_Set_Time@menu_type,w
  3803  0EDE  1D03               	btfss	3,2
  3804  0EDF  2EF7               	goto	l8292
  3805                           
  3806                           ;menu.c: 337:                 {;menu.c: 339:                     Write_Limit_To_EEprom(m
      +                          enudef->time_limit_free_day_1_ptr,
  3807  0EE0  1683               	bsf	3,5	;RP0=1, select bank1
  3808  0EE1  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3809  0EE2  3E06               	addlw	6
  3810  0EE3  0084               	movwf	4
  3811  0EE4  1783               	bsf	3,7	;select IRP bank2
  3812  0EE5  0800               	movf	0,w
  3813  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  3814  0EE7  00CE               	movwf	??_Menu_Set_Time
  3815  0EE8  084E               	movf	??_Menu_Set_Time,w
  3816  0EE9  00A8               	movwf	Write_Limit_To_EEprom@limit2
  3817  0EEA  01A9               	clrf	Write_Limit_To_EEprom@limit_type
  3818  0EEB  0AA9               	incf	Write_Limit_To_EEprom@limit_type,f
  3819  0EEC  1683               	bsf	3,5	;RP0=1, select bank1
  3820  0EED  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3821  0EEE  3E05               	addlw	5
  3822  0EEF  0084               	movwf	4
  3823  0EF0  0800               	movf	0,w
  3824  0EF1  160A  118A  208D  120A  158A  	fcall	_Write_Limit_To_EEprom
  3825  0EF6  2FBB               	goto	L4
  3826  0EF7                     l8292:	
  3827                           ;menu.c: 345:                 }else if(menu_type==0)
  3828                           
  3829                           ;menu.c: 343:                     Display_7Seg_Text("save",0);
  3830                           
  3831  0EF7  084D               	movf	Menu_Set_Time@menu_type,w
  3832  0EF8  1D03               	btfss	3,2
  3833  0EF9  2F10               	goto	l8296
  3834                           
  3835                           ;menu.c: 346:                 {;menu.c: 347:                     Write_Limit_To_EEprom(m
      +                          enudef->time_limit_work_day_1_ptr,
  3836  0EFA  1683               	bsf	3,5	;RP0=1, select bank1
  3837  0EFB  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3838  0EFC  3E04               	addlw	4
  3839  0EFD  0084               	movwf	4
  3840  0EFE  1783               	bsf	3,7	;select IRP bank2
  3841  0EFF  0800               	movf	0,w
  3842  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0F01  00CE               	movwf	??_Menu_Set_Time
  3844  0F02  084E               	movf	??_Menu_Set_Time,w
  3845  0F03  00A8               	movwf	Write_Limit_To_EEprom@limit2
  3846  0F04  01A9               	clrf	Write_Limit_To_EEprom@limit_type
  3847  0F05  1683               	bsf	3,5	;RP0=1, select bank1
  3848  0F06  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3849  0F07  3E03               	addlw	3
  3850  0F08  0084               	movwf	4
  3851  0F09  0800               	movf	0,w
  3852  0F0A  160A  118A  208D  120A  158A  	fcall	_Write_Limit_To_EEprom
  3853  0F0F  2FBB               	goto	L4
  3854  0F10                     l8296:	
  3855                           ;menu.c: 353:                 }else if(menu_type==2)
  3856                           
  3857                           ;menu.c: 351:                     Display_7Seg_Text("save",0);
  3858                           
  3859  0F10  3002               	movlw	2
  3860  0F11  064D               	xorwf	Menu_Set_Time@menu_type,w
  3861  0F12  1D03               	btfss	3,2
  3862  0F13  2FC5               	goto	l8318
  3863                           
  3864                           ;menu.c: 354:                 {;menu.c: 355:                     time.seconds=0;
  3865  0F14  1683               	bsf	3,5	;RP0=1, select bank1
  3866  0F15  01DF               	clrf	Menu_Set_Time@time^(0+128)
  3867                           
  3868                           ;menu.c: 356:                     time.minutes=menudef->hours_minutes_ptr->param1;
  3869  0F16  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3870  0F17  0084               	movwf	4
  3871  0F18  1783               	bsf	3,7	;select IRP bank2
  3872  0F19  0800               	movf	0,w
  3873  0F1A  3E06               	addlw	6
  3874  0F1B  0084               	movwf	4
  3875  0F1C  0800               	movf	0,w
  3876  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  3877  0F1E  00CE               	movwf	??_Menu_Set_Time
  3878  0F1F  084E               	movf	??_Menu_Set_Time,w
  3879  0F20  1683               	bsf	3,5	;RP0=1, select bank1
  3880  0F21  00E0               	movwf	(Menu_Set_Time@time^(0+128)+1)
  3881                           
  3882                           ;menu.c: 357:                     time.hours=menudef->hours_minutes_ptr->param;
  3883  0F22  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3884  0F23  0084               	movwf	4
  3885  0F24  0800               	movf	0,w
  3886  0F25  3E05               	addlw	5
  3887  0F26  0084               	movwf	4
  3888  0F27  0800               	movf	0,w
  3889  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  3890  0F29  00CE               	movwf	??_Menu_Set_Time
  3891  0F2A  084E               	movf	??_Menu_Set_Time,w
  3892  0F2B  1683               	bsf	3,5	;RP0=1, select bank1
  3893  0F2C  00E1               	movwf	(Menu_Set_Time@time^(0+128)+2)
  3894                           
  3895                           ;menu.c: 358:                     time.day=menudef->day_month_ptr->param;
  3896  0F2D  0A56               	incf	Menu_Set_Time@menudef^(0+128),w
  3897  0F2E  0084               	movwf	4
  3898  0F2F  0800               	movf	0,w
  3899  0F30  3E05               	addlw	5
  3900  0F31  0084               	movwf	4
  3901  0F32  0800               	movf	0,w
  3902  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  3903  0F34  00CE               	movwf	??_Menu_Set_Time
  3904  0F35  084E               	movf	??_Menu_Set_Time,w
  3905  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  3906  0F37  00E2               	movwf	(Menu_Set_Time@time^(0+128)+3)
  3907                           
  3908                           ;menu.c: 359:                     time.month=menudef->day_month_ptr->param1;
  3909  0F38  0A56               	incf	Menu_Set_Time@menudef^(0+128),w
  3910  0F39  0084               	movwf	4
  3911  0F3A  0800               	movf	0,w
  3912  0F3B  3E06               	addlw	6
  3913  0F3C  0084               	movwf	4
  3914  0F3D  0800               	movf	0,w
  3915  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  3916  0F3F  00CE               	movwf	??_Menu_Set_Time
  3917  0F40  084E               	movf	??_Menu_Set_Time,w
  3918  0F41  1683               	bsf	3,5	;RP0=1, select bank1
  3919  0F42  00E3               	movwf	(Menu_Set_Time@time^(0+128)+4)
  3920                           
  3921                           ;menu.c: 361:                     time.year=((menudef->year_ptr->param1)+100*
  3922  0F43  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3923  0F44  3E02               	addlw	2
  3924  0F45  0084               	movwf	4
  3925  0F46  0800               	movf	0,w
  3926  0F47  3E06               	addlw	6
  3927  0F48  0084               	movwf	4
  3928  0F49  0800               	movf	0,w
  3929  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  3930  0F4B  00CE               	movwf	??_Menu_Set_Time
  3931  0F4C  3064               	movlw	100
  3932  0F4D  00CF               	movwf	??_Menu_Set_Time+1
  3933  0F4E  084F               	movf	??_Menu_Set_Time+1,w
  3934  0F4F  00AD               	movwf	___bmul@multiplicand
  3935  0F50  1683               	bsf	3,5	;RP0=1, select bank1
  3936  0F51  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3937  0F52  3E02               	addlw	2
  3938  0F53  0084               	movwf	4
  3939  0F54  0800               	movf	0,w
  3940  0F55  3E05               	addlw	5
  3941  0F56  0084               	movwf	4
  3942  0F57  0800               	movf	0,w
  3943  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0F59  00A8               	movwf	___awmod@dividend
  3945  0F5A  01A9               	clrf	___awmod@dividend+1
  3946  0F5B  1BA8               	btfsc	___awmod@dividend,7
  3947  0F5C  03A9               	decf	___awmod@dividend+1,f
  3948  0F5D  300A               	movlw	10
  3949  0F5E  00A6               	movwf	___awmod@divisor
  3950  0F5F  3000               	movlw	0
  3951  0F60  00A7               	movwf	___awmod@divisor+1
  3952  0F61  160A  158A  253D  120A  158A  	fcall	___awmod
  3953  0F66  0826               	movf	?___awmod,w
  3954  0F67  160A  158A  20B9  120A  158A  	fcall	___bmul
  3955  0F6C  074E               	addwf	??_Menu_Set_Time,w
  3956  0F6D  00D0               	movwf	??_Menu_Set_Time+2
  3957  0F6E  0850               	movf	??_Menu_Set_Time+2,w
  3958  0F6F  1683               	bsf	3,5	;RP0=1, select bank1
  3959  0F70  00E4               	movwf	(Menu_Set_Time@time^(0+128)+5)
  3960                           
  3961                           ;menu.c: 364:                     time.weekday=Find_Weekday((2000+time.year),
  3962  0F71  0864               	movf	(Menu_Set_Time@time^(0+128)+5),w
  3963  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  3964  0F73  00CE               	movwf	??_Menu_Set_Time
  3965  0F74  01CF               	clrf	??_Menu_Set_Time+1
  3966  0F75  1BCE               	btfsc	??_Menu_Set_Time,7
  3967  0F76  03CF               	decf	??_Menu_Set_Time+1,f
  3968  0F77  084E               	movf	??_Menu_Set_Time,w
  3969  0F78  3ED0               	addlw	208
  3970  0F79  00BA               	movwf	Find_Weekday@year
  3971  0F7A  084F               	movf	??_Menu_Set_Time+1,w
  3972  0F7B  1803               	skipnc
  3973  0F7C  3E01               	addlw	1
  3974  0F7D  3E07               	addlw	7
  3975  0F7E  00BB               	movwf	Find_Weekday@year+1
  3976  0F7F  1683               	bsf	3,5	;RP0=1, select bank1
  3977  0F80  0863               	movf	(Menu_Set_Time@time^(0+128)+4),w
  3978  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  3979  0F82  00BC               	movwf	Find_Weekday@month
  3980  0F83  01BD               	clrf	Find_Weekday@month+1
  3981  0F84  1BBC               	btfsc	Find_Weekday@month,7
  3982  0F85  03BD               	decf	Find_Weekday@month+1,f
  3983  0F86  1683               	bsf	3,5	;RP0=1, select bank1
  3984  0F87  0862               	movf	(Menu_Set_Time@time^(0+128)+3),w
  3985  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  3986  0F89  00BE               	movwf	Find_Weekday@day
  3987  0F8A  01BF               	clrf	Find_Weekday@day+1
  3988  0F8B  1BBE               	btfsc	Find_Weekday@day,7
  3989  0F8C  03BF               	decf	Find_Weekday@day+1,f
  3990  0F8D  160A  118A  2458  120A  158A  	fcall	_Find_Weekday
  3991  0F92  00D0               	movwf	??_Menu_Set_Time+2
  3992  0F93  0850               	movf	??_Menu_Set_Time+2,w
  3993  0F94  1683               	bsf	3,5	;RP0=1, select bank1
  3994  0F95  00E5               	movwf	(Menu_Set_Time@time^(0+128)+6)
  3995                           
  3996                           ;menu.c: 367:                     if(Is_Valid_Date(time.day,time.month,(2000+time.year))
      +                          )
  3997  0F96  0863               	movf	(Menu_Set_Time@time^(0+128)+4),w
  3998  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  3999  0F98  00CE               	movwf	??_Menu_Set_Time
  4000  0F99  084E               	movf	??_Menu_Set_Time,w
  4001  0F9A  00BD               	movwf	Is_Valid_Date@m
  4002  0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  4003  0F9C  0864               	movf	(Menu_Set_Time@time^(0+128)+5),w
  4004  0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  4005  0F9E  00CF               	movwf	??_Menu_Set_Time+1
  4006  0F9F  01D0               	clrf	??_Menu_Set_Time+2
  4007  0FA0  1BCF               	btfsc	??_Menu_Set_Time+1,7
  4008  0FA1  03D0               	decf	??_Menu_Set_Time+2,f
  4009  0FA2  084F               	movf	??_Menu_Set_Time+1,w
  4010  0FA3  3ED0               	addlw	208
  4011  0FA4  00BE               	movwf	Is_Valid_Date@y
  4012  0FA5  0850               	movf	??_Menu_Set_Time+2,w
  4013  0FA6  1803               	skipnc
  4014  0FA7  3E01               	addlw	1
  4015  0FA8  3E07               	addlw	7
  4016  0FA9  00BF               	movwf	Is_Valid_Date@y+1
  4017  0FAA  1683               	bsf	3,5	;RP0=1, select bank1
  4018  0FAB  0862               	movf	(Menu_Set_Time@time^(0+128)+3),w
  4019  0FAC  160A  158A  2682  120A  158A  	fcall	_Is_Valid_Date
  4020  0FB1  3A00               	xorlw	0
  4021  0FB2  1903               	skipnz
  4022  0FB3  2FBE               	goto	l8316
  4023                           
  4024                           ;menu.c: 368:                     {;menu.c: 369:                         PCF8583_Set_Dat
      +                          e_Time(&time);
  4025  0FB4  30DF               	movlw	(low (Menu_Set_Time@time| 0))& (0+255)
  4026  0FB5  120A  158A  2043  120A  158A  	fcall	_PCF8583_Set_Date_Time
  4027                           
  4028                           ;menu.c: 370:                          Display_7Seg_Text("save",0);
  4029  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0FBB                     L4:	
  4031  0FBB  01A6               	clrf	Display_7Seg_Text@decimal_point
  4032  0FBC  304C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  4033  0FBD  2FC0               	goto	L2
  4034  0FBE                     l8316:	
  4035                           ;menu.c: 372:                     }else
  4036                           
  4037                           
  4038                           ;menu.c: 373:                     {;menu.c: 374:                          Display_7Seg_T
      +                          ext("badd",0);
  4039  0FBE  01A6               	clrf	Display_7Seg_Text@decimal_point
  4040  0FBF  3033               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  4041  0FC0                     L2:	
  4042  0FC0  160A  158A  2102  120A  158A  	fcall	_Display_7Seg_Text
  4043  0FC5                     l8318:	
  4044                           
  4045                           ;menu.c: 378:                 _delay((unsigned long)((2000)*(8000000/4000.0)));
  4046  0FC5  3015               	movlw	21
  4047  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0FC8  00D0               	movwf	??_Menu_Set_Time+2
  4050  0FC9  304B               	movlw	75
  4051  0FCA  00CF               	movwf	??_Menu_Set_Time+1
  4052  0FCB  30BD               	movlw	189
  4053  0FCC  00CE               	movwf	??_Menu_Set_Time
  4054  0FCD                     u8487:	
  4055  0FCD  0BCE               	decfsz	??_Menu_Set_Time,f
  4056  0FCE  2FCD               	goto	u8487
  4057  0FCF  0BCF               	decfsz	??_Menu_Set_Time+1,f
  4058  0FD0  2FCD               	goto	u8487
  4059  0FD1  0BD0               	decfsz	??_Menu_Set_Time+2,f
  4060  0FD2  2FCD               	goto	u8487
  4061  0FD3  2FD4               	nop2
  4062                           
  4063                           ;menu.c: 379:                 Display_7Seg_Text("****",0);
  4064  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  4065  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  4066  0FD6  01A6               	clrf	Display_7Seg_Text@decimal_point
  4067  0FD7  3060               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4068  0FD8  160A  158A  2102   	fcall	_Display_7Seg_Text
  4069  0FDB  0008               	return
  4070  0FDC                     l8324:	
  4071                           
  4072                           ;menu.c: 384:             current_menu_ptr=(current_menu_ptr->next_menu);
  4073  0FDC  1683               	bsf	3,5	;RP0=1, select bank1
  4074  0FDD  0854               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  4075  0FDE  3E07               	addlw	7
  4076  0FDF  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0FE0  00CE               	movwf	??_Menu_Set_Time
  4078  0FE1  1683               	bsf	3,5	;RP0=1, select bank1
  4079  0FE2  0855               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  4080  0FE3  1803               	skipnc
  4081  0FE4  3E01               	addlw	1
  4082  0FE5  3E00               	addlw	0
  4083  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  4084  0FE7  00CF               	movwf	??_Menu_Set_Time+1
  4085  0FE8  084E               	movf	??_Menu_Set_Time,w
  4086  0FE9  0084               	movwf	4
  4087  0FEA  1783               	bsf	3,7
  4088  0FEB  1C4F               	btfss	??_Menu_Set_Time+1,0
  4089  0FEC  1383               	bcf	3,7
  4090  0FED  0800               	movf	0,w
  4091  0FEE  1683               	bsf	3,5	;RP0=1, select bank1
  4092  0FEF  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  4093  0FF0  3001               	movlw	1
  4094  0FF1  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  4095                           
  4096                           ;menu.c: 385:             if(current_menu_ptr==menudef->year_ptr)
  4097  0FF2  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4098  0FF3  3E02               	addlw	2
  4099  0FF4  0084               	movwf	4
  4100  0FF5  3001               	movlw	1
  4101  0FF6  0655               	xorwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  4102  0FF7  1D03               	skipz
  4103  0FF8  2FFC               	goto	u8325
  4104  0FF9  1783               	bsf	3,7	;select IRP bank2
  4105  0FFA  0800               	movf	0,w
  4106  0FFB  0654               	xorwf	Menu_Set_Time@current_menu_ptr^(0+128),w
  4107  0FFC                     u8325:	
  4108  0FFC  1D03               	skipz
  4109  0FFD  2EAA               	goto	l8280
  4110                           
  4111                           ;menu.c: 386:             {;menu.c: 387:                  g_decimal_point=0b0000;
  4112  0FFE  01AC               	clrf	_g_decimal_point^(0+128)
  4113  0FFF  2EAA               	goto	l8280
  4114  1000                     __end_of_Menu_Set_Time:	
  4115                           
  4116                           	psect	text5
  4117  108D                     __ptext5:	
  4118 ;; *************** function _Write_Limit_To_EEprom *****************
  4119 ;; Defined at:
  4120 ;;		line 587 in file "menu.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  limit1          1    wreg     PTR struct MenuParamStru
  4123 ;;		 -> Menu_Init@time_limit_work_day_1(8), Menu_Init@time_limit_free_day_1(8), 
  4124 ;;  limit2          1    8[BANK0 ] PTR struct MenuParamStru
  4125 ;;		 -> Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_free_day_2(8), 
  4126 ;;  limit_type      1    9[BANK0 ] unsigned char 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  limit1          1   11[BANK0 ] PTR struct MenuParamStru
  4129 ;;		 -> Menu_Init@time_limit_work_day_1(8), Menu_Init@time_limit_free_day_1(8), 
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  1    wreg      void 
  4132 ;; Registers used:
  4133 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : B00/900
  4136 ;;		On exit  : B00/800
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4139 ;;      Params:         0       2       0       0       0
  4140 ;;      Locals:         0       1       0       0       0
  4141 ;;      Temps:          0       1       0       0       0
  4142 ;;      Totals:         0       4       0       0       0
  4143 ;;Total ram usage:        4 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    5
  4146 ;; This function calls:
  4147 ;;		_Write_EEprom
  4148 ;; This function is called by:
  4149 ;;		_Menu_Set_Time
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           
  4154                           ;psect for function _Write_Limit_To_EEprom
  4155  108D                     _Write_Limit_To_EEprom:	
  4156                           
  4157                           ;incstack = 0
  4158                           ; Regs used in _Write_Limit_To_EEprom: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4159                           ;Write_Limit_To_EEprom@limit1 stored from wreg
  4160  108D  1283               	bcf	3,5	;RP0=0, select bank0
  4161  108E  00AB               	movwf	Write_Limit_To_EEprom@limit1
  4162                           
  4163                           ;menu.c: 587: void Write_Limit_To_EEprom(MenuParamStruct *limit1, MenuParamStruct *limit
      +                          2, unsigned char limit_type);menu.c: 588: {;menu.c: 589:     if(limit_type==0)
  4164  108F  0829               	movf	Write_Limit_To_EEprom@limit_type,w
  4165  1090  1D03               	btfss	3,2
  4166  1091  28C0               	goto	l7384
  4167                           
  4168                           ;menu.c: 590:     {;menu.c: 591:         Write_EEprom(limit1->param, 0x00);
  4169  1092  01A6               	clrf	Write_EEprom@adress
  4170  1093  082B               	movf	Write_Limit_To_EEprom@limit1,w
  4171  1094  3E05               	addlw	5
  4172  1095  0084               	movwf	4
  4173  1096  0800               	movf	0,w
  4174  1097  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4175                           
  4176                           ;menu.c: 592:         Write_EEprom(limit1->param1,0x01);
  4177  109C  01A6               	clrf	Write_EEprom@adress
  4178  109D  0AA6               	incf	Write_EEprom@adress,f
  4179  109E  082B               	movf	Write_Limit_To_EEprom@limit1,w
  4180  109F  3E06               	addlw	6
  4181  10A0  0084               	movwf	4
  4182  10A1  0800               	movf	0,w
  4183  10A2  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4184                           
  4185                           ;menu.c: 593:         Write_EEprom(limit2->param, 0x02);
  4186  10A7  3002               	movlw	2
  4187  10A8  00AA               	movwf	??_Write_Limit_To_EEprom
  4188  10A9  082A               	movf	??_Write_Limit_To_EEprom,w
  4189  10AA  00A6               	movwf	Write_EEprom@adress
  4190  10AB  0828               	movf	Write_Limit_To_EEprom@limit2,w
  4191  10AC  3E05               	addlw	5
  4192  10AD  0084               	movwf	4
  4193  10AE  0800               	movf	0,w
  4194  10AF  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4195                           
  4196                           ;menu.c: 594:         Write_EEprom(limit2->param1, 0x03);
  4197  10B4  3003               	movlw	3
  4198  10B5  00AA               	movwf	??_Write_Limit_To_EEprom
  4199  10B6  082A               	movf	??_Write_Limit_To_EEprom,w
  4200  10B7  00A6               	movwf	Write_EEprom@adress
  4201  10B8  0828               	movf	Write_Limit_To_EEprom@limit2,w
  4202  10B9  3E06               	addlw	6
  4203  10BA  0084               	movwf	4
  4204  10BB  0800               	movf	0,w
  4205  10BC  160A  158A  20E6   	fcall	_Write_EEprom
  4206                           
  4207                           ;menu.c: 596:     }else if(limit_type==1)
  4208  10BF  0008               	return
  4209  10C0                     l7384:	
  4210  10C0  0329               	decf	Write_Limit_To_EEprom@limit_type,w
  4211  10C1  1D03               	btfss	3,2
  4212  10C2  0008               	return
  4213                           
  4214                           ;menu.c: 597:     {;menu.c: 598:         Write_EEprom(limit1->param,0x04);
  4215  10C3  3004               	movlw	4
  4216  10C4  00AA               	movwf	??_Write_Limit_To_EEprom
  4217  10C5  082A               	movf	??_Write_Limit_To_EEprom,w
  4218  10C6  00A6               	movwf	Write_EEprom@adress
  4219  10C7  082B               	movf	Write_Limit_To_EEprom@limit1,w
  4220  10C8  3E05               	addlw	5
  4221  10C9  0084               	movwf	4
  4222  10CA  0800               	movf	0,w
  4223  10CB  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4224                           
  4225                           ;menu.c: 599:         Write_EEprom(limit1->param1,0x05);
  4226  10D0  3005               	movlw	5
  4227  10D1  00AA               	movwf	??_Write_Limit_To_EEprom
  4228  10D2  082A               	movf	??_Write_Limit_To_EEprom,w
  4229  10D3  00A6               	movwf	Write_EEprom@adress
  4230  10D4  082B               	movf	Write_Limit_To_EEprom@limit1,w
  4231  10D5  3E06               	addlw	6
  4232  10D6  0084               	movwf	4
  4233  10D7  0800               	movf	0,w
  4234  10D8  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4235                           
  4236                           ;menu.c: 600:         Write_EEprom(limit2->param,0x06);
  4237  10DD  3006               	movlw	6
  4238  10DE  00AA               	movwf	??_Write_Limit_To_EEprom
  4239  10DF  082A               	movf	??_Write_Limit_To_EEprom,w
  4240  10E0  00A6               	movwf	Write_EEprom@adress
  4241  10E1  0828               	movf	Write_Limit_To_EEprom@limit2,w
  4242  10E2  3E05               	addlw	5
  4243  10E3  0084               	movwf	4
  4244  10E4  0800               	movf	0,w
  4245  10E5  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4246                           
  4247                           ;menu.c: 601:         Write_EEprom(limit2->param1,0x07);
  4248  10EA  3007               	movlw	7
  4249  10EB  00AA               	movwf	??_Write_Limit_To_EEprom
  4250  10EC  082A               	movf	??_Write_Limit_To_EEprom,w
  4251  10ED  00A6               	movwf	Write_EEprom@adress
  4252  10EE  0828               	movf	Write_Limit_To_EEprom@limit2,w
  4253  10EF  3E06               	addlw	6
  4254  10F0  0084               	movwf	4
  4255  10F1  0800               	movf	0,w
  4256  10F2  160A  158A  20E6   	fcall	_Write_EEprom
  4257  10F5  0008               	return
  4258  10F6                     __end_of_Write_Limit_To_EEprom:	
  4259                           
  4260                           	psect	text6
  4261  18E6                     __ptext6:	
  4262 ;; *************** function _Write_EEprom *****************
  4263 ;; Defined at:
  4264 ;;		line 11 in file "flash.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  data            1    wreg     char 
  4267 ;;  adress          1    6[BANK0 ] unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  data            1    7[BANK0 ] char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		wreg
  4274 ;; Tracked objects:
  4275 ;;		On entry : B00/800
  4276 ;;		On exit  : B00/800
  4277 ;;		Unchanged: 800/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4279 ;;      Params:         0       1       0       0       0
  4280 ;;      Locals:         0       1       0       0       0
  4281 ;;      Temps:          0       0       0       0       0
  4282 ;;      Totals:         0       2       0       0       0
  4283 ;;Total ram usage:        2 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    4
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_Write_Limit_To_EEprom
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function _Write_EEprom
  4295  18E6                     _Write_EEprom:	
  4296                           
  4297                           ;incstack = 0
  4298                           ; Regs used in _Write_EEprom: [wreg]
  4299                           ;Write_EEprom@data stored from wreg
  4300  18E6  00A7               	movwf	Write_EEprom@data
  4301                           
  4302                           ;flash.c: 11: void Write_EEprom(signed char data, unsigned char adress);flash.c: 12: {;f
      +                          lash.c: 13:     EEADR=adress;
  4303  18E7  0826               	movf	Write_EEprom@adress,w
  4304  18E8  1703               	bsf	3,6	;RP1=1, select bank2
  4305  18E9  008D               	movwf	13	;volatile
  4306                           
  4307                           ;flash.c: 14:     EEDAT=data;
  4308  18EA  1303               	bcf	3,6	;RP1=0, select bank0
  4309  18EB  0827               	movf	Write_EEprom@data,w
  4310  18EC  1703               	bsf	3,6	;RP1=1, select bank2
  4311  18ED  008C               	movwf	12	;volatile
  4312                           
  4313                           ;flash.c: 15:     INTCONbits.GIE=0;
  4314  18EE  138B               	bcf	11,7	;volatile
  4315                           
  4316                           ;flash.c: 16:     WREN=1;
  4317  18EF  1683               	bsf	3,5	;RP0=1, select bank3
  4318  18F0  150C               	bsf	12,2	;volsfr
  4319                           
  4320                           ;flash.c: 17:     EECON2=0x55;
  4321  18F1  3055               	movlw	85
  4322  18F2  008D               	movwf	13	;volsfr
  4323                           
  4324                           ;flash.c: 18:     EECON2=0xAA;
  4325  18F3  30AA               	movlw	170
  4326  18F4  008D               	movwf	13	;volsfr
  4327                           
  4328                           ;flash.c: 19:     WR=1;
  4329  18F5  148C               	bsf	12,1	;volsfr
  4330  18F6                     l870:	
  4331                           ;flash.c: 20:     while(!EEIF){};
  4332                           
  4333  18F6  1283               	bcf	3,5	;RP0=0, select bank0
  4334  18F7  1303               	bcf	3,6	;RP1=0, select bank0
  4335  18F8  1E0D               	btfss	13,4	;volatile
  4336  18F9  28F6               	goto	l870
  4337                           
  4338                           ;flash.c: 21:     WREN=0;
  4339  18FA  1683               	bsf	3,5	;RP0=1, select bank3
  4340  18FB  1703               	bsf	3,6	;RP1=1, select bank3
  4341  18FC  110C               	bcf	12,2	;volsfr
  4342                           
  4343                           ;flash.c: 22:     EEIF=0;
  4344  18FD  1283               	bcf	3,5	;RP0=0, select bank0
  4345  18FE  1303               	bcf	3,6	;RP1=0, select bank0
  4346  18FF  120D               	bcf	13,4	;volatile
  4347                           
  4348                           ;flash.c: 23:     INTCONbits.GIE=1;
  4349  1900  178B               	bsf	11,7	;volatile
  4350  1901  0008               	return
  4351  1902                     __end_of_Write_EEprom:	
  4352                           
  4353                           	psect	text7
  4354  0843                     __ptext7:	
  4355 ;; *************** function _PCF8583_Set_Date_Time *****************
  4356 ;; Defined at:
  4357 ;;		line 105 in file "pcf8583.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;  time_struct_    1    wreg     PTR struct .
  4360 ;;		 -> Menu_Set_Time@time(7), 
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;  time_struct_    1   24[BANK0 ] PTR struct .
  4363 ;;		 -> Menu_Set_Time@time(7), 
  4364 ;;  bcd_mon         1   23[BANK0 ] unsigned char 
  4365 ;;  bcd_day         1   22[BANK0 ] unsigned char 
  4366 ;;  bcd_hrs         1   21[BANK0 ] unsigned char 
  4367 ;;  bcd_min         1   20[BANK0 ] unsigned char 
  4368 ;;  bcd_sec         1   19[BANK0 ] unsigned char 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 300/800
  4375 ;;		On exit  : 300/100
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4378 ;;      Params:         0       0       0       0       0
  4379 ;;      Locals:         0       6       0       0       0
  4380 ;;      Temps:          0       2       0       0       0
  4381 ;;      Totals:         0       8       0       0       0
  4382 ;;Total ram usage:        8 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    7
  4385 ;; This function calls:
  4386 ;;		_DEC_2_BCD
  4387 ;;		_I2C_Master_Start
  4388 ;;		_I2C_Master_Stop
  4389 ;;		_I2C_Master_Write
  4390 ;;		_PCF8583_Write_Byte
  4391 ;; This function is called by:
  4392 ;;		_Menu_Set_Time
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           
  4397                           ;psect for function _PCF8583_Set_Date_Time
  4398  0843                     _PCF8583_Set_Date_Time:	
  4399                           
  4400                           ;incstack = 0
  4401 ;; hardware stack exceeded
  4402                           ; Regs used in _PCF8583_Set_Date_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4403                           ;PCF8583_Set_Date_Time@time_struct_ptr stored from wreg
  4404  0843  00B8               	movwf	PCF8583_Set_Date_Time@time_struct_ptr
  4405                           
  4406                           ;pcf8583.c: 105: void PCF8583_Set_Date_Time(TimeStruct *time_struct_ptr);pcf8583.c: 106:
      +                           {;pcf8583.c: 107:  unsigned char bcd_sec;;pcf8583.c: 108:  unsigned char bcd_min;;pcf85
      +                          83.c: 109:  unsigned char bcd_hrs;;pcf8583.c: 110:  unsigned char bcd_day;;pcf8583.c: 11
      +                          1:  unsigned char bcd_mon;;pcf8583.c: 113:  INTCONbits.GIE=0;
  4407  0844  138B               	bcf	11,7	;volatile
  4408                           
  4409                           ;pcf8583.c: 115:  bcd_sec = DEC_2_BCD(time_struct_ptr->seconds);
  4410  0845  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  4411  0846  0084               	movwf	4
  4412  0847  1383               	bcf	3,7	;select IRP bank0
  4413  0848  0800               	movf	0,w
  4414  0849  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  4415  084E  00B1               	movwf	??_PCF8583_Set_Date_Time
  4416  084F  0831               	movf	??_PCF8583_Set_Date_Time,w
  4417  0850  00B3               	movwf	PCF8583_Set_Date_Time@bcd_sec
  4418                           
  4419                           ;pcf8583.c: 116:  bcd_min = DEC_2_BCD(time_struct_ptr->minutes);
  4420  0851  0A38               	incf	PCF8583_Set_Date_Time@time_struct_ptr,w
  4421  0852  0084               	movwf	4
  4422  0853  1383               	bcf	3,7	;select IRP bank0
  4423  0854  0800               	movf	0,w
  4424  0855  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  4425  085A  00B1               	movwf	??_PCF8583_Set_Date_Time
  4426  085B  0831               	movf	??_PCF8583_Set_Date_Time,w
  4427  085C  00B4               	movwf	PCF8583_Set_Date_Time@bcd_min
  4428                           
  4429                           ;pcf8583.c: 117:  bcd_hrs = DEC_2_BCD(time_struct_ptr->hours);
  4430  085D  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  4431  085E  3E02               	addlw	2
  4432  085F  0084               	movwf	4
  4433  0860  1383               	bcf	3,7	;select IRP bank0
  4434  0861  0800               	movf	0,w
  4435  0862  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  4436  0867  00B1               	movwf	??_PCF8583_Set_Date_Time
  4437  0868  0831               	movf	??_PCF8583_Set_Date_Time,w
  4438  0869  00B5               	movwf	PCF8583_Set_Date_Time@bcd_hrs
  4439                           
  4440                           ;pcf8583.c: 118:  bcd_day = DEC_2_BCD(time_struct_ptr->day) | (time_struct_ptr->year<<6)
      +                          ;
  4441  086A  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  4442  086B  3E05               	addlw	5
  4443  086C  0084               	movwf	4
  4444  086D  1383               	bcf	3,7	;select IRP bank0
  4445  086E  0800               	movf	0,w
  4446  086F  00B1               	movwf	??_PCF8583_Set_Date_Time
  4447  0870  3006               	movlw	6
  4448  0871                     u7095:	
  4449  0871  1003               	clrc
  4450  0872  0DB1               	rlf	??_PCF8583_Set_Date_Time,f
  4451  0873  3EFF               	addlw	-1
  4452  0874  1D03               	skipz
  4453  0875  2871               	goto	u7095
  4454  0876  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  4455  0877  3E03               	addlw	3
  4456  0878  0084               	movwf	4
  4457  0879  0800               	movf	0,w
  4458  087A  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  4459  087F  0431               	iorwf	??_PCF8583_Set_Date_Time,w
  4460  0880  00B2               	movwf	??_PCF8583_Set_Date_Time+1
  4461  0881  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  4462  0882  00B6               	movwf	PCF8583_Set_Date_Time@bcd_day
  4463                           
  4464                           ;pcf8583.c: 119:  bcd_mon = DEC_2_BCD(time_struct_ptr->month & 0b00011111) |
  4465  0883  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  4466  0884  3E06               	addlw	6
  4467  0885  0084               	movwf	4
  4468  0886  1383               	bcf	3,7	;select IRP bank0
  4469  0887  0800               	movf	0,w
  4470  0888  00B1               	movwf	??_PCF8583_Set_Date_Time
  4471  0889  3005               	movlw	5
  4472  088A                     u7105:	
  4473  088A  1003               	clrc
  4474  088B  0DB1               	rlf	??_PCF8583_Set_Date_Time,f
  4475  088C  3EFF               	addlw	-1
  4476  088D  1D03               	skipz
  4477  088E  288A               	goto	u7105
  4478  088F  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  4479  0890  3E04               	addlw	4
  4480  0891  0084               	movwf	4
  4481  0892  0800               	movf	0,w
  4482  0893  391F               	andlw	31
  4483  0894  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  4484  0899  0431               	iorwf	??_PCF8583_Set_Date_Time,w
  4485  089A  00B2               	movwf	??_PCF8583_Set_Date_Time+1
  4486  089B  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  4487  089C  00B7               	movwf	PCF8583_Set_Date_Time@bcd_mon
  4488                           
  4489                           ;pcf8583.c: 122:  PCF8583_Write_Byte(0x00, 0x80);
  4490  089D  3080               	movlw	128
  4491  089E  00B1               	movwf	??_PCF8583_Set_Date_Time
  4492  089F  0831               	movf	??_PCF8583_Set_Date_Time,w
  4493  08A0  00A8               	movwf	PCF8583_Write_Byte@data
  4494  08A1  3000               	movlw	0
  4495  08A2  160A  158A  2245  120A  158A  	fcall	_PCF8583_Write_Byte
  4496                           
  4497                           ;pcf8583.c: 124:  I2C_Master_Start();
  4498  08A7  160A  158A  205D  120A  158A  	fcall	_I2C_Master_Start
  4499                           
  4500                           ;pcf8583.c: 125:  I2C_Master_Write(0xA0);
  4501  08AC  30A0               	movlw	160
  4502  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  4503  08AE  00A6               	movwf	I2C_Master_Write@data
  4504  08AF  3000               	movlw	0
  4505  08B0  00A7               	movwf	I2C_Master_Write@data+1
  4506  08B1  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  4507                           
  4508                           ;pcf8583.c: 126:  I2C_Master_Write(0x02);
  4509  08B6  3002               	movlw	2
  4510  08B7  00A6               	movwf	I2C_Master_Write@data
  4511  08B8  3000               	movlw	0
  4512  08B9  00A7               	movwf	I2C_Master_Write@data+1
  4513  08BA  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  4514                           
  4515                           ;pcf8583.c: 127:  I2C_Master_Write(bcd_sec);
  4516  08BF  0833               	movf	PCF8583_Set_Date_Time@bcd_sec,w
  4517  08C0  00B1               	movwf	??_PCF8583_Set_Date_Time
  4518  08C1  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  4519  08C2  0831               	movf	??_PCF8583_Set_Date_Time,w
  4520  08C3  00A6               	movwf	I2C_Master_Write@data
  4521  08C4  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  4522  08C5  00A7               	movwf	I2C_Master_Write@data+1
  4523  08C6  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  4524                           
  4525                           ;pcf8583.c: 128:  I2C_Master_Write(bcd_min);
  4526  08CB  0834               	movf	PCF8583_Set_Date_Time@bcd_min,w
  4527  08CC  00B1               	movwf	??_PCF8583_Set_Date_Time
  4528  08CD  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  4529  08CE  0831               	movf	??_PCF8583_Set_Date_Time,w
  4530  08CF  00A6               	movwf	I2C_Master_Write@data
  4531  08D0  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  4532  08D1  00A7               	movwf	I2C_Master_Write@data+1
  4533  08D2  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  4534                           
  4535                           ;pcf8583.c: 129:  I2C_Master_Write(bcd_hrs);
  4536  08D7  0835               	movf	PCF8583_Set_Date_Time@bcd_hrs,w
  4537  08D8  00B1               	movwf	??_PCF8583_Set_Date_Time
  4538  08D9  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  4539  08DA  0831               	movf	??_PCF8583_Set_Date_Time,w
  4540  08DB  00A6               	movwf	I2C_Master_Write@data
  4541  08DC  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  4542  08DD  00A7               	movwf	I2C_Master_Write@data+1
  4543  08DE  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  4544                           
  4545                           ;pcf8583.c: 130:  I2C_Master_Write(bcd_day);
  4546  08E3  0836               	movf	PCF8583_Set_Date_Time@bcd_day,w
  4547  08E4  00B1               	movwf	??_PCF8583_Set_Date_Time
  4548  08E5  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  4549  08E6  0831               	movf	??_PCF8583_Set_Date_Time,w
  4550  08E7  00A6               	movwf	I2C_Master_Write@data
  4551  08E8  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  4552  08E9  00A7               	movwf	I2C_Master_Write@data+1
  4553  08EA  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  4554                           
  4555                           ;pcf8583.c: 131:  I2C_Master_Write(bcd_mon);
  4556  08EF  0837               	movf	PCF8583_Set_Date_Time@bcd_mon,w
  4557  08F0  00B1               	movwf	??_PCF8583_Set_Date_Time
  4558  08F1  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  4559  08F2  0831               	movf	??_PCF8583_Set_Date_Time,w
  4560  08F3  00A6               	movwf	I2C_Master_Write@data
  4561  08F4  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  4562  08F5  00A7               	movwf	I2C_Master_Write@data+1
  4563  08F6  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  4564                           
  4565                           ;pcf8583.c: 132:  I2C_Master_Stop();
  4566  08FB  160A  158A  2062  120A  158A  	fcall	_I2C_Master_Stop
  4567                           
  4568                           ;pcf8583.c: 134:  PCF8583_Write_Byte(0x10,time_struct_ptr->year);
  4569  0900  1283               	bcf	3,5	;RP0=0, select bank0
  4570  0901  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  4571  0902  3E05               	addlw	5
  4572  0903  0084               	movwf	4
  4573  0904  1383               	bcf	3,7	;select IRP bank0
  4574  0905  0800               	movf	0,w
  4575  0906  00B1               	movwf	??_PCF8583_Set_Date_Time
  4576  0907  0831               	movf	??_PCF8583_Set_Date_Time,w
  4577  0908  00A8               	movwf	PCF8583_Write_Byte@data
  4578  0909  3010               	movlw	16
  4579  090A  160A  158A  2245  120A  158A  	fcall	_PCF8583_Write_Byte
  4580                           
  4581                           ;pcf8583.c: 135:  PCF8583_Write_Byte(0x00, 0x00);
  4582  090F  1283               	bcf	3,5	;RP0=0, select bank0
  4583  0910  01A8               	clrf	PCF8583_Write_Byte@data
  4584  0911  3000               	movlw	0
  4585  0912  160A  158A  2245   	fcall	_PCF8583_Write_Byte
  4586                           
  4587                           ;pcf8583.c: 137:     INTCONbits.GIE=1;
  4588  0915  178B               	bsf	11,7	;volatile
  4589  0916  0008               	return
  4590  0917                     __end_of_PCF8583_Set_Date_Time:	
  4591                           
  4592                           	psect	text8
  4593  18CA                     __ptext8:	
  4594 ;; *************** function _DEC_2_BCD *****************
  4595 ;; Defined at:
  4596 ;;		line 30 in file "pcf8583.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  dec             1    wreg     unsigned char 
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  dec             1   16[BANK0 ] unsigned char 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      unsigned char 
  4603 ;; Registers used:
  4604 ;;		wreg, status,2, status,0, pclath, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : B00/0
  4607 ;;		On exit  : 300/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4610 ;;      Params:         0       0       0       0       0
  4611 ;;      Locals:         0       1       0       0       0
  4612 ;;      Temps:          0       3       0       0       0
  4613 ;;      Totals:         0       4       0       0       0
  4614 ;;Total ram usage:        4 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    5
  4617 ;; This function calls:
  4618 ;;		___lbdiv
  4619 ;;		___lbmod
  4620 ;; This function is called by:
  4621 ;;		_PCF8583_Set_Date_Time
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function _DEC_2_BCD
  4627  18CA                     _DEC_2_BCD:	
  4628                           
  4629                           ;incstack = 0
  4630 ;; hardware stack exceeded
  4631                           ; Regs used in _DEC_2_BCD: [wreg+status,2+status,0+pclath+cstack]
  4632                           ;DEC_2_BCD@dec stored from wreg
  4633  18CA  00B0               	movwf	DEC_2_BCD@dec
  4634                           
  4635                           ;pcf8583.c: 30: unsigned char DEC_2_BCD(unsigned char dec);pcf8583.c: 31: {;pcf8583.c: 3
      +                          2:     return (((dec/10)<<4)+(dec%10));
  4636  18CB  300A               	movlw	10
  4637  18CC  00AD               	movwf	??_DEC_2_BCD
  4638  18CD  082D               	movf	??_DEC_2_BCD,w
  4639  18CE  00A6               	movwf	___lbdiv@divisor
  4640  18CF  0830               	movf	DEC_2_BCD@dec,w
  4641  18D0  160A  158A  2163  160A  158A  	fcall	___lbdiv
  4642  18D5  00AE               	movwf	??_DEC_2_BCD+1
  4643  18D6  3004               	movlw	4
  4644  18D7                     u6495:	
  4645  18D7  1003               	clrc
  4646  18D8  0DAE               	rlf	??_DEC_2_BCD+1,f
  4647  18D9  3EFF               	addlw	-1
  4648  18DA  1D03               	skipz
  4649  18DB  28D7               	goto	u6495
  4650  18DC  300A               	movlw	10
  4651  18DD  00AF               	movwf	??_DEC_2_BCD+2
  4652  18DE  082F               	movf	??_DEC_2_BCD+2,w
  4653  18DF  00A6               	movwf	___lbmod@divisor
  4654  18E0  0830               	movf	DEC_2_BCD@dec,w
  4655  18E1  160A  158A  21A6   	fcall	___lbmod
  4656  18E4  072E               	addwf	??_DEC_2_BCD+1,w
  4657  18E5  0008               	return
  4658  18E6                     __end_of_DEC_2_BCD:	
  4659                           
  4660                           	psect	text9
  4661  003A                     __ptext9:	
  4662 ;; *************** function _Menu_Set_Param_Time_Limit *****************
  4663 ;; Defined at:
  4664 ;;		line 401 in file "menu.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;  menu            2   22[BANK0 ] PTR struct MenuParamStru
  4667 ;;		 -> Menu_Set_Time@current_menu(8), NULL(0), Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_work_day_1(8), 
  4668 ;;		 -> Menu_Init@time_limit_free_day_2(8), Menu_Init@time_limit_free_day_1(8), Menu_Init@year(8), Menu_Init@day_month(8
      +), 
  4669 ;;		 -> Menu_Init@hours_minutes(8), 
  4670 ;;  check_button    1   24[BANK0 ] unsigned char 
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;		None
  4673 ;; Return value:  Size  Location     Type
  4674 ;;                  1    wreg      void 
  4675 ;; Registers used:
  4676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4677 ;; Tracked objects:
  4678 ;;		On entry : 300/800
  4679 ;;		On exit  : 300/0
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4682 ;;      Params:         0       3       0       0       0
  4683 ;;      Locals:         0       0       0       0       0
  4684 ;;      Temps:          0      13       0       0       0
  4685 ;;      Totals:         0      16       0       0       0
  4686 ;;Total ram usage:       16 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; Hardware stack levels required when called:    5
  4689 ;; This function calls:
  4690 ;;		___awdiv
  4691 ;;		___awmod
  4692 ;;		___lbdiv
  4693 ;;		___lbmod
  4694 ;; This function is called by:
  4695 ;;		_Menu_Set_Time
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _Menu_Set_Param_Time_Limit
  4701  003A                     _Menu_Set_Param_Time_Limit:	
  4702                           
  4703                           ;menu.c: 401: void Menu_Set_Param_Time_Limit(MenuParamStruct *menu,;menu.c: 402:        
      +                                                  unsigned char check_button);menu.c: 403: {;menu.c: 404:     stat
      +                          ic unsigned char flag=0, change_digit=0;;menu.c: 406:     if(flag==0 && g_generic_timer=
      +                          =0)
  4704                           
  4705                           ;incstack = 0
  4706                           ; Regs used in _Menu_Set_Param_Time_Limit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4707  003A  1683               	bsf	3,5	;RP0=1, select bank1
  4708  003B  0824               	movf	Menu_Set_Param_Time_Limit@flag^(0+128),w
  4709  003C  1D03               	btfss	3,2
  4710  003D  28CF               	goto	l7276
  4711  003E  1283               	bcf	3,5	;RP0=0, select bank0
  4712  003F  0859               	movf	_g_generic_timer,w	;volatile
  4713  0040  045A               	iorwf	_g_generic_timer+1,w	;volatile
  4714  0041  1D03               	btfss	3,2
  4715  0042  28CF               	goto	l7276
  4716                           
  4717                           ;menu.c: 407:     {;menu.c: 408:         g_generic_timer=2000;
  4718  0043  30D0               	movlw	208
  4719  0044  00D9               	movwf	_g_generic_timer	;volatile
  4720  0045  3007               	movlw	7
  4721  0046  00DA               	movwf	_g_generic_timer+1	;volatile
  4722                           
  4723                           ;menu.c: 409:         flag=1;
  4724  0047  1683               	bsf	3,5	;RP0=1, select bank1
  4725  0048  01A4               	clrf	Menu_Set_Param_Time_Limit@flag^(0+128)
  4726  0049  0AA4               	incf	Menu_Set_Param_Time_Limit@flag^(0+128),f
  4727                           
  4728                           ;menu.c: 411:         g_display_text[0]=(menu->param)/10;
  4729  004A  300A               	movlw	10
  4730  004B  1283               	bcf	3,5	;RP0=0, select bank0
  4731  004C  00AD               	movwf	___awdiv@divisor
  4732  004D  3000               	movlw	0
  4733  004E  00AE               	movwf	___awdiv@divisor+1
  4734  004F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  4735  0050  3E05               	addlw	5
  4736  0051  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4737  0052  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4738  0053  1803               	skipnc
  4739  0054  3E01               	addlw	1
  4740  0055  3E00               	addlw	0
  4741  0056  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  4742  0057  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4743  0058  0084               	movwf	4
  4744  0059  1783               	bsf	3,7
  4745  005A  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4746  005B  1383               	bcf	3,7
  4747  005C  0800               	movf	0,w
  4748  005D  00AF               	movwf	___awdiv@dividend
  4749  005E  01B0               	clrf	___awdiv@dividend+1
  4750  005F  1BAF               	btfsc	___awdiv@dividend,7
  4751  0060  03B0               	decf	___awdiv@dividend+1,f
  4752  0061  160A  158A  2629  120A  118A  	fcall	___awdiv
  4753  0066  082D               	movf	?___awdiv,w
  4754  0067  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  4755  0068  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4756  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4757  006A  00CC               	movwf	_g_display_text^(0+128)
  4758                           
  4759                           ;menu.c: 412:         g_display_text[1]=(menu->param)%10;
  4760  006B  300A               	movlw	10
  4761  006C  1283               	bcf	3,5	;RP0=0, select bank0
  4762  006D  00A6               	movwf	___awmod@divisor
  4763  006E  3000               	movlw	0
  4764  006F  00A7               	movwf	___awmod@divisor+1
  4765  0070  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  4766  0071  3E05               	addlw	5
  4767  0072  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4768  0073  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4769  0074  1803               	skipnc
  4770  0075  3E01               	addlw	1
  4771  0076  3E00               	addlw	0
  4772  0077  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  4773  0078  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4774  0079  0084               	movwf	4
  4775  007A  1783               	bsf	3,7
  4776  007B  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4777  007C  1383               	bcf	3,7
  4778  007D  0800               	movf	0,w
  4779  007E  00A8               	movwf	___awmod@dividend
  4780  007F  01A9               	clrf	___awmod@dividend+1
  4781  0080  1BA8               	btfsc	___awmod@dividend,7
  4782  0081  03A9               	decf	___awmod@dividend+1,f
  4783  0082  160A  158A  253D  120A  118A  	fcall	___awmod
  4784  0087  0826               	movf	?___awmod,w
  4785  0088  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  4786  0089  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4787  008A  1683               	bsf	3,5	;RP0=1, select bank1
  4788  008B  00CD               	movwf	(_g_display_text^(0+128)+1)
  4789                           
  4790                           ;menu.c: 413:         g_display_text[2]=(menu->param1)/10;
  4791  008C  300A               	movlw	10
  4792  008D  1283               	bcf	3,5	;RP0=0, select bank0
  4793  008E  00AD               	movwf	___awdiv@divisor
  4794  008F  3000               	movlw	0
  4795  0090  00AE               	movwf	___awdiv@divisor+1
  4796  0091  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  4797  0092  3E06               	addlw	6
  4798  0093  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4799  0094  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4800  0095  1803               	skipnc
  4801  0096  3E01               	addlw	1
  4802  0097  3E00               	addlw	0
  4803  0098  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  4804  0099  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4805  009A  0084               	movwf	4
  4806  009B  1783               	bsf	3,7
  4807  009C  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4808  009D  1383               	bcf	3,7
  4809  009E  0800               	movf	0,w
  4810  009F  00AF               	movwf	___awdiv@dividend
  4811  00A0  01B0               	clrf	___awdiv@dividend+1
  4812  00A1  1BAF               	btfsc	___awdiv@dividend,7
  4813  00A2  03B0               	decf	___awdiv@dividend+1,f
  4814  00A3  160A  158A  2629  120A  118A  	fcall	___awdiv
  4815  00A8  082D               	movf	?___awdiv,w
  4816  00A9  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  4817  00AA  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4818  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  4819  00AC  00CE               	movwf	(_g_display_text^(0+128)+2)
  4820                           
  4821                           ;menu.c: 414:         g_display_text[3]=(menu->param1)%10;
  4822  00AD  300A               	movlw	10
  4823  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  4824  00AF  00A6               	movwf	___awmod@divisor
  4825  00B0  3000               	movlw	0
  4826  00B1  00A7               	movwf	___awmod@divisor+1
  4827  00B2  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  4828  00B3  3E06               	addlw	6
  4829  00B4  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4830  00B5  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4831  00B6  1803               	skipnc
  4832  00B7  3E01               	addlw	1
  4833  00B8  3E00               	addlw	0
  4834  00B9  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  4835  00BA  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4836  00BB  0084               	movwf	4
  4837  00BC  1783               	bsf	3,7
  4838  00BD  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4839  00BE  1383               	bcf	3,7
  4840  00BF  0800               	movf	0,w
  4841  00C0  00A8               	movwf	___awmod@dividend
  4842  00C1  01A9               	clrf	___awmod@dividend+1
  4843  00C2  1BA8               	btfsc	___awmod@dividend,7
  4844  00C3  03A9               	decf	___awmod@dividend+1,f
  4845  00C4  160A  158A  253D  120A  118A  	fcall	___awmod
  4846  00C9  0826               	movf	?___awmod,w
  4847  00CA  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  4848  00CB  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4849  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  4850  00CD  00CF               	movwf	(_g_display_text^(0+128)+3)
  4851                           
  4852                           ;menu.c: 416:     }else if(g_generic_timer==0)
  4853  00CE  28E3               	goto	l7284
  4854  00CF                     l7276:	
  4855  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  4856  00D0  0859               	movf	_g_generic_timer,w	;volatile
  4857  00D1  045A               	iorwf	_g_generic_timer+1,w	;volatile
  4858  00D2  1D03               	btfss	3,2
  4859  00D3  28E3               	goto	l7284
  4860                           
  4861                           ;menu.c: 417:     {;menu.c: 418:         g_display_text[change_digit]='*';
  4862  00D4  302A               	movlw	42
  4863  00D5  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4864  00D6  085B               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  4865  00D7  3ECC               	addlw	(low (_g_display_text| 0))& (0+255)
  4866  00D8  0084               	movwf	4
  4867  00D9  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4868  00DA  1383               	bcf	3,7	;select IRP bank1
  4869  00DB  0080               	movwf	0
  4870                           
  4871                           ;menu.c: 419:         flag=0;
  4872  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  4873  00DD  01A4               	clrf	Menu_Set_Param_Time_Limit@flag^(0+128)
  4874                           
  4875                           ;menu.c: 420:         g_generic_timer=400;
  4876  00DE  3090               	movlw	144
  4877  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  4878  00E0  00D9               	movwf	_g_generic_timer	;volatile
  4879  00E1  3001               	movlw	1
  4880  00E2  00DA               	movwf	_g_generic_timer+1	;volatile
  4881  00E3                     l7284:	
  4882                           
  4883                           ;menu.c: 423:      if(check_button==k_set_right_short)
  4884  00E3  3006               	movlw	6
  4885  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  4886  00E5  0638               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  4887  00E6  1D03               	btfss	3,2
  4888  00E7  297E               	goto	l7306
  4889                           
  4890                           ;menu.c: 424:     {;menu.c: 425:         change_digit++;
  4891  00E8  3001               	movlw	1
  4892  00E9  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4893  00EA  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4894  00EB  07DB               	addwf	Menu_Set_Param_Time_Limit@change_digit,f
  4895                           
  4896                           ;menu.c: 427:         if(change_digit>3)
  4897  00EC  3004               	movlw	4
  4898  00ED  025B               	subwf	Menu_Set_Param_Time_Limit@change_digit,w
  4899  00EE  1C03               	skipc
  4900  00EF  2912               	goto	l7294
  4901                           
  4902                           ;menu.c: 428:         {;menu.c: 429:             change_digit=0;
  4903  00F0  01DB               	clrf	Menu_Set_Param_Time_Limit@change_digit
  4904                           
  4905                           ;menu.c: 431:             g_display_text[3]=(menu->param1)%10;
  4906  00F1  300A               	movlw	10
  4907  00F2  00A6               	movwf	___awmod@divisor
  4908  00F3  3000               	movlw	0
  4909  00F4  00A7               	movwf	___awmod@divisor+1
  4910  00F5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  4911  00F6  3E06               	addlw	6
  4912  00F7  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4913  00F8  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4914  00F9  1803               	skipnc
  4915  00FA  3E01               	addlw	1
  4916  00FB  3E00               	addlw	0
  4917  00FC  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  4918  00FD  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4919  00FE  0084               	movwf	4
  4920  00FF  1783               	bsf	3,7
  4921  0100  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4922  0101  1383               	bcf	3,7
  4923  0102  0800               	movf	0,w
  4924  0103  00A8               	movwf	___awmod@dividend
  4925  0104  01A9               	clrf	___awmod@dividend+1
  4926  0105  1BA8               	btfsc	___awmod@dividend,7
  4927  0106  03A9               	decf	___awmod@dividend+1,f
  4928  0107  160A  158A  253D  120A  118A  	fcall	___awmod
  4929  010C  0826               	movf	?___awmod,w
  4930  010D  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  4931  010E  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4932  010F  1683               	bsf	3,5	;RP0=1, select bank1
  4933  0110  00CF               	movwf	(_g_display_text^(0+128)+3)
  4934                           
  4935                           ;menu.c: 433:         }else if(change_digit==2)
  4936  0111  297E               	goto	l7306
  4937  0112                     l7294:	
  4938  0112  3002               	movlw	2
  4939  0113  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  4940  0114  1D03               	btfss	3,2
  4941  0115  2937               	goto	l7298
  4942                           
  4943                           ;menu.c: 434:         {;menu.c: 435:             g_display_text[2]=(menu->param1)/10;
  4944  0116  300A               	movlw	10
  4945  0117  00AD               	movwf	___awdiv@divisor
  4946  0118  3000               	movlw	0
  4947  0119  00AE               	movwf	___awdiv@divisor+1
  4948  011A  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  4949  011B  3E06               	addlw	6
  4950  011C  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4951  011D  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4952  011E  1803               	skipnc
  4953  011F  3E01               	addlw	1
  4954  0120  3E00               	addlw	0
  4955  0121  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  4956  0122  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4957  0123  0084               	movwf	4
  4958  0124  1783               	bsf	3,7
  4959  0125  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4960  0126  1383               	bcf	3,7
  4961  0127  0800               	movf	0,w
  4962  0128  00AF               	movwf	___awdiv@dividend
  4963  0129  01B0               	clrf	___awdiv@dividend+1
  4964  012A  1BAF               	btfsc	___awdiv@dividend,7
  4965  012B  03B0               	decf	___awdiv@dividend+1,f
  4966  012C  160A  158A  2629  120A  118A  	fcall	___awdiv
  4967  0131  082D               	movf	?___awdiv,w
  4968  0132  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  4969  0133  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4970  0134  1683               	bsf	3,5	;RP0=1, select bank1
  4971  0135  00CE               	movwf	(_g_display_text^(0+128)+2)
  4972                           
  4973                           ;menu.c: 437:         }else if(change_digit==1)
  4974  0136  297E               	goto	l7306
  4975  0137                     l7298:	
  4976  0137  035B               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  4977  0138  1D03               	btfss	3,2
  4978  0139  295B               	goto	l7302
  4979                           
  4980                           ;menu.c: 438:         {;menu.c: 439:             g_display_text[1]=(menu->param)%10;
  4981  013A  300A               	movlw	10
  4982  013B  00A6               	movwf	___awmod@divisor
  4983  013C  3000               	movlw	0
  4984  013D  00A7               	movwf	___awmod@divisor+1
  4985  013E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  4986  013F  3E05               	addlw	5
  4987  0140  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  4988  0141  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4989  0142  1803               	skipnc
  4990  0143  3E01               	addlw	1
  4991  0144  3E00               	addlw	0
  4992  0145  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  4993  0146  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  4994  0147  0084               	movwf	4
  4995  0148  1783               	bsf	3,7
  4996  0149  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4997  014A  1383               	bcf	3,7
  4998  014B  0800               	movf	0,w
  4999  014C  00A8               	movwf	___awmod@dividend
  5000  014D  01A9               	clrf	___awmod@dividend+1
  5001  014E  1BA8               	btfsc	___awmod@dividend,7
  5002  014F  03A9               	decf	___awmod@dividend+1,f
  5003  0150  160A  158A  253D  120A  118A  	fcall	___awmod
  5004  0155  0826               	movf	?___awmod,w
  5005  0156  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5006  0157  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5007  0158  1683               	bsf	3,5	;RP0=1, select bank1
  5008  0159  00CD               	movwf	(_g_display_text^(0+128)+1)
  5009                           
  5010                           ;menu.c: 440:         }else if(change_digit==0)
  5011  015A  297E               	goto	l7306
  5012  015B                     l7302:	
  5013  015B  085B               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  5014  015C  1D03               	btfss	3,2
  5015  015D  297E               	goto	l7306
  5016                           
  5017                           ;menu.c: 441:         {;menu.c: 442:             g_display_text[0]=(menu->param)/10;
  5018  015E  300A               	movlw	10
  5019  015F  00AD               	movwf	___awdiv@divisor
  5020  0160  3000               	movlw	0
  5021  0161  00AE               	movwf	___awdiv@divisor+1
  5022  0162  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5023  0163  3E05               	addlw	5
  5024  0164  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5025  0165  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5026  0166  1803               	skipnc
  5027  0167  3E01               	addlw	1
  5028  0168  3E00               	addlw	0
  5029  0169  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5030  016A  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5031  016B  0084               	movwf	4
  5032  016C  1783               	bsf	3,7
  5033  016D  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5034  016E  1383               	bcf	3,7
  5035  016F  0800               	movf	0,w
  5036  0170  00AF               	movwf	___awdiv@dividend
  5037  0171  01B0               	clrf	___awdiv@dividend+1
  5038  0172  1BAF               	btfsc	___awdiv@dividend,7
  5039  0173  03B0               	decf	___awdiv@dividend+1,f
  5040  0174  160A  158A  2629  120A  118A  	fcall	___awdiv
  5041  0179  082D               	movf	?___awdiv,w
  5042  017A  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5043  017B  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5044  017C  1683               	bsf	3,5	;RP0=1, select bank1
  5045  017D  00CC               	movwf	_g_display_text^(0+128)
  5046  017E                     l7306:	
  5047                           
  5048                           ;menu.c: 446:     if(check_button==k_set_up_short)
  5049  017E  3008               	movlw	8
  5050  017F  1283               	bcf	3,5	;RP0=0, select bank0
  5051  0180  0638               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  5052  0181  1D03               	btfss	3,2
  5053  0182  2C50               	goto	l7344
  5054                           
  5055                           ;menu.c: 447:     {;menu.c: 448:         if(change_digit==0)
  5056  0183  085B               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  5057  0184  1D03               	btfss	3,2
  5058  0185  2A71               	goto	l7316
  5059                           
  5060                           ;menu.c: 449:         {;menu.c: 450:             (menu->param)=(menu->param)+10;
  5061  0186  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5062  0187  3E05               	addlw	5
  5063  0188  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5064  0189  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5065  018A  1803               	skipnc
  5066  018B  3E01               	addlw	1
  5067  018C  3E00               	addlw	0
  5068  018D  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5069  018E  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5070  018F  0084               	movwf	4
  5071  0190  1783               	bsf	3,7
  5072  0191  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5073  0192  1383               	bcf	3,7
  5074  0193  0800               	movf	0,w
  5075  0194  3E0A               	addlw	10
  5076  0195  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5077  0196  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5078  0197  3E05               	addlw	5
  5079  0198  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5080  0199  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5081  019A  1803               	skipnc
  5082  019B  3E01               	addlw	1
  5083  019C  3E00               	addlw	0
  5084  019D  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5085  019E  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5086  019F  0084               	movwf	4
  5087  01A0  1783               	bsf	3,7
  5088  01A1  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5089  01A2  1383               	bcf	3,7
  5090  01A3  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5091  01A4  0080               	movwf	0
  5092                           
  5093                           ;menu.c: 452:             if(menu->param>menu->max_limit)
  5094  01A5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5095  01A6  3E05               	addlw	5
  5096  01A7  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5097  01A8  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5098  01A9  1803               	skipnc
  5099  01AA  3E01               	addlw	1
  5100  01AB  3E00               	addlw	0
  5101  01AC  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5102  01AD  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5103  01AE  0084               	movwf	4
  5104  01AF  1783               	bsf	3,7
  5105  01B0  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5106  01B1  1383               	bcf	3,7
  5107  01B2  0800               	movf	0,w
  5108  01B3  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5109  01B4  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  5110  01B5  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5111  01B6  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5112  01B7  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5113  01B8  0084               	movwf	4
  5114  01B9  1783               	bsf	3,7
  5115  01BA  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5116  01BB  1383               	bcf	3,7
  5117  01BC  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5118  01BD  3A80               	xorlw	128
  5119  01BE  3C80               	sublw	128
  5120  01BF  1D03               	skipz
  5121  01C0  29C3               	goto	u7485
  5122  01C1  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5123  01C2  0200               	subwf	0,w
  5124  01C3                     u7485:	
  5125  01C3  1803               	skipnc
  5126  01C4  29FE               	goto	l787
  5127                           
  5128                           ;menu.c: 453:             {;menu.c: 454:                 (menu->param)=(menu->param)-((m
      +                          enu->max_limit)-(menu->max_limit)%10+10);
  5129  01C5  300A               	movlw	10
  5130  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  5131  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  5132  01C8  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5133  01C9  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5134  01CA  00A6               	movwf	___lbmod@divisor
  5135  01CB  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5136  01CC  0084               	movwf	4
  5137  01CD  1783               	bsf	3,7
  5138  01CE  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5139  01CF  1383               	bcf	3,7
  5140  01D0  0800               	movf	0,w
  5141  01D1  160A  158A  21A6  120A  118A  	fcall	___lbmod
  5142  01D6  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5143  01D7  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5144  01D8  0084               	movwf	4
  5145  01D9  1783               	bsf	3,7
  5146  01DA  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5147  01DB  1383               	bcf	3,7
  5148  01DC  0800               	movf	0,w
  5149  01DD  02BA               	subwf	??_Menu_Set_Param_Time_Limit+1,f
  5150  01DE  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5151  01DF  3E05               	addlw	5
  5152  01E0  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5153  01E1  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5154  01E2  1803               	skipnc
  5155  01E3  3E01               	addlw	1
  5156  01E4  3E00               	addlw	0
  5157  01E5  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5158  01E6  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5159  01E7  0084               	movwf	4
  5160  01E8  1783               	bsf	3,7
  5161  01E9  1C3C               	btfss	??_Menu_Set_Param_Time_Limit+3,0
  5162  01EA  1383               	bcf	3,7
  5163  01EB  0800               	movf	0,w
  5164  01EC  073A               	addwf	??_Menu_Set_Param_Time_Limit+1,w
  5165  01ED  3EF6               	addlw	-10
  5166  01EE  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5167  01EF  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5168  01F0  3E05               	addlw	5
  5169  01F1  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5170  01F2  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5171  01F3  1803               	skipnc
  5172  01F4  3E01               	addlw	1
  5173  01F5  3E00               	addlw	0
  5174  01F6  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  5175  01F7  083E               	movf	??_Menu_Set_Param_Time_Limit+5,w
  5176  01F8  0084               	movwf	4
  5177  01F9  1783               	bsf	3,7
  5178  01FA  1C3F               	btfss	??_Menu_Set_Param_Time_Limit+6,0
  5179  01FB  1383               	bcf	3,7
  5180  01FC  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5181  01FD  0080               	movwf	0
  5182  01FE                     l787:	
  5183                           ;menu.c: 455:             }
  5184                           
  5185                           
  5186                           ;menu.c: 457:             if(menu->max_limit/10==menu->min_limit/10)
  5187  01FE  300A               	movlw	10
  5188  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  5189  0200  1303               	bcf	3,6	;RP1=0, select bank0
  5190  0201  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5191  0202  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5192  0203  00A6               	movwf	___lbdiv@divisor
  5193  0204  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5194  0205  3E03               	addlw	3
  5195  0206  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5196  0207  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5197  0208  1803               	skipnc
  5198  0209  3E01               	addlw	1
  5199  020A  3E00               	addlw	0
  5200  020B  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5201  020C  083A               	movf	??_Menu_Set_Param_Time_Limit+1,w
  5202  020D  0084               	movwf	4
  5203  020E  1783               	bsf	3,7
  5204  020F  1C3B               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  5205  0210  1383               	bcf	3,7
  5206  0211  0800               	movf	0,w
  5207  0212  160A  158A  2163  120A  118A  	fcall	___lbdiv
  5208  0217  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5209  0218  300A               	movlw	10
  5210  0219  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5211  021A  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5212  021B  00A6               	movwf	___lbdiv@divisor
  5213  021C  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5214  021D  0084               	movwf	4
  5215  021E  1783               	bsf	3,7
  5216  021F  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5217  0220  1383               	bcf	3,7
  5218  0221  0800               	movf	0,w
  5219  0222  160A  158A  2163  120A  118A  	fcall	___lbdiv
  5220  0227  063C               	xorwf	??_Menu_Set_Param_Time_Limit+3,w
  5221  0228  1D03               	skipz
  5222  0229  2BC6               	goto	l7334
  5223                           
  5224                           ;menu.c: 458:             {;menu.c: 459:                 (menu->param)=(menu->param%10)+
      +                          ((menu->max_limit)-(menu->max_limit)%10);
  5225  022A  300A               	movlw	10
  5226  022B  00A6               	movwf	___awmod@divisor
  5227  022C  3000               	movlw	0
  5228  022D  00A7               	movwf	___awmod@divisor+1
  5229  022E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5230  022F  3E05               	addlw	5
  5231  0230  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5232  0231  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5233  0232  1803               	skipnc
  5234  0233  3E01               	addlw	1
  5235  0234  3E00               	addlw	0
  5236  0235  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5237  0236  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5238  0237  0084               	movwf	4
  5239  0238  1783               	bsf	3,7
  5240  0239  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5241  023A  1383               	bcf	3,7
  5242  023B  0800               	movf	0,w
  5243  023C  00A8               	movwf	___awmod@dividend
  5244  023D  01A9               	clrf	___awmod@dividend+1
  5245  023E  1BA8               	btfsc	___awmod@dividend,7
  5246  023F  03A9               	decf	___awmod@dividend+1,f
  5247  0240  160A  158A  253D  120A  118A  	fcall	___awmod
  5248  0245  0826               	movf	?___awmod,w
  5249  0246  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5250  0247  0827               	movf	?___awmod+1,w
  5251  0248  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5252  0249  300A               	movlw	10
  5253  024A  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5254  024B  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5255  024C  00A6               	movwf	___lbmod@divisor
  5256  024D  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5257  024E  0084               	movwf	4
  5258  024F  1783               	bsf	3,7
  5259  0250  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5260  0251  1383               	bcf	3,7
  5261  0252  0800               	movf	0,w
  5262  0253  160A  158A  21A6  120A  118A  	fcall	___lbmod
  5263  0258  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  5264  0259  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5265  025A  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5266  025B  0084               	movwf	4
  5267  025C  1783               	bsf	3,7
  5268  025D  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5269  025E  1383               	bcf	3,7
  5270  025F  0800               	movf	0,w
  5271  0260  073E               	addwf	??_Menu_Set_Param_Time_Limit+5,w
  5272  0261  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  5273  0262  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5274  0263  3E05               	addlw	5
  5275  0264  00C0               	movwf	??_Menu_Set_Param_Time_Limit+7
  5276  0265  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5277  0266  1803               	skipnc
  5278  0267  3E01               	addlw	1
  5279  0268  3E00               	addlw	0
  5280  0269  00C1               	movwf	??_Menu_Set_Param_Time_Limit+8
  5281  026A  0840               	movf	??_Menu_Set_Param_Time_Limit+7,w
  5282  026B  0084               	movwf	4
  5283  026C  1783               	bsf	3,7
  5284  026D  1C41               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  5285  026E  1383               	bcf	3,7
  5286  026F  083F               	movf	??_Menu_Set_Param_Time_Limit+6,w
  5287  0270  2BC5               	goto	L5
  5288  0271                     l7316:	
  5289  0271  035B               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  5290  0272  1D03               	btfss	3,2
  5291  0273  2AC7               	goto	l7322
  5292                           
  5293                           ;menu.c: 463:         {;menu.c: 464:             (menu->param)=(menu->param)+1;
  5294  0274  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5295  0275  3E05               	addlw	5
  5296  0276  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5297  0277  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5298  0278  1803               	skipnc
  5299  0279  3E01               	addlw	1
  5300  027A  3E00               	addlw	0
  5301  027B  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5302  027C  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5303  027D  0084               	movwf	4
  5304  027E  1783               	bsf	3,7
  5305  027F  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5306  0280  1383               	bcf	3,7
  5307  0281  0800               	movf	0,w
  5308  0282  3E01               	addlw	1
  5309  0283  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5310  0284  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5311  0285  3E05               	addlw	5
  5312  0286  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5313  0287  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5314  0288  1803               	skipnc
  5315  0289  3E01               	addlw	1
  5316  028A  3E00               	addlw	0
  5317  028B  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5318  028C  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5319  028D  0084               	movwf	4
  5320  028E  1783               	bsf	3,7
  5321  028F  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5322  0290  1383               	bcf	3,7
  5323  0291  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5324  0292  0080               	movwf	0
  5325                           
  5326                           ;menu.c: 466:             if((menu->param)>(menu->max_limit))
  5327  0293  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5328  0294  3E05               	addlw	5
  5329  0295  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5330  0296  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5331  0297  1803               	skipnc
  5332  0298  3E01               	addlw	1
  5333  0299  3E00               	addlw	0
  5334  029A  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5335  029B  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5336  029C  0084               	movwf	4
  5337  029D  1783               	bsf	3,7
  5338  029E  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5339  029F  1383               	bcf	3,7
  5340  02A0  0800               	movf	0,w
  5341  02A1  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5342  02A2  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  5343  02A3  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5344  02A4  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5345  02A5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5346  02A6  0084               	movwf	4
  5347  02A7  1783               	bsf	3,7
  5348  02A8  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5349  02A9  1383               	bcf	3,7
  5350  02AA  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5351  02AB  3A80               	xorlw	128
  5352  02AC  3C80               	sublw	128
  5353  02AD  1D03               	skipz
  5354  02AE  2AB1               	goto	u7515
  5355  02AF  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5356  02B0  0200               	subwf	0,w
  5357  02B1                     u7515:	
  5358  02B1  1803               	skipnc
  5359  02B2  2BC6               	goto	l7334
  5360                           
  5361                           ;menu.c: 467:             {;menu.c: 468:                 (menu->param)=(menu->min_limit)
      +                          ;
  5362  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  5363  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  5364  02B5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5365  02B6  3E03               	addlw	3
  5366  02B7  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5367  02B8  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5368  02B9  1803               	skipnc
  5369  02BA  3E01               	addlw	1
  5370  02BB  3E00               	addlw	0
  5371  02BC  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5372  02BD  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5373  02BE  0084               	movwf	4
  5374  02BF  1783               	bsf	3,7
  5375  02C0  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5376  02C1  1383               	bcf	3,7
  5377  02C2  0800               	movf	0,w
  5378  02C3  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5379  02C4  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5380  02C5  3E05               	addlw	5
  5381  02C6  2BB9               	goto	L7
  5382  02C7                     l7322:	
  5383  02C7  3002               	movlw	2
  5384  02C8  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  5385  02C9  1D03               	btfss	3,2
  5386  02CA  2B5B               	goto	l7328
  5387                           
  5388                           ;menu.c: 471:         {;menu.c: 472:             (menu->param1)=(menu->param1)+10;
  5389  02CB  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5390  02CC  3E06               	addlw	6
  5391  02CD  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5392  02CE  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5393  02CF  1803               	skipnc
  5394  02D0  3E01               	addlw	1
  5395  02D1  3E00               	addlw	0
  5396  02D2  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5397  02D3  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5398  02D4  0084               	movwf	4
  5399  02D5  1783               	bsf	3,7
  5400  02D6  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5401  02D7  1383               	bcf	3,7
  5402  02D8  0800               	movf	0,w
  5403  02D9  3E0A               	addlw	10
  5404  02DA  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5405  02DB  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5406  02DC  3E06               	addlw	6
  5407  02DD  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5408  02DE  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5409  02DF  1803               	skipnc
  5410  02E0  3E01               	addlw	1
  5411  02E1  3E00               	addlw	0
  5412  02E2  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5413  02E3  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5414  02E4  0084               	movwf	4
  5415  02E5  1783               	bsf	3,7
  5416  02E6  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5417  02E7  1383               	bcf	3,7
  5418  02E8  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5419  02E9  0080               	movwf	0
  5420                           
  5421                           ;menu.c: 474:             if(menu->param1>menu->max_limit1)
  5422  02EA  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5423  02EB  3E06               	addlw	6
  5424  02EC  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5425  02ED  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5426  02EE  1803               	skipnc
  5427  02EF  3E01               	addlw	1
  5428  02F0  3E00               	addlw	0
  5429  02F1  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5430  02F2  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5431  02F3  0084               	movwf	4
  5432  02F4  1783               	bsf	3,7
  5433  02F5  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5434  02F6  1383               	bcf	3,7
  5435  02F7  0800               	movf	0,w
  5436  02F8  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5437  02F9  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  5438  02FA  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5439  02FB  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5440  02FC  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5441  02FD  3E01               	addlw	1
  5442  02FE  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5443  02FF  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5444  0300  1803               	skipnc
  5445  0301  3E01               	addlw	1
  5446  0302  3E00               	addlw	0
  5447  0303  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5448  0304  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5449  0305  0084               	movwf	4
  5450  0306  1783               	bsf	3,7
  5451  0307  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5452  0308  1383               	bcf	3,7
  5453  0309  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5454  030A  3A80               	xorlw	128
  5455  030B  3C80               	sublw	128
  5456  030C  1D03               	skipz
  5457  030D  2B10               	goto	u7535
  5458  030E  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5459  030F  0200               	subwf	0,w
  5460  0310                     u7535:	
  5461  0310  1803               	skipnc
  5462  0311  2BC6               	goto	l7334
  5463                           
  5464                           ;menu.c: 475:             {;menu.c: 476:                 (menu->param1)=(menu->param1)-(
      +                          (menu->max_limit1)-(menu->max_limit1)%10+10);
  5465  0312  300A               	movlw	10
  5466  0313  1283               	bcf	3,5	;RP0=0, select bank0
  5467  0314  1303               	bcf	3,6	;RP1=0, select bank0
  5468  0315  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5469  0316  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5470  0317  00A6               	movwf	___lbmod@divisor
  5471  0318  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5472  0319  3E01               	addlw	1
  5473  031A  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5474  031B  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5475  031C  1803               	skipnc
  5476  031D  3E01               	addlw	1
  5477  031E  3E00               	addlw	0
  5478  031F  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5479  0320  083A               	movf	??_Menu_Set_Param_Time_Limit+1,w
  5480  0321  0084               	movwf	4
  5481  0322  1783               	bsf	3,7
  5482  0323  1C3B               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  5483  0324  1383               	bcf	3,7
  5484  0325  0800               	movf	0,w
  5485  0326  160A  158A  21A6  120A  118A  	fcall	___lbmod
  5486  032B  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5487  032C  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5488  032D  3E01               	addlw	1
  5489  032E  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5490  032F  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5491  0330  1803               	skipnc
  5492  0331  3E01               	addlw	1
  5493  0332  3E00               	addlw	0
  5494  0333  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5495  0334  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5496  0335  0084               	movwf	4
  5497  0336  1783               	bsf	3,7
  5498  0337  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5499  0338  1383               	bcf	3,7
  5500  0339  0800               	movf	0,w
  5501  033A  02BC               	subwf	??_Menu_Set_Param_Time_Limit+3,f
  5502  033B  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5503  033C  3E06               	addlw	6
  5504  033D  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  5505  033E  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5506  033F  1803               	skipnc
  5507  0340  3E01               	addlw	1
  5508  0341  3E00               	addlw	0
  5509  0342  00C0               	movwf	??_Menu_Set_Param_Time_Limit+7
  5510  0343  083F               	movf	??_Menu_Set_Param_Time_Limit+6,w
  5511  0344  0084               	movwf	4
  5512  0345  1783               	bsf	3,7
  5513  0346  1C40               	btfss	??_Menu_Set_Param_Time_Limit+7,0
  5514  0347  1383               	bcf	3,7
  5515  0348  0800               	movf	0,w
  5516  0349  073C               	addwf	??_Menu_Set_Param_Time_Limit+3,w
  5517  034A  3EF6               	addlw	-10
  5518  034B  00C1               	movwf	??_Menu_Set_Param_Time_Limit+8
  5519  034C  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5520  034D  3E06               	addlw	6
  5521  034E  00C2               	movwf	??_Menu_Set_Param_Time_Limit+9
  5522  034F  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5523  0350  1803               	skipnc
  5524  0351  3E01               	addlw	1
  5525  0352  3E00               	addlw	0
  5526  0353  00C3               	movwf	??_Menu_Set_Param_Time_Limit+10
  5527  0354  0842               	movf	??_Menu_Set_Param_Time_Limit+9,w
  5528  0355  0084               	movwf	4
  5529  0356  1783               	bsf	3,7
  5530  0357  1C43               	btfss	??_Menu_Set_Param_Time_Limit+10,0
  5531  0358  1383               	bcf	3,7
  5532  0359  0841               	movf	??_Menu_Set_Param_Time_Limit+8,w
  5533  035A  2BC5               	goto	L5
  5534  035B                     l7328:	
  5535  035B  3003               	movlw	3
  5536  035C  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  5537  035D  1D03               	btfss	3,2
  5538  035E  2BC6               	goto	l7334
  5539                           
  5540                           ;menu.c: 479:         {;menu.c: 480:             (menu->param1)=(menu->param1)+1;
  5541  035F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5542  0360  3E06               	addlw	6
  5543  0361  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5544  0362  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5545  0363  1803               	skipnc
  5546  0364  3E01               	addlw	1
  5547  0365  3E00               	addlw	0
  5548  0366  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5549  0367  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5550  0368  0084               	movwf	4
  5551  0369  1783               	bsf	3,7
  5552  036A  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5553  036B  1383               	bcf	3,7
  5554  036C  0800               	movf	0,w
  5555  036D  3E01               	addlw	1
  5556  036E  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5557  036F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5558  0370  3E06               	addlw	6
  5559  0371  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5560  0372  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5561  0373  1803               	skipnc
  5562  0374  3E01               	addlw	1
  5563  0375  3E00               	addlw	0
  5564  0376  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5565  0377  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5566  0378  0084               	movwf	4
  5567  0379  1783               	bsf	3,7
  5568  037A  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5569  037B  1383               	bcf	3,7
  5570  037C  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5571  037D  0080               	movwf	0
  5572                           
  5573                           ;menu.c: 482:             if((menu->param1)>(menu->max_limit1))
  5574  037E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5575  037F  3E06               	addlw	6
  5576  0380  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5577  0381  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5578  0382  1803               	skipnc
  5579  0383  3E01               	addlw	1
  5580  0384  3E00               	addlw	0
  5581  0385  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5582  0386  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5583  0387  0084               	movwf	4
  5584  0388  1783               	bsf	3,7
  5585  0389  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5586  038A  1383               	bcf	3,7
  5587  038B  0800               	movf	0,w
  5588  038C  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5589  038D  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  5590  038E  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5591  038F  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5592  0390  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5593  0391  3E01               	addlw	1
  5594  0392  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5595  0393  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5596  0394  1803               	skipnc
  5597  0395  3E01               	addlw	1
  5598  0396  3E00               	addlw	0
  5599  0397  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5600  0398  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5601  0399  0084               	movwf	4
  5602  039A  1783               	bsf	3,7
  5603  039B  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5604  039C  1383               	bcf	3,7
  5605  039D  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5606  039E  3A80               	xorlw	128
  5607  039F  3C80               	sublw	128
  5608  03A0  1D03               	skipz
  5609  03A1  2BA4               	goto	u7555
  5610  03A2  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5611  03A3  0200               	subwf	0,w
  5612  03A4                     u7555:	
  5613  03A4  1803               	skipnc
  5614  03A5  2BC6               	goto	l7334
  5615                           
  5616                           ;menu.c: 483:             {;menu.c: 484:                 (menu->param1)=(menu->min_limit
      +                          1);
  5617  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  5618  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  5619  03A8  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5620  03A9  3E04               	addlw	4
  5621  03AA  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5622  03AB  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5623  03AC  1803               	skipnc
  5624  03AD  3E01               	addlw	1
  5625  03AE  3E00               	addlw	0
  5626  03AF  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5627  03B0  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5628  03B1  0084               	movwf	4
  5629  03B2  1783               	bsf	3,7
  5630  03B3  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5631  03B4  1383               	bcf	3,7
  5632  03B5  0800               	movf	0,w
  5633  03B6  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5634  03B7  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5635  03B8  3E06               	addlw	6
  5636  03B9                     L7:	
  5637  03B9  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5638  03BA  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5639  03BB  1803               	skipnc
  5640  03BC  3E01               	addlw	1
  5641  03BD  3E00               	addlw	0
  5642  03BE  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5643  03BF  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5644  03C0  0084               	movwf	4
  5645  03C1  1783               	bsf	3,7
  5646  03C2  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5647  03C3  1383               	bcf	3,7
  5648  03C4  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5649  03C5                     L5:	
  5650  03C5  0080               	movwf	0
  5651  03C6                     l7334:	
  5652                           
  5653                           ;menu.c: 488:         g_display_text[0]=(menu->param)/10;
  5654  03C6  300A               	movlw	10
  5655  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  5656  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  5657  03C9  00AD               	movwf	___awdiv@divisor
  5658  03CA  3000               	movlw	0
  5659  03CB  00AE               	movwf	___awdiv@divisor+1
  5660  03CC  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5661  03CD  3E05               	addlw	5
  5662  03CE  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5663  03CF  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5664  03D0  1803               	skipnc
  5665  03D1  3E01               	addlw	1
  5666  03D2  3E00               	addlw	0
  5667  03D3  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5668  03D4  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5669  03D5  0084               	movwf	4
  5670  03D6  1783               	bsf	3,7
  5671  03D7  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5672  03D8  1383               	bcf	3,7
  5673  03D9  0800               	movf	0,w
  5674  03DA  00AF               	movwf	___awdiv@dividend
  5675  03DB  01B0               	clrf	___awdiv@dividend+1
  5676  03DC  1BAF               	btfsc	___awdiv@dividend,7
  5677  03DD  03B0               	decf	___awdiv@dividend+1,f
  5678  03DE  160A  158A  2629  120A  118A  	fcall	___awdiv
  5679  03E3  082D               	movf	?___awdiv,w
  5680  03E4  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5681  03E5  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5682  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  5683  03E7  00CC               	movwf	_g_display_text^(0+128)
  5684                           
  5685                           ;menu.c: 489:         g_display_text[1]=(menu->param)%10;
  5686  03E8  300A               	movlw	10
  5687  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  5688  03EA  00A6               	movwf	___awmod@divisor
  5689  03EB  3000               	movlw	0
  5690  03EC  00A7               	movwf	___awmod@divisor+1
  5691  03ED  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5692  03EE  3E05               	addlw	5
  5693  03EF  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5694  03F0  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5695  03F1  1803               	skipnc
  5696  03F2  3E01               	addlw	1
  5697  03F3  3E00               	addlw	0
  5698  03F4  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5699  03F5  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5700  03F6  0084               	movwf	4
  5701  03F7  1783               	bsf	3,7
  5702  03F8  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5703  03F9  1383               	bcf	3,7
  5704  03FA  0800               	movf	0,w
  5705  03FB  00A8               	movwf	___awmod@dividend
  5706  03FC  01A9               	clrf	___awmod@dividend+1
  5707  03FD  1BA8               	btfsc	___awmod@dividend,7
  5708  03FE  03A9               	decf	___awmod@dividend+1,f
  5709  03FF  160A  158A  253D  120A  118A  	fcall	___awmod
  5710  0404  0826               	movf	?___awmod,w
  5711  0405  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5712  0406  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5713  0407  1683               	bsf	3,5	;RP0=1, select bank1
  5714  0408  00CD               	movwf	(_g_display_text^(0+128)+1)
  5715                           
  5716                           ;menu.c: 490:         g_display_text[2]=(menu->param1)/10;
  5717  0409  300A               	movlw	10
  5718  040A  1283               	bcf	3,5	;RP0=0, select bank0
  5719  040B  00AD               	movwf	___awdiv@divisor
  5720  040C  3000               	movlw	0
  5721  040D  00AE               	movwf	___awdiv@divisor+1
  5722  040E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5723  040F  3E06               	addlw	6
  5724  0410  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5725  0411  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5726  0412  1803               	skipnc
  5727  0413  3E01               	addlw	1
  5728  0414  3E00               	addlw	0
  5729  0415  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5730  0416  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5731  0417  0084               	movwf	4
  5732  0418  1783               	bsf	3,7
  5733  0419  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5734  041A  1383               	bcf	3,7
  5735  041B  0800               	movf	0,w
  5736  041C  00AF               	movwf	___awdiv@dividend
  5737  041D  01B0               	clrf	___awdiv@dividend+1
  5738  041E  1BAF               	btfsc	___awdiv@dividend,7
  5739  041F  03B0               	decf	___awdiv@dividend+1,f
  5740  0420  160A  158A  2629  120A  118A  	fcall	___awdiv
  5741  0425  082D               	movf	?___awdiv,w
  5742  0426  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5743  0427  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5744  0428  1683               	bsf	3,5	;RP0=1, select bank1
  5745  0429  00CE               	movwf	(_g_display_text^(0+128)+2)
  5746                           
  5747                           ;menu.c: 491:         g_display_text[3]=(menu->param1)%10;
  5748  042A  300A               	movlw	10
  5749  042B  1283               	bcf	3,5	;RP0=0, select bank0
  5750  042C  00A6               	movwf	___awmod@divisor
  5751  042D  3000               	movlw	0
  5752  042E  00A7               	movwf	___awmod@divisor+1
  5753  042F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5754  0430  3E06               	addlw	6
  5755  0431  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5756  0432  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5757  0433  1803               	skipnc
  5758  0434  3E01               	addlw	1
  5759  0435  3E00               	addlw	0
  5760  0436  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5761  0437  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5762  0438  0084               	movwf	4
  5763  0439  1783               	bsf	3,7
  5764  043A  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5765  043B  1383               	bcf	3,7
  5766  043C  0800               	movf	0,w
  5767  043D  00A8               	movwf	___awmod@dividend
  5768  043E  01A9               	clrf	___awmod@dividend+1
  5769  043F  1BA8               	btfsc	___awmod@dividend,7
  5770  0440  03A9               	decf	___awmod@dividend+1,f
  5771  0441  160A  158A  253D  120A  118A  	fcall	___awmod
  5772  0446  0826               	movf	?___awmod,w
  5773  0447  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5774  0448  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5775  0449  1683               	bsf	3,5	;RP0=1, select bank1
  5776  044A  00CF               	movwf	(_g_display_text^(0+128)+3)
  5777                           
  5778                           ;menu.c: 493:         g_generic_timer=7000;
  5779  044B  3058               	movlw	88
  5780  044C  1283               	bcf	3,5	;RP0=0, select bank0
  5781  044D  00D9               	movwf	_g_generic_timer	;volatile
  5782  044E  301B               	movlw	27
  5783  044F  00DA               	movwf	_g_generic_timer+1	;volatile
  5784  0450                     l7344:	
  5785                           
  5786                           ;menu.c: 496:     if(check_button==k_set_down_short)
  5787  0450  300A               	movlw	10
  5788  0451  0638               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  5789  0452  1D03               	btfss	3,2
  5790  0453  0008               	return
  5791                           
  5792                           ;menu.c: 497:     {;menu.c: 498:         if(change_digit==0)
  5793  0454  085B               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  5794  0455  1D03               	btfss	3,2
  5795  0456  2CDC               	goto	l7352
  5796                           
  5797                           ;menu.c: 499:         {;menu.c: 500:             (menu->param)=(menu->param)-10;
  5798  0457  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5799  0458  3E05               	addlw	5
  5800  0459  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5801  045A  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5802  045B  1803               	skipnc
  5803  045C  3E01               	addlw	1
  5804  045D  3E00               	addlw	0
  5805  045E  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5806  045F  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5807  0460  0084               	movwf	4
  5808  0461  1783               	bsf	3,7
  5809  0462  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5810  0463  1383               	bcf	3,7
  5811  0464  0800               	movf	0,w
  5812  0465  3EF6               	addlw	-10
  5813  0466  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5814  0467  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5815  0468  3E05               	addlw	5
  5816  0469  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5817  046A  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5818  046B  1803               	skipnc
  5819  046C  3E01               	addlw	1
  5820  046D  3E00               	addlw	0
  5821  046E  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5822  046F  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5823  0470  0084               	movwf	4
  5824  0471  1783               	bsf	3,7
  5825  0472  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5826  0473  1383               	bcf	3,7
  5827  0474  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5828  0475  0080               	movwf	0
  5829                           
  5830                           ;menu.c: 502:             if((menu->param)<(menu->min_limit))
  5831  0476  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5832  0477  3E05               	addlw	5
  5833  0478  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5834  0479  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5835  047A  1803               	skipnc
  5836  047B  3E01               	addlw	1
  5837  047C  3E00               	addlw	0
  5838  047D  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5839  047E  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5840  047F  0084               	movwf	4
  5841  0480  1783               	bsf	3,7
  5842  0481  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5843  0482  1383               	bcf	3,7
  5844  0483  0800               	movf	0,w
  5845  0484  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5846  0485  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  5847  0486  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5848  0487  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5849  0488  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5850  0489  3E03               	addlw	3
  5851  048A  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5852  048B  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5853  048C  1803               	skipnc
  5854  048D  3E01               	addlw	1
  5855  048E  3E00               	addlw	0
  5856  048F  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5857  0490  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5858  0491  0084               	movwf	4
  5859  0492  1783               	bsf	3,7
  5860  0493  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5861  0494  1383               	bcf	3,7
  5862  0495  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5863  0496  3A80               	xorlw	128
  5864  0497  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  5865  0498  3080               	movlw	128
  5866  0499  023F               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  5867  049A  1D03               	skipz
  5868  049B  2C9E               	goto	u7585
  5869  049C  0800               	movf	0,w
  5870  049D  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  5871  049E                     u7585:	
  5872  049E  1803               	skipnc
  5873  049F  2E46               	goto	l7370
  5874                           
  5875                           ;menu.c: 503:             {;menu.c: 504:                 (menu->param)=(menu->param)+((m
      +                          enu->max_limit)-(menu->max_limit)%10+10);
  5876  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  5877  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  5878  04A2  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5879  04A3  3E05               	addlw	5
  5880  04A4  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5881  04A5  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5882  04A6  1803               	skipnc
  5883  04A7  3E01               	addlw	1
  5884  04A8  3E00               	addlw	0
  5885  04A9  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5886  04AA  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5887  04AB  0084               	movwf	4
  5888  04AC  1783               	bsf	3,7
  5889  04AD  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5890  04AE  1383               	bcf	3,7
  5891  04AF  0800               	movf	0,w
  5892  04B0  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5893  04B1  300A               	movlw	10
  5894  04B2  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5895  04B3  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5896  04B4  00A6               	movwf	___lbmod@divisor
  5897  04B5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5898  04B6  0084               	movwf	4
  5899  04B7  1783               	bsf	3,7
  5900  04B8  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5901  04B9  1383               	bcf	3,7
  5902  04BA  0800               	movf	0,w
  5903  04BB  160A  158A  21A6  120A  118A  	fcall	___lbmod
  5904  04C0  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5905  04C1  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5906  04C2  0084               	movwf	4
  5907  04C3  1783               	bsf	3,7
  5908  04C4  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5909  04C5  1383               	bcf	3,7
  5910  04C6  0800               	movf	0,w
  5911  04C7  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5912  04C8  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5913  04C9  023E               	subwf	??_Menu_Set_Param_Time_Limit+5,w
  5914  04CA  073B               	addwf	??_Menu_Set_Param_Time_Limit+2,w
  5915  04CB  3E0A               	addlw	10
  5916  04CC  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  5917  04CD  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5918  04CE  3E05               	addlw	5
  5919  04CF  00C0               	movwf	??_Menu_Set_Param_Time_Limit+7
  5920  04D0  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5921  04D1  1803               	skipnc
  5922  04D2  3E01               	addlw	1
  5923  04D3  3E00               	addlw	0
  5924  04D4  00C1               	movwf	??_Menu_Set_Param_Time_Limit+8
  5925  04D5  0840               	movf	??_Menu_Set_Param_Time_Limit+7,w
  5926  04D6  0084               	movwf	4
  5927  04D7  1783               	bsf	3,7
  5928  04D8  1C41               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  5929  04D9  1383               	bcf	3,7
  5930  04DA  083F               	movf	??_Menu_Set_Param_Time_Limit+6,w
  5931  04DB  2E45               	goto	L6
  5932  04DC                     l7352:	
  5933  04DC  035B               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  5934  04DD  1D03               	btfss	3,2
  5935  04DE  2D40               	goto	l7358
  5936                           
  5937                           ;menu.c: 513:         {;menu.c: 514:             (menu->param)=(menu->param)-1;
  5938  04DF  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5939  04E0  3E05               	addlw	5
  5940  04E1  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5941  04E2  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5942  04E3  1803               	skipnc
  5943  04E4  3E01               	addlw	1
  5944  04E5  3E00               	addlw	0
  5945  04E6  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5946  04E7  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5947  04E8  0084               	movwf	4
  5948  04E9  1783               	bsf	3,7
  5949  04EA  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5950  04EB  1383               	bcf	3,7
  5951  04EC  0800               	movf	0,w
  5952  04ED  3EFF               	addlw	-1
  5953  04EE  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5954  04EF  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5955  04F0  3E05               	addlw	5
  5956  04F1  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5957  04F2  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5958  04F3  1803               	skipnc
  5959  04F4  3E01               	addlw	1
  5960  04F5  3E00               	addlw	0
  5961  04F6  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5962  04F7  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5963  04F8  0084               	movwf	4
  5964  04F9  1783               	bsf	3,7
  5965  04FA  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5966  04FB  1383               	bcf	3,7
  5967  04FC  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5968  04FD  0080               	movwf	0
  5969                           
  5970                           ;menu.c: 516:             if(menu->param<(menu->min_limit))
  5971  04FE  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5972  04FF  3E05               	addlw	5
  5973  0500  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5974  0501  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5975  0502  1803               	skipnc
  5976  0503  3E01               	addlw	1
  5977  0504  3E00               	addlw	0
  5978  0505  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5979  0506  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5980  0507  0084               	movwf	4
  5981  0508  1783               	bsf	3,7
  5982  0509  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5983  050A  1383               	bcf	3,7
  5984  050B  0800               	movf	0,w
  5985  050C  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5986  050D  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  5987  050E  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5988  050F  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5989  0510  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5990  0511  3E03               	addlw	3
  5991  0512  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5992  0513  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5993  0514  1803               	skipnc
  5994  0515  3E01               	addlw	1
  5995  0516  3E00               	addlw	0
  5996  0517  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5997  0518  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5998  0519  0084               	movwf	4
  5999  051A  1783               	bsf	3,7
  6000  051B  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6001  051C  1383               	bcf	3,7
  6002  051D  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6003  051E  3A80               	xorlw	128
  6004  051F  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6005  0520  3080               	movlw	128
  6006  0521  023F               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  6007  0522  1D03               	skipz
  6008  0523  2D26               	goto	u7605
  6009  0524  0800               	movf	0,w
  6010  0525  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  6011  0526                     u7605:	
  6012  0526  1803               	skipnc
  6013  0527  2E46               	goto	l7370
  6014                           
  6015                           ;menu.c: 517:             {;menu.c: 518:                 (menu->param)=(menu->max_limit)
      +                          ;
  6016  0528  1283               	bcf	3,5	;RP0=0, select bank0
  6017  0529  1303               	bcf	3,6	;RP1=0, select bank0
  6018  052A  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6019  052B  0084               	movwf	4
  6020  052C  1783               	bsf	3,7
  6021  052D  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  6022  052E  1383               	bcf	3,7
  6023  052F  0800               	movf	0,w
  6024  0530  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6025  0531  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6026  0532  3E05               	addlw	5
  6027  0533  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6028  0534  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6029  0535  1803               	skipnc
  6030  0536  3E01               	addlw	1
  6031  0537  3E00               	addlw	0
  6032  0538  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6033  0539  083A               	movf	??_Menu_Set_Param_Time_Limit+1,w
  6034  053A  0084               	movwf	4
  6035  053B  1783               	bsf	3,7
  6036  053C  1C3B               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  6037  053D  1383               	bcf	3,7
  6038  053E  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6039  053F  2E45               	goto	L6
  6040  0540                     l7358:	
  6041  0540  3002               	movlw	2
  6042  0541  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  6043  0542  1D03               	btfss	3,2
  6044  0543  2DD9               	goto	l7364
  6045                           
  6046                           ;menu.c: 521:         {;menu.c: 522:             (menu->param1)=(menu->param1)-10;
  6047  0544  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6048  0545  3E06               	addlw	6
  6049  0546  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6050  0547  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6051  0548  1803               	skipnc
  6052  0549  3E01               	addlw	1
  6053  054A  3E00               	addlw	0
  6054  054B  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6055  054C  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6056  054D  0084               	movwf	4
  6057  054E  1783               	bsf	3,7
  6058  054F  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6059  0550  1383               	bcf	3,7
  6060  0551  0800               	movf	0,w
  6061  0552  3EF6               	addlw	-10
  6062  0553  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6063  0554  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6064  0555  3E06               	addlw	6
  6065  0556  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6066  0557  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6067  0558  1803               	skipnc
  6068  0559  3E01               	addlw	1
  6069  055A  3E00               	addlw	0
  6070  055B  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6071  055C  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6072  055D  0084               	movwf	4
  6073  055E  1783               	bsf	3,7
  6074  055F  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6075  0560  1383               	bcf	3,7
  6076  0561  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6077  0562  0080               	movwf	0
  6078                           
  6079                           ;menu.c: 524:             if(menu->param1<(menu->min_limit1))
  6080  0563  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6081  0564  3E06               	addlw	6
  6082  0565  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6083  0566  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6084  0567  1803               	skipnc
  6085  0568  3E01               	addlw	1
  6086  0569  3E00               	addlw	0
  6087  056A  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6088  056B  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6089  056C  0084               	movwf	4
  6090  056D  1783               	bsf	3,7
  6091  056E  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6092  056F  1383               	bcf	3,7
  6093  0570  0800               	movf	0,w
  6094  0571  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6095  0572  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  6096  0573  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  6097  0574  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  6098  0575  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6099  0576  3E04               	addlw	4
  6100  0577  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6101  0578  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6102  0579  1803               	skipnc
  6103  057A  3E01               	addlw	1
  6104  057B  3E00               	addlw	0
  6105  057C  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6106  057D  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6107  057E  0084               	movwf	4
  6108  057F  1783               	bsf	3,7
  6109  0580  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6110  0581  1383               	bcf	3,7
  6111  0582  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6112  0583  3A80               	xorlw	128
  6113  0584  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6114  0585  3080               	movlw	128
  6115  0586  023F               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  6116  0587  1D03               	skipz
  6117  0588  2D8B               	goto	u7625
  6118  0589  0800               	movf	0,w
  6119  058A  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  6120  058B                     u7625:	
  6121  058B  1803               	skipnc
  6122  058C  2E46               	goto	l7370
  6123                           
  6124                           ;menu.c: 525:             {;menu.c: 526:                 (menu->param1)=(menu->param1)+(
      +                          (menu->max_limit1)-(menu->max_limit1)%10+10);
  6125  058D  1283               	bcf	3,5	;RP0=0, select bank0
  6126  058E  1303               	bcf	3,6	;RP1=0, select bank0
  6127  058F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6128  0590  3E06               	addlw	6
  6129  0591  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6130  0592  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6131  0593  1803               	skipnc
  6132  0594  3E01               	addlw	1
  6133  0595  3E00               	addlw	0
  6134  0596  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6135  0597  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6136  0598  0084               	movwf	4
  6137  0599  1783               	bsf	3,7
  6138  059A  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6139  059B  1383               	bcf	3,7
  6140  059C  0800               	movf	0,w
  6141  059D  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6142  059E  300A               	movlw	10
  6143  059F  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6144  05A0  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6145  05A1  00A6               	movwf	___lbmod@divisor
  6146  05A2  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6147  05A3  3E01               	addlw	1
  6148  05A4  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6149  05A5  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6150  05A6  1803               	skipnc
  6151  05A7  3E01               	addlw	1
  6152  05A8  3E00               	addlw	0
  6153  05A9  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6154  05AA  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6155  05AB  0084               	movwf	4
  6156  05AC  1783               	bsf	3,7
  6157  05AD  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6158  05AE  1383               	bcf	3,7
  6159  05AF  0800               	movf	0,w
  6160  05B0  160A  158A  21A6  120A  118A  	fcall	___lbmod
  6161  05B5  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6162  05B6  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6163  05B7  3E01               	addlw	1
  6164  05B8  00C0               	movwf	??_Menu_Set_Param_Time_Limit+7
  6165  05B9  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6166  05BA  1803               	skipnc
  6167  05BB  3E01               	addlw	1
  6168  05BC  3E00               	addlw	0
  6169  05BD  00C1               	movwf	??_Menu_Set_Param_Time_Limit+8
  6170  05BE  0840               	movf	??_Menu_Set_Param_Time_Limit+7,w
  6171  05BF  0084               	movwf	4
  6172  05C0  1783               	bsf	3,7
  6173  05C1  1C41               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  6174  05C2  1383               	bcf	3,7
  6175  05C3  0800               	movf	0,w
  6176  05C4  00C2               	movwf	??_Menu_Set_Param_Time_Limit+9
  6177  05C5  083F               	movf	??_Menu_Set_Param_Time_Limit+6,w
  6178  05C6  0242               	subwf	??_Menu_Set_Param_Time_Limit+9,w
  6179  05C7  073B               	addwf	??_Menu_Set_Param_Time_Limit+2,w
  6180  05C8  3E0A               	addlw	10
  6181  05C9  00C3               	movwf	??_Menu_Set_Param_Time_Limit+10
  6182  05CA  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6183  05CB  3E06               	addlw	6
  6184  05CC  00C4               	movwf	??_Menu_Set_Param_Time_Limit+11
  6185  05CD  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6186  05CE  1803               	skipnc
  6187  05CF  3E01               	addlw	1
  6188  05D0  3E00               	addlw	0
  6189  05D1  00C5               	movwf	??_Menu_Set_Param_Time_Limit+12
  6190  05D2  0844               	movf	??_Menu_Set_Param_Time_Limit+11,w
  6191  05D3  0084               	movwf	4
  6192  05D4  1783               	bsf	3,7
  6193  05D5  1C45               	btfss	??_Menu_Set_Param_Time_Limit+12,0
  6194  05D6  1383               	bcf	3,7
  6195  05D7  0843               	movf	??_Menu_Set_Param_Time_Limit+10,w
  6196  05D8  2E45               	goto	L6
  6197  05D9                     l7364:	
  6198  05D9  3003               	movlw	3
  6199  05DA  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  6200  05DB  1D03               	btfss	3,2
  6201  05DC  2E46               	goto	l7370
  6202                           
  6203                           ;menu.c: 529:         {;menu.c: 530:             (menu->param1)=(menu->param1)-1;
  6204  05DD  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6205  05DE  3E06               	addlw	6
  6206  05DF  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6207  05E0  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6208  05E1  1803               	skipnc
  6209  05E2  3E01               	addlw	1
  6210  05E3  3E00               	addlw	0
  6211  05E4  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6212  05E5  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6213  05E6  0084               	movwf	4
  6214  05E7  1783               	bsf	3,7
  6215  05E8  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6216  05E9  1383               	bcf	3,7
  6217  05EA  0800               	movf	0,w
  6218  05EB  3EFF               	addlw	-1
  6219  05EC  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6220  05ED  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6221  05EE  3E06               	addlw	6
  6222  05EF  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6223  05F0  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6224  05F1  1803               	skipnc
  6225  05F2  3E01               	addlw	1
  6226  05F3  3E00               	addlw	0
  6227  05F4  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6228  05F5  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6229  05F6  0084               	movwf	4
  6230  05F7  1783               	bsf	3,7
  6231  05F8  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6232  05F9  1383               	bcf	3,7
  6233  05FA  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6234  05FB  0080               	movwf	0
  6235                           
  6236                           ;menu.c: 532:             if(menu->param1<(menu->min_limit1))
  6237  05FC  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6238  05FD  3E06               	addlw	6
  6239  05FE  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6240  05FF  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6241  0600  1803               	skipnc
  6242  0601  3E01               	addlw	1
  6243  0602  3E00               	addlw	0
  6244  0603  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6245  0604  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6246  0605  0084               	movwf	4
  6247  0606  1783               	bsf	3,7
  6248  0607  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6249  0608  1383               	bcf	3,7
  6250  0609  0800               	movf	0,w
  6251  060A  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6252  060B  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  6253  060C  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  6254  060D  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  6255  060E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6256  060F  3E04               	addlw	4
  6257  0610  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6258  0611  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6259  0612  1803               	skipnc
  6260  0613  3E01               	addlw	1
  6261  0614  3E00               	addlw	0
  6262  0615  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6263  0616  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6264  0617  0084               	movwf	4
  6265  0618  1783               	bsf	3,7
  6266  0619  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6267  061A  1383               	bcf	3,7
  6268  061B  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6269  061C  3A80               	xorlw	128
  6270  061D  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6271  061E  3080               	movlw	128
  6272  061F  023F               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  6273  0620  1D03               	skipz
  6274  0621  2E24               	goto	u7645
  6275  0622  0800               	movf	0,w
  6276  0623  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  6277  0624                     u7645:	
  6278  0624  1803               	skipnc
  6279  0625  2E46               	goto	l7370
  6280                           
  6281                           ;menu.c: 533:             {;menu.c: 534:                 (menu->param1)=(menu->max_limit
      +                          1);
  6282  0626  1283               	bcf	3,5	;RP0=0, select bank0
  6283  0627  1303               	bcf	3,6	;RP1=0, select bank0
  6284  0628  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6285  0629  3E01               	addlw	1
  6286  062A  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6287  062B  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6288  062C  1803               	skipnc
  6289  062D  3E01               	addlw	1
  6290  062E  3E00               	addlw	0
  6291  062F  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6292  0630  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6293  0631  0084               	movwf	4
  6294  0632  1783               	bsf	3,7
  6295  0633  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6296  0634  1383               	bcf	3,7
  6297  0635  0800               	movf	0,w
  6298  0636  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6299  0637  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6300  0638  3E06               	addlw	6
  6301  0639  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6302  063A  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6303  063B  1803               	skipnc
  6304  063C  3E01               	addlw	1
  6305  063D  3E00               	addlw	0
  6306  063E  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6307  063F  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6308  0640  0084               	movwf	4
  6309  0641  1783               	bsf	3,7
  6310  0642  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6311  0643  1383               	bcf	3,7
  6312  0644  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6313  0645                     L6:	
  6314  0645  0080               	movwf	0
  6315  0646                     l7370:	
  6316                           
  6317                           ;menu.c: 538:         g_display_text[0]=(menu->param)/10;
  6318  0646  300A               	movlw	10
  6319  0647  1283               	bcf	3,5	;RP0=0, select bank0
  6320  0648  1303               	bcf	3,6	;RP1=0, select bank0
  6321  0649  00AD               	movwf	___awdiv@divisor
  6322  064A  3000               	movlw	0
  6323  064B  00AE               	movwf	___awdiv@divisor+1
  6324  064C  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6325  064D  3E05               	addlw	5
  6326  064E  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6327  064F  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6328  0650  1803               	skipnc
  6329  0651  3E01               	addlw	1
  6330  0652  3E00               	addlw	0
  6331  0653  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6332  0654  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6333  0655  0084               	movwf	4
  6334  0656  1783               	bsf	3,7
  6335  0657  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6336  0658  1383               	bcf	3,7
  6337  0659  0800               	movf	0,w
  6338  065A  00AF               	movwf	___awdiv@dividend
  6339  065B  01B0               	clrf	___awdiv@dividend+1
  6340  065C  1BAF               	btfsc	___awdiv@dividend,7
  6341  065D  03B0               	decf	___awdiv@dividend+1,f
  6342  065E  160A  158A  2629  120A  118A  	fcall	___awdiv
  6343  0663  082D               	movf	?___awdiv,w
  6344  0664  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6345  0665  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6346  0666  1683               	bsf	3,5	;RP0=1, select bank1
  6347  0667  00CC               	movwf	_g_display_text^(0+128)
  6348                           
  6349                           ;menu.c: 539:         g_display_text[1]=(menu->param)%10;
  6350  0668  300A               	movlw	10
  6351  0669  1283               	bcf	3,5	;RP0=0, select bank0
  6352  066A  00A6               	movwf	___awmod@divisor
  6353  066B  3000               	movlw	0
  6354  066C  00A7               	movwf	___awmod@divisor+1
  6355  066D  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6356  066E  3E05               	addlw	5
  6357  066F  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6358  0670  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6359  0671  1803               	skipnc
  6360  0672  3E01               	addlw	1
  6361  0673  3E00               	addlw	0
  6362  0674  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6363  0675  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6364  0676  0084               	movwf	4
  6365  0677  1783               	bsf	3,7
  6366  0678  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6367  0679  1383               	bcf	3,7
  6368  067A  0800               	movf	0,w
  6369  067B  00A8               	movwf	___awmod@dividend
  6370  067C  01A9               	clrf	___awmod@dividend+1
  6371  067D  1BA8               	btfsc	___awmod@dividend,7
  6372  067E  03A9               	decf	___awmod@dividend+1,f
  6373  067F  160A  158A  253D  120A  118A  	fcall	___awmod
  6374  0684  0826               	movf	?___awmod,w
  6375  0685  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6376  0686  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6377  0687  1683               	bsf	3,5	;RP0=1, select bank1
  6378  0688  00CD               	movwf	(_g_display_text^(0+128)+1)
  6379                           
  6380                           ;menu.c: 540:         g_display_text[2]=(menu->param1)/10;
  6381  0689  300A               	movlw	10
  6382  068A  1283               	bcf	3,5	;RP0=0, select bank0
  6383  068B  00AD               	movwf	___awdiv@divisor
  6384  068C  3000               	movlw	0
  6385  068D  00AE               	movwf	___awdiv@divisor+1
  6386  068E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6387  068F  3E06               	addlw	6
  6388  0690  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6389  0691  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6390  0692  1803               	skipnc
  6391  0693  3E01               	addlw	1
  6392  0694  3E00               	addlw	0
  6393  0695  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6394  0696  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6395  0697  0084               	movwf	4
  6396  0698  1783               	bsf	3,7
  6397  0699  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6398  069A  1383               	bcf	3,7
  6399  069B  0800               	movf	0,w
  6400  069C  00AF               	movwf	___awdiv@dividend
  6401  069D  01B0               	clrf	___awdiv@dividend+1
  6402  069E  1BAF               	btfsc	___awdiv@dividend,7
  6403  069F  03B0               	decf	___awdiv@dividend+1,f
  6404  06A0  160A  158A  2629  120A  118A  	fcall	___awdiv
  6405  06A5  082D               	movf	?___awdiv,w
  6406  06A6  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6407  06A7  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6408  06A8  1683               	bsf	3,5	;RP0=1, select bank1
  6409  06A9  00CE               	movwf	(_g_display_text^(0+128)+2)
  6410                           
  6411                           ;menu.c: 541:         g_display_text[3]=(menu->param1)%10;
  6412  06AA  300A               	movlw	10
  6413  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  6414  06AC  00A6               	movwf	___awmod@divisor
  6415  06AD  3000               	movlw	0
  6416  06AE  00A7               	movwf	___awmod@divisor+1
  6417  06AF  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6418  06B0  3E06               	addlw	6
  6419  06B1  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6420  06B2  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6421  06B3  1803               	skipnc
  6422  06B4  3E01               	addlw	1
  6423  06B5  3E00               	addlw	0
  6424  06B6  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6425  06B7  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6426  06B8  0084               	movwf	4
  6427  06B9  1783               	bsf	3,7
  6428  06BA  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6429  06BB  1383               	bcf	3,7
  6430  06BC  0800               	movf	0,w
  6431  06BD  00A8               	movwf	___awmod@dividend
  6432  06BE  01A9               	clrf	___awmod@dividend+1
  6433  06BF  1BA8               	btfsc	___awmod@dividend,7
  6434  06C0  03A9               	decf	___awmod@dividend+1,f
  6435  06C1  160A  158A  253D   	fcall	___awmod
  6436  06C4  0826               	movf	?___awmod,w
  6437  06C5  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6438  06C6  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6439  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  6440  06C8  00CF               	movwf	(_g_display_text^(0+128)+3)
  6441                           
  6442                           ;menu.c: 543:         g_generic_timer=7000;
  6443  06C9  3058               	movlw	88
  6444  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  6445  06CB  00D9               	movwf	_g_generic_timer	;volatile
  6446  06CC  301B               	movlw	27
  6447  06CD  00DA               	movwf	_g_generic_timer+1	;volatile
  6448  06CE  0008               	return
  6449  06CF                     __end_of_Menu_Set_Param_Time_Limit:	
  6450                           
  6451                           	psect	text10
  6452  19A6                     __ptext10:	
  6453 ;; *************** function ___lbmod *****************
  6454 ;; Defined at:
  6455 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/lbmod.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  dividend        1    wreg     unsigned char 
  6458 ;;  divisor         1    6[BANK0 ] unsigned char 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  dividend        1   10[BANK0 ] unsigned char 
  6461 ;;  rem             1   12[BANK0 ] unsigned char 
  6462 ;;  counter         1   11[BANK0 ] unsigned char 
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      unsigned char 
  6465 ;; Registers used:
  6466 ;;		wreg, status,2, status,0
  6467 ;; Tracked objects:
  6468 ;;		On entry : 300/0
  6469 ;;		On exit  : 300/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6472 ;;      Params:         0       1       0       0       0
  6473 ;;      Locals:         0       3       0       0       0
  6474 ;;      Temps:          0       3       0       0       0
  6475 ;;      Totals:         0       7       0       0       0
  6476 ;;Total ram usage:        7 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    4
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_DEC_2_BCD
  6483 ;;		_Menu_Set_Param_Time_Limit
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function ___lbmod
  6489  19A6                     ___lbmod:	
  6490                           
  6491                           ;incstack = 0
  6492 ;; hardware stack exceeded
  6493                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  6494                           ;___lbmod@dividend stored from wreg
  6495  19A6  00AA               	movwf	___lbmod@dividend
  6496  19A7  3008               	movlw	8
  6497  19A8  00A7               	movwf	??___lbmod
  6498  19A9  0827               	movf	??___lbmod,w
  6499  19AA  00AB               	movwf	___lbmod@counter
  6500  19AB  01AC               	clrf	___lbmod@rem
  6501  19AC                     l6564:	
  6502  19AC  082A               	movf	___lbmod@dividend,w
  6503  19AD  00A7               	movwf	??___lbmod
  6504  19AE  3007               	movlw	7
  6505  19AF                     u6225:	
  6506  19AF  1003               	clrc
  6507  19B0  0CA7               	rrf	??___lbmod,f
  6508  19B1  3EFF               	addlw	-1
  6509  19B2  1D03               	skipz
  6510  19B3  29AF               	goto	u6225
  6511  19B4  082C               	movf	___lbmod@rem,w
  6512  19B5  00A8               	movwf	??___lbmod+1
  6513  19B6  0728               	addwf	??___lbmod+1,w
  6514  19B7  0427               	iorwf	??___lbmod,w
  6515  19B8  00A9               	movwf	??___lbmod+2
  6516  19B9  0829               	movf	??___lbmod+2,w
  6517  19BA  00AC               	movwf	___lbmod@rem
  6518  19BB  1003               	clrc
  6519  19BC  0DAA               	rlf	___lbmod@dividend,f
  6520  19BD  0826               	movf	___lbmod@divisor,w
  6521  19BE  022C               	subwf	___lbmod@rem,w
  6522  19BF  1C03               	skipc
  6523  19C0  29C3               	goto	l1172
  6524  19C1  0826               	movf	___lbmod@divisor,w
  6525  19C2  02AC               	subwf	___lbmod@rem,f
  6526  19C3                     l1172:	
  6527  19C3  3001               	movlw	1
  6528  19C4  02AB               	subwf	___lbmod@counter,f
  6529  19C5  1D03               	btfss	3,2
  6530  19C6  29AC               	goto	l6564
  6531  19C7  082C               	movf	___lbmod@rem,w
  6532  19C8  0008               	return
  6533  19C9                     __end_of___lbmod:	
  6534                           
  6535                           	psect	text11
  6536  1963                     __ptext11:	
  6537 ;; *************** function ___lbdiv *****************
  6538 ;; Defined at:
  6539 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/lbdiv.c"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;  dividend        1    wreg     unsigned char 
  6542 ;;  divisor         1    6[BANK0 ] unsigned char 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  dividend        1    8[BANK0 ] unsigned char 
  6545 ;;  quotient        1   10[BANK0 ] unsigned char 
  6546 ;;  counter         1    9[BANK0 ] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      unsigned char 
  6549 ;; Registers used:
  6550 ;;		wreg, status,2, status,0
  6551 ;; Tracked objects:
  6552 ;;		On entry : 300/0
  6553 ;;		On exit  : 300/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6556 ;;      Params:         0       1       0       0       0
  6557 ;;      Locals:         0       3       0       0       0
  6558 ;;      Temps:          0       1       0       0       0
  6559 ;;      Totals:         0       5       0       0       0
  6560 ;;Total ram usage:        5 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    4
  6563 ;; This function calls:
  6564 ;;		Nothing
  6565 ;; This function is called by:
  6566 ;;		_DEC_2_BCD
  6567 ;;		_Menu_Set_Param_Time_Limit
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           
  6572                           ;psect for function ___lbdiv
  6573  1963                     ___lbdiv:	
  6574                           
  6575                           ;incstack = 0
  6576 ;; hardware stack exceeded
  6577                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  6578                           ;___lbdiv@dividend stored from wreg
  6579  1963  00A8               	movwf	___lbdiv@dividend
  6580  1964  01AA               	clrf	___lbdiv@quotient
  6581  1965  0826               	movf	___lbdiv@divisor,w
  6582  1966  1903               	btfsc	3,2
  6583  1967  2982               	goto	l6556
  6584  1968  01A9               	clrf	___lbdiv@counter
  6585  1969  0AA9               	incf	___lbdiv@counter,f
  6586  196A                     l6544:	
  6587  196A  1BA6               	btfsc	___lbdiv@divisor,7
  6588  196B  2973               	goto	l6546
  6589  196C  1003               	clrc
  6590  196D  0DA6               	rlf	___lbdiv@divisor,f
  6591  196E  3001               	movlw	1
  6592  196F  00A7               	movwf	??___lbdiv
  6593  1970  0827               	movf	??___lbdiv,w
  6594  1971  07A9               	addwf	___lbdiv@counter,f
  6595  1972  296A               	goto	l6544
  6596  1973                     l6546:	
  6597  1973  1003               	clrc
  6598  1974  0DAA               	rlf	___lbdiv@quotient,f
  6599  1975  0826               	movf	___lbdiv@divisor,w
  6600  1976  0228               	subwf	___lbdiv@dividend,w
  6601  1977  1C03               	skipc
  6602  1978  297D               	goto	L8
  6603  1979  0826               	movf	___lbdiv@divisor,w
  6604  197A  02A8               	subwf	___lbdiv@dividend,f
  6605  197B  142A               	bsf	___lbdiv@quotient,0
  6606  197C  1003               	clrc
  6607  197D                     L8:	
  6608  197D  0CA6               	rrf	___lbdiv@divisor,f
  6609  197E  3001               	movlw	1
  6610  197F  02A9               	subwf	___lbdiv@counter,f
  6611  1980  1D03               	btfss	3,2
  6612  1981  2973               	goto	l6546
  6613  1982                     l6556:	
  6614  1982  082A               	movf	___lbdiv@quotient,w
  6615  1983  0008               	return
  6616  1984                     __end_of___lbdiv:	
  6617                           
  6618                           	psect	text12
  6619  1D3D                     __ptext12:	
  6620 ;; *************** function ___awmod *****************
  6621 ;; Defined at:
  6622 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/awmod.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  divisor         2    6[BANK0 ] int 
  6625 ;;  dividend        2    8[BANK0 ] int 
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  sign            1   12[BANK0 ] unsigned char 
  6628 ;;  counter         1   11[BANK0 ] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  2    6[BANK0 ] int 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0
  6633 ;; Tracked objects:
  6634 ;;		On entry : 300/800
  6635 ;;		On exit  : 300/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6638 ;;      Params:         0       4       0       0       0
  6639 ;;      Locals:         0       2       0       0       0
  6640 ;;      Temps:          0       1       0       0       0
  6641 ;;      Totals:         0       7       0       0       0
  6642 ;;Total ram usage:        7 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    4
  6645 ;; This function calls:
  6646 ;;		Nothing
  6647 ;; This function is called by:
  6648 ;;		_Show_Time
  6649 ;;		_Menu_Set_Time
  6650 ;;		_Menu_Set_Param_Time_Limit
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           
  6655                           ;psect for function ___awmod
  6656  1D3D                     ___awmod:	
  6657                           
  6658                           ;incstack = 0
  6659                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6660  1D3D  01AC               	clrf	___awmod@sign
  6661  1D3E  1FA9               	btfss	___awmod@dividend+1,7
  6662  1D3F  2D47               	goto	l6882
  6663  1D40  09A8               	comf	___awmod@dividend,f
  6664  1D41  09A9               	comf	___awmod@dividend+1,f
  6665  1D42  0AA8               	incf	___awmod@dividend,f
  6666  1D43  1903               	skipnz
  6667  1D44  0AA9               	incf	___awmod@dividend+1,f
  6668  1D45  01AC               	clrf	___awmod@sign
  6669  1D46  0AAC               	incf	___awmod@sign,f
  6670  1D47                     l6882:	
  6671  1D47  1FA7               	btfss	___awmod@divisor+1,7
  6672  1D48  2D4E               	goto	l6886
  6673  1D49  09A6               	comf	___awmod@divisor,f
  6674  1D4A  09A7               	comf	___awmod@divisor+1,f
  6675  1D4B  0AA6               	incf	___awmod@divisor,f
  6676  1D4C  1903               	skipnz
  6677  1D4D  0AA7               	incf	___awmod@divisor+1,f
  6678  1D4E                     l6886:	
  6679  1D4E  0826               	movf	___awmod@divisor,w
  6680  1D4F  0427               	iorwf	___awmod@divisor+1,w
  6681  1D50  1903               	btfsc	3,2
  6682  1D51  2D7B               	goto	l6904
  6683  1D52  01AB               	clrf	___awmod@counter
  6684  1D53  0AAB               	incf	___awmod@counter,f
  6685  1D54                     l6894:	
  6686  1D54  1BA7               	btfsc	___awmod@divisor+1,7
  6687  1D55  2D62               	goto	l6896
  6688  1D56  3001               	movlw	1
  6689  1D57                     u6805:	
  6690  1D57  1003               	clrc
  6691  1D58  0DA6               	rlf	___awmod@divisor,f
  6692  1D59  0DA7               	rlf	___awmod@divisor+1,f
  6693  1D5A  3EFF               	addlw	-1
  6694  1D5B  1D03               	skipz
  6695  1D5C  2D57               	goto	u6805
  6696  1D5D  3001               	movlw	1
  6697  1D5E  00AA               	movwf	??___awmod
  6698  1D5F  082A               	movf	??___awmod,w
  6699  1D60  07AB               	addwf	___awmod@counter,f
  6700  1D61  2D54               	goto	l6894
  6701  1D62                     l6896:	
  6702  1D62  0827               	movf	___awmod@divisor+1,w
  6703  1D63  0229               	subwf	___awmod@dividend+1,w
  6704  1D64  1D03               	skipz
  6705  1D65  2D68               	goto	u6825
  6706  1D66  0826               	movf	___awmod@divisor,w
  6707  1D67  0228               	subwf	___awmod@dividend,w
  6708  1D68                     u6825:	
  6709  1D68  1C03               	skipc
  6710  1D69  2D70               	goto	l6900
  6711  1D6A  0826               	movf	___awmod@divisor,w
  6712  1D6B  02A8               	subwf	___awmod@dividend,f
  6713  1D6C  0827               	movf	___awmod@divisor+1,w
  6714  1D6D  1C03               	skipc
  6715  1D6E  03A9               	decf	___awmod@dividend+1,f
  6716  1D6F  02A9               	subwf	___awmod@dividend+1,f
  6717  1D70                     l6900:	
  6718  1D70  3001               	movlw	1
  6719  1D71                     u6835:	
  6720  1D71  1003               	clrc
  6721  1D72  0CA7               	rrf	___awmod@divisor+1,f
  6722  1D73  0CA6               	rrf	___awmod@divisor,f
  6723  1D74  3EFF               	addlw	-1
  6724  1D75  1D03               	skipz
  6725  1D76  2D71               	goto	u6835
  6726  1D77  3001               	movlw	1
  6727  1D78  02AB               	subwf	___awmod@counter,f
  6728  1D79  1D03               	btfss	3,2
  6729  1D7A  2D62               	goto	l6896
  6730  1D7B                     l6904:	
  6731  1D7B  082C               	movf	___awmod@sign,w
  6732  1D7C  1903               	btfsc	3,2
  6733  1D7D  2D83               	goto	l6908
  6734  1D7E  09A8               	comf	___awmod@dividend,f
  6735  1D7F  09A9               	comf	___awmod@dividend+1,f
  6736  1D80  0AA8               	incf	___awmod@dividend,f
  6737  1D81  1903               	skipnz
  6738  1D82  0AA9               	incf	___awmod@dividend+1,f
  6739  1D83                     l6908:	
  6740  1D83  0829               	movf	___awmod@dividend+1,w
  6741  1D84  00A7               	movwf	?___awmod+1
  6742  1D85  0828               	movf	___awmod@dividend,w
  6743  1D86  00A6               	movwf	?___awmod
  6744  1D87  0008               	return
  6745  1D88                     __end_of___awmod:	
  6746                           
  6747                           	psect	text13
  6748  1E29                     __ptext13:	
  6749 ;; *************** function ___awdiv *****************
  6750 ;; Defined at:
  6751 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/awdiv.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  divisor         2   13[BANK0 ] int 
  6754 ;;  dividend        2   15[BANK0 ] int 
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  quotient        2   20[BANK0 ] int 
  6757 ;;  sign            1   19[BANK0 ] unsigned char 
  6758 ;;  counter         1   18[BANK0 ] unsigned char 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  2   13[BANK0 ] int 
  6761 ;; Registers used:
  6762 ;;		wreg, status,2, status,0
  6763 ;; Tracked objects:
  6764 ;;		On entry : 300/800
  6765 ;;		On exit  : 300/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6768 ;;      Params:         0       4       0       0       0
  6769 ;;      Locals:         0       4       0       0       0
  6770 ;;      Temps:          0       1       0       0       0
  6771 ;;      Totals:         0       9       0       0       0
  6772 ;;Total ram usage:        9 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:    4
  6775 ;; This function calls:
  6776 ;;		Nothing
  6777 ;; This function is called by:
  6778 ;;		_Show_Time
  6779 ;;		_Menu_Set_Time
  6780 ;;		_Menu_Set_Param_Time_Limit
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           
  6785                           ;psect for function ___awdiv
  6786  1E29                     ___awdiv:	
  6787                           
  6788                           ;incstack = 0
  6789                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6790  1E29  01B3               	clrf	___awdiv@sign
  6791  1E2A  1FAE               	btfss	___awdiv@divisor+1,7
  6792  1E2B  2E33               	goto	l6838
  6793  1E2C  09AD               	comf	___awdiv@divisor,f
  6794  1E2D  09AE               	comf	___awdiv@divisor+1,f
  6795  1E2E  0AAD               	incf	___awdiv@divisor,f
  6796  1E2F  1903               	skipnz
  6797  1E30  0AAE               	incf	___awdiv@divisor+1,f
  6798  1E31  01B3               	clrf	___awdiv@sign
  6799  1E32  0AB3               	incf	___awdiv@sign,f
  6800  1E33                     l6838:	
  6801  1E33  1FB0               	btfss	___awdiv@dividend+1,7
  6802  1E34  2E3E               	goto	l6844
  6803  1E35  09AF               	comf	___awdiv@dividend,f
  6804  1E36  09B0               	comf	___awdiv@dividend+1,f
  6805  1E37  0AAF               	incf	___awdiv@dividend,f
  6806  1E38  1903               	skipnz
  6807  1E39  0AB0               	incf	___awdiv@dividend+1,f
  6808  1E3A  3001               	movlw	1
  6809  1E3B  00B1               	movwf	??___awdiv
  6810  1E3C  0831               	movf	??___awdiv,w
  6811  1E3D  06B3               	xorwf	___awdiv@sign,f
  6812  1E3E                     l6844:	
  6813  1E3E  01B4               	clrf	___awdiv@quotient
  6814  1E3F  01B5               	clrf	___awdiv@quotient+1
  6815  1E40  082D               	movf	___awdiv@divisor,w
  6816  1E41  042E               	iorwf	___awdiv@divisor+1,w
  6817  1E42  1903               	btfsc	3,2
  6818  1E43  2E75               	goto	l6866
  6819  1E44  01B2               	clrf	___awdiv@counter
  6820  1E45  0AB2               	incf	___awdiv@counter,f
  6821  1E46                     l6854:	
  6822  1E46  1BAE               	btfsc	___awdiv@divisor+1,7
  6823  1E47  2E54               	goto	l6856
  6824  1E48  3001               	movlw	1
  6825  1E49                     u6705:	
  6826  1E49  1003               	clrc
  6827  1E4A  0DAD               	rlf	___awdiv@divisor,f
  6828  1E4B  0DAE               	rlf	___awdiv@divisor+1,f
  6829  1E4C  3EFF               	addlw	-1
  6830  1E4D  1D03               	skipz
  6831  1E4E  2E49               	goto	u6705
  6832  1E4F  3001               	movlw	1
  6833  1E50  00B1               	movwf	??___awdiv
  6834  1E51  0831               	movf	??___awdiv,w
  6835  1E52  07B2               	addwf	___awdiv@counter,f
  6836  1E53  2E46               	goto	l6854
  6837  1E54                     l6856:	
  6838  1E54  3001               	movlw	1
  6839  1E55                     u6725:	
  6840  1E55  1003               	clrc
  6841  1E56  0DB4               	rlf	___awdiv@quotient,f
  6842  1E57  0DB5               	rlf	___awdiv@quotient+1,f
  6843  1E58  3EFF               	addlw	-1
  6844  1E59  1D03               	skipz
  6845  1E5A  2E55               	goto	u6725
  6846  1E5B  082E               	movf	___awdiv@divisor+1,w
  6847  1E5C  0230               	subwf	___awdiv@dividend+1,w
  6848  1E5D  1D03               	skipz
  6849  1E5E  2E61               	goto	u6735
  6850  1E5F  082D               	movf	___awdiv@divisor,w
  6851  1E60  022F               	subwf	___awdiv@dividend,w
  6852  1E61                     u6735:	
  6853  1E61  1C03               	skipc
  6854  1E62  2E6A               	goto	l6862
  6855  1E63  082D               	movf	___awdiv@divisor,w
  6856  1E64  02AF               	subwf	___awdiv@dividend,f
  6857  1E65  082E               	movf	___awdiv@divisor+1,w
  6858  1E66  1C03               	skipc
  6859  1E67  03B0               	decf	___awdiv@dividend+1,f
  6860  1E68  02B0               	subwf	___awdiv@dividend+1,f
  6861  1E69  1434               	bsf	___awdiv@quotient,0
  6862  1E6A                     l6862:	
  6863  1E6A  3001               	movlw	1
  6864  1E6B                     u6745:	
  6865  1E6B  1003               	clrc
  6866  1E6C  0CAE               	rrf	___awdiv@divisor+1,f
  6867  1E6D  0CAD               	rrf	___awdiv@divisor,f
  6868  1E6E  3EFF               	addlw	-1
  6869  1E6F  1D03               	skipz
  6870  1E70  2E6B               	goto	u6745
  6871  1E71  3001               	movlw	1
  6872  1E72  02B2               	subwf	___awdiv@counter,f
  6873  1E73  1D03               	btfss	3,2
  6874  1E74  2E54               	goto	l6856
  6875  1E75                     l6866:	
  6876  1E75  0833               	movf	___awdiv@sign,w
  6877  1E76  1903               	btfsc	3,2
  6878  1E77  2E7D               	goto	l6870
  6879  1E78  09B4               	comf	___awdiv@quotient,f
  6880  1E79  09B5               	comf	___awdiv@quotient+1,f
  6881  1E7A  0AB4               	incf	___awdiv@quotient,f
  6882  1E7B  1903               	skipnz
  6883  1E7C  0AB5               	incf	___awdiv@quotient+1,f
  6884  1E7D                     l6870:	
  6885  1E7D  0835               	movf	___awdiv@quotient+1,w
  6886  1E7E  00AE               	movwf	?___awdiv+1
  6887  1E7F  0834               	movf	___awdiv@quotient,w
  6888  1E80  00AD               	movwf	?___awdiv
  6889  1E81  0008               	return
  6890  1E82                     __end_of___awdiv:	
  6891                           
  6892                           	psect	text14
  6893  1E82                     __ptext14:	
  6894 ;; *************** function _Is_Valid_Date *****************
  6895 ;; Defined at:
  6896 ;;		line 205 in file "menu.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  d               1    wreg     unsigned char 
  6899 ;;  m               1   29[BANK0 ] unsigned char 
  6900 ;;  y               2   30[BANK0 ] unsigned int 
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;  d               1   32[BANK0 ] unsigned char 
  6903 ;; Return value:  Size  Location     Type
  6904 ;;                  1    wreg      unsigned char 
  6905 ;; Registers used:
  6906 ;;		wreg, status,2, status,0, pclath, cstack
  6907 ;; Tracked objects:
  6908 ;;		On entry : 300/900
  6909 ;;		On exit  : 300/0
  6910 ;;		Unchanged: 0/0
  6911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6912 ;;      Params:         0       3       0       0       0
  6913 ;;      Locals:         0       1       0       0       0
  6914 ;;      Temps:          0       0       0       0       0
  6915 ;;      Totals:         0       4       0       0       0
  6916 ;;Total ram usage:        4 bytes
  6917 ;; Hardware stack levels used:    1
  6918 ;; Hardware stack levels required when called:    6
  6919 ;; This function calls:
  6920 ;;		_Is_Leap
  6921 ;; This function is called by:
  6922 ;;		_Menu_Set_Time
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           
  6927                           ;psect for function _Is_Valid_Date
  6928  1E82                     _Is_Valid_Date:	
  6929                           
  6930                           ;incstack = 0
  6931 ;; hardware stack exceeded
  6932                           ; Regs used in _Is_Valid_Date: [wreg+status,2+status,0+pclath+cstack]
  6933                           ;Is_Valid_Date@d stored from wreg
  6934  1E82  1283               	bcf	3,5	;RP0=0, select bank0
  6935  1E83  00C0               	movwf	Is_Valid_Date@d
  6936                           
  6937                           ;menu.c: 205: unsigned char Is_Valid_Date(unsigned char d, unsigned char m, unsigned int
      +                           y);menu.c: 206: {;menu.c: 208:     const unsigned int k_max_valid_year = 2999;;menu.c: 
      +                          209:     const unsigned int k_min_valid_year = 2000;;menu.c: 212:     if (y>k_max_valid_
      +                          year || y<k_min_valid_year)
  6938  1E84  300B               	movlw	11
  6939  1E85  023F               	subwf	Is_Valid_Date@y+1,w
  6940  1E86  30B8               	movlw	184
  6941  1E87  1903               	skipnz
  6942  1E88  023E               	subwf	Is_Valid_Date@y,w
  6943  1E89  1803               	skipnc
  6944  1E8A  2E92               	goto	l7196
  6945  1E8B  3007               	movlw	7
  6946  1E8C  023F               	subwf	Is_Valid_Date@y+1,w
  6947  1E8D  30D0               	movlw	208
  6948  1E8E  1903               	skipnz
  6949  1E8F  023E               	subwf	Is_Valid_Date@y,w
  6950  1E90  1803               	skipnc
  6951  1E91  2E94               	goto	l7200
  6952  1E92                     l7196:	
  6953                           
  6954                           ;menu.c: 213:     {;menu.c: 214:         return 0;
  6955  1E92  3000               	movlw	0
  6956  1E93  0008               	return
  6957  1E94                     l7200:	
  6958                           
  6959                           ;menu.c: 216:     if (m<1 || m>12)
  6960  1E94  083D               	movf	Is_Valid_Date@m,w
  6961  1E95  1903               	btfsc	3,2
  6962  1E96  2E92               	goto	l7196
  6963  1E97  300D               	movlw	13
  6964  1E98  023D               	subwf	Is_Valid_Date@m,w
  6965  1E99  1803               	btfsc	3,0
  6966  1E9A  2E92               	goto	l7196
  6967                           
  6968                           ;menu.c: 220:     if (d<1 || d>31)
  6969  1E9B  0840               	movf	Is_Valid_Date@d,w
  6970  1E9C  1903               	btfsc	3,2
  6971  1E9D  2E92               	goto	l7196
  6972  1E9E  3020               	movlw	32
  6973  1E9F  0240               	subwf	Is_Valid_Date@d,w
  6974  1EA0  1803               	btfsc	3,0
  6975  1EA1  2E92               	goto	l7196
  6976                           
  6977                           ;menu.c: 226:     if (m == 2)
  6978  1EA2  3002               	movlw	2
  6979  1EA3  063D               	xorwf	Is_Valid_Date@m,w
  6980  1EA4  1D03               	btfss	3,2
  6981  1EA5  2EC2               	goto	l7230
  6982                           
  6983                           ;menu.c: 227:     {;menu.c: 228:         if (Is_Leap(y))
  6984  1EA6  083F               	movf	Is_Valid_Date@y+1,w
  6985  1EA7  00BB               	movwf	Is_Leap@year+1
  6986  1EA8  083E               	movf	Is_Valid_Date@y,w
  6987  1EA9  00BA               	movwf	Is_Leap@year
  6988  1EAA  160A  158A  21F1  160A  158A  	fcall	_Is_Leap
  6989  1EAF  3A00               	xorlw	0
  6990  1EB0  1903               	skipnz
  6991  1EB1  2EBA               	goto	l7226
  6992                           
  6993                           ;menu.c: 229:         {;menu.c: 230:             return (d <= 29);
  6994  1EB2  301E               	movlw	30
  6995  1EB3  0240               	subwf	Is_Valid_Date@d,w
  6996  1EB4  1803               	btfsc	3,0
  6997  1EB5  2EB8               	goto	u7270
  6998  1EB6  3001               	movlw	1
  6999  1EB7  0008               	return
  7000  1EB8                     u7270:	
  7001  1EB8  3000               	movlw	0
  7002  1EB9  0008               	return
  7003  1EBA                     l7226:	
  7004                           
  7005                           ;menu.c: 232:         {;menu.c: 233:             return (d <= 28);
  7006  1EBA  301D               	movlw	29
  7007  1EBB  0240               	subwf	Is_Valid_Date@d,w
  7008  1EBC  1803               	btfsc	3,0
  7009  1EBD  2EC0               	goto	u7290
  7010  1EBE  3001               	movlw	1
  7011  1EBF  0008               	return
  7012  1EC0                     u7290:	
  7013  1EC0  3000               	movlw	0
  7014  1EC1  0008               	return
  7015  1EC2                     l7230:	
  7016                           
  7017                           ;menu.c: 239:     if (m == 4 || m == 6 || m == 9 || m == 11)
  7018  1EC2  3004               	movlw	4
  7019  1EC3  063D               	xorwf	Is_Valid_Date@m,w
  7020  1EC4  1903               	btfsc	3,2
  7021  1EC5  2ED2               	goto	l7238
  7022  1EC6  3006               	movlw	6
  7023  1EC7  063D               	xorwf	Is_Valid_Date@m,w
  7024  1EC8  1903               	btfsc	3,2
  7025  1EC9  2ED2               	goto	l7238
  7026  1ECA  3009               	movlw	9
  7027  1ECB  063D               	xorwf	Is_Valid_Date@m,w
  7028  1ECC  1903               	btfsc	3,2
  7029  1ECD  2ED2               	goto	l7238
  7030  1ECE  300B               	movlw	11
  7031  1ECF  063D               	xorwf	Is_Valid_Date@m,w
  7032  1ED0  1D03               	btfss	3,2
  7033  1ED1  2EDA               	goto	l7242
  7034  1ED2                     l7238:	
  7035                           
  7036                           ;menu.c: 240:     {;menu.c: 241:         return (d <= 30);
  7037  1ED2  301F               	movlw	31
  7038  1ED3  0240               	subwf	Is_Valid_Date@d,w
  7039  1ED4  1803               	btfsc	3,0
  7040  1ED5  2ED8               	goto	u7350
  7041  1ED6  3001               	movlw	1
  7042  1ED7  0008               	return
  7043  1ED8                     u7350:	
  7044  1ED8  3000               	movlw	0
  7045  1ED9  0008               	return
  7046  1EDA                     l7242:	
  7047                           
  7048                           ;menu.c: 244:     return 1;
  7049  1EDA  3001               	movlw	1
  7050  1EDB  0008               	return
  7051  1EDC                     __end_of_Is_Valid_Date:	
  7052                           
  7053                           	psect	text15
  7054  19F1                     __ptext15:	
  7055 ;; *************** function _Is_Leap *****************
  7056 ;; Defined at:
  7057 ;;		line 189 in file "menu.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  year            2   26[BANK0 ] unsigned int 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;		None
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  1    wreg      unsigned char 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 300/800
  7068 ;;		On exit  : 300/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7071 ;;      Params:         0       2       0       0       0
  7072 ;;      Locals:         0       1       0       0       0
  7073 ;;      Temps:          0       0       0       0       0
  7074 ;;      Totals:         0       3       0       0       0
  7075 ;;Total ram usage:        3 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    5
  7078 ;; This function calls:
  7079 ;;		___lwmod
  7080 ;; This function is called by:
  7081 ;;		_Is_Valid_Date
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           
  7086                           ;psect for function _Is_Leap
  7087  19F1                     _Is_Leap:	
  7088                           
  7089                           ;menu.c: 189: unsigned char Is_Leap(unsigned int year);menu.c: 190: {;menu.c: 194:     r
      +                          eturn (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));
  7090                           
  7091                           ;incstack = 0
  7092 ;; hardware stack exceeded
  7093                           ; Regs used in _Is_Leap: [wreg+status,2+status,0+pclath+cstack]
  7094  19F1  01BC               	clrf	_Is_Leap$1539
  7095  19F2  0ABC               	incf	_Is_Leap$1539,f
  7096  19F3  083A               	movf	Is_Leap@year,w
  7097  19F4  3903               	andlw	3
  7098  19F5  1D03               	btfss	3,2
  7099  19F6  2A08               	goto	l6788
  7100  19F7  3064               	movlw	100
  7101  19F8  00B4               	movwf	___lwmod@divisor
  7102  19F9  3000               	movlw	0
  7103  19FA  00B5               	movwf	___lwmod@divisor+1
  7104  19FB  083B               	movf	Is_Leap@year+1,w
  7105  19FC  00B7               	movwf	___lwmod@dividend+1
  7106  19FD  083A               	movf	Is_Leap@year,w
  7107  19FE  00B6               	movwf	___lwmod@dividend
  7108  19FF  160A  158A  229E  160A  158A  	fcall	___lwmod
  7109  1A04  0834               	movf	?___lwmod,w
  7110  1A05  0435               	iorwf	?___lwmod+1,w
  7111  1A06  1D03               	btfss	3,2
  7112  1A07  2A17               	goto	l6792
  7113  1A08                     l6788:	
  7114  1A08  3090               	movlw	144
  7115  1A09  00B4               	movwf	___lwmod@divisor
  7116  1A0A  3001               	movlw	1
  7117  1A0B  00B5               	movwf	___lwmod@divisor+1
  7118  1A0C  083B               	movf	Is_Leap@year+1,w
  7119  1A0D  00B7               	movwf	___lwmod@dividend+1
  7120  1A0E  083A               	movf	Is_Leap@year,w
  7121  1A0F  00B6               	movwf	___lwmod@dividend
  7122  1A10  160A  158A  229E   	fcall	___lwmod
  7123  1A13  0834               	movf	?___lwmod,w
  7124  1A14  0435               	iorwf	?___lwmod+1,w
  7125  1A15  1D03               	btfss	3,2
  7126  1A16  01BC               	clrf	_Is_Leap$1539
  7127  1A17                     l6792:	
  7128  1A17  083C               	movf	_Is_Leap$1539,w
  7129  1A18  0008               	return
  7130  1A19                     __end_of_Is_Leap:	
  7131                           
  7132                           	psect	text16
  7133  1458                     __ptext16:	
  7134 ;; *************** function _Find_Weekday *****************
  7135 ;; Defined at:
  7136 ;;		line 255 in file "menu.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  year            2   26[BANK0 ] unsigned int 
  7139 ;;  month           2   28[BANK0 ] unsigned int 
  7140 ;;  day             2   30[BANK0 ] unsigned int 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  wday            1   43[BANK0 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      unsigned char 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 300/800
  7149 ;;		On exit  : 300/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7152 ;;      Params:         0       6       0       0       0
  7153 ;;      Locals:         0       1       0       0       0
  7154 ;;      Temps:          0      11       0       0       0
  7155 ;;      Totals:         0      18       0       0       0
  7156 ;;Total ram usage:       18 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    5
  7159 ;; This function calls:
  7160 ;;		___lwdiv
  7161 ;;		___lwmod
  7162 ;;		___wmul
  7163 ;; This function is called by:
  7164 ;;		_Menu_Set_Time
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function _Find_Weekday
  7170  1458                     _Find_Weekday:	
  7171                           
  7172                           ;menu.c: 258:     wday=(day += month < 3 ? year-- : year - 2, 23*month/9 + day + 4 +
  7173                           
  7174                           ;incstack = 0
  7175                           ; Regs used in _Find_Weekday: [wreg+status,2+status,0+pclath+cstack]
  7176  1458  3000               	movlw	0
  7177  1459  023D               	subwf	Find_Weekday@month+1,w
  7178  145A  3003               	movlw	3
  7179  145B  1903               	skipnz
  7180  145C  023C               	subwf	Find_Weekday@month,w
  7181  145D  1C03               	skipc
  7182  145E  2C6E               	goto	l7252
  7183  145F  083A               	movf	Find_Weekday@year,w
  7184  1460  3EFE               	addlw	254
  7185  1461  00C0               	movwf	??_Find_Weekday
  7186  1462  083B               	movf	Find_Weekday@year+1,w
  7187  1463  1803               	skipnc
  7188  1464  3E01               	addlw	1
  7189  1465  3EFF               	addlw	255
  7190  1466  00C1               	movwf	??_Find_Weekday+1
  7191  1467  0840               	movf	??_Find_Weekday,w
  7192  1468  07BE               	addwf	Find_Weekday@day,f
  7193  1469  1803               	skipnc
  7194  146A  0ABF               	incf	Find_Weekday@day+1,f
  7195  146B  0841               	movf	??_Find_Weekday+1,w
  7196  146C  07BF               	addwf	Find_Weekday@day+1,f
  7197  146D  2C7A               	goto	l7254
  7198  146E                     l7252:	
  7199  146E  083A               	movf	Find_Weekday@year,w
  7200  146F  07BE               	addwf	Find_Weekday@day,f
  7201  1470  1803               	skipnc
  7202  1471  0ABF               	incf	Find_Weekday@day+1,f
  7203  1472  083B               	movf	Find_Weekday@year+1,w
  7204  1473  07BF               	addwf	Find_Weekday@day+1,f
  7205  1474  3001               	movlw	1
  7206  1475  02BA               	subwf	Find_Weekday@year,f
  7207  1476  3000               	movlw	0
  7208  1477  1C03               	skipc
  7209  1478  03BB               	decf	Find_Weekday@year+1,f
  7210  1479  02BB               	subwf	Find_Weekday@year+1,f
  7211  147A                     l7254:	
  7212  147A  3007               	movlw	7
  7213  147B  00B4               	movwf	___lwmod@divisor
  7214  147C  3000               	movlw	0
  7215  147D  00B5               	movwf	___lwmod@divisor+1
  7216  147E  083B               	movf	Find_Weekday@year+1,w
  7217  147F  00C1               	movwf	??_Find_Weekday+1
  7218  1480  083A               	movf	Find_Weekday@year,w
  7219  1481  00C0               	movwf	??_Find_Weekday
  7220  1482  1003               	clrc
  7221  1483  0CC1               	rrf	??_Find_Weekday+1,f
  7222  1484  0CC0               	rrf	??_Find_Weekday,f
  7223  1485  1003               	clrc
  7224  1486  0CC1               	rrf	??_Find_Weekday+1,f
  7225  1487  0CC0               	rrf	??_Find_Weekday,f
  7226  1488  3009               	movlw	9
  7227  1489  00AC               	movwf	___lwdiv@divisor
  7228  148A  3000               	movlw	0
  7229  148B  00AD               	movwf	___lwdiv@divisor+1
  7230  148C  083D               	movf	Find_Weekday@month+1,w
  7231  148D  00A7               	movwf	___wmul@multiplier+1
  7232  148E  083C               	movf	Find_Weekday@month,w
  7233  148F  00A6               	movwf	___wmul@multiplier
  7234  1490  3017               	movlw	23
  7235  1491  00A8               	movwf	___wmul@multiplicand
  7236  1492  3000               	movlw	0
  7237  1493  00A9               	movwf	___wmul@multiplicand+1
  7238  1494  160A  158A  2142  160A  118A  	fcall	___wmul
  7239  1499  0827               	movf	?___wmul+1,w
  7240  149A  00AF               	movwf	___lwdiv@dividend+1
  7241  149B  0826               	movf	?___wmul,w
  7242  149C  00AE               	movwf	___lwdiv@dividend
  7243  149D  160A  158A  23AF  160A  118A  	fcall	___lwdiv
  7244  14A2  0840               	movf	??_Find_Weekday,w
  7245  14A3  072C               	addwf	?___lwdiv,w
  7246  14A4  00C2               	movwf	??_Find_Weekday+2
  7247  14A5  0841               	movf	??_Find_Weekday+1,w
  7248  14A6  1803               	skipnc
  7249  14A7  0A41               	incf	??_Find_Weekday+1,w
  7250  14A8  072D               	addwf	?___lwdiv+1,w
  7251  14A9  00C3               	movwf	??_Find_Weekday+3
  7252  14AA  3090               	movlw	144
  7253  14AB  00AC               	movwf	___lwdiv@divisor
  7254  14AC  3001               	movlw	1
  7255  14AD  00AD               	movwf	___lwdiv@divisor+1
  7256  14AE  083B               	movf	Find_Weekday@year+1,w
  7257  14AF  00AF               	movwf	___lwdiv@dividend+1
  7258  14B0  083A               	movf	Find_Weekday@year,w
  7259  14B1  00AE               	movwf	___lwdiv@dividend
  7260  14B2  160A  158A  23AF  160A  118A  	fcall	___lwdiv
  7261  14B7  082C               	movf	?___lwdiv,w
  7262  14B8  0742               	addwf	??_Find_Weekday+2,w
  7263  14B9  00C4               	movwf	??_Find_Weekday+4
  7264  14BA  082D               	movf	?___lwdiv+1,w
  7265  14BB  1803               	skipnc
  7266  14BC  0A2D               	incf	?___lwdiv+1,w
  7267  14BD  0743               	addwf	??_Find_Weekday+3,w
  7268  14BE  00C5               	movwf	??_Find_Weekday+5
  7269  14BF  3064               	movlw	100
  7270  14C0  00AC               	movwf	___lwdiv@divisor
  7271  14C1  3000               	movlw	0
  7272  14C2  00AD               	movwf	___lwdiv@divisor+1
  7273  14C3  083B               	movf	Find_Weekday@year+1,w
  7274  14C4  00AF               	movwf	___lwdiv@dividend+1
  7275  14C5  083A               	movf	Find_Weekday@year,w
  7276  14C6  00AE               	movwf	___lwdiv@dividend
  7277  14C7  160A  158A  23AF  160A  118A  	fcall	___lwdiv
  7278  14CC  082C               	movf	?___lwdiv,w
  7279  14CD  0244               	subwf	??_Find_Weekday+4,w
  7280  14CE  00C6               	movwf	??_Find_Weekday+6
  7281  14CF  082D               	movf	?___lwdiv+1,w
  7282  14D0  1C03               	skipc
  7283  14D1  0A2D               	incf	?___lwdiv+1,w
  7284  14D2  0245               	subwf	??_Find_Weekday+5,w
  7285  14D3  00C7               	movwf	??_Find_Weekday+7
  7286  14D4  083E               	movf	Find_Weekday@day,w
  7287  14D5  0746               	addwf	??_Find_Weekday+6,w
  7288  14D6  00C8               	movwf	??_Find_Weekday+8
  7289  14D7  083F               	movf	Find_Weekday@day+1,w
  7290  14D8  1803               	skipnc
  7291  14D9  0A3F               	incf	Find_Weekday@day+1,w
  7292  14DA  0747               	addwf	??_Find_Weekday+7,w
  7293  14DB  00C9               	movwf	??_Find_Weekday+9
  7294  14DC  0848               	movf	??_Find_Weekday+8,w
  7295  14DD  3E04               	addlw	4
  7296  14DE  00B6               	movwf	___lwmod@dividend
  7297  14DF  0849               	movf	??_Find_Weekday+9,w
  7298  14E0  1803               	skipnc
  7299  14E1  3E01               	addlw	1
  7300  14E2  3E00               	addlw	0
  7301  14E3  00B7               	movwf	___lwmod@dividend+1
  7302  14E4  160A  158A  229E   	fcall	___lwmod
  7303  14E7  0834               	movf	?___lwmod,w
  7304  14E8  3EFF               	addlw	255
  7305  14E9  00CA               	movwf	??_Find_Weekday+10
  7306  14EA  084A               	movf	??_Find_Weekday+10,w
  7307  14EB  00CB               	movwf	Find_Weekday@wday
  7308                           
  7309                           ;menu.c: 261:     return wday;
  7310  14EC  084B               	movf	Find_Weekday@wday,w
  7311  14ED  0008               	return
  7312  14EE                     __end_of_Find_Weekday:	
  7313                           
  7314                           	psect	text17
  7315  1A9E                     __ptext17:	
  7316 ;; *************** function ___lwmod *****************
  7317 ;; Defined at:
  7318 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/lwmod.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  divisor         2   20[BANK0 ] unsigned int 
  7321 ;;  dividend        2   22[BANK0 ] unsigned int 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  counter         1   25[BANK0 ] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  2   20[BANK0 ] unsigned int 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0
  7328 ;; Tracked objects:
  7329 ;;		On entry : 300/800
  7330 ;;		On exit  : 300/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7333 ;;      Params:         0       4       0       0       0
  7334 ;;      Locals:         0       1       0       0       0
  7335 ;;      Temps:          0       1       0       0       0
  7336 ;;      Totals:         0       6       0       0       0
  7337 ;;Total ram usage:        6 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    4
  7340 ;; This function calls:
  7341 ;;		Nothing
  7342 ;; This function is called by:
  7343 ;;		_Is_Leap
  7344 ;;		_Find_Weekday
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           
  7349                           ;psect for function ___lwmod
  7350  1A9E                     ___lwmod:	
  7351                           
  7352                           ;incstack = 0
  7353 ;; hardware stack exceeded
  7354                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7355  1A9E  0834               	movf	___lwmod@divisor,w
  7356  1A9F  0435               	iorwf	___lwmod@divisor+1,w
  7357  1AA0  1903               	btfsc	3,2
  7358  1AA1  2ACB               	goto	l6594
  7359  1AA2  01B9               	clrf	___lwmod@counter
  7360  1AA3  0AB9               	incf	___lwmod@counter,f
  7361  1AA4                     l6584:	
  7362  1AA4  1BB5               	btfsc	___lwmod@divisor+1,7
  7363  1AA5  2AB2               	goto	l6586
  7364  1AA6  3001               	movlw	1
  7365  1AA7                     u6265:	
  7366  1AA7  1003               	clrc
  7367  1AA8  0DB4               	rlf	___lwmod@divisor,f
  7368  1AA9  0DB5               	rlf	___lwmod@divisor+1,f
  7369  1AAA  3EFF               	addlw	-1
  7370  1AAB  1D03               	skipz
  7371  1AAC  2AA7               	goto	u6265
  7372  1AAD  3001               	movlw	1
  7373  1AAE  00B8               	movwf	??___lwmod
  7374  1AAF  0838               	movf	??___lwmod,w
  7375  1AB0  07B9               	addwf	___lwmod@counter,f
  7376  1AB1  2AA4               	goto	l6584
  7377  1AB2                     l6586:	
  7378  1AB2  0835               	movf	___lwmod@divisor+1,w
  7379  1AB3  0237               	subwf	___lwmod@dividend+1,w
  7380  1AB4  1D03               	skipz
  7381  1AB5  2AB8               	goto	u6285
  7382  1AB6  0834               	movf	___lwmod@divisor,w
  7383  1AB7  0236               	subwf	___lwmod@dividend,w
  7384  1AB8                     u6285:	
  7385  1AB8  1C03               	skipc
  7386  1AB9  2AC0               	goto	l6590
  7387  1ABA  0834               	movf	___lwmod@divisor,w
  7388  1ABB  02B6               	subwf	___lwmod@dividend,f
  7389  1ABC  0835               	movf	___lwmod@divisor+1,w
  7390  1ABD  1C03               	skipc
  7391  1ABE  03B7               	decf	___lwmod@dividend+1,f
  7392  1ABF  02B7               	subwf	___lwmod@dividend+1,f
  7393  1AC0                     l6590:	
  7394  1AC0  3001               	movlw	1
  7395  1AC1                     u6295:	
  7396  1AC1  1003               	clrc
  7397  1AC2  0CB5               	rrf	___lwmod@divisor+1,f
  7398  1AC3  0CB4               	rrf	___lwmod@divisor,f
  7399  1AC4  3EFF               	addlw	-1
  7400  1AC5  1D03               	skipz
  7401  1AC6  2AC1               	goto	u6295
  7402  1AC7  3001               	movlw	1
  7403  1AC8  02B9               	subwf	___lwmod@counter,f
  7404  1AC9  1D03               	btfss	3,2
  7405  1ACA  2AB2               	goto	l6586
  7406  1ACB                     l6594:	
  7407  1ACB  0837               	movf	___lwmod@dividend+1,w
  7408  1ACC  00B5               	movwf	?___lwmod+1
  7409  1ACD  0836               	movf	___lwmod@dividend,w
  7410  1ACE  00B4               	movwf	?___lwmod
  7411  1ACF  0008               	return
  7412  1AD0                     __end_of___lwmod:	
  7413                           
  7414                           	psect	text18
  7415  1344                     __ptext18:	
  7416 ;; *************** function _Button_Handler *****************
  7417 ;; Defined at:
  7418 ;;		line 97 in file "key-handler.c"
  7419 ;; Parameters:    Size  Location     Type
  7420 ;;  keydef          1    wreg     PTR struct .
  7421 ;;		 -> main@keydef(6), 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  keydef          1   17[BANK0 ] PTR struct .
  7424 ;;		 -> main@keydef(6), 
  7425 ;;  button          1   18[BANK0 ] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      unsigned char 
  7428 ;; Registers used:
  7429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 300/800
  7432 ;;		On exit  : 300/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7435 ;;      Params:         0       0       0       0       0
  7436 ;;      Locals:         0       2       0       0       0
  7437 ;;      Temps:          0       1       0       0       0
  7438 ;;      Totals:         0       3       0       0       0
  7439 ;;Total ram usage:        3 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    5
  7442 ;; This function calls:
  7443 ;;		_Key_Press
  7444 ;; This function is called by:
  7445 ;;		_Show_Time
  7446 ;;		_Menu_Set_Time
  7447 ;;		_Select_Menu
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _Button_Handler
  7453  1344                     _Button_Handler:	
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _Button_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7457                           ;Button_Handler@keydef stored from wreg
  7458  1344  00B1               	movwf	Button_Handler@keydef
  7459                           
  7460                           ;key-handler.c: 97: unsigned char Button_Handler(KeyPointerStruct *keydef);key-handler.c
      +                          : 98: {;key-handler.c: 99:     unsigned char button;;key-handler.c: 101:     button=Key_
      +                          Press(keydef->set_rtc);
  7461  1345  0831               	movf	Button_Handler@keydef,w
  7462  1346  0084               	movwf	4
  7463  1347  1783               	bsf	3,7	;select IRP bank2
  7464  1348  0800               	movf	0,w
  7465  1349  00A6               	movwf	Key_Press@button
  7466  134A  3000               	movlw	0
  7467  134B  00A7               	movwf	Key_Press@button+1
  7468  134C  120A  158A  2117  160A  118A  	fcall	_Key_Press
  7469  1351  1283               	bcf	3,5	;RP0=0, select bank0
  7470  1352  00B0               	movwf	??_Button_Handler
  7471  1353  0830               	movf	??_Button_Handler,w
  7472  1354  00B2               	movwf	Button_Handler@button
  7473                           
  7474                           ;key-handler.c: 102:     if(button!=k_no_key_press)
  7475  1355  300C               	movlw	12
  7476  1356  0632               	xorwf	Button_Handler@button,w
  7477  1357  1903               	btfsc	3,2
  7478  1358  2B5B               	goto	l7116
  7479  1359                     l7112:	
  7480                           
  7481                           ;key-handler.c: 103:     {;key-handler.c: 104:         return button;
  7482  1359  0832               	movf	Button_Handler@button,w
  7483  135A  0008               	return
  7484  135B                     l7116:	
  7485                           
  7486                           ;key-handler.c: 106:     button=Key_Press(keydef->set_down);
  7487  135B  0831               	movf	Button_Handler@keydef,w
  7488  135C  3E05               	addlw	5
  7489  135D  0084               	movwf	4
  7490  135E  1783               	bsf	3,7	;select IRP bank2
  7491  135F  0800               	movf	0,w
  7492  1360  00A6               	movwf	Key_Press@button
  7493  1361  3001               	movlw	1
  7494  1362  00A7               	movwf	Key_Press@button+1
  7495  1363  120A  158A  2117  160A  118A  	fcall	_Key_Press
  7496  1368  1283               	bcf	3,5	;RP0=0, select bank0
  7497  1369  00B0               	movwf	??_Button_Handler
  7498  136A  0830               	movf	??_Button_Handler,w
  7499  136B  00B2               	movwf	Button_Handler@button
  7500                           
  7501                           ;key-handler.c: 107:     if(button!=k_no_key_press)
  7502  136C  300C               	movlw	12
  7503  136D  0632               	xorwf	Button_Handler@button,w
  7504  136E  1D03               	btfss	3,2
  7505  136F  2B59               	goto	l7112
  7506                           
  7507                           ;key-handler.c: 111:     button=Key_Press(keydef->set_right);
  7508  1370  0831               	movf	Button_Handler@keydef,w
  7509  1371  3E03               	addlw	3
  7510  1372  0084               	movwf	4
  7511  1373  1783               	bsf	3,7	;select IRP bank2
  7512  1374  0800               	movf	0,w
  7513  1375  00A6               	movwf	Key_Press@button
  7514  1376  3000               	movlw	0
  7515  1377  00A7               	movwf	Key_Press@button+1
  7516  1378  120A  158A  2117  160A  118A  	fcall	_Key_Press
  7517  137D  1283               	bcf	3,5	;RP0=0, select bank0
  7518  137E  00B0               	movwf	??_Button_Handler
  7519  137F  0830               	movf	??_Button_Handler,w
  7520  1380  00B2               	movwf	Button_Handler@button
  7521                           
  7522                           ;key-handler.c: 112:     if(button!=k_no_key_press)
  7523  1381  300C               	movlw	12
  7524  1382  0632               	xorwf	Button_Handler@button,w
  7525  1383  1D03               	btfss	3,2
  7526  1384  2B59               	goto	l7112
  7527                           
  7528                           ;key-handler.c: 116:     button=Key_Press(keydef->set_time1);
  7529  1385  0A31               	incf	Button_Handler@keydef,w
  7530  1386  0084               	movwf	4
  7531  1387  1783               	bsf	3,7	;select IRP bank2
  7532  1388  0800               	movf	0,w
  7533  1389  00A6               	movwf	Key_Press@button
  7534  138A  3000               	movlw	0
  7535  138B  00A7               	movwf	Key_Press@button+1
  7536  138C  120A  158A  2117  160A  118A  	fcall	_Key_Press
  7537  1391  1283               	bcf	3,5	;RP0=0, select bank0
  7538  1392  00B0               	movwf	??_Button_Handler
  7539  1393  0830               	movf	??_Button_Handler,w
  7540  1394  00B2               	movwf	Button_Handler@button
  7541                           
  7542                           ;key-handler.c: 117:     if(button!=k_no_key_press)
  7543  1395  300C               	movlw	12
  7544  1396  0632               	xorwf	Button_Handler@button,w
  7545  1397  1D03               	btfss	3,2
  7546  1398  2B59               	goto	l7112
  7547                           
  7548                           ;key-handler.c: 121:     button=Key_Press(keydef->set_time2);
  7549  1399  0831               	movf	Button_Handler@keydef,w
  7550  139A  3E02               	addlw	2
  7551  139B  0084               	movwf	4
  7552  139C  1783               	bsf	3,7	;select IRP bank2
  7553  139D  0800               	movf	0,w
  7554  139E  00A6               	movwf	Key_Press@button
  7555  139F  3000               	movlw	0
  7556  13A0  00A7               	movwf	Key_Press@button+1
  7557  13A1  120A  158A  2117  160A  118A  	fcall	_Key_Press
  7558  13A6  1283               	bcf	3,5	;RP0=0, select bank0
  7559  13A7  00B0               	movwf	??_Button_Handler
  7560  13A8  0830               	movf	??_Button_Handler,w
  7561  13A9  00B2               	movwf	Button_Handler@button
  7562                           
  7563                           ;key-handler.c: 122:     if(button!=k_no_key_press)
  7564  13AA  300C               	movlw	12
  7565  13AB  0632               	xorwf	Button_Handler@button,w
  7566  13AC  1D03               	btfss	3,2
  7567  13AD  2B59               	goto	l7112
  7568                           
  7569                           ;key-handler.c: 126:     button=Key_Press(keydef->set_up);
  7570  13AE  0831               	movf	Button_Handler@keydef,w
  7571  13AF  3E04               	addlw	4
  7572  13B0  0084               	movwf	4
  7573  13B1  1783               	bsf	3,7	;select IRP bank2
  7574  13B2  0800               	movf	0,w
  7575  13B3  00A6               	movwf	Key_Press@button
  7576  13B4  3001               	movlw	1
  7577  13B5  00A7               	movwf	Key_Press@button+1
  7578  13B6  120A  158A  2117  160A  118A  	fcall	_Key_Press
  7579  13BB  1283               	bcf	3,5	;RP0=0, select bank0
  7580  13BC  00B0               	movwf	??_Button_Handler
  7581  13BD  0830               	movf	??_Button_Handler,w
  7582  13BE  00B2               	movwf	Button_Handler@button
  7583                           
  7584                           ;key-handler.c: 127:     if(button!=k_no_key_press)
  7585  13BF  300C               	movlw	12
  7586  13C0  0632               	xorwf	Button_Handler@button,w
  7587  13C1  1D03               	btfss	3,2
  7588  13C2  2B59               	goto	l7112
  7589                           
  7590                           ;key-handler.c: 132:     return k_no_key_press;
  7591  13C3  300C               	movlw	12
  7592  13C4  0008               	return
  7593  13C5                     __end_of_Button_Handler:	
  7594                           
  7595                           	psect	text19
  7596  0917                     __ptext19:	
  7597 ;; *************** function _Key_Press *****************
  7598 ;; Defined at:
  7599 ;;		line 10 in file "key-handler.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;  button          2    6[BANK0 ] PTR struct .
  7602 ;;		 -> Button_Init@set_down(7), Button_Init@set_up(7), Button_Init@set_right(7), Button_Init@set_time2(7), 
  7603 ;;		 -> Button_Init@set_time1(7), Button_Init@set_rtc(7), 
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;		None
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  1    wreg      enum E1204
  7608 ;; Registers used:
  7609 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7610 ;; Tracked objects:
  7611 ;;		On entry : B00/800
  7612 ;;		On exit  : 200/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7615 ;;      Params:         0       2       0       0       0
  7616 ;;      Locals:         0       0       0       0       0
  7617 ;;      Temps:          0       8       0       0       0
  7618 ;;      Totals:         0      10       0       0       0
  7619 ;;Total ram usage:       10 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    4
  7622 ;; This function calls:
  7623 ;;		Nothing
  7624 ;; This function is called by:
  7625 ;;		_Button_Handler
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           
  7630                           ;psect for function _Key_Press
  7631  0917                     _Key_Press:	
  7632                           
  7633                           ;key-handler.c: 10: enum button_press Key_Press(KeyStruct *button);key-handler.c: 11: {;
      +                          key-handler.c: 12:  if(button->klock==0 && (*button->port & 1<<button->pin)==0)
  7634                           
  7635                           ;incstack = 0
  7636                           ; Regs used in _Key_Press: [wreg-fsr0h+status,2+status,0]
  7637  0917  0826               	movf	Key_Press@button,w
  7638  0918  0084               	movwf	4
  7639  0919  1783               	bsf	3,7
  7640  091A  1C27               	btfss	Key_Press@button+1,0
  7641  091B  1383               	bcf	3,7
  7642  091C  0800               	movf	0,w
  7643  091D  1D03               	btfss	3,2
  7644  091E  297D               	goto	l6760
  7645  091F  0826               	movf	Key_Press@button,w
  7646  0920  3E03               	addlw	3
  7647  0921  00A8               	movwf	??_Key_Press
  7648  0922  0827               	movf	Key_Press@button+1,w
  7649  0923  1803               	skipnc
  7650  0924  3E01               	addlw	1
  7651  0925  3E00               	addlw	0
  7652  0926  00A9               	movwf	??_Key_Press+1
  7653  0927  0828               	movf	??_Key_Press,w
  7654  0928  0084               	movwf	4
  7655  0929  1783               	bsf	3,7
  7656  092A  1C29               	btfss	??_Key_Press+1,0
  7657  092B  1383               	bcf	3,7
  7658  092C  0800               	movf	0,w
  7659  092D  00AA               	movwf	??_Key_Press+2
  7660  092E  0A84               	incf	4,f
  7661  092F  0800               	movf	0,w
  7662  0930  00AB               	movwf	??_Key_Press+3
  7663  0931  082A               	movf	??_Key_Press+2,w
  7664  0932  0084               	movwf	4
  7665  0933  1783               	bsf	3,7
  7666  0934  1C2B               	btfss	??_Key_Press+3,0
  7667  0935  1383               	bcf	3,7
  7668  0936  0800               	movf	0,w
  7669  0937  00AC               	movwf	??_Key_Press+4
  7670  0938  3001               	movlw	1
  7671  0939  00AD               	movwf	??_Key_Press+5
  7672  093A  0826               	movf	Key_Press@button,w
  7673  093B  3E01               	addlw	1
  7674  093C  00AE               	movwf	??_Key_Press+6
  7675  093D  0827               	movf	Key_Press@button+1,w
  7676  093E  1803               	skipnc
  7677  093F  3E01               	addlw	1
  7678  0940  3E00               	addlw	0
  7679  0941  00AF               	movwf	??_Key_Press+7
  7680  0942  082E               	movf	??_Key_Press+6,w
  7681  0943  0084               	movwf	4
  7682  0944  1783               	bsf	3,7
  7683  0945  1C2F               	btfss	??_Key_Press+7,0
  7684  0946  1383               	bcf	3,7
  7685  0947  0A00               	incf	0,w
  7686  0948  294B               	goto	u6514
  7687  0949                     u6515:	
  7688  0949  1003               	clrc
  7689  094A  0DAD               	rlf	??_Key_Press+5,f
  7690  094B                     u6514:	
  7691  094B  3EFF               	addlw	-1
  7692  094C  1D03               	skipz
  7693  094D  2949               	goto	u6515
  7694  094E  082D               	movf	??_Key_Press+5,w
  7695  094F  052C               	andwf	??_Key_Press+4,w
  7696  0950  1D03               	btfss	3,2
  7697  0951  297D               	goto	l6760
  7698                           
  7699                           ;key-handler.c: 13:  {;key-handler.c: 14:         button->klock=1;
  7700  0952  0826               	movf	Key_Press@button,w
  7701  0953  0084               	movwf	4
  7702  0954  1783               	bsf	3,7
  7703  0955  1C27               	btfss	Key_Press@button+1,0
  7704  0956  1383               	bcf	3,7
  7705  0957  0180               	clrf	0
  7706  0958  0A80               	incf	0,f
  7707                           
  7708                           ;key-handler.c: 15:         button->lock_long_press=1;
  7709  0959  0826               	movf	Key_Press@button,w
  7710  095A  3E02               	addlw	2
  7711  095B  00A8               	movwf	??_Key_Press
  7712  095C  0827               	movf	Key_Press@button+1,w
  7713  095D  1803               	skipnc
  7714  095E  3E01               	addlw	1
  7715  095F  3E00               	addlw	0
  7716  0960  00A9               	movwf	??_Key_Press+1
  7717  0961  0828               	movf	??_Key_Press,w
  7718  0962  0084               	movwf	4
  7719  0963  1783               	bsf	3,7
  7720  0964  1C29               	btfss	??_Key_Press+1,0
  7721  0965  1383               	bcf	3,7
  7722  0966  0180               	clrf	0
  7723  0967  0A80               	incf	0,f
  7724                           
  7725                           ;key-handler.c: 16:         g_button_timer=7800;
  7726  0968  3078               	movlw	120
  7727  0969  1683               	bsf	3,5	;RP0=1, select bank1
  7728  096A  00A0               	movwf	_g_button_timer^(0+128)	;volatile
  7729  096B  301E               	movlw	30
  7730  096C  00A1               	movwf	(_g_button_timer^(0+128)+1)	;volatile
  7731                           
  7732                           ;key-handler.c: 18:         return button->button_short_function;
  7733  096D  1283               	bcf	3,5	;RP0=0, select bank0
  7734  096E  0826               	movf	Key_Press@button,w
  7735  096F  3E05               	addlw	5
  7736  0970  00A8               	movwf	??_Key_Press
  7737  0971  0827               	movf	Key_Press@button+1,w
  7738  0972  1803               	skipnc
  7739  0973  3E01               	addlw	1
  7740  0974  3E00               	addlw	0
  7741  0975  00A9               	movwf	??_Key_Press+1
  7742  0976  0828               	movf	??_Key_Press,w
  7743  0977  0084               	movwf	4
  7744  0978  1783               	bsf	3,7
  7745  0979  1C29               	btfss	??_Key_Press+1,0
  7746  097A  1383               	bcf	3,7
  7747  097B  0800               	movf	0,w
  7748  097C  0008               	return
  7749  097D                     l6760:	
  7750  097D  0826               	movf	Key_Press@button,w
  7751  097E  3E03               	addlw	3
  7752  097F  00A8               	movwf	??_Key_Press
  7753  0980  0827               	movf	Key_Press@button+1,w
  7754  0981  1803               	skipnc
  7755  0982  3E01               	addlw	1
  7756  0983  3E00               	addlw	0
  7757  0984  00A9               	movwf	??_Key_Press+1
  7758  0985  0828               	movf	??_Key_Press,w
  7759  0986  0084               	movwf	4
  7760  0987  1783               	bsf	3,7
  7761  0988  1C29               	btfss	??_Key_Press+1,0
  7762  0989  1383               	bcf	3,7
  7763  098A  0800               	movf	0,w
  7764  098B  00AA               	movwf	??_Key_Press+2
  7765  098C  0A84               	incf	4,f
  7766  098D  0800               	movf	0,w
  7767  098E  00AB               	movwf	??_Key_Press+3
  7768  098F  082A               	movf	??_Key_Press+2,w
  7769  0990  0084               	movwf	4
  7770  0991  1783               	bsf	3,7
  7771  0992  1C2B               	btfss	??_Key_Press+3,0
  7772  0993  1383               	bcf	3,7
  7773  0994  0800               	movf	0,w
  7774  0995  00AC               	movwf	??_Key_Press+4
  7775  0996  3001               	movlw	1
  7776  0997  00AD               	movwf	??_Key_Press+5
  7777  0998  0826               	movf	Key_Press@button,w
  7778  0999  3E01               	addlw	1
  7779  099A  00AE               	movwf	??_Key_Press+6
  7780  099B  0827               	movf	Key_Press@button+1,w
  7781  099C  1803               	skipnc
  7782  099D  3E01               	addlw	1
  7783  099E  3E00               	addlw	0
  7784  099F  00AF               	movwf	??_Key_Press+7
  7785  09A0  082E               	movf	??_Key_Press+6,w
  7786  09A1  0084               	movwf	4
  7787  09A2  1783               	bsf	3,7
  7788  09A3  1C2F               	btfss	??_Key_Press+7,0
  7789  09A4  1383               	bcf	3,7
  7790  09A5  0A00               	incf	0,w
  7791  09A6  29A9               	goto	u6534
  7792  09A7                     u6535:	
  7793  09A7  1003               	clrc
  7794  09A8  0DAD               	rlf	??_Key_Press+5,f
  7795  09A9                     u6534:	
  7796  09A9  3EFF               	addlw	-1
  7797  09AA  1D03               	skipz
  7798  09AB  29A7               	goto	u6535
  7799  09AC  082D               	movf	??_Key_Press+5,w
  7800  09AD  052C               	andwf	??_Key_Press+4,w
  7801  09AE  1903               	btfsc	3,2
  7802  09AF  29D6               	goto	l6770
  7803  09B0  0826               	movf	Key_Press@button,w
  7804  09B1  0084               	movwf	4
  7805  09B2  1783               	bsf	3,7
  7806  09B3  1C27               	btfss	Key_Press@button+1,0
  7807  09B4  1383               	bcf	3,7
  7808  09B5  0300               	decf	0,w
  7809  09B6  1D03               	btfss	3,2
  7810  09B7  29D6               	goto	l6770
  7811                           
  7812                           ;key-handler.c: 21:  {;key-handler.c: 22:         if(g_button_timer<(7800 -800))
  7813  09B8  301B               	movlw	27
  7814  09B9  1683               	bsf	3,5	;RP0=1, select bank1
  7815  09BA  0221               	subwf	(_g_button_timer+1)^(0+128),w	;volatile
  7816  09BB  3058               	movlw	88
  7817  09BC  1903               	skipnz
  7818  09BD  0220               	subwf	_g_button_timer^(0+128),w	;volatile
  7819  09BE  1803               	skipnc
  7820  09BF  2A09               	goto	l6778
  7821                           
  7822                           ;key-handler.c: 23:         {;key-handler.c: 24:             button->klock=0;
  7823  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  7824  09C1  0826               	movf	Key_Press@button,w
  7825  09C2  0084               	movwf	4
  7826  09C3  1783               	bsf	3,7
  7827  09C4  1C27               	btfss	Key_Press@button+1,0
  7828  09C5  1383               	bcf	3,7
  7829  09C6  0180               	clrf	0
  7830                           
  7831                           ;key-handler.c: 25:             button->lock_long_press=0;
  7832  09C7  0826               	movf	Key_Press@button,w
  7833  09C8  3E02               	addlw	2
  7834  09C9  00A8               	movwf	??_Key_Press
  7835  09CA  0827               	movf	Key_Press@button+1,w
  7836  09CB  1803               	skipnc
  7837  09CC  3E01               	addlw	1
  7838  09CD  3E00               	addlw	0
  7839  09CE  00A9               	movwf	??_Key_Press+1
  7840  09CF  0828               	movf	??_Key_Press,w
  7841  09D0  0084               	movwf	4
  7842  09D1  1783               	bsf	3,7
  7843  09D2  1C29               	btfss	??_Key_Press+1,0
  7844  09D3  1383               	bcf	3,7
  7845  09D4  0180               	clrf	0
  7846  09D5  2A09               	goto	l6778
  7847  09D6                     l6770:	
  7848  09D6  0826               	movf	Key_Press@button,w
  7849  09D7  3E02               	addlw	2
  7850  09D8  00A8               	movwf	??_Key_Press
  7851  09D9  0827               	movf	Key_Press@button+1,w
  7852  09DA  1803               	skipnc
  7853  09DB  3E01               	addlw	1
  7854  09DC  3E00               	addlw	0
  7855  09DD  00A9               	movwf	??_Key_Press+1
  7856  09DE  0828               	movf	??_Key_Press,w
  7857  09DF  0084               	movwf	4
  7858  09E0  1783               	bsf	3,7
  7859  09E1  1C29               	btfss	??_Key_Press+1,0
  7860  09E2  1383               	bcf	3,7
  7861  09E3  0300               	decf	0,w
  7862  09E4  1D03               	btfss	3,2
  7863  09E5  2A09               	goto	l6778
  7864  09E6  1683               	bsf	3,5	;RP0=1, select bank1
  7865  09E7  0820               	movf	_g_button_timer^(0+128),w	;volatile
  7866  09E8  0421               	iorwf	(_g_button_timer+1)^(0+128),w	;volatile
  7867  09E9  1D03               	btfss	3,2
  7868  09EA  2A09               	goto	l6778
  7869                           
  7870                           ;key-handler.c: 29:     {;key-handler.c: 30:         button->lock_long_press=0;
  7871  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  7872  09EC  0826               	movf	Key_Press@button,w
  7873  09ED  3E02               	addlw	2
  7874  09EE  00A8               	movwf	??_Key_Press
  7875  09EF  0827               	movf	Key_Press@button+1,w
  7876  09F0  1803               	skipnc
  7877  09F1  3E01               	addlw	1
  7878  09F2  3E00               	addlw	0
  7879  09F3  00A9               	movwf	??_Key_Press+1
  7880  09F4  0828               	movf	??_Key_Press,w
  7881  09F5  0084               	movwf	4
  7882  09F6  1783               	bsf	3,7
  7883  09F7  1C29               	btfss	??_Key_Press+1,0
  7884  09F8  1383               	bcf	3,7
  7885  09F9  0180               	clrf	0
  7886                           
  7887                           ;key-handler.c: 31:         return button->button_long_function;
  7888  09FA  0826               	movf	Key_Press@button,w
  7889  09FB  3E06               	addlw	6
  7890  09FC  00A8               	movwf	??_Key_Press
  7891  09FD  0827               	movf	Key_Press@button+1,w
  7892  09FE  1803               	skipnc
  7893  09FF  3E01               	addlw	1
  7894  0A00  3E00               	addlw	0
  7895  0A01  00A9               	movwf	??_Key_Press+1
  7896  0A02  0828               	movf	??_Key_Press,w
  7897  0A03  0084               	movwf	4
  7898  0A04  1783               	bsf	3,7
  7899  0A05  1C29               	btfss	??_Key_Press+1,0
  7900  0A06  1383               	bcf	3,7
  7901  0A07  0800               	movf	0,w
  7902  0A08  0008               	return
  7903  0A09                     l6778:	
  7904                           
  7905                           ;key-handler.c: 34:     return k_no_key_press;
  7906  0A09  300C               	movlw	12
  7907  0A0A  0008               	return
  7908  0A0B                     __end_of_Key_Press:	
  7909                           
  7910                           	psect	text20
  7911  1CF3                     __ptext20:	
  7912 ;; *************** function _ProcessRCVData *****************
  7913 ;; Defined at:
  7914 ;;		line 282 in file "manchester_decode.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;  DataRCV         1    wreg     PTR struct .
  7917 ;;		 -> main@data_rcv(5), 
  7918 ;;  time            1   42[BANK0 ] PTR struct .
  7919 ;;		 -> main@time(7), 
  7920 ;;  time_limit      1   43[BANK0 ] PTR struct .
  7921 ;;		 -> main@menudef(7), 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;  DataRCV         1   45[BANK0 ] PTR struct .
  7924 ;;		 -> main@data_rcv(5), 
  7925 ;; Return value:  Size  Location     Type
  7926 ;;                  1    wreg      void 
  7927 ;; Registers used:
  7928 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7929 ;; Tracked objects:
  7930 ;;		On entry : 300/800
  7931 ;;		On exit  : 200/0
  7932 ;;		Unchanged: 0/0
  7933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7934 ;;      Params:         0       2       0       0       0
  7935 ;;      Locals:         0       1       0       0       0
  7936 ;;      Temps:          0       1       0       0       0
  7937 ;;      Totals:         0       4       0       0       0
  7938 ;;Total ram usage:        4 bytes
  7939 ;; Hardware stack levels used:    1
  7940 ;; Hardware stack levels required when called:    9
  7941 ;; This function calls:
  7942 ;;		_CRC_check
  7943 ;;		_Check_Event
  7944 ;;		_Check_Time_Date
  7945 ;;		_FrameDecode
  7946 ;; This function is called by:
  7947 ;;		_main
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           
  7952                           ;psect for function _ProcessRCVData
  7953  1CF3                     _ProcessRCVData:	
  7954                           
  7955                           ;incstack = 0
  7956 ;; hardware stack exceeded
  7957                           ; Regs used in _ProcessRCVData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7958                           ;ProcessRCVData@DataRCV stored from wreg
  7959  1CF3  00CD               	movwf	ProcessRCVData@DataRCV
  7960                           
  7961                           ;manchester_decode.c: 282: void ProcessRCVData(DataStruct *DataRCV, TimeStruct *time,;ma
      +                          nchester_decode.c: 283:                     MenuParamPonterStruct *time_limit);mancheste
      +                          r_decode.c: 284: {;manchester_decode.c: 285:     if(g_reciver_ccp2_isr_fire_flag==1)
  7962  1CF4  1683               	bsf	3,5	;RP0=1, select bank1
  7963  1CF5  032E               	decf	_g_reciver_ccp2_isr_fire_flag^(0+128),w	;volatile
  7964  1CF6  1D03               	btfss	3,2
  7965  1CF7  0008               	return
  7966                           
  7967                           ;manchester_decode.c: 286:     {;manchester_decode.c: 294:         if(PORTCbits.RC1 == 0
      +                          )
  7968  1CF8  1283               	bcf	3,5	;RP0=0, select bank0
  7969  1CF9  1887               	btfsc	7,1	;volatile
  7970  1CFA  2CFF               	goto	l8334
  7971                           
  7972                           ;manchester_decode.c: 295:         {;manchester_decode.c: 296:             g_generic_tim
      +                          er=80;
  7973  1CFB  3050               	movlw	80
  7974  1CFC  00D9               	movwf	_g_generic_timer	;volatile
  7975  1CFD  3000               	movlw	0
  7976  1CFE  00DA               	movwf	_g_generic_timer+1	;volatile
  7977  1CFF                     l8334:	
  7978                           
  7979                           ;manchester_decode.c: 300:         if(g_generic_timer==0)
  7980  1CFF  0859               	movf	_g_generic_timer,w	;volatile
  7981  1D00  045A               	iorwf	_g_generic_timer+1,w	;volatile
  7982  1D01  1D03               	btfss	3,2
  7983  1D02  0008               	return
  7984  1D03                     l8350:	
  7985                           
  7986                           ;manchester_decode.c: 302:             while(FrameDecode(DataRCV)!=0xFF)
  7987  1D03  084D               	movf	ProcessRCVData@DataRCV,w
  7988  1D04  160A  158A  25D4  160A  158A  	fcall	_FrameDecode
  7989  1D09  0A29               	incf	?_FrameDecode,w
  7990  1D0A  042A               	iorwf	?_FrameDecode+1,w
  7991  1D0B  1903               	btfsc	3,2
  7992  1D0C  2D3A               	goto	l8352
  7993                           
  7994                           ;manchester_decode.c: 303:             {;manchester_decode.c: 304:                 if(Da
      +                          taRCV->RCV_Frame)
  7995  1D0D  084D               	movf	ProcessRCVData@DataRCV,w
  7996  1D0E  3E04               	addlw	4
  7997  1D0F  0084               	movwf	4
  7998  1D10  1783               	bsf	3,7	;select IRP bank2
  7999  1D11  0800               	movf	0,w
  8000  1D12  1903               	btfsc	3,2
  8001  1D13  2D03               	goto	l8350
  8002                           
  8003                           ;manchester_decode.c: 305:                 {;manchester_decode.c: 306:                  
      +                             if(CRC_check(DataRCV) && Check_Time_Date(time, time_limit))
  8004  1D14  084D               	movf	ProcessRCVData@DataRCV,w
  8005  1D15  160A  158A  2121  160A  158A  	fcall	_CRC_check
  8006  1D1A  3A00               	xorlw	0
  8007  1D1B  1903               	skipnz
  8008  1D1C  2D33               	goto	l8348
  8009  1D1D  084B               	movf	ProcessRCVData@time_limit,w
  8010  1D1E  00CC               	movwf	??_ProcessRCVData
  8011  1D1F  084C               	movf	??_ProcessRCVData,w
  8012  1D20  00C2               	movwf	Check_Time_Date@time_limit
  8013  1D21  084A               	movf	ProcessRCVData@time,w
  8014  1D22  160A  118A  25A4  160A  158A  	fcall	_Check_Time_Date
  8015  1D27  3A00               	xorlw	0
  8016  1D28  1903               	skipnz
  8017  1D29  2D33               	goto	l8348
  8018                           
  8019                           ;manchester_decode.c: 307:                     {;manchester_decode.c: 308:              
      +                                     if(Check_Event(DataRCV))
  8020  1D2A  084D               	movf	ProcessRCVData@DataRCV,w
  8021  1D2B  160A  118A  22C9  160A  158A  	fcall	_Check_Event
  8022  1D30  3A00               	xorlw	0
  8023  1D31  1D03               	btfss	3,2
  8024  1D32  0008               	return
  8025  1D33                     l8348:	
  8026                           
  8027                           ;manchester_decode.c: 317:                     DataRCV->RCV_Frame=0;
  8028  1D33  1283               	bcf	3,5	;RP0=0, select bank0
  8029  1D34  084D               	movf	ProcessRCVData@DataRCV,w
  8030  1D35  3E04               	addlw	4
  8031  1D36  0084               	movwf	4
  8032  1D37  1783               	bsf	3,7	;select IRP bank2
  8033  1D38  0180               	clrf	0
  8034  1D39  2D03               	goto	l8350
  8035  1D3A                     l8352:	
  8036                           
  8037                           ;manchester_decode.c: 320:             g_reciver_ccp2_isr_fire_flag=0;
  8038  1D3A  1683               	bsf	3,5	;RP0=1, select bank1
  8039  1D3B  01AE               	clrf	_g_reciver_ccp2_isr_fire_flag^(0+128)	;volatile
  8040  1D3C  0008               	return
  8041  1D3D                     __end_of_ProcessRCVData:	
  8042                           
  8043                           	psect	text21
  8044  15A4                     __ptext21:	
  8045 ;; *************** function _Check_Time_Date *****************
  8046 ;; Defined at:
  8047 ;;		line 325 in file "manchester_decode.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;  time            1    wreg     PTR struct .
  8050 ;;		 -> main@time(7), 
  8051 ;;  time_limit      1   34[BANK0 ] PTR struct .
  8052 ;;		 -> main@menudef(7), 
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;  time            1   41[BANK0 ] PTR struct .
  8055 ;;		 -> main@time(7), 
  8056 ;;  time_limit_m    2   39[BANK0 ] unsigned int 
  8057 ;;  current_time    2   37[BANK0 ] unsigned int 
  8058 ;;  time_limit_m    2   35[BANK0 ] unsigned int 
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      unsigned char 
  8061 ;; Registers used:
  8062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8063 ;; Tracked objects:
  8064 ;;		On entry : B00/800
  8065 ;;		On exit  : B00/800
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8068 ;;      Params:         0       1       0       0       0
  8069 ;;      Locals:         0       7       0       0       0
  8070 ;;      Temps:          0       0       0       0       0
  8071 ;;      Totals:         0       8       0       0       0
  8072 ;;Total ram usage:        8 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:    8
  8075 ;; This function calls:
  8076 ;;		_PCF8583_Read_Time_Date
  8077 ;;		___wmul
  8078 ;; This function is called by:
  8079 ;;		_ProcessRCVData
  8080 ;; This function uses a non-reentrant model
  8081 ;;
  8082                           
  8083                           
  8084                           ;psect for function _Check_Time_Date
  8085  15A4                     _Check_Time_Date:	
  8086                           
  8087                           ;incstack = 0
  8088 ;; hardware stack exceeded
  8089                           ; Regs used in _Check_Time_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8090                           ;Check_Time_Date@time stored from wreg
  8091  15A4  00C9               	movwf	Check_Time_Date@time
  8092                           
  8093                           ;manchester_decode.c: 325: unsigned char Check_Time_Date(TimeStruct *time, MenuParamPont
      +                          erStruct *time_limit);manchester_decode.c: 326: {;manchester_decode.c: 327:     unsigned
      +                           int time_limit_min_1, time_limit_min_2, current_time_min;;manchester_decode.c: 329:    
      +                           PCF8583_Read_Time_Date(time);
  8094  15A5  0849               	movf	Check_Time_Date@time,w
  8095  15A6  00B5               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  8096  15A7  3001               	movlw	1
  8097  15A8  00B6               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  8098  15A9  120A  118A  26CF  160A  118A  	fcall	_PCF8583_Read_Time_Date
  8099                           
  8100                           ;manchester_decode.c: 331:     if(time->weekday==saturday || time->weekday==sunday)
  8101  15AE  1283               	bcf	3,5	;RP0=0, select bank0
  8102  15AF  0849               	movf	Check_Time_Date@time,w
  8103  15B0  3E06               	addlw	6
  8104  15B1  0084               	movwf	4
  8105  15B2  3005               	movlw	5
  8106  15B3  1783               	bsf	3,7	;select IRP bank2
  8107  15B4  0600               	xorwf	0,w
  8108  15B5  1903               	btfsc	3,2
  8109  15B6  2DBE               	goto	l8140
  8110  15B7  0849               	movf	Check_Time_Date@time,w
  8111  15B8  3E06               	addlw	6
  8112  15B9  0084               	movwf	4
  8113  15BA  3006               	movlw	6
  8114  15BB  0600               	xorwf	0,w
  8115  15BC  1D03               	btfss	3,2
  8116  15BD  2E3A               	goto	l8156
  8117  15BE                     l8140:	
  8118                           
  8119                           ;manchester_decode.c: 332:     {;manchester_decode.c: 333:         time_limit_min_1=time
      +                          _limit->time_limit_free_day_1_ptr->param*60+time_limit->time_limit_free_day_1_ptr->param
      +                          1;
  8120  15BE  0842               	movf	Check_Time_Date@time_limit,w
  8121  15BF  3E05               	addlw	5
  8122  15C0  0084               	movwf	4
  8123  15C1  0800               	movf	0,w
  8124  15C2  3E05               	addlw	5
  8125  15C3  0084               	movwf	4
  8126  15C4  0800               	movf	0,w
  8127  15C5  00A6               	movwf	___wmul@multiplier
  8128  15C6  01A7               	clrf	___wmul@multiplier+1
  8129  15C7  1BA6               	btfsc	___wmul@multiplier,7
  8130  15C8  03A7               	decf	___wmul@multiplier+1,f
  8131  15C9  303C               	movlw	60
  8132  15CA  00A8               	movwf	___wmul@multiplicand
  8133  15CB  3000               	movlw	0
  8134  15CC  00A9               	movwf	___wmul@multiplicand+1
  8135  15CD  160A  158A  2142  160A  118A  	fcall	___wmul
  8136  15D2  0842               	movf	Check_Time_Date@time_limit,w
  8137  15D3  3E05               	addlw	5
  8138  15D4  0084               	movwf	4
  8139  15D5  1783               	bsf	3,7	;select IRP bank2
  8140  15D6  0800               	movf	0,w
  8141  15D7  3E06               	addlw	6
  8142  15D8  0084               	movwf	4
  8143  15D9  0800               	movf	0,w
  8144  15DA  0726               	addwf	?___wmul,w
  8145  15DB  00C7               	movwf	Check_Time_Date@time_limit_min_1
  8146  15DC  3000               	movlw	0
  8147  15DD  1B80               	btfsc	0,7
  8148  15DE  30FF               	movlw	255
  8149  15DF  1803               	skipnc
  8150  15E0  3E01               	addlw	1
  8151  15E1  0727               	addwf	?___wmul+1,w
  8152  15E2  00C8               	movwf	Check_Time_Date@time_limit_min_1+1
  8153                           
  8154                           ;manchester_decode.c: 334:         time_limit_min_2=time_limit->time_limit_free_day_2_pt
      +                          r->param*60+time_limit->time_limit_free_day_2_ptr->param1;
  8155  15E3  0842               	movf	Check_Time_Date@time_limit,w
  8156  15E4  3E06               	addlw	6
  8157  15E5                     L9:	
  8158  15E5  0084               	movwf	4
  8159  15E6  0800               	movf	0,w
  8160  15E7  3E05               	addlw	5
  8161  15E8  0084               	movwf	4
  8162  15E9  0800               	movf	0,w
  8163  15EA  00A6               	movwf	___wmul@multiplier
  8164  15EB  01A7               	clrf	___wmul@multiplier+1
  8165  15EC  1BA6               	btfsc	___wmul@multiplier,7
  8166  15ED  03A7               	decf	___wmul@multiplier+1,f
  8167  15EE  303C               	movlw	60
  8168  15EF  00A8               	movwf	___wmul@multiplicand
  8169  15F0  3000               	movlw	0
  8170  15F1  00A9               	movwf	___wmul@multiplicand+1
  8171  15F2  160A  158A  2142  160A  118A  	fcall	___wmul
  8172  15F7  0842               	movf	Check_Time_Date@time_limit,w
  8173  15F8  3E06               	addlw	6
  8174  15F9  0084               	movwf	4
  8175  15FA  1783               	bsf	3,7	;select IRP bank2
  8176  15FB  0800               	movf	0,w
  8177  15FC  3E06               	addlw	6
  8178  15FD  0084               	movwf	4
  8179  15FE  0800               	movf	0,w
  8180  15FF  0726               	addwf	?___wmul,w
  8181  1600  00C3               	movwf	Check_Time_Date@time_limit_min_2
  8182  1601  3000               	movlw	0
  8183  1602  1B80               	btfsc	0,7
  8184  1603  30FF               	movlw	255
  8185  1604  1803               	skipnc
  8186  1605  3E01               	addlw	1
  8187  1606  0727               	addwf	?___wmul+1,w
  8188  1607  00C4               	movwf	Check_Time_Date@time_limit_min_2+1
  8189                           
  8190                           ;manchester_decode.c: 335:         current_time_min=time->hours*60+time->minutes;
  8191  1608  0849               	movf	Check_Time_Date@time,w
  8192  1609  3E02               	addlw	2
  8193  160A  0084               	movwf	4
  8194  160B  0800               	movf	0,w
  8195  160C  00A6               	movwf	___wmul@multiplier
  8196  160D  01A7               	clrf	___wmul@multiplier+1
  8197  160E  1BA6               	btfsc	___wmul@multiplier,7
  8198  160F  03A7               	decf	___wmul@multiplier+1,f
  8199  1610  303C               	movlw	60
  8200  1611  00A8               	movwf	___wmul@multiplicand
  8201  1612  3000               	movlw	0
  8202  1613  00A9               	movwf	___wmul@multiplicand+1
  8203  1614  160A  158A  2142  160A  118A  	fcall	___wmul
  8204  1619  0A49               	incf	Check_Time_Date@time,w
  8205  161A  0084               	movwf	4
  8206  161B  1783               	bsf	3,7	;select IRP bank2
  8207  161C  0800               	movf	0,w
  8208  161D  0726               	addwf	?___wmul,w
  8209  161E  00C5               	movwf	Check_Time_Date@current_time_min
  8210  161F  3000               	movlw	0
  8211  1620  1B80               	btfsc	0,7
  8212  1621  30FF               	movlw	255
  8213  1622  1803               	skipnc
  8214  1623  3E01               	addlw	1
  8215  1624  0727               	addwf	?___wmul+1,w
  8216  1625  00C6               	movwf	Check_Time_Date@current_time_min+1
  8217                           
  8218                           ;manchester_decode.c: 338:         if(time_limit_min_1>current_time_min && time_limit_mi
      +                          n_2>time_limit_min_1)
  8219  1626  0848               	movf	Check_Time_Date@time_limit_min_1+1,w
  8220  1627  0246               	subwf	Check_Time_Date@current_time_min+1,w
  8221  1628  1D03               	skipz
  8222  1629  2E2C               	goto	u8155
  8223  162A  0847               	movf	Check_Time_Date@time_limit_min_1,w
  8224  162B  0245               	subwf	Check_Time_Date@current_time_min,w
  8225  162C                     u8155:	
  8226  162C  1803               	skipnc
  8227  162D  2E38               	goto	l8152
  8228  162E  0844               	movf	Check_Time_Date@time_limit_min_2+1,w
  8229  162F  0248               	subwf	Check_Time_Date@time_limit_min_1+1,w
  8230  1630  1D03               	skipz
  8231  1631  2E34               	goto	u8165
  8232  1632  0843               	movf	Check_Time_Date@time_limit_min_2,w
  8233  1633  0247               	subwf	Check_Time_Date@time_limit_min_1,w
  8234  1634                     u8165:	
  8235  1634  1803               	skipnc
  8236  1635  2E38               	goto	l8152
  8237                           
  8238                           ;manchester_decode.c: 339:         {;manchester_decode.c: 340:             return 1;
  8239  1636  3001               	movlw	1
  8240  1637  0008               	return
  8241  1638                     l8152:	
  8242                           
  8243                           ;manchester_decode.c: 342:         {;manchester_decode.c: 343:             return 0;
  8244  1638  3000               	movlw	0
  8245  1639  0008               	return
  8246  163A                     l8156:	
  8247                           
  8248                           ;manchester_decode.c: 347:     {;manchester_decode.c: 348:         time_limit_min_1=time
      +                          _limit->time_limit_work_day_1_ptr->param*60+time_limit->time_limit_free_day_1_ptr->param
      +                          1;
  8249  163A  0842               	movf	Check_Time_Date@time_limit,w
  8250  163B  3E03               	addlw	3
  8251  163C  0084               	movwf	4
  8252  163D  0800               	movf	0,w
  8253  163E  3E05               	addlw	5
  8254  163F  0084               	movwf	4
  8255  1640  0800               	movf	0,w
  8256  1641  00A6               	movwf	___wmul@multiplier
  8257  1642  01A7               	clrf	___wmul@multiplier+1
  8258  1643  1BA6               	btfsc	___wmul@multiplier,7
  8259  1644  03A7               	decf	___wmul@multiplier+1,f
  8260  1645  303C               	movlw	60
  8261  1646  00A8               	movwf	___wmul@multiplicand
  8262  1647  3000               	movlw	0
  8263  1648  00A9               	movwf	___wmul@multiplicand+1
  8264  1649  160A  158A  2142  160A  118A  	fcall	___wmul
  8265  164E  0842               	movf	Check_Time_Date@time_limit,w
  8266  164F  3E05               	addlw	5
  8267  1650  0084               	movwf	4
  8268  1651  1783               	bsf	3,7	;select IRP bank2
  8269  1652  0800               	movf	0,w
  8270  1653  3E06               	addlw	6
  8271  1654  0084               	movwf	4
  8272  1655  0800               	movf	0,w
  8273  1656  0726               	addwf	?___wmul,w
  8274  1657  00C7               	movwf	Check_Time_Date@time_limit_min_1
  8275  1658  3000               	movlw	0
  8276  1659  1B80               	btfsc	0,7
  8277  165A  30FF               	movlw	255
  8278  165B  1803               	skipnc
  8279  165C  3E01               	addlw	1
  8280  165D  0727               	addwf	?___wmul+1,w
  8281  165E  00C8               	movwf	Check_Time_Date@time_limit_min_1+1
  8282                           
  8283                           ;manchester_decode.c: 349:         time_limit_min_2=time_limit->time_limit_work_day_2_pt
      +                          r->param*60+time_limit->time_limit_free_day_2_ptr->param1;
  8284  165F  0842               	movf	Check_Time_Date@time_limit,w
  8285  1660  3E04               	addlw	4
  8286  1661  2DE5               	goto	L9
  8287  1662                     __end_of_Check_Time_Date:	
  8288                           ;manchester_decode.c: 356:         if(time_limit_min_1>current_time_min && time_limit_mi
      +                          n_2>time_limit_min_1)
  8289                           
  8290                           ;manchester_decode.c: 350:         current_time_min=time->hours*60+time->minutes;
  8291                           
  8292                           
  8293                           	psect	text22
  8294  1942                     __ptext22:	
  8295 ;; *************** function ___wmul *****************
  8296 ;; Defined at:
  8297 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/Umul16.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  multiplier      2    6[BANK0 ] unsigned int 
  8300 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  product         2   10[BANK0 ] unsigned int 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  2    6[BANK0 ] unsigned int 
  8305 ;; Registers used:
  8306 ;;		wreg, status,2, status,0
  8307 ;; Tracked objects:
  8308 ;;		On entry : 300/800
  8309 ;;		On exit  : 300/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8312 ;;      Params:         0       4       0       0       0
  8313 ;;      Locals:         0       2       0       0       0
  8314 ;;      Temps:          0       0       0       0       0
  8315 ;;      Totals:         0       6       0       0       0
  8316 ;;Total ram usage:        6 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    4
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		_Check_Time_Date
  8323 ;;		_Find_Weekday
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           
  8328                           ;psect for function ___wmul
  8329  1942                     ___wmul:	
  8330                           
  8331                           ;incstack = 0
  8332                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8333  1942  01AA               	clrf	___wmul@product
  8334  1943  01AB               	clrf	___wmul@product+1
  8335  1944                     l6818:	
  8336  1944  1C26               	btfss	___wmul@multiplier,0
  8337  1945  294C               	goto	l962
  8338  1946  0828               	movf	___wmul@multiplicand,w
  8339  1947  07AA               	addwf	___wmul@product,f
  8340  1948  1803               	skipnc
  8341  1949  0AAB               	incf	___wmul@product+1,f
  8342  194A  0829               	movf	___wmul@multiplicand+1,w
  8343  194B  07AB               	addwf	___wmul@product+1,f
  8344  194C                     l962:	
  8345  194C  3001               	movlw	1
  8346  194D                     u6645:	
  8347  194D  1003               	clrc
  8348  194E  0DA8               	rlf	___wmul@multiplicand,f
  8349  194F  0DA9               	rlf	___wmul@multiplicand+1,f
  8350  1950  3EFF               	addlw	-1
  8351  1951  1D03               	skipz
  8352  1952  294D               	goto	u6645
  8353  1953  3001               	movlw	1
  8354  1954                     u6655:	
  8355  1954  1003               	clrc
  8356  1955  0CA7               	rrf	___wmul@multiplier+1,f
  8357  1956  0CA6               	rrf	___wmul@multiplier,f
  8358  1957  3EFF               	addlw	-1
  8359  1958  1D03               	skipz
  8360  1959  2954               	goto	u6655
  8361  195A  0826               	movf	___wmul@multiplier,w
  8362  195B  0427               	iorwf	___wmul@multiplier+1,w
  8363  195C  1D03               	btfss	3,2
  8364  195D  2944               	goto	l6818
  8365  195E  082B               	movf	___wmul@product+1,w
  8366  195F  00A7               	movwf	?___wmul+1
  8367  1960  082A               	movf	___wmul@product,w
  8368  1961  00A6               	movwf	?___wmul
  8369  1962  0008               	return
  8370  1963                     __end_of___wmul:	
  8371                           
  8372                           	psect	text23
  8373  06CF                     __ptext23:	
  8374 ;; *************** function _PCF8583_Read_Time_Date *****************
  8375 ;; Defined at:
  8376 ;;		line 59 in file "pcf8583.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;  time_struct_    2   21[BANK0 ] PTR struct .
  8379 ;;		 -> Menu_Set_Time@time(7), main@time(7), 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  year            1   33[BANK0 ] unsigned char 
  8382 ;;  bcd_mon         1   32[BANK0 ] unsigned char 
  8383 ;;  bcd_day         1   31[BANK0 ] unsigned char 
  8384 ;;  bcd_hrs         1   30[BANK0 ] unsigned char 
  8385 ;;  bcd_min         1   29[BANK0 ] unsigned char 
  8386 ;;  bcd_sec         1   28[BANK0 ] unsigned char 
  8387 ;;  year_bits       1   27[BANK0 ] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      void 
  8390 ;; Registers used:
  8391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 300/800
  8394 ;;		On exit  : 300/100
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8397 ;;      Params:         0       2       0       0       0
  8398 ;;      Locals:         0       7       0       0       0
  8399 ;;      Temps:          0       4       0       0       0
  8400 ;;      Totals:         0      13       0       0       0
  8401 ;;Total ram usage:       13 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    7
  8404 ;; This function calls:
  8405 ;;		_BCD_2_DEC
  8406 ;;		_I2C_Master_Read
  8407 ;;		_I2C_Master_Start
  8408 ;;		_I2C_Master_Stop
  8409 ;;		_I2C_Master_Write
  8410 ;;		_PCF8583_Read_Byte
  8411 ;;		_PCF8583_Write_Byte
  8412 ;; This function is called by:
  8413 ;;		_Check_Time_Date
  8414 ;;		_Show_Time
  8415 ;;		_Menu_Set_Time
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           
  8420                           ;psect for function _PCF8583_Read_Time_Date
  8421  06CF                     _PCF8583_Read_Time_Date:	
  8422                           
  8423                           ;pcf8583.c: 59: void PCF8583_Read_Time_Date(TimeStruct *time_struct_ptr);pcf8583.c: 60: 
      +                          {;pcf8583.c: 61:  unsigned char year_bits;;pcf8583.c: 62:  unsigned char year;;pcf8583.c
      +                          : 63:  unsigned char bcd_sec;;pcf8583.c: 64:  unsigned char bcd_min;;pcf8583.c: 65:  uns
      +                          igned char bcd_hrs;;pcf8583.c: 66:  unsigned char bcd_day;;pcf8583.c: 67:  unsigned char
      +                           bcd_mon;;pcf8583.c: 69:     INTCONbits.GIE=0;
  8424                           
  8425                           ;incstack = 0
  8426 ;; hardware stack exceeded
  8427                           ; Regs used in _PCF8583_Read_Time_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8428  06CF  138B               	bcf	11,7	;volatile
  8429                           
  8430                           ;pcf8583.c: 71:  I2C_Master_Start();
  8431  06D0  160A  158A  205D  120A  118A  	fcall	_I2C_Master_Start
  8432                           
  8433                           ;pcf8583.c: 72:  I2C_Master_Write(0xA0);
  8434  06D5  30A0               	movlw	160
  8435  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  8436  06D7  00A6               	movwf	I2C_Master_Write@data
  8437  06D8  3000               	movlw	0
  8438  06D9  00A7               	movwf	I2C_Master_Write@data+1
  8439  06DA  160A  158A  206D  120A  118A  	fcall	_I2C_Master_Write
  8440                           
  8441                           ;pcf8583.c: 73:  I2C_Master_Write(0x02);
  8442  06DF  3002               	movlw	2
  8443  06E0  00A6               	movwf	I2C_Master_Write@data
  8444  06E1  3000               	movlw	0
  8445  06E2  00A7               	movwf	I2C_Master_Write@data+1
  8446  06E3  160A  158A  206D  120A  118A  	fcall	_I2C_Master_Write
  8447                           
  8448                           ;pcf8583.c: 74:  I2C_Master_Start();
  8449  06E8  160A  158A  205D  120A  118A  	fcall	_I2C_Master_Start
  8450                           
  8451                           ;pcf8583.c: 75:  I2C_Master_Write(0xA1);
  8452  06ED  30A1               	movlw	161
  8453  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  8454  06EF  00A6               	movwf	I2C_Master_Write@data
  8455  06F0  3000               	movlw	0
  8456  06F1  00A7               	movwf	I2C_Master_Write@data+1
  8457  06F2  160A  158A  206D  120A  118A  	fcall	_I2C_Master_Write
  8458                           
  8459                           ;pcf8583.c: 76:  bcd_sec = I2C_Master_Read(1);
  8460  06F7  3001               	movlw	1
  8461  06F8  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  8462  06FD  00B7               	movwf	??_PCF8583_Read_Time_Date
  8463  06FE  0837               	movf	??_PCF8583_Read_Time_Date,w
  8464  06FF  00BC               	movwf	PCF8583_Read_Time_Date@bcd_sec
  8465                           
  8466                           ;pcf8583.c: 77:  bcd_min = I2C_Master_Read(1);
  8467  0700  3001               	movlw	1
  8468  0701  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  8469  0706  00B7               	movwf	??_PCF8583_Read_Time_Date
  8470  0707  0837               	movf	??_PCF8583_Read_Time_Date,w
  8471  0708  00BD               	movwf	PCF8583_Read_Time_Date@bcd_min
  8472                           
  8473                           ;pcf8583.c: 78:  bcd_hrs = I2C_Master_Read(1);
  8474  0709  3001               	movlw	1
  8475  070A  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  8476  070F  00B7               	movwf	??_PCF8583_Read_Time_Date
  8477  0710  0837               	movf	??_PCF8583_Read_Time_Date,w
  8478  0711  00BE               	movwf	PCF8583_Read_Time_Date@bcd_hrs
  8479                           
  8480                           ;pcf8583.c: 79:  bcd_day = I2C_Master_Read(1);
  8481  0712  3001               	movlw	1
  8482  0713  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  8483  0718  00B7               	movwf	??_PCF8583_Read_Time_Date
  8484  0719  0837               	movf	??_PCF8583_Read_Time_Date,w
  8485  071A  00BF               	movwf	PCF8583_Read_Time_Date@bcd_day
  8486                           
  8487                           ;pcf8583.c: 80:  bcd_mon = I2C_Master_Read(0);
  8488  071B  3000               	movlw	0
  8489  071C  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  8490  0721  00B7               	movwf	??_PCF8583_Read_Time_Date
  8491  0722  0837               	movf	??_PCF8583_Read_Time_Date,w
  8492  0723  00C0               	movwf	PCF8583_Read_Time_Date@bcd_mon
  8493                           
  8494                           ;pcf8583.c: 81:     I2C_Master_Stop();
  8495  0724  160A  158A  2062  120A  118A  	fcall	_I2C_Master_Stop
  8496                           
  8497                           ;pcf8583.c: 83:  time_struct_ptr->seconds = BCD_2_DEC(bcd_sec);
  8498  0729  1283               	bcf	3,5	;RP0=0, select bank0
  8499  072A  083C               	movf	PCF8583_Read_Time_Date@bcd_sec,w
  8500  072B  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  8501  0730  00B7               	movwf	??_PCF8583_Read_Time_Date
  8502  0731  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  8503  0732  0084               	movwf	4
  8504  0733  1783               	bsf	3,7
  8505  0734  1C36               	btfss	PCF8583_Read_Time_Date@time_struct_ptr+1,0
  8506  0735  1383               	bcf	3,7
  8507  0736  0837               	movf	??_PCF8583_Read_Time_Date,w
  8508  0737  0080               	movwf	0
  8509                           
  8510                           ;pcf8583.c: 84:  time_struct_ptr->minutes = BCD_2_DEC(bcd_min);
  8511  0738  083D               	movf	PCF8583_Read_Time_Date@bcd_min,w
  8512  0739  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  8513  073E  00B7               	movwf	??_PCF8583_Read_Time_Date
  8514  073F  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  8515  0740  3E01               	addlw	1
  8516  0741  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  8517  0742  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  8518  0743  1803               	skipnc
  8519  0744  3E01               	addlw	1
  8520  0745  3E00               	addlw	0
  8521  0746  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  8522  0747  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  8523  0748  0084               	movwf	4
  8524  0749  1783               	bsf	3,7
  8525  074A  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  8526  074B  1383               	bcf	3,7
  8527  074C  0837               	movf	??_PCF8583_Read_Time_Date,w
  8528  074D  0080               	movwf	0
  8529                           
  8530                           ;pcf8583.c: 85:  time_struct_ptr->hours = BCD_2_DEC(bcd_hrs & 0x3F);
  8531  074E  083E               	movf	PCF8583_Read_Time_Date@bcd_hrs,w
  8532  074F  393F               	andlw	63
  8533  0750  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  8534  0755  00B7               	movwf	??_PCF8583_Read_Time_Date
  8535  0756  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  8536  0757  3E02               	addlw	2
  8537  0758  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  8538  0759  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  8539  075A  1803               	skipnc
  8540  075B  3E01               	addlw	1
  8541  075C  3E00               	addlw	0
  8542  075D  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  8543  075E  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  8544  075F  0084               	movwf	4
  8545  0760  1783               	bsf	3,7
  8546  0761  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  8547  0762  1383               	bcf	3,7
  8548  0763  0837               	movf	??_PCF8583_Read_Time_Date,w
  8549  0764  0080               	movwf	0
  8550                           
  8551                           ;pcf8583.c: 86:  time_struct_ptr->day = BCD_2_DEC(bcd_day & 0x3F);
  8552  0765  083F               	movf	PCF8583_Read_Time_Date@bcd_day,w
  8553  0766  393F               	andlw	63
  8554  0767  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  8555  076C  00B7               	movwf	??_PCF8583_Read_Time_Date
  8556  076D  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  8557  076E  3E03               	addlw	3
  8558  076F  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  8559  0770  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  8560  0771  1803               	skipnc
  8561  0772  3E01               	addlw	1
  8562  0773  3E00               	addlw	0
  8563  0774  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  8564  0775  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  8565  0776  0084               	movwf	4
  8566  0777  1783               	bsf	3,7
  8567  0778  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  8568  0779  1383               	bcf	3,7
  8569  077A  0837               	movf	??_PCF8583_Read_Time_Date,w
  8570  077B  0080               	movwf	0
  8571                           
  8572                           ;pcf8583.c: 87:  time_struct_ptr->month = BCD_2_DEC(bcd_mon & 0x1F);
  8573  077C  0840               	movf	PCF8583_Read_Time_Date@bcd_mon,w
  8574  077D  391F               	andlw	31
  8575  077E  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  8576  0783  00B7               	movwf	??_PCF8583_Read_Time_Date
  8577  0784  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  8578  0785  3E04               	addlw	4
  8579  0786  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  8580  0787  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  8581  0788  1803               	skipnc
  8582  0789  3E01               	addlw	1
  8583  078A  3E00               	addlw	0
  8584  078B  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  8585  078C  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  8586  078D  0084               	movwf	4
  8587  078E  1783               	bsf	3,7
  8588  078F  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  8589  0790  1383               	bcf	3,7
  8590  0791  0837               	movf	??_PCF8583_Read_Time_Date,w
  8591  0792  0080               	movwf	0
  8592                           
  8593                           ;pcf8583.c: 88:     time_struct_ptr->weekday = bcd_mon>>5;
  8594  0793  0840               	movf	PCF8583_Read_Time_Date@bcd_mon,w
  8595  0794  00B7               	movwf	??_PCF8583_Read_Time_Date
  8596  0795  3005               	movlw	5
  8597  0796                     u8105:	
  8598  0796  1003               	clrc
  8599  0797  0CB7               	rrf	??_PCF8583_Read_Time_Date,f
  8600  0798  3EFF               	addlw	-1
  8601  0799  1D03               	skipz
  8602  079A  2F96               	goto	u8105
  8603  079B  0837               	movf	??_PCF8583_Read_Time_Date,w
  8604  079C  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  8605  079D  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  8606  079E  3E06               	addlw	6
  8607  079F  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  8608  07A0  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  8609  07A1  1803               	skipnc
  8610  07A2  3E01               	addlw	1
  8611  07A3  3E00               	addlw	0
  8612  07A4  00BA               	movwf	??_PCF8583_Read_Time_Date+3
  8613  07A5  0839               	movf	??_PCF8583_Read_Time_Date+2,w
  8614  07A6  0084               	movwf	4
  8615  07A7  1783               	bsf	3,7
  8616  07A8  1C3A               	btfss	??_PCF8583_Read_Time_Date+3,0
  8617  07A9  1383               	bcf	3,7
  8618  07AA  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  8619  07AB  0080               	movwf	0
  8620                           
  8621                           ;pcf8583.c: 90:  year_bits = bcd_day >> 6;
  8622  07AC  083F               	movf	PCF8583_Read_Time_Date@bcd_day,w
  8623  07AD  00B7               	movwf	??_PCF8583_Read_Time_Date
  8624  07AE  3006               	movlw	6
  8625  07AF                     u8115:	
  8626  07AF  1003               	clrc
  8627  07B0  0CB7               	rrf	??_PCF8583_Read_Time_Date,f
  8628  07B1  3EFF               	addlw	-1
  8629  07B2  1D03               	skipz
  8630  07B3  2FAF               	goto	u8115
  8631  07B4  0837               	movf	??_PCF8583_Read_Time_Date,w
  8632  07B5  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  8633  07B6  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  8634  07B7  00BB               	movwf	PCF8583_Read_Time_Date@year_bits
  8635                           
  8636                           ;pcf8583.c: 93:  year = PCF8583_Read_Byte(0x10);
  8637  07B8  3010               	movlw	16
  8638  07B9  160A  158A  233A  120A  118A  	fcall	_PCF8583_Read_Byte
  8639  07BE  00B7               	movwf	??_PCF8583_Read_Time_Date
  8640  07BF  0837               	movf	??_PCF8583_Read_Time_Date,w
  8641  07C0  00C1               	movwf	PCF8583_Read_Time_Date@year
  8642  07C1                     l8126:	
  8643                           ;pcf8583.c: 94:  while(year_bits != (year & 3))
  8644                           
  8645                           
  8646                           ;pcf8583.c: 94:  while(year_bits != (year & 3))
  8647  07C1  0841               	movf	PCF8583_Read_Time_Date@year,w
  8648  07C2  3903               	andlw	3
  8649  07C3  063B               	xorwf	PCF8583_Read_Time_Date@year_bits,w
  8650  07C4  1903               	btfsc	3,2
  8651  07C5  2FCB               	goto	l8128
  8652                           
  8653                           ;pcf8583.c: 95:  {;pcf8583.c: 96:   year++;
  8654  07C6  3001               	movlw	1
  8655  07C7  00B7               	movwf	??_PCF8583_Read_Time_Date
  8656  07C8  0837               	movf	??_PCF8583_Read_Time_Date,w
  8657  07C9  07C1               	addwf	PCF8583_Read_Time_Date@year,f
  8658  07CA  2FC1               	goto	l8126
  8659  07CB                     l8128:	
  8660                           
  8661                           ;pcf8583.c: 98:  time_struct_ptr->year = year;
  8662  07CB  0841               	movf	PCF8583_Read_Time_Date@year,w
  8663  07CC  00B7               	movwf	??_PCF8583_Read_Time_Date
  8664  07CD  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  8665  07CE  3E05               	addlw	5
  8666  07CF  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  8667  07D0  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  8668  07D1  1803               	skipnc
  8669  07D2  3E01               	addlw	1
  8670  07D3  3E00               	addlw	0
  8671  07D4  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  8672  07D5  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  8673  07D6  0084               	movwf	4
  8674  07D7  1783               	bsf	3,7
  8675  07D8  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  8676  07D9  1383               	bcf	3,7
  8677  07DA  0837               	movf	??_PCF8583_Read_Time_Date,w
  8678  07DB  0080               	movwf	0
  8679                           
  8680                           ;pcf8583.c: 99:  PCF8583_Write_Byte(0x10, year);
  8681  07DC  0841               	movf	PCF8583_Read_Time_Date@year,w
  8682  07DD  00B7               	movwf	??_PCF8583_Read_Time_Date
  8683  07DE  0837               	movf	??_PCF8583_Read_Time_Date,w
  8684  07DF  00A8               	movwf	PCF8583_Write_Byte@data
  8685  07E0  3010               	movlw	16
  8686  07E1  160A  158A  2245   	fcall	_PCF8583_Write_Byte
  8687                           
  8688                           ;pcf8583.c: 101:     INTCONbits.GIE=1;
  8689  07E4  178B               	bsf	11,7	;volatile
  8690  07E5  0008               	return
  8691  07E6                     __end_of_PCF8583_Read_Time_Date:	
  8692                           
  8693                           	psect	text24
  8694  1A45                     __ptext24:	
  8695 ;; *************** function _PCF8583_Write_Byte *****************
  8696 ;; Defined at:
  8697 ;;		line 35 in file "pcf8583.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  address         1    wreg     unsigned char 
  8700 ;;  data            1    8[BANK0 ] unsigned char 
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;  address         1   11[BANK0 ] unsigned char 
  8703 ;; Return value:  Size  Location     Type
  8704 ;;                  1    wreg      void 
  8705 ;; Registers used:
  8706 ;;		wreg, status,2, status,0, pclath, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 300/800
  8709 ;;		On exit  : 300/100
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8712 ;;      Params:         0       1       0       0       0
  8713 ;;      Locals:         0       1       0       0       0
  8714 ;;      Temps:          0       2       0       0       0
  8715 ;;      Totals:         0       4       0       0       0
  8716 ;;Total ram usage:        4 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:    6
  8719 ;; This function calls:
  8720 ;;		_I2C_Master_Start
  8721 ;;		_I2C_Master_Stop
  8722 ;;		_I2C_Master_Write
  8723 ;; This function is called by:
  8724 ;;		_PCF8583_Read_Time_Date
  8725 ;;		_PCF8583_Set_Date_Time
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _PCF8583_Write_Byte
  8731  1A45                     _PCF8583_Write_Byte:	
  8732                           
  8733                           ;incstack = 0
  8734 ;; hardware stack exceeded
  8735                           ; Regs used in _PCF8583_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
  8736                           ;PCF8583_Write_Byte@address stored from wreg
  8737  1A45  00AB               	movwf	PCF8583_Write_Byte@address
  8738                           
  8739                           ;pcf8583.c: 35: void PCF8583_Write_Byte(unsigned char address, unsigned char data);pcf85
      +                          83.c: 36: {;pcf8583.c: 37:  I2C_Master_Start();
  8740  1A46  160A  158A  205D  160A  158A  	fcall	_I2C_Master_Start
  8741                           
  8742                           ;pcf8583.c: 38:  I2C_Master_Write(0xA0);
  8743  1A4B  30A0               	movlw	160
  8744  1A4C  1283               	bcf	3,5	;RP0=0, select bank0
  8745  1A4D  00A6               	movwf	I2C_Master_Write@data
  8746  1A4E  3000               	movlw	0
  8747  1A4F  00A7               	movwf	I2C_Master_Write@data+1
  8748  1A50  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  8749                           
  8750                           ;pcf8583.c: 39:  I2C_Master_Write(address);
  8751  1A55  082B               	movf	PCF8583_Write_Byte@address,w
  8752  1A56  00A9               	movwf	??_PCF8583_Write_Byte
  8753  1A57  01AA               	clrf	??_PCF8583_Write_Byte+1
  8754  1A58  0829               	movf	??_PCF8583_Write_Byte,w
  8755  1A59  00A6               	movwf	I2C_Master_Write@data
  8756  1A5A  082A               	movf	??_PCF8583_Write_Byte+1,w
  8757  1A5B  00A7               	movwf	I2C_Master_Write@data+1
  8758  1A5C  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  8759                           
  8760                           ;pcf8583.c: 40:  I2C_Master_Write(data);
  8761  1A61  0828               	movf	PCF8583_Write_Byte@data,w
  8762  1A62  00A9               	movwf	??_PCF8583_Write_Byte
  8763  1A63  01AA               	clrf	??_PCF8583_Write_Byte+1
  8764  1A64  0829               	movf	??_PCF8583_Write_Byte,w
  8765  1A65  00A6               	movwf	I2C_Master_Write@data
  8766  1A66  082A               	movf	??_PCF8583_Write_Byte+1,w
  8767  1A67  00A7               	movwf	I2C_Master_Write@data+1
  8768  1A68  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  8769                           
  8770                           ;pcf8583.c: 41:  I2C_Master_Stop();
  8771  1A6D  160A  158A  2062   	fcall	_I2C_Master_Stop
  8772  1A70  0008               	return
  8773  1A71                     __end_of_PCF8583_Write_Byte:	
  8774                           
  8775                           	psect	text25
  8776  1B3A                     __ptext25:	
  8777 ;; *************** function _PCF8583_Read_Byte *****************
  8778 ;; Defined at:
  8779 ;;		line 45 in file "pcf8583.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;  address         1    wreg     unsigned char 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  address         1   13[BANK0 ] unsigned char 
  8784 ;;  retval          1   14[BANK0 ] unsigned char 
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      unsigned char 
  8787 ;; Registers used:
  8788 ;;		wreg, status,2, status,0, pclath, cstack
  8789 ;; Tracked objects:
  8790 ;;		On entry : 300/800
  8791 ;;		On exit  : 300/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8794 ;;      Params:         0       0       0       0       0
  8795 ;;      Locals:         0       2       0       0       0
  8796 ;;      Temps:          0       2       0       0       0
  8797 ;;      Totals:         0       4       0       0       0
  8798 ;;Total ram usage:        4 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    6
  8801 ;; This function calls:
  8802 ;;		_I2C_Master_Read
  8803 ;;		_I2C_Master_Start
  8804 ;;		_I2C_Master_Stop
  8805 ;;		_I2C_Master_Write
  8806 ;; This function is called by:
  8807 ;;		_PCF8583_Read_Time_Date
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           
  8812                           ;psect for function _PCF8583_Read_Byte
  8813  1B3A                     _PCF8583_Read_Byte:	
  8814                           
  8815                           ;incstack = 0
  8816 ;; hardware stack exceeded
  8817                           ; Regs used in _PCF8583_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
  8818                           ;PCF8583_Read_Byte@address stored from wreg
  8819  1B3A  00AD               	movwf	PCF8583_Read_Byte@address
  8820                           
  8821                           ;pcf8583.c: 45: unsigned char PCF8583_Read_Byte(unsigned char address);pcf8583.c: 46: {;
      +                          pcf8583.c: 47:  unsigned char retval;;pcf8583.c: 48:  I2C_Master_Start();
  8822  1B3B  160A  158A  205D  160A  158A  	fcall	_I2C_Master_Start
  8823                           
  8824                           ;pcf8583.c: 49:  I2C_Master_Write(0xA0);
  8825  1B40  30A0               	movlw	160
  8826  1B41  1283               	bcf	3,5	;RP0=0, select bank0
  8827  1B42  00A6               	movwf	I2C_Master_Write@data
  8828  1B43  3000               	movlw	0
  8829  1B44  00A7               	movwf	I2C_Master_Write@data+1
  8830  1B45  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  8831                           
  8832                           ;pcf8583.c: 50:  I2C_Master_Write(address);
  8833  1B4A  082D               	movf	PCF8583_Read_Byte@address,w
  8834  1B4B  00AB               	movwf	??_PCF8583_Read_Byte
  8835  1B4C  01AC               	clrf	??_PCF8583_Read_Byte+1
  8836  1B4D  082B               	movf	??_PCF8583_Read_Byte,w
  8837  1B4E  00A6               	movwf	I2C_Master_Write@data
  8838  1B4F  082C               	movf	??_PCF8583_Read_Byte+1,w
  8839  1B50  00A7               	movwf	I2C_Master_Write@data+1
  8840  1B51  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  8841                           
  8842                           ;pcf8583.c: 51:  I2C_Master_Start();
  8843  1B56  160A  158A  205D  160A  158A  	fcall	_I2C_Master_Start
  8844                           
  8845                           ;pcf8583.c: 52:  I2C_Master_Write(0xA1);
  8846  1B5B  30A1               	movlw	161
  8847  1B5C  1283               	bcf	3,5	;RP0=0, select bank0
  8848  1B5D  00A6               	movwf	I2C_Master_Write@data
  8849  1B5E  3000               	movlw	0
  8850  1B5F  00A7               	movwf	I2C_Master_Write@data+1
  8851  1B60  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  8852                           
  8853                           ;pcf8583.c: 53:  retval = I2C_Master_Read(0);
  8854  1B65  3000               	movlw	0
  8855  1B66  160A  158A  21C9  160A  158A  	fcall	_I2C_Master_Read
  8856  1B6B  00AB               	movwf	??_PCF8583_Read_Byte
  8857  1B6C  082B               	movf	??_PCF8583_Read_Byte,w
  8858  1B6D  00AE               	movwf	PCF8583_Read_Byte@retval
  8859                           
  8860                           ;pcf8583.c: 54:  I2C_Master_Stop();
  8861  1B6E  160A  158A  2062   	fcall	_I2C_Master_Stop
  8862                           
  8863                           ;pcf8583.c: 55:  return(retval);
  8864  1B71  1283               	bcf	3,5	;RP0=0, select bank0
  8865  1B72  082E               	movf	PCF8583_Read_Byte@retval,w
  8866  1B73  0008               	return
  8867  1B74                     __end_of_PCF8583_Read_Byte:	
  8868                           
  8869                           	psect	text26
  8870  186D                     __ptext26:	
  8871 ;; *************** function _I2C_Master_Write *****************
  8872 ;; Defined at:
  8873 ;;		line 79 in file "hw_i2c.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;  data            2    6[BANK0 ] unsigned int 
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2, status,0, pclath, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 300/800
  8884 ;;		On exit  : 300/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8887 ;;      Params:         0       2       0       0       0
  8888 ;;      Locals:         0       0       0       0       0
  8889 ;;      Temps:          0       0       0       0       0
  8890 ;;      Totals:         0       2       0       0       0
  8891 ;;Total ram usage:        2 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    5
  8894 ;; This function calls:
  8895 ;;		_I2C_Master_Wait
  8896 ;; This function is called by:
  8897 ;;		_PCF8583_Write_Byte
  8898 ;;		_PCF8583_Read_Byte
  8899 ;;		_PCF8583_Read_Time_Date
  8900 ;;		_PCF8583_Set_Date_Time
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           
  8905                           ;psect for function _I2C_Master_Write
  8906  186D                     _I2C_Master_Write:	
  8907                           
  8908                           ;hw_i2c.c: 79: void I2C_Master_Write(unsigned data);hw_i2c.c: 80: {;hw_i2c.c: 81:     I2
      +                          C_Master_Wait();
  8909                           
  8910                           ;incstack = 0
  8911 ;; hardware stack exceeded
  8912                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  8913  186D  160A  158A  20A0   	fcall	_I2C_Master_Wait
  8914                           
  8915                           ;hw_i2c.c: 82:     SSPBUF=data;
  8916  1870  1283               	bcf	3,5	;RP0=0, select bank0
  8917  1871  0826               	movf	I2C_Master_Write@data,w
  8918  1872  0093               	movwf	19	;volatile
  8919  1873  0008               	return
  8920  1874                     __end_of_I2C_Master_Write:	
  8921                           
  8922                           	psect	text27
  8923  1862                     __ptext27:	
  8924 ;; *************** function _I2C_Master_Stop *****************
  8925 ;; Defined at:
  8926 ;;		line 65 in file "hw_i2c.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;		None
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;		None
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  1    wreg      void 
  8933 ;; Registers used:
  8934 ;;		status,2, status,0, pclath, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 300/800
  8937 ;;		On exit  : 300/100
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8940 ;;      Params:         0       0       0       0       0
  8941 ;;      Locals:         0       0       0       0       0
  8942 ;;      Temps:          0       0       0       0       0
  8943 ;;      Totals:         0       0       0       0       0
  8944 ;;Total ram usage:        0 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    5
  8947 ;; This function calls:
  8948 ;;		_I2C_Master_Wait
  8949 ;; This function is called by:
  8950 ;;		_PCF8583_Write_Byte
  8951 ;;		_PCF8583_Read_Byte
  8952 ;;		_PCF8583_Read_Time_Date
  8953 ;;		_PCF8583_Set_Date_Time
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           
  8958                           ;psect for function _I2C_Master_Stop
  8959  1862                     _I2C_Master_Stop:	
  8960                           
  8961                           ;hw_i2c.c: 67:     I2C_Master_Wait();
  8962                           
  8963                           ;incstack = 0
  8964 ;; hardware stack exceeded
  8965                           ; Regs used in _I2C_Master_Stop: [status,2+status,0+pclath+cstack]
  8966  1862  160A  158A  20A0   	fcall	_I2C_Master_Wait
  8967                           
  8968                           ;hw_i2c.c: 68:     SSPCON2bits.PEN=1;
  8969  1865  1511               	bsf	17,2	;volatile
  8970  1866  0008               	return
  8971  1867                     __end_of_I2C_Master_Stop:	
  8972                           
  8973                           	psect	text28
  8974  185D                     __ptext28:	
  8975 ;; *************** function _I2C_Master_Start *****************
  8976 ;; Defined at:
  8977 ;;		line 51 in file "hw_i2c.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;		None
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;		None
  8982 ;; Return value:  Size  Location     Type
  8983 ;;                  1    wreg      void 
  8984 ;; Registers used:
  8985 ;;		status,2, status,0, pclath, cstack
  8986 ;; Tracked objects:
  8987 ;;		On entry : 200/900
  8988 ;;		On exit  : 300/100
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8991 ;;      Params:         0       0       0       0       0
  8992 ;;      Locals:         0       0       0       0       0
  8993 ;;      Temps:          0       0       0       0       0
  8994 ;;      Totals:         0       0       0       0       0
  8995 ;;Total ram usage:        0 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:    5
  8998 ;; This function calls:
  8999 ;;		_I2C_Master_Wait
  9000 ;; This function is called by:
  9001 ;;		_PCF8583_Write_Byte
  9002 ;;		_PCF8583_Read_Byte
  9003 ;;		_PCF8583_Read_Time_Date
  9004 ;;		_PCF8583_Set_Date_Time
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           
  9009                           ;psect for function _I2C_Master_Start
  9010  185D                     _I2C_Master_Start:	
  9011                           
  9012                           ;hw_i2c.c: 53:     I2C_Master_Wait();
  9013                           
  9014                           ;incstack = 0
  9015 ;; hardware stack exceeded
  9016                           ; Regs used in _I2C_Master_Start: [status,2+status,0+pclath+cstack]
  9017  185D  160A  158A  20A0   	fcall	_I2C_Master_Wait
  9018                           
  9019                           ;hw_i2c.c: 54:     SSPCON2bits.SEN=1;
  9020  1860  1411               	bsf	17,0	;volatile
  9021  1861  0008               	return
  9022  1862                     __end_of_I2C_Master_Start:	
  9023                           
  9024                           	psect	text29
  9025  19C9                     __ptext29:	
  9026 ;; *************** function _I2C_Master_Read *****************
  9027 ;; Defined at:
  9028 ;;		line 93 in file "hw_i2c.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;  ack             1    wreg     unsigned char 
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;  ack             1    8[BANK0 ] unsigned char 
  9033 ;;  data            2    9[BANK0 ] unsigned short 
  9034 ;; Return value:  Size  Location     Type
  9035 ;;                  1    wreg      unsigned char 
  9036 ;; Registers used:
  9037 ;;		wreg, status,2, status,0, pclath, cstack
  9038 ;; Tracked objects:
  9039 ;;		On entry : 300/800
  9040 ;;		On exit  : 300/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9043 ;;      Params:         0       0       0       0       0
  9044 ;;      Locals:         0       3       0       0       0
  9045 ;;      Temps:          0       2       0       0       0
  9046 ;;      Totals:         0       5       0       0       0
  9047 ;;Total ram usage:        5 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; Hardware stack levels required when called:    5
  9050 ;; This function calls:
  9051 ;;		_I2C_Master_Wait
  9052 ;; This function is called by:
  9053 ;;		_PCF8583_Read_Byte
  9054 ;;		_PCF8583_Read_Time_Date
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           
  9059                           ;psect for function _I2C_Master_Read
  9060  19C9                     _I2C_Master_Read:	
  9061                           
  9062                           ;incstack = 0
  9063 ;; hardware stack exceeded
  9064                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  9065                           ;I2C_Master_Read@ack stored from wreg
  9066  19C9  00A8               	movwf	I2C_Master_Read@ack
  9067                           
  9068                           ;hw_i2c.c: 93: unsigned char I2C_Master_Read(unsigned char ack);hw_i2c.c: 94: {;hw_i2c.c
      +                          : 95:     unsigned short data;;hw_i2c.c: 96:     I2C_Master_Wait();
  9069  19CA  160A  158A  20A0  160A  158A  	fcall	_I2C_Master_Wait
  9070                           
  9071                           ;hw_i2c.c: 97:     RCEN=1;
  9072  19CF  1591               	bsf	17,3	;volatile
  9073                           
  9074                           ;hw_i2c.c: 98:     I2C_Master_Wait();
  9075  19D0  160A  158A  20A0  160A  158A  	fcall	_I2C_Master_Wait
  9076                           
  9077                           ;hw_i2c.c: 99:     data=SSPBUF;
  9078  19D5  1283               	bcf	3,5	;RP0=0, select bank0
  9079  19D6  0813               	movf	19,w	;volatile
  9080  19D7  00A6               	movwf	??_I2C_Master_Read
  9081  19D8  01A7               	clrf	??_I2C_Master_Read+1
  9082  19D9  0826               	movf	??_I2C_Master_Read,w
  9083  19DA  00A9               	movwf	I2C_Master_Read@data
  9084  19DB  0827               	movf	??_I2C_Master_Read+1,w
  9085  19DC  00AA               	movwf	I2C_Master_Read@data+1
  9086                           
  9087                           ;hw_i2c.c: 100:     I2C_Master_Wait();
  9088  19DD  160A  158A  20A0  160A  158A  	fcall	_I2C_Master_Wait
  9089                           
  9090                           ;hw_i2c.c: 101:     ACKDT=(ack)?0:1;
  9091  19E2  1283               	bcf	3,5	;RP0=0, select bank0
  9092  19E3  0828               	movf	I2C_Master_Read@ack,w
  9093  19E4  1D03               	btfss	3,2
  9094  19E5  29EA               	goto	u6020
  9095  19E6  1683               	bsf	3,5	;RP0=1, select bank1
  9096  19E7  1303               	bcf	3,6	;RP1=0, select bank1
  9097  19E8  1691               	bsf	17,5	;volatile
  9098  19E9  29ED               	goto	l6476
  9099  19EA                     u6020:	
  9100  19EA  1683               	bsf	3,5	;RP0=1, select bank1
  9101  19EB  1303               	bcf	3,6	;RP1=0, select bank1
  9102  19EC  1291               	bcf	17,5	;volatile
  9103  19ED                     l6476:	
  9104                           
  9105                           ;hw_i2c.c: 102:     ACKEN=1;
  9106  19ED  1611               	bsf	17,4	;volatile
  9107                           
  9108                           ;hw_i2c.c: 103:     return data;
  9109  19EE  1283               	bcf	3,5	;RP0=0, select bank0
  9110  19EF  0829               	movf	I2C_Master_Read@data,w
  9111  19F0  0008               	return
  9112  19F1                     __end_of_I2C_Master_Read:	
  9113                           
  9114                           	psect	text30
  9115  18A0                     __ptext30:	
  9116 ;; *************** function _I2C_Master_Wait *****************
  9117 ;; Defined at:
  9118 ;;		line 35 in file "hw_i2c.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;		None
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;		None
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  1    wreg      void 
  9125 ;; Registers used:
  9126 ;;		None
  9127 ;; Tracked objects:
  9128 ;;		On entry : 200/800
  9129 ;;		On exit  : 300/100
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9132 ;;      Params:         0       0       0       0       0
  9133 ;;      Locals:         0       0       0       0       0
  9134 ;;      Temps:          0       0       0       0       0
  9135 ;;      Totals:         0       0       0       0       0
  9136 ;;Total ram usage:        0 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    4
  9139 ;; This function calls:
  9140 ;;		Nothing
  9141 ;; This function is called by:
  9142 ;;		_I2C_Master_Start
  9143 ;;		_I2C_Master_Stop
  9144 ;;		_I2C_Master_Write
  9145 ;;		_I2C_Master_Read
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _I2C_Master_Wait
  9151  18A0                     _I2C_Master_Wait:	
  9152  18A0                     l573:	
  9153                           ;hw_i2c.c: 39:     {;hw_i2c.c: 40:     };
  9154                           
  9155                           ;incstack = 0
  9156 ;; hardware stack exceeded
  9157                           ; Regs used in _I2C_Master_Wait: []
  9158                           
  9159                           
  9160                           ;hw_i2c.c: 37:     while (SSPCON2bits.RCEN || SSPCON2bits.PEN || SSPCON2bits.RSEN ||
  9161  18A0  1683               	bsf	3,5	;RP0=1, select bank1
  9162  18A1  1D91               	btfss	17,3	;volatile
  9163  18A2  1911               	btfsc	17,2	;volatile
  9164  18A3  28A0               	goto	l573
  9165  18A4  1C91               	btfss	17,1	;volatile
  9166  18A5  1811               	btfsc	17,0	;volatile
  9167  18A6  28A0               	goto	l573
  9168  18A7  1A11               	btfsc	17,4	;volatile
  9169  18A8  28A0               	goto	l573
  9170  18A9  1D14               	btfss	20,2	;volatile
  9171  18AA  0008               	return
  9172  18AB  28A0               	goto	l573
  9173  18AC                     __end_of_I2C_Master_Wait:	
  9174                           
  9175                           	psect	text31
  9176  07E6                     __ptext31:	
  9177 ;; *************** function _BCD_2_DEC *****************
  9178 ;; Defined at:
  9179 ;;		line 25 in file "pcf8583.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;  bcd             1    wreg     unsigned char 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  bcd             1   20[BANK0 ] unsigned char 
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      unsigned char 
  9186 ;; Registers used:
  9187 ;;		wreg, status,2, status,0, pclath, cstack
  9188 ;; Tracked objects:
  9189 ;;		On entry : 300/800
  9190 ;;		On exit  : 300/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9193 ;;      Params:         0       0       0       0       0
  9194 ;;      Locals:         0       1       0       0       0
  9195 ;;      Temps:          0       3       0       0       0
  9196 ;;      Totals:         0       4       0       0       0
  9197 ;;Total ram usage:        4 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    5
  9200 ;; This function calls:
  9201 ;;		___bmul
  9202 ;; This function is called by:
  9203 ;;		_PCF8583_Read_Time_Date
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           
  9208                           ;psect for function _BCD_2_DEC
  9209  07E6                     _BCD_2_DEC:	
  9210                           
  9211                           ;incstack = 0
  9212 ;; hardware stack exceeded
  9213                           ; Regs used in _BCD_2_DEC: [wreg+status,2+status,0+pclath+cstack]
  9214                           ;BCD_2_DEC@bcd stored from wreg
  9215  07E6  00B4               	movwf	BCD_2_DEC@bcd
  9216                           
  9217                           ;pcf8583.c: 25: unsigned char BCD_2_DEC(unsigned char bcd);pcf8583.c: 26: {;pcf8583.c: 2
      +                          7:     return (((bcd>>4)*10) + (bcd&0x0F));
  9218  07E7  300F               	movlw	15
  9219  07E8  0534               	andwf	BCD_2_DEC@bcd,w
  9220  07E9  00B1               	movwf	??_BCD_2_DEC
  9221  07EA  300A               	movlw	10
  9222  07EB  00B2               	movwf	??_BCD_2_DEC+1
  9223  07EC  0832               	movf	??_BCD_2_DEC+1,w
  9224  07ED  00AD               	movwf	___bmul@multiplicand
  9225  07EE  0834               	movf	BCD_2_DEC@bcd,w
  9226  07EF  00B3               	movwf	??_BCD_2_DEC+2
  9227  07F0  3004               	movlw	4
  9228  07F1                     u6485:	
  9229  07F1  1003               	clrc
  9230  07F2  0CB3               	rrf	??_BCD_2_DEC+2,f
  9231  07F3  3EFF               	addlw	-1
  9232  07F4  1D03               	skipz
  9233  07F5  2FF1               	goto	u6485
  9234  07F6  0833               	movf	??_BCD_2_DEC+2,w
  9235  07F7  160A  158A  20B9   	fcall	___bmul
  9236  07FA  0731               	addwf	??_BCD_2_DEC,w
  9237  07FB  0008               	return
  9238  07FC                     __end_of_BCD_2_DEC:	
  9239                           
  9240                           	psect	text32
  9241  18B9                     __ptext32:	
  9242 ;; *************** function ___bmul *****************
  9243 ;; Defined at:
  9244 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/Umul8.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;  multiplier      1    wreg     unsigned char 
  9247 ;;  multiplicand    1   13[BANK0 ] unsigned char 
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;  multiplier      1   16[BANK0 ] unsigned char 
  9250 ;;  product         1   15[BANK0 ] unsigned char 
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  1    wreg      unsigned char 
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, status,0
  9255 ;; Tracked objects:
  9256 ;;		On entry : 300/800
  9257 ;;		On exit  : 300/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9260 ;;      Params:         0       1       0       0       0
  9261 ;;      Locals:         0       2       0       0       0
  9262 ;;      Temps:          0       1       0       0       0
  9263 ;;      Totals:         0       4       0       0       0
  9264 ;;Total ram usage:        4 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    4
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_BCD_2_DEC
  9271 ;;		_Menu_Set_Time
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           
  9276                           ;psect for function ___bmul
  9277  18B9                     ___bmul:	
  9278                           
  9279                           ;incstack = 0
  9280 ;; hardware stack exceeded
  9281                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9282                           ;___bmul@multiplier stored from wreg
  9283  18B9  00B0               	movwf	___bmul@multiplier
  9284  18BA  01AF               	clrf	___bmul@product
  9285  18BB                     l6498:	
  9286  18BB  1C30               	btfss	___bmul@multiplier,0
  9287  18BC  28C1               	goto	l6502
  9288  18BD  082D               	movf	___bmul@multiplicand,w
  9289  18BE  00AE               	movwf	??___bmul
  9290  18BF  082E               	movf	??___bmul,w
  9291  18C0  07AF               	addwf	___bmul@product,f
  9292  18C1                     l6502:	
  9293  18C1  1003               	clrc
  9294  18C2  0DAD               	rlf	___bmul@multiplicand,f
  9295  18C3  1003               	clrc
  9296  18C4  0CB0               	rrf	___bmul@multiplier,f
  9297  18C5  0830               	movf	___bmul@multiplier,w
  9298  18C6  1D03               	btfss	3,2
  9299  18C7  28BB               	goto	l6498
  9300  18C8  082F               	movf	___bmul@product,w
  9301  18C9  0008               	return
  9302  18CA                     __end_of___bmul:	
  9303                           
  9304                           	psect	text33
  9305  12C9                     __ptext33:	
  9306 ;; *************** function _Check_Event *****************
  9307 ;; Defined at:
  9308 ;;		line 229 in file "manchester_decode.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;  DataRCV         1    wreg     PTR struct .
  9311 ;;		 -> main@data_rcv(5), 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  DataRCV         1   37[BANK0 ] PTR struct .
  9314 ;;		 -> main@data_rcv(5), 
  9315 ;; Return value:  Size  Location     Type
  9316 ;;                  1    wreg      unsigned char 
  9317 ;; Registers used:
  9318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9319 ;; Tracked objects:
  9320 ;;		On entry : B00/800
  9321 ;;		On exit  : 200/0
  9322 ;;		Unchanged: 0/0
  9323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9324 ;;      Params:         0       0       0       0       0
  9325 ;;      Locals:         0       1       0       0       0
  9326 ;;      Temps:          0       1       0       0       0
  9327 ;;      Totals:         0       2       0       0       0
  9328 ;;Total ram usage:        2 bytes
  9329 ;; Hardware stack levels used:    1
  9330 ;; Hardware stack levels required when called:    8
  9331 ;; This function calls:
  9332 ;;		_Display_7Seg_Text
  9333 ;;		_FrameDecode
  9334 ;;		_PlayRing
  9335 ;; This function is called by:
  9336 ;;		_ProcessRCVData
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340                           
  9341                           ;psect for function _Check_Event
  9342  12C9                     _Check_Event:	
  9343                           
  9344                           ;incstack = 0
  9345 ;; hardware stack exceeded
  9346                           ; Regs used in _Check_Event: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9347                           ;Check_Event@DataRCV stored from wreg
  9348  12C9  00C5               	movwf	Check_Event@DataRCV
  9349                           
  9350                           ;manchester_decode.c: 229: unsigned char Check_Event(DataStruct *DataRCV);manchester_dec
      +                          ode.c: 230: {;manchester_decode.c: 234:     if(DataRCV->frame[0]=='G' && DataRCV->frame[
      +                          1]=='0')
  9351  12CA  0845               	movf	Check_Event@DataRCV,w
  9352  12CB  0084               	movwf	4
  9353  12CC  3047               	movlw	71
  9354  12CD  0600               	xorwf	0,w
  9355  12CE  1D03               	btfss	3,2
  9356  12CF  2B36               	goto	l7426
  9357  12D0  0A45               	incf	Check_Event@DataRCV,w
  9358  12D1  0084               	movwf	4
  9359  12D2  3030               	movlw	48
  9360  12D3  0600               	xorwf	0,w
  9361  12D4  1D03               	btfss	3,2
  9362  12D5  2B36               	goto	l7426
  9363                           
  9364                           ;manchester_decode.c: 235:     {;manchester_decode.c: 237:         Display_7Seg_Text("br
      +                          am",0);
  9365  12D6  01A6               	clrf	Display_7Seg_Text@decimal_point
  9366  12D7  3065               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  9367  12D8  160A  158A  2102  160A  118A  	fcall	_Display_7Seg_Text
  9368                           
  9369                           ;manchester_decode.c: 238:         g_display_controll=0;
  9370  12DD  01AD               	clrf	_g_display_controll^(0+128)	;volatile
  9371                           
  9372                           ;manchester_decode.c: 239:         PlayRing();
  9373  12DE  160A  118A  224E  160A  118A  	fcall	_PlayRing
  9374  12E3                     l7414:	
  9375                           ;manchester_decode.c: 240:         while(FrameDecode(DataRCV)!=0xFF);
  9376                           
  9377  12E3  0845               	movf	Check_Event@DataRCV,w
  9378  12E4  160A  158A  25D4  160A  118A  	fcall	_FrameDecode
  9379  12E9  0A29               	incf	?_FrameDecode,w
  9380  12EA  042A               	iorwf	?_FrameDecode+1,w
  9381  12EB  1D03               	btfss	3,2
  9382  12EC  2AE3               	goto	l7414
  9383  12ED  2B29               	goto	L10
  9384  12EE                     l7428:	
  9385                           ;manchester_decode.c: 242:         Display_7Seg_Text("****",0);
  9386                           
  9387                           ;manchester_decode.c: 241:         g_display_controll=1;
  9388                           
  9389  12EE  0A45               	incf	Check_Event@DataRCV,w
  9390  12EF  0084               	movwf	4
  9391  12F0  3030               	movlw	48
  9392  12F1  0600               	xorwf	0,w
  9393  12F2  1D03               	btfss	3,2
  9394  12F3  2B3C               	goto	l7448
  9395                           
  9396                           ;manchester_decode.c: 246:     {;manchester_decode.c: 248:         Display_7Seg_Text("fu
      +                          rt",0);
  9397  12F4  01A6               	clrf	Display_7Seg_Text@decimal_point
  9398  12F5  306F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  9399  12F6  160A  158A  2102  160A  118A  	fcall	_Display_7Seg_Text
  9400                           
  9401                           ;manchester_decode.c: 249:         g_display_controll=0;
  9402  12FB  01AD               	clrf	_g_display_controll^(0+128)	;volatile
  9403                           
  9404                           ;manchester_decode.c: 250:         PlayRing();
  9405  12FC  160A  118A  224E  160A  118A  	fcall	_PlayRing
  9406  1301                     l7436:	
  9407                           ;manchester_decode.c: 251:         while(FrameDecode(DataRCV)!=0xFF);
  9408                           
  9409  1301  0845               	movf	Check_Event@DataRCV,w
  9410  1302  160A  158A  25D4  160A  118A  	fcall	_FrameDecode
  9411  1307  0A29               	incf	?_FrameDecode,w
  9412  1308  042A               	iorwf	?_FrameDecode+1,w
  9413  1309  1D03               	btfss	3,2
  9414  130A  2B01               	goto	l7436
  9415  130B  2B29               	goto	L10
  9416  130C                     l7450:	
  9417                           ;manchester_decode.c: 253:         Display_7Seg_Text("****",0);
  9418                           
  9419                           ;manchester_decode.c: 252:         g_display_controll=1;
  9420                           
  9421  130C  0A45               	incf	Check_Event@DataRCV,w
  9422  130D  0084               	movwf	4
  9423  130E  3042               	movlw	66
  9424  130F  0600               	xorwf	0,w
  9425  1310  1D03               	btfss	3,2
  9426  1311  2B42               	goto	l7468
  9427                           
  9428                           ;manchester_decode.c: 257:     {;manchester_decode.c: 259:         Display_7Seg_Text("dz
      +                          wo",0);
  9429  1312  01A6               	clrf	Display_7Seg_Text@decimal_point
  9430  1313  306A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  9431  1314  160A  158A  2102  160A  118A  	fcall	_Display_7Seg_Text
  9432                           
  9433                           ;manchester_decode.c: 260:         g_display_controll=0;
  9434  1319  01AD               	clrf	_g_display_controll^(0+128)	;volatile
  9435                           
  9436                           ;manchester_decode.c: 261:         PlayRing();
  9437  131A  160A  118A  224E  160A  118A  	fcall	_PlayRing
  9438  131F                     l7458:	
  9439                           ;manchester_decode.c: 262:         while(FrameDecode(DataRCV)!=0xFF);
  9440                           
  9441  131F  0845               	movf	Check_Event@DataRCV,w
  9442  1320  160A  158A  25D4  160A  118A  	fcall	_FrameDecode
  9443  1325  0A29               	incf	?_FrameDecode,w
  9444  1326  042A               	iorwf	?_FrameDecode+1,w
  9445  1327  1D03               	btfss	3,2
  9446  1328  2B1F               	goto	l7458
  9447  1329                     L10:	
  9448                           
  9449                           ;manchester_decode.c: 263:         g_display_controll=1;
  9450  1329  3001               	movlw	1
  9451  132A  00C4               	movwf	??_Check_Event
  9452  132B  0844               	movf	??_Check_Event,w
  9453  132C  1683               	bsf	3,5	;RP0=1, select bank1
  9454  132D  00AD               	movwf	_g_display_controll^(0+128)	;volatile
  9455                           
  9456                           ;manchester_decode.c: 264:         Display_7Seg_Text("****",0);
  9457  132E  1283               	bcf	3,5	;RP0=0, select bank0
  9458  132F  01A6               	clrf	Display_7Seg_Text@decimal_point
  9459  1330  3060               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  9460  1331  160A  158A  2102   	fcall	_Display_7Seg_Text
  9461                           
  9462                           ;manchester_decode.c: 243:         return 1;
  9463  1334  3001               	movlw	1
  9464  1335  0008               	return
  9465  1336                     l7426:	
  9466  1336  0845               	movf	Check_Event@DataRCV,w
  9467  1337  0084               	movwf	4
  9468  1338  3057               	movlw	87
  9469  1339  0600               	xorwf	0,w
  9470  133A  1903               	btfsc	3,2
  9471  133B  2AEE               	goto	l7428
  9472  133C                     l7448:	
  9473  133C  0845               	movf	Check_Event@DataRCV,w
  9474  133D  0084               	movwf	4
  9475  133E  3057               	movlw	87
  9476  133F  0600               	xorwf	0,w
  9477  1340  1903               	btfsc	3,2
  9478  1341  2B0C               	goto	l7450
  9479  1342                     l7468:	
  9480                           
  9481                           ;manchester_decode.c: 270:     return 0;
  9482  1342  3000               	movlw	0
  9483  1343  0008               	return
  9484  1344                     __end_of_Check_Event:	
  9485                           
  9486                           	psect	text34
  9487  124E                     __ptext34:	
  9488 ;; *************** function _PlayRing *****************
  9489 ;; Defined at:
  9490 ;;		line 43 in file "melody.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  j               2   33[BANK0 ] unsigned int 
  9495 ;;  i               1   35[BANK0 ] unsigned char 
  9496 ;;  MELODY_LENGT    1   32[BANK0 ] unsigned char 
  9497 ;; Return value:  Size  Location     Type
  9498 ;;                  1    wreg      void 
  9499 ;; Registers used:
  9500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9501 ;; Tracked objects:
  9502 ;;		On entry : B00/100
  9503 ;;		On exit  : 300/0
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9506 ;;      Params:         0       0       0       0       0
  9507 ;;      Locals:         0       4       0       0       0
  9508 ;;      Temps:          0       4       0       0       0
  9509 ;;      Totals:         0       8       0       0       0
  9510 ;;Total ram usage:        8 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    7
  9513 ;; This function calls:
  9514 ;;		_Display7SegmentText
  9515 ;;		_Generate_PWM
  9516 ;;		_Init_CaptureMode
  9517 ;;		_Init_CompareMode
  9518 ;;		_Wait_ms
  9519 ;;		___lwdiv
  9520 ;; This function is called by:
  9521 ;;		_Check_Event
  9522 ;; This function uses a non-reentrant model
  9523 ;;
  9524                           
  9525                           
  9526                           ;psect for function _PlayRing
  9527  124E                     _PlayRing:	
  9528                           
  9529                           ;melody.c: 45:     Init_CompareMode();
  9530                           
  9531                           ;incstack = 0
  9532 ;; hardware stack exceeded
  9533                           ; Regs used in _PlayRing: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9534  124E  160A  158A  2094  160A  118A  	fcall	_Init_CompareMode
  9535                           
  9536                           ;melody.c: 47:     unsigned int const melody[] = {659, 523, 587, 392, 1, 392, 587, 659, 
      +                          523};;melody.c: 48:     unsigned char const beats[] = {4, 4, 4, 2, 64, 4, 4, 4, 2};;melo
      +                          dy.c: 49:     const unsigned int tempo=1800;;melody.c: 51:     unsigned char MELODY_LENG
      +                          TH = sizeof(melody) / sizeof(melody[0]);
  9537  1253  3009               	movlw	9
  9538  1254  00BC               	movwf	??_PlayRing
  9539  1255  083C               	movf	??_PlayRing,w
  9540  1256  00C0               	movwf	PlayRing@MELODY_LENGTH
  9541                           
  9542                           ;melody.c: 53:     for (unsigned char i=0; i<MELODY_LENGTH; i++)
  9543  1257  01C3               	clrf	PlayRing@i
  9544  1258                     l7030:	
  9545  1258  0840               	movf	PlayRing@MELODY_LENGTH,w
  9546  1259  0243               	subwf	PlayRing@i,w
  9547  125A  1803               	btfsc	3,0
  9548  125B  2AC5               	goto	l7032
  9549                           
  9550                           ;melody.c: 54:     {;melody.c: 55:         Generate_PWM(melody[i]);
  9551  125C  0843               	movf	PlayRing@i,w
  9552  125D  00BC               	movwf	??_PlayRing
  9553  125E  073C               	addwf	??_PlayRing,w
  9554  125F  3E01               	addlw	low ((PlayRing@melody-__stringbase)| (0+32768))
  9555  1260  0084               	movwf	4
  9556  1261  160A  118A  2000  160A  118A  	fcall	stringdir
  9557  1266  00BD               	movwf	??_PlayRing+1
  9558  1267  160A  118A  2000  160A  118A  	fcall	stringdir
  9559  126C  00BE               	movwf	??_PlayRing+2
  9560  126D  083D               	movf	??_PlayRing+1,w
  9561  126E  00B4               	movwf	Generate_PWM@freq
  9562  126F  083E               	movf	??_PlayRing+2,w
  9563  1270  00B5               	movwf	Generate_PWM@freq+1
  9564  1271  01B6               	clrf	Generate_PWM@freq+2
  9565  1272  01B7               	clrf	Generate_PWM@freq+3
  9566  1273  160A  158A  2219  160A  118A  	fcall	_Generate_PWM
  9567                           
  9568                           ;melody.c: 57:         for(unsigned int j=0;j<(tempo/beats[i])/4;j++)
  9569  1278  1283               	bcf	3,5	;RP0=0, select bank0
  9570  1279  01C1               	clrf	PlayRing@j
  9571  127A  01C2               	clrf	PlayRing@j+1
  9572  127B                     l7026:	
  9573  127B  0843               	movf	PlayRing@i,w
  9574  127C  3E13               	addlw	low ((PlayRing@beats-__stringbase)| (0+32768))
  9575  127D  0084               	movwf	4
  9576  127E  160A  118A  2000  160A  118A  	fcall	stringdir
  9577  1283  00BC               	movwf	??_PlayRing
  9578  1284  01BD               	clrf	??_PlayRing+1
  9579  1285  083C               	movf	??_PlayRing,w
  9580  1286  00AC               	movwf	___lwdiv@divisor
  9581  1287  083D               	movf	??_PlayRing+1,w
  9582  1288  00AD               	movwf	___lwdiv@divisor+1
  9583  1289  3008               	movlw	8
  9584  128A  00AE               	movwf	___lwdiv@dividend
  9585  128B  3007               	movlw	7
  9586  128C  00AF               	movwf	___lwdiv@dividend+1
  9587  128D  160A  158A  23AF  160A  118A  	fcall	___lwdiv
  9588  1292  082C               	movf	?___lwdiv,w
  9589  1293  00BE               	movwf	??_PlayRing+2
  9590  1294  082D               	movf	?___lwdiv+1,w
  9591  1295  00BF               	movwf	??_PlayRing+3
  9592  1296  1003               	clrc
  9593  1297  0CBF               	rrf	??_PlayRing+3,f
  9594  1298  0CBE               	rrf	??_PlayRing+2,f
  9595  1299  1003               	clrc
  9596  129A  0CBF               	rrf	??_PlayRing+3,f
  9597  129B  0CBE               	rrf	??_PlayRing+2,f
  9598  129C  083F               	movf	??_PlayRing+3,w
  9599  129D  0242               	subwf	PlayRing@j+1,w
  9600  129E  1D03               	skipz
  9601  129F  2AA2               	goto	u7045
  9602  12A0  083E               	movf	??_PlayRing+2,w
  9603  12A1  0241               	subwf	PlayRing@j,w
  9604  12A2                     u7045:	
  9605  12A2  1803               	btfsc	3,0
  9606  12A3  2AC0               	goto	l7028
  9607                           
  9608                           ;melody.c: 58:         {;melody.c: 59:             Display7SegmentText(&g_display_text[0
      +                          ],g_decimal_point);
  9609  12A4  1683               	bsf	3,5	;RP0=1, select bank1
  9610  12A5  082C               	movf	_g_decimal_point^(0+128),w
  9611  12A6  1283               	bcf	3,5	;RP0=0, select bank0
  9612  12A7  00BC               	movwf	??_PlayRing
  9613  12A8  083C               	movf	??_PlayRing,w
  9614  12A9  00B1               	movwf	Display7SegmentText@decimal_point
  9615  12AA  30CC               	movlw	(low (_g_display_text| 0))& (0+255)
  9616  12AB  160A  118A  21D9  160A  118A  	fcall	_Display7SegmentText
  9617                           
  9618                           ;melody.c: 60:             Wait_ms(4);
  9619  12B0  3004               	movlw	4
  9620  12B1  00B3               	movwf	Wait_ms@time
  9621  12B2  3000               	movlw	0
  9622  12B3  00B4               	movwf	Wait_ms@time+1
  9623  12B4  160A  158A  2271  160A  118A  	fcall	_Wait_ms
  9624                           
  9625                           ;melody.c: 61:         }
  9626  12B9  3001               	movlw	1
  9627  12BA  07C1               	addwf	PlayRing@j,f
  9628  12BB  1803               	skipnc
  9629  12BC  0AC2               	incf	PlayRing@j+1,f
  9630  12BD  3000               	movlw	0
  9631  12BE  07C2               	addwf	PlayRing@j+1,f
  9632  12BF  2A7B               	goto	l7026
  9633  12C0                     l7028:	
  9634                           
  9635                           ;melody.c: 62:     }
  9636  12C0  3001               	movlw	1
  9637  12C1  00BC               	movwf	??_PlayRing
  9638  12C2  083C               	movf	??_PlayRing,w
  9639  12C3  07C3               	addwf	PlayRing@i,f
  9640  12C4  2A58               	goto	l7030
  9641  12C5                     l7032:	
  9642                           
  9643                           ;melody.c: 63:     Init_CaptureMode();
  9644  12C5  160A  158A  20AC   	fcall	_Init_CaptureMode
  9645  12C8  0008               	return
  9646  12C9                     __end_of_PlayRing:	
  9647                           
  9648                           	psect	text35
  9649  1BAF                     __ptext35:	
  9650 ;; *************** function ___lwdiv *****************
  9651 ;; Defined at:
  9652 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/lwdiv.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  divisor         2   12[BANK0 ] unsigned int 
  9655 ;;  dividend        2   14[BANK0 ] unsigned int 
  9656 ;; Auto vars:     Size  Location     Type
  9657 ;;  quotient        2   18[BANK0 ] unsigned int 
  9658 ;;  counter         1   17[BANK0 ] unsigned char 
  9659 ;; Return value:  Size  Location     Type
  9660 ;;                  2   12[BANK0 ] unsigned int 
  9661 ;; Registers used:
  9662 ;;		wreg, status,2, status,0
  9663 ;; Tracked objects:
  9664 ;;		On entry : 300/800
  9665 ;;		On exit  : 300/0
  9666 ;;		Unchanged: 0/0
  9667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9668 ;;      Params:         0       4       0       0       0
  9669 ;;      Locals:         0       3       0       0       0
  9670 ;;      Temps:          0       1       0       0       0
  9671 ;;      Totals:         0       8       0       0       0
  9672 ;;Total ram usage:        8 bytes
  9673 ;; Hardware stack levels used:    1
  9674 ;; Hardware stack levels required when called:    4
  9675 ;; This function calls:
  9676 ;;		Nothing
  9677 ;; This function is called by:
  9678 ;;		_PlayRing
  9679 ;;		_Find_Weekday
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           
  9684                           ;psect for function ___lwdiv
  9685  1BAF                     ___lwdiv:	
  9686                           
  9687                           ;incstack = 0
  9688                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9689  1BAF  01B2               	clrf	___lwdiv@quotient
  9690  1BB0  01B3               	clrf	___lwdiv@quotient+1
  9691  1BB1  082C               	movf	___lwdiv@divisor,w
  9692  1BB2  042D               	iorwf	___lwdiv@divisor+1,w
  9693  1BB3  1903               	btfsc	3,2
  9694  1BB4  2BE6               	goto	l6934
  9695  1BB5  01B1               	clrf	___lwdiv@counter
  9696  1BB6  0AB1               	incf	___lwdiv@counter,f
  9697  1BB7                     l6922:	
  9698  1BB7  1BAD               	btfsc	___lwdiv@divisor+1,7
  9699  1BB8  2BC5               	goto	l6924
  9700  1BB9  3001               	movlw	1
  9701  1BBA                     u6875:	
  9702  1BBA  1003               	clrc
  9703  1BBB  0DAC               	rlf	___lwdiv@divisor,f
  9704  1BBC  0DAD               	rlf	___lwdiv@divisor+1,f
  9705  1BBD  3EFF               	addlw	-1
  9706  1BBE  1D03               	skipz
  9707  1BBF  2BBA               	goto	u6875
  9708  1BC0  3001               	movlw	1
  9709  1BC1  00B0               	movwf	??___lwdiv
  9710  1BC2  0830               	movf	??___lwdiv,w
  9711  1BC3  07B1               	addwf	___lwdiv@counter,f
  9712  1BC4  2BB7               	goto	l6922
  9713  1BC5                     l6924:	
  9714  1BC5  3001               	movlw	1
  9715  1BC6                     u6895:	
  9716  1BC6  1003               	clrc
  9717  1BC7  0DB2               	rlf	___lwdiv@quotient,f
  9718  1BC8  0DB3               	rlf	___lwdiv@quotient+1,f
  9719  1BC9  3EFF               	addlw	-1
  9720  1BCA  1D03               	skipz
  9721  1BCB  2BC6               	goto	u6895
  9722  1BCC  082D               	movf	___lwdiv@divisor+1,w
  9723  1BCD  022F               	subwf	___lwdiv@dividend+1,w
  9724  1BCE  1D03               	skipz
  9725  1BCF  2BD2               	goto	u6905
  9726  1BD0  082C               	movf	___lwdiv@divisor,w
  9727  1BD1  022E               	subwf	___lwdiv@dividend,w
  9728  1BD2                     u6905:	
  9729  1BD2  1C03               	skipc
  9730  1BD3  2BDB               	goto	l6930
  9731  1BD4  082C               	movf	___lwdiv@divisor,w
  9732  1BD5  02AE               	subwf	___lwdiv@dividend,f
  9733  1BD6  082D               	movf	___lwdiv@divisor+1,w
  9734  1BD7  1C03               	skipc
  9735  1BD8  03AF               	decf	___lwdiv@dividend+1,f
  9736  1BD9  02AF               	subwf	___lwdiv@dividend+1,f
  9737  1BDA  1432               	bsf	___lwdiv@quotient,0
  9738  1BDB                     l6930:	
  9739  1BDB  3001               	movlw	1
  9740  1BDC                     u6915:	
  9741  1BDC  1003               	clrc
  9742  1BDD  0CAD               	rrf	___lwdiv@divisor+1,f
  9743  1BDE  0CAC               	rrf	___lwdiv@divisor,f
  9744  1BDF  3EFF               	addlw	-1
  9745  1BE0  1D03               	skipz
  9746  1BE1  2BDC               	goto	u6915
  9747  1BE2  3001               	movlw	1
  9748  1BE3  02B1               	subwf	___lwdiv@counter,f
  9749  1BE4  1D03               	btfss	3,2
  9750  1BE5  2BC5               	goto	l6924
  9751  1BE6                     l6934:	
  9752  1BE6  0833               	movf	___lwdiv@quotient+1,w
  9753  1BE7  00AD               	movwf	?___lwdiv+1
  9754  1BE8  0832               	movf	___lwdiv@quotient,w
  9755  1BE9  00AC               	movwf	?___lwdiv
  9756  1BEA  0008               	return
  9757  1BEB                     __end_of___lwdiv:	
  9758                           
  9759                           	psect	text36
  9760  1A71                     __ptext36:	
  9761 ;; *************** function _Wait_ms *****************
  9762 ;; Defined at:
  9763 ;;		line 7 in file "utils.c"
  9764 ;; Parameters:    Size  Location     Type
  9765 ;;  time            2   19[BANK0 ] unsigned int 
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;		None
  9768 ;; Return value:  Size  Location     Type
  9769 ;;                  1    wreg      void 
  9770 ;; Registers used:
  9771 ;;		wreg, status,2, status,0, pclath, cstack
  9772 ;; Tracked objects:
  9773 ;;		On entry : 300/0
  9774 ;;		On exit  : 300/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9777 ;;      Params:         0       2       0       0       0
  9778 ;;      Locals:         0       0       0       0       0
  9779 ;;      Temps:          0       4       0       0       0
  9780 ;;      Totals:         0       6       0       0       0
  9781 ;;Total ram usage:        6 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:    5
  9784 ;; This function calls:
  9785 ;;		___lmul
  9786 ;; This function is called by:
  9787 ;;		_PlayRing
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           
  9792                           ;psect for function _Wait_ms
  9793  1A71                     _Wait_ms:	
  9794                           
  9795                           ;utils.c: 7: void Wait_ms(unsigned int time);utils.c: 8: {;utils.c: 9:     g_generic_tim
      +                          er=(125*(unsigned long int)time)/32;
  9796                           
  9797                           ;incstack = 0
  9798 ;; hardware stack exceeded
  9799                           ; Regs used in _Wait_ms: [wreg+status,2+status,0+pclath+cstack]
  9800  1A71  0833               	movf	Wait_ms@time,w
  9801  1A72  00A6               	movwf	___lmul@multiplier
  9802  1A73  0834               	movf	Wait_ms@time+1,w
  9803  1A74  00A7               	movwf	___lmul@multiplier+1
  9804  1A75  01A8               	clrf	___lmul@multiplier+2
  9805  1A76  01A9               	clrf	___lmul@multiplier+3
  9806  1A77  3000               	movlw	0
  9807  1A78  00AD               	movwf	___lmul@multiplicand+3
  9808  1A79  3000               	movlw	0
  9809  1A7A  00AC               	movwf	___lmul@multiplicand+2
  9810  1A7B  3000               	movlw	0
  9811  1A7C  00AB               	movwf	___lmul@multiplicand+1
  9812  1A7D  307D               	movlw	125
  9813  1A7E  00AA               	movwf	___lmul@multiplicand
  9814  1A7F  160A  158A  23EB  160A  158A  	fcall	___lmul
  9815  1A84  0826               	movf	?___lmul,w
  9816  1A85  00B5               	movwf	??_Wait_ms
  9817  1A86  0827               	movf	?___lmul+1,w
  9818  1A87  00B6               	movwf	??_Wait_ms+1
  9819  1A88  0828               	movf	?___lmul+2,w
  9820  1A89  00B7               	movwf	??_Wait_ms+2
  9821  1A8A  0829               	movf	?___lmul+3,w
  9822  1A8B  00B8               	movwf	??_Wait_ms+3
  9823  1A8C  3005               	movlw	5
  9824  1A8D                     u6465:	
  9825  1A8D  1003               	clrc
  9826  1A8E  0CB8               	rrf	??_Wait_ms+3,f
  9827  1A8F  0CB7               	rrf	??_Wait_ms+2,f
  9828  1A90  0CB6               	rrf	??_Wait_ms+1,f
  9829  1A91  0CB5               	rrf	??_Wait_ms,f
  9830  1A92  3EFF               	addlw	-1
  9831  1A93  1D03               	skipz
  9832  1A94  2A8D               	goto	u6465
  9833  1A95  0836               	movf	??_Wait_ms+1,w
  9834  1A96  00DA               	movwf	_g_generic_timer+1	;volatile
  9835  1A97  0835               	movf	??_Wait_ms,w
  9836  1A98  00D9               	movwf	_g_generic_timer	;volatile
  9837  1A99                     l6710:	
  9838                           ;utils.c: 10:     while(g_generic_timer);
  9839                           
  9840  1A99  0859               	movf	_g_generic_timer,w	;volatile
  9841  1A9A  045A               	iorwf	_g_generic_timer+1,w	;volatile
  9842  1A9B  1903               	btfsc	3,2
  9843  1A9C  0008               	return
  9844  1A9D  2A99               	goto	l6710
  9845  1A9E                     __end_of_Wait_ms:	
  9846                           
  9847                           	psect	text37
  9848  1BEB                     __ptext37:	
  9849 ;; *************** function ___lmul *****************
  9850 ;; Defined at:
  9851 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/Umul32.c"
  9852 ;; Parameters:    Size  Location     Type
  9853 ;;  multiplier      4    6[BANK0 ] unsigned long 
  9854 ;;  multiplicand    4   10[BANK0 ] unsigned long 
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;  product         4   15[BANK0 ] unsigned long 
  9857 ;; Return value:  Size  Location     Type
  9858 ;;                  4    6[BANK0 ] unsigned long 
  9859 ;; Registers used:
  9860 ;;		wreg, status,2, status,0
  9861 ;; Tracked objects:
  9862 ;;		On entry : 300/0
  9863 ;;		On exit  : 300/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9866 ;;      Params:         0       8       0       0       0
  9867 ;;      Locals:         0       4       0       0       0
  9868 ;;      Temps:          0       1       0       0       0
  9869 ;;      Totals:         0      13       0       0       0
  9870 ;;Total ram usage:       13 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:    4
  9873 ;; This function calls:
  9874 ;;		Nothing
  9875 ;; This function is called by:
  9876 ;;		_Wait_ms
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           
  9881                           ;psect for function ___lmul
  9882  1BEB                     ___lmul:	
  9883                           
  9884                           ;incstack = 0
  9885 ;; hardware stack exceeded
  9886                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9887  1BEB  3000               	movlw	0
  9888  1BEC  00B2               	movwf	___lmul@product+3
  9889  1BED  3000               	movlw	0
  9890  1BEE  00B1               	movwf	___lmul@product+2
  9891  1BEF  3000               	movlw	0
  9892  1BF0  00B0               	movwf	___lmul@product+1
  9893  1BF1  3000               	movlw	0
  9894  1BF2  00AF               	movwf	___lmul@product
  9895  1BF3                     l6484:	
  9896  1BF3  1C26               	btfss	___lmul@multiplier,0
  9897  1BF4  2C09               	goto	l6488
  9898  1BF5  082A               	movf	___lmul@multiplicand,w
  9899  1BF6  07AF               	addwf	___lmul@product,f
  9900  1BF7  082B               	movf	___lmul@multiplicand+1,w
  9901  1BF8  1103               	clrz
  9902  1BF9  1803               	skipnc
  9903  1BFA  3E01               	addlw	1
  9904  1BFB  1D03               	btfss	3,2
  9905  1BFC  07B0               	addwf	___lmul@product+1,f
  9906  1BFD  082C               	movf	___lmul@multiplicand+2,w
  9907  1BFE  1103               	clrz
  9908  1BFF  1803               	skipnc
  9909  1C00  3E01               	addlw	1
  9910  1C01  1D03               	btfss	3,2
  9911  1C02  07B1               	addwf	___lmul@product+2,f
  9912  1C03  082D               	movf	___lmul@multiplicand+3,w
  9913  1C04  1103               	clrz
  9914  1C05  1803               	skipnc
  9915  1C06  3E01               	addlw	1
  9916  1C07  1D03               	btfss	3,2
  9917  1C08  07B2               	addwf	___lmul@product+3,f
  9918  1C09                     l6488:	
  9919  1C09  3001               	movlw	1
  9920  1C0A  00AE               	movwf	??___lmul
  9921  1C0B                     u6065:	
  9922  1C0B  1003               	clrc
  9923  1C0C  0DAA               	rlf	___lmul@multiplicand,f
  9924  1C0D  0DAB               	rlf	___lmul@multiplicand+1,f
  9925  1C0E  0DAC               	rlf	___lmul@multiplicand+2,f
  9926  1C0F  0DAD               	rlf	___lmul@multiplicand+3,f
  9927  1C10  0BAE               	decfsz	??___lmul,f
  9928  1C11  2C0B               	goto	u6065
  9929  1C12  3001               	movlw	1
  9930  1C13                     u6075:	
  9931  1C13  1003               	clrc
  9932  1C14  0CA9               	rrf	___lmul@multiplier+3,f
  9933  1C15  0CA8               	rrf	___lmul@multiplier+2,f
  9934  1C16  0CA7               	rrf	___lmul@multiplier+1,f
  9935  1C17  0CA6               	rrf	___lmul@multiplier,f
  9936  1C18  3EFF               	addlw	-1
  9937  1C19  1D03               	skipz
  9938  1C1A  2C13               	goto	u6075
  9939  1C1B  0829               	movf	___lmul@multiplier+3,w
  9940  1C1C  0428               	iorwf	___lmul@multiplier+2,w
  9941  1C1D  0427               	iorwf	___lmul@multiplier+1,w
  9942  1C1E  0426               	iorwf	___lmul@multiplier,w
  9943  1C1F  1D03               	skipz
  9944  1C20  2BF3               	goto	l6484
  9945  1C21  0832               	movf	___lmul@product+3,w
  9946  1C22  00A9               	movwf	?___lmul+3
  9947  1C23  0831               	movf	___lmul@product+2,w
  9948  1C24  00A8               	movwf	?___lmul+2
  9949  1C25  0830               	movf	___lmul@product+1,w
  9950  1C26  00A7               	movwf	?___lmul+1
  9951  1C27  082F               	movf	___lmul@product,w
  9952  1C28  00A6               	movwf	?___lmul
  9953  1C29  0008               	return
  9954  1C2A                     __end_of___lmul:	
  9955                           
  9956                           	psect	text38
  9957  1894                     __ptext38:	
  9958 ;; *************** function _Init_CompareMode *****************
  9959 ;; Defined at:
  9960 ;;		line 27 in file "melody.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;		None
  9963 ;; Auto vars:     Size  Location     Type
  9964 ;;		None
  9965 ;; Return value:  Size  Location     Type
  9966 ;;                  1    wreg      void 
  9967 ;; Registers used:
  9968 ;;		wreg, status,2, status,0
  9969 ;; Tracked objects:
  9970 ;;		On entry : B00/100
  9971 ;;		On exit  : B00/0
  9972 ;;		Unchanged: 800/0
  9973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9974 ;;      Params:         0       0       0       0       0
  9975 ;;      Locals:         0       0       0       0       0
  9976 ;;      Temps:          0       0       0       0       0
  9977 ;;      Totals:         0       0       0       0       0
  9978 ;;Total ram usage:        0 bytes
  9979 ;; Hardware stack levels used:    1
  9980 ;; Hardware stack levels required when called:    4
  9981 ;; This function calls:
  9982 ;;		Nothing
  9983 ;; This function is called by:
  9984 ;;		_PlayRing
  9985 ;; This function uses a non-reentrant model
  9986 ;;
  9987                           
  9988                           
  9989                           ;psect for function _Init_CompareMode
  9990  1894                     _Init_CompareMode:	
  9991                           
  9992                           ;melody.c: 29:     CCP2IE=0;
  9993                           
  9994                           ;incstack = 0
  9995                           ; Regs used in _Init_CompareMode: [wreg+status,2+status,0]
  9996  1894  100D               	bcf	13,0	;volatile
  9997                           
  9998                           ;melody.c: 30:     T1CONbits.T1CKPS=0b11;
  9999  1895  3030               	movlw	48
 10000  1896  1283               	bcf	3,5	;RP0=0, select bank0
 10001  1897  0490               	iorwf	16,f	;volatile
 10002                           
 10003                           ;melody.c: 31:     CCP1IE=1;
 10004  1898  1683               	bsf	3,5	;RP0=1, select bank1
 10005  1899  150C               	bsf	12,2	;volatile
 10006                           
 10007                           ;melody.c: 32:     CCP1CONbits.CCP1M=0b1000;
 10008  189A  1283               	bcf	3,5	;RP0=0, select bank0
 10009  189B  0817               	movf	23,w	;volatile
 10010  189C  39F0               	andlw	-16
 10011  189D  3808               	iorlw	8
 10012  189E  0097               	movwf	23	;volatile
 10013  189F  0008               	return
 10014  18A0                     __end_of_Init_CompareMode:	
 10015                           
 10016                           	psect	text39
 10017  18AC                     __ptext39:	
 10018 ;; *************** function _Init_CaptureMode *****************
 10019 ;; Defined at:
 10020 ;;		line 35 in file "melody.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;		None
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  1    wreg      void 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0
 10029 ;; Tracked objects:
 10030 ;;		On entry : 300/0
 10031 ;;		On exit  : 300/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10034 ;;      Params:         0       0       0       0       0
 10035 ;;      Locals:         0       0       0       0       0
 10036 ;;      Temps:          0       0       0       0       0
 10037 ;;      Totals:         0       0       0       0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    4
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_PlayRing
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           
 10049                           ;psect for function _Init_CaptureMode
 10050  18AC                     _Init_CaptureMode:	
 10051                           
 10052                           ;melody.c: 37:     CCP1IE=0;
 10053                           
 10054                           ;incstack = 0
 10055                           ; Regs used in _Init_CaptureMode: [wreg+status,2+status,0]
 10056  18AC  1683               	bsf	3,5	;RP0=1, select bank1
 10057  18AD  110C               	bcf	12,2	;volatile
 10058                           
 10059                           ;melody.c: 38:     T1CONbits.T1CKPS=0b00;
 10060  18AE  30CF               	movlw	-49
 10061  18AF  1283               	bcf	3,5	;RP0=0, select bank0
 10062  18B0  0590               	andwf	16,f	;volatile
 10063                           
 10064                           ;melody.c: 39:     CCP2IE=1;
 10065  18B1  1683               	bsf	3,5	;RP0=1, select bank1
 10066  18B2  140D               	bsf	13,0	;volatile
 10067                           
 10068                           ;melody.c: 40:     CCP2CONbits.CCP2M=0b0100;
 10069  18B3  1283               	bcf	3,5	;RP0=0, select bank0
 10070  18B4  081D               	movf	29,w	;volatile
 10071  18B5  39F0               	andlw	-16
 10072  18B6  3804               	iorlw	4
 10073  18B7  009D               	movwf	29	;volatile
 10074  18B8  0008               	return
 10075  18B9                     __end_of_Init_CaptureMode:	
 10076                           
 10077                           	psect	text40
 10078  1A19                     __ptext40:	
 10079 ;; *************** function _Generate_PWM *****************
 10080 ;; Defined at:
 10081 ;;		line 22 in file "melody.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;  freq            4   20[BANK0 ] unsigned long 
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;		None
 10086 ;; Return value:  Size  Location     Type
 10087 ;;                  1    wreg      void 
 10088 ;; Registers used:
 10089 ;;		wreg, status,2, status,0, pclath, cstack
 10090 ;; Tracked objects:
 10091 ;;		On entry : 300/0
 10092 ;;		On exit  : 300/100
 10093 ;;		Unchanged: 0/0
 10094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10095 ;;      Params:         0       4       0       0       0
 10096 ;;      Locals:         0       0       0       0       0
 10097 ;;      Temps:          0       4       0       0       0
 10098 ;;      Totals:         0       8       0       0       0
 10099 ;;Total ram usage:        8 bytes
 10100 ;; Hardware stack levels used:    1
 10101 ;; Hardware stack levels required when called:    5
 10102 ;; This function calls:
 10103 ;;		___lldiv
 10104 ;; This function is called by:
 10105 ;;		_PlayRing
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           
 10110                           ;psect for function _Generate_PWM
 10111  1A19                     _Generate_PWM:	
 10112                           
 10113                           ;melody.c: 22: void Generate_PWM(unsigned long int freq);melody.c: 23: {;melody.c: 24:  
      +                             g_pwm_freq=8000000/(4*8*2*freq);
 10114                           
 10115                           ;incstack = 0
 10116 ;; hardware stack exceeded
 10117                           ; Regs used in _Generate_PWM: [wreg+status,2+status,0+pclath+cstack]
 10118  1A19  0834               	movf	Generate_PWM@freq,w
 10119  1A1A  00B8               	movwf	??_Generate_PWM
 10120  1A1B  0835               	movf	Generate_PWM@freq+1,w
 10121  1A1C  00B9               	movwf	??_Generate_PWM+1
 10122  1A1D  0836               	movf	Generate_PWM@freq+2,w
 10123  1A1E  00BA               	movwf	??_Generate_PWM+2
 10124  1A1F  0837               	movf	Generate_PWM@freq+3,w
 10125  1A20  00BB               	movwf	??_Generate_PWM+3
 10126  1A21  3006               	movlw	6
 10127  1A22                     u6455:	
 10128  1A22  1003               	clrc
 10129  1A23  0DB8               	rlf	??_Generate_PWM,f
 10130  1A24  0DB9               	rlf	??_Generate_PWM+1,f
 10131  1A25  0DBA               	rlf	??_Generate_PWM+2,f
 10132  1A26  0DBB               	rlf	??_Generate_PWM+3,f
 10133  1A27  3EFF               	addlw	-1
 10134  1A28  1D03               	skipz
 10135  1A29  2A22               	goto	u6455
 10136  1A2A  083B               	movf	??_Generate_PWM+3,w
 10137  1A2B  00A9               	movwf	___lldiv@divisor+3
 10138  1A2C  083A               	movf	??_Generate_PWM+2,w
 10139  1A2D  00A8               	movwf	___lldiv@divisor+2
 10140  1A2E  0839               	movf	??_Generate_PWM+1,w
 10141  1A2F  00A7               	movwf	___lldiv@divisor+1
 10142  1A30  0838               	movf	??_Generate_PWM,w
 10143  1A31  00A6               	movwf	___lldiv@divisor
 10144  1A32  3000               	movlw	0
 10145  1A33  00AD               	movwf	___lldiv@dividend+3
 10146  1A34  307A               	movlw	122
 10147  1A35  00AC               	movwf	___lldiv@dividend+2
 10148  1A36  3012               	movlw	18
 10149  1A37  00AB               	movwf	___lldiv@dividend+1
 10150  1A38  3000               	movlw	0
 10151  1A39  00AA               	movwf	___lldiv@dividend
 10152  1A3A  160A  158A  26DC   	fcall	___lldiv
 10153  1A3D  0827               	movf	?___lldiv+1,w
 10154  1A3E  1683               	bsf	3,5	;RP0=1, select bank1
 10155  1A3F  00A3               	movwf	(_g_pwm_freq+1)^(0+128)	;volatile
 10156  1A40  1283               	bcf	3,5	;RP0=0, select bank0
 10157  1A41  0826               	movf	?___lldiv,w
 10158  1A42  1683               	bsf	3,5	;RP0=1, select bank1
 10159  1A43  00A2               	movwf	_g_pwm_freq^(0+128)	;volatile
 10160  1A44  0008               	return
 10161  1A45                     __end_of_Generate_PWM:	
 10162                           
 10163                           	psect	text41
 10164  1EDC                     __ptext41:	
 10165 ;; *************** function ___lldiv *****************
 10166 ;; Defined at:
 10167 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/__lldiv.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  divisor         4    6[BANK0 ] unsigned long 
 10170 ;;  dividend        4   10[BANK0 ] unsigned long 
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;  quotient        4   15[BANK0 ] unsigned long 
 10173 ;;  counter         1   19[BANK0 ] unsigned char 
 10174 ;; Return value:  Size  Location     Type
 10175 ;;                  4    6[BANK0 ] unsigned long 
 10176 ;; Registers used:
 10177 ;;		wreg, status,2, status,0
 10178 ;; Tracked objects:
 10179 ;;		On entry : 300/0
 10180 ;;		On exit  : 300/0
 10181 ;;		Unchanged: 0/0
 10182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10183 ;;      Params:         0       8       0       0       0
 10184 ;;      Locals:         0       5       0       0       0
 10185 ;;      Temps:          0       1       0       0       0
 10186 ;;      Totals:         0      14       0       0       0
 10187 ;;Total ram usage:       14 bytes
 10188 ;; Hardware stack levels used:    1
 10189 ;; Hardware stack levels required when called:    4
 10190 ;; This function calls:
 10191 ;;		Nothing
 10192 ;; This function is called by:
 10193 ;;		_Generate_PWM
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           
 10198                           ;psect for function ___lldiv
 10199  1EDC                     ___lldiv:	
 10200                           
 10201                           ;incstack = 0
 10202 ;; hardware stack exceeded
 10203                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10204  1EDC  3000               	movlw	0
 10205  1EDD  00B2               	movwf	___lldiv@quotient+3
 10206  1EDE  3000               	movlw	0
 10207  1EDF  00B1               	movwf	___lldiv@quotient+2
 10208  1EE0  3000               	movlw	0
 10209  1EE1  00B0               	movwf	___lldiv@quotient+1
 10210  1EE2  3000               	movlw	0
 10211  1EE3  00AF               	movwf	___lldiv@quotient
 10212  1EE4  0829               	movf	___lldiv@divisor+3,w
 10213  1EE5  0428               	iorwf	___lldiv@divisor+2,w
 10214  1EE6  0427               	iorwf	___lldiv@divisor+1,w
 10215  1EE7  0426               	iorwf	___lldiv@divisor,w
 10216  1EE8  1903               	skipnz
 10217  1EE9  2F31               	goto	l6530
 10218  1EEA  01B3               	clrf	___lldiv@counter
 10219  1EEB  0AB3               	incf	___lldiv@counter,f
 10220  1EEC                     l6516:	
 10221  1EEC  1BA9               	btfsc	___lldiv@divisor+3,7
 10222  1EED  2EFC               	goto	l6518
 10223  1EEE  3001               	movlw	1
 10224  1EEF  00AE               	movwf	??___lldiv
 10225  1EF0                     u6125:	
 10226  1EF0  1003               	clrc
 10227  1EF1  0DA6               	rlf	___lldiv@divisor,f
 10228  1EF2  0DA7               	rlf	___lldiv@divisor+1,f
 10229  1EF3  0DA8               	rlf	___lldiv@divisor+2,f
 10230  1EF4  0DA9               	rlf	___lldiv@divisor+3,f
 10231  1EF5  0BAE               	decfsz	??___lldiv,f
 10232  1EF6  2EF0               	goto	u6125
 10233  1EF7  3001               	movlw	1
 10234  1EF8  00AE               	movwf	??___lldiv
 10235  1EF9  082E               	movf	??___lldiv,w
 10236  1EFA  07B3               	addwf	___lldiv@counter,f
 10237  1EFB  2EEC               	goto	l6516
 10238  1EFC                     l6518:	
 10239  1EFC  3001               	movlw	1
 10240  1EFD  00AE               	movwf	??___lldiv
 10241  1EFE                     u6145:	
 10242  1EFE  1003               	clrc
 10243  1EFF  0DAF               	rlf	___lldiv@quotient,f
 10244  1F00  0DB0               	rlf	___lldiv@quotient+1,f
 10245  1F01  0DB1               	rlf	___lldiv@quotient+2,f
 10246  1F02  0DB2               	rlf	___lldiv@quotient+3,f
 10247  1F03  0BAE               	decfsz	??___lldiv,f
 10248  1F04  2EFE               	goto	u6145
 10249  1F05  0829               	movf	___lldiv@divisor+3,w
 10250  1F06  022D               	subwf	___lldiv@dividend+3,w
 10251  1F07  1D03               	skipz
 10252  1F08  2F13               	goto	u6155
 10253  1F09  0828               	movf	___lldiv@divisor+2,w
 10254  1F0A  022C               	subwf	___lldiv@dividend+2,w
 10255  1F0B  1D03               	skipz
 10256  1F0C  2F13               	goto	u6155
 10257  1F0D  0827               	movf	___lldiv@divisor+1,w
 10258  1F0E  022B               	subwf	___lldiv@dividend+1,w
 10259  1F0F  1D03               	skipz
 10260  1F10  2F13               	goto	u6155
 10261  1F11  0826               	movf	___lldiv@divisor,w
 10262  1F12  022A               	subwf	___lldiv@dividend,w
 10263  1F13                     u6155:	
 10264  1F13  1C03               	skipc
 10265  1F14  2F24               	goto	l6526
 10266  1F15  0826               	movf	___lldiv@divisor,w
 10267  1F16  02AA               	subwf	___lldiv@dividend,f
 10268  1F17  0827               	movf	___lldiv@divisor+1,w
 10269  1F18  1C03               	skipc
 10270  1F19  0F27               	incfsz	___lldiv@divisor+1,w
 10271  1F1A  02AB               	subwf	___lldiv@dividend+1,f
 10272  1F1B  0828               	movf	___lldiv@divisor+2,w
 10273  1F1C  1C03               	skipc
 10274  1F1D  0F28               	incfsz	___lldiv@divisor+2,w
 10275  1F1E  02AC               	subwf	___lldiv@dividend+2,f
 10276  1F1F  0829               	movf	___lldiv@divisor+3,w
 10277  1F20  1C03               	skipc
 10278  1F21  0F29               	incfsz	___lldiv@divisor+3,w
 10279  1F22  02AD               	subwf	___lldiv@dividend+3,f
 10280  1F23  142F               	bsf	___lldiv@quotient,0
 10281  1F24                     l6526:	
 10282  1F24  3001               	movlw	1
 10283  1F25                     u6165:	
 10284  1F25  1003               	clrc
 10285  1F26  0CA9               	rrf	___lldiv@divisor+3,f
 10286  1F27  0CA8               	rrf	___lldiv@divisor+2,f
 10287  1F28  0CA7               	rrf	___lldiv@divisor+1,f
 10288  1F29  0CA6               	rrf	___lldiv@divisor,f
 10289  1F2A  3EFF               	addlw	-1
 10290  1F2B  1D03               	skipz
 10291  1F2C  2F25               	goto	u6165
 10292  1F2D  3001               	movlw	1
 10293  1F2E  02B3               	subwf	___lldiv@counter,f
 10294  1F2F  1D03               	btfss	3,2
 10295  1F30  2EFC               	goto	l6518
 10296  1F31                     l6530:	
 10297  1F31  0832               	movf	___lldiv@quotient+3,w
 10298  1F32  00A9               	movwf	?___lldiv+3
 10299  1F33  0831               	movf	___lldiv@quotient+2,w
 10300  1F34  00A8               	movwf	?___lldiv+2
 10301  1F35  0830               	movf	___lldiv@quotient+1,w
 10302  1F36  00A7               	movwf	?___lldiv+1
 10303  1F37  082F               	movf	___lldiv@quotient,w
 10304  1F38  00A6               	movwf	?___lldiv
 10305  1F39  0008               	return
 10306  1F3A                     __end_of___lldiv:	
 10307                           
 10308                           	psect	text42
 10309  11D9                     __ptext42:	
 10310 ;; *************** function _Display7SegmentText *****************
 10311 ;; Defined at:
 10312 ;;		line 96 in file "display-7-segment.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;  text            1    wreg     PTR unsigned char 
 10315 ;;		 -> g_display_text(4), 
 10316 ;;  decimal_poin    1   17[BANK0 ] unsigned char 
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;  text            1   19[BANK0 ] PTR unsigned char 
 10319 ;;		 -> g_display_text(4), 
 10320 ;; Return value:  Size  Location     Type
 10321 ;;                  1    wreg      void 
 10322 ;; Registers used:
 10323 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10324 ;; Tracked objects:
 10325 ;;		On entry : 300/0
 10326 ;;		On exit  : 300/0
 10327 ;;		Unchanged: 0/0
 10328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10329 ;;      Params:         0       1       0       0       0
 10330 ;;      Locals:         0       1       0       0       0
 10331 ;;      Temps:          0       1       0       0       0
 10332 ;;      Totals:         0       3       0       0       0
 10333 ;;Total ram usage:        3 bytes
 10334 ;; Hardware stack levels used:    1
 10335 ;; Hardware stack levels required when called:    6
 10336 ;; This function calls:
 10337 ;;		_OneDigitHandler
 10338 ;; This function is called by:
 10339 ;;		_PlayRing
 10340 ;; This function uses a non-reentrant model
 10341 ;;
 10342                           
 10343                           
 10344                           ;psect for function _Display7SegmentText
 10345  11D9                     _Display7SegmentText:	
 10346                           
 10347                           ;incstack = 0
 10348 ;; hardware stack exceeded
 10349                           ; Regs used in _Display7SegmentText: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10350                           ;Display7SegmentText@text stored from wreg
 10351  11D9  00B3               	movwf	Display7SegmentText@text
 10352                           
 10353                           ;display-7-segment.c: 96: void Display7SegmentText(unsigned char *text, unsigned char de
      +                          cimal_point);display-7-segment.c: 97: {;display-7-segment.c: 98:     static unsigned cha
      +                          r enable_digit=1;;display-7-segment.c: 100:     if(enable_digit<=1)
 10354  11DA  3002               	movlw	2
 10355  11DB  025E               	subwf	Display7SegmentText@enable_digit,w
 10356  11DC  1803               	skipnc
 10357  11DD  29F4               	goto	l6650
 10358                           
 10359                           ;display-7-segment.c: 101:     {;display-7-segment.c: 102:         if(decimal_point & 0b
      +                          1000)
 10360  11DE  1DB1               	btfss	Display7SegmentText@decimal_point,3
 10361  11DF  29E5               	goto	l6646
 10362                           
 10363                           ;display-7-segment.c: 103:         {;display-7-segment.c: 104:             OneDigitHandl
      +                          er(*text,1,1);
 10364  11E0  01AC               	clrf	OneDigitHandler@digit_number
 10365  11E1  0AAC               	incf	OneDigitHandler@digit_number,f
 10366  11E2  01AD               	clrf	OneDigitHandler@decimal_point
 10367  11E3  0AAD               	incf	OneDigitHandler@decimal_point,f
 10368  11E4  29E8               	goto	L11
 10369  11E5                     l6646:	
 10370                           ;display-7-segment.c: 105:         }else
 10371                           
 10372                           
 10373                           ;display-7-segment.c: 106:         {;display-7-segment.c: 107:             OneDigitHandl
      +                          er(*text,1,0);
 10374  11E5  01AC               	clrf	OneDigitHandler@digit_number
 10375  11E6  0AAC               	incf	OneDigitHandler@digit_number,f
 10376  11E7  01AD               	clrf	OneDigitHandler@decimal_point
 10377  11E8                     L11:	
 10378  11E8  0833               	movf	Display7SegmentText@text,w
 10379  11E9  0084               	movwf	4
 10380  11EA  1383               	bcf	3,7	;select IRP bank0
 10381  11EB  0800               	movf	0,w
 10382  11EC  160A  158A  2305   	fcall	_OneDigitHandler
 10383                           
 10384                           ;display-7-segment.c: 109:         enable_digit=2;
 10385  11EF  3002               	movlw	2
 10386  11F0  00B2               	movwf	??_Display7SegmentText
 10387  11F1  0832               	movf	??_Display7SegmentText,w
 10388  11F2  00DE               	movwf	Display7SegmentText@enable_digit
 10389                           
 10390                           ;display-7-segment.c: 111:     }else if(enable_digit==2)
 10391  11F3  0008               	return
 10392  11F4                     l6650:	
 10393  11F4  3002               	movlw	2
 10394  11F5  065E               	xorwf	Display7SegmentText@enable_digit,w
 10395  11F6  1D03               	btfss	3,2
 10396  11F7  2A12               	goto	l6660
 10397                           
 10398                           ;display-7-segment.c: 112:     {;display-7-segment.c: 113:         if(decimal_point & 0b
      +                          0100)
 10399  11F8  1D31               	btfss	Display7SegmentText@decimal_point,2
 10400  11F9  2A01               	goto	l6656
 10401                           
 10402                           ;display-7-segment.c: 114:         {;display-7-segment.c: 115:             OneDigitHandl
      +                          er(*(text+1),2,1);
 10403  11FA  3002               	movlw	2
 10404  11FB  00B2               	movwf	??_Display7SegmentText
 10405  11FC  0832               	movf	??_Display7SegmentText,w
 10406  11FD  00AC               	movwf	OneDigitHandler@digit_number
 10407  11FE  01AD               	clrf	OneDigitHandler@decimal_point
 10408  11FF  0AAD               	incf	OneDigitHandler@decimal_point,f
 10409  1200  2A06               	goto	L12
 10410  1201                     l6656:	
 10411                           ;display-7-segment.c: 116:         }else
 10412                           
 10413                           
 10414                           ;display-7-segment.c: 117:         {;display-7-segment.c: 118:             OneDigitHandl
      +                          er(*(text+1),2,0);
 10415  1201  3002               	movlw	2
 10416  1202  00B2               	movwf	??_Display7SegmentText
 10417  1203  0832               	movf	??_Display7SegmentText,w
 10418  1204  00AC               	movwf	OneDigitHandler@digit_number
 10419  1205  01AD               	clrf	OneDigitHandler@decimal_point
 10420  1206                     L12:	
 10421  1206  0A33               	incf	Display7SegmentText@text,w
 10422  1207  0084               	movwf	4
 10423  1208  1383               	bcf	3,7	;select IRP bank0
 10424  1209  0800               	movf	0,w
 10425  120A  160A  158A  2305   	fcall	_OneDigitHandler
 10426                           
 10427                           ;display-7-segment.c: 120:         enable_digit=3;
 10428  120D  3003               	movlw	3
 10429  120E  00B2               	movwf	??_Display7SegmentText
 10430  120F  0832               	movf	??_Display7SegmentText,w
 10431  1210  00DE               	movwf	Display7SegmentText@enable_digit
 10432                           
 10433                           ;display-7-segment.c: 122:     }else if(enable_digit==3)
 10434  1211  0008               	return
 10435  1212                     l6660:	
 10436  1212  3003               	movlw	3
 10437  1213  065E               	xorwf	Display7SegmentText@enable_digit,w
 10438  1214  1D03               	btfss	3,2
 10439  1215  2A31               	goto	l6670
 10440                           
 10441                           ;display-7-segment.c: 123:     {;display-7-segment.c: 124:         if(decimal_point & 0b
      +                          0010)
 10442  1216  1CB1               	btfss	Display7SegmentText@decimal_point,1
 10443  1217  2A1F               	goto	l6666
 10444                           
 10445                           ;display-7-segment.c: 125:         {;display-7-segment.c: 126:            OneDigitHandle
      +                          r(*(text+2),3,1);
 10446  1218  3003               	movlw	3
 10447  1219  00B2               	movwf	??_Display7SegmentText
 10448  121A  0832               	movf	??_Display7SegmentText,w
 10449  121B  00AC               	movwf	OneDigitHandler@digit_number
 10450  121C  01AD               	clrf	OneDigitHandler@decimal_point
 10451  121D  0AAD               	incf	OneDigitHandler@decimal_point,f
 10452  121E  2A24               	goto	L13
 10453  121F                     l6666:	
 10454                           ;display-7-segment.c: 127:         }else
 10455                           
 10456                           
 10457                           ;display-7-segment.c: 128:         {;display-7-segment.c: 129:            OneDigitHandle
      +                          r(*(text+2),3,0);
 10458  121F  3003               	movlw	3
 10459  1220  00B2               	movwf	??_Display7SegmentText
 10460  1221  0832               	movf	??_Display7SegmentText,w
 10461  1222  00AC               	movwf	OneDigitHandler@digit_number
 10462  1223  01AD               	clrf	OneDigitHandler@decimal_point
 10463  1224                     L13:	
 10464  1224  0833               	movf	Display7SegmentText@text,w
 10465  1225  3E02               	addlw	2
 10466  1226  0084               	movwf	4
 10467  1227  1383               	bcf	3,7	;select IRP bank0
 10468  1228  0800               	movf	0,w
 10469  1229  160A  158A  2305   	fcall	_OneDigitHandler
 10470                           
 10471                           ;display-7-segment.c: 131:         enable_digit=4;
 10472  122C  3004               	movlw	4
 10473  122D  00B2               	movwf	??_Display7SegmentText
 10474  122E  0832               	movf	??_Display7SegmentText,w
 10475  122F  00DE               	movwf	Display7SegmentText@enable_digit
 10476                           
 10477                           ;display-7-segment.c: 133:     }else if(enable_digit>=4)
 10478  1230  0008               	return
 10479  1231                     l6670:	
 10480  1231  3004               	movlw	4
 10481  1232  025E               	subwf	Display7SegmentText@enable_digit,w
 10482  1233  1C03               	skipc
 10483  1234  0008               	return
 10484                           
 10485                           ;display-7-segment.c: 134:     {;display-7-segment.c: 135:         if(decimal_point & 0b
      +                          0001)
 10486  1235  1C31               	btfss	Display7SegmentText@decimal_point,0
 10487  1236  2A3E               	goto	l6676
 10488                           
 10489                           ;display-7-segment.c: 136:         {;display-7-segment.c: 137:             OneDigitHandl
      +                          er(*(text+3),4,1);
 10490  1237  3004               	movlw	4
 10491  1238  00B2               	movwf	??_Display7SegmentText
 10492  1239  0832               	movf	??_Display7SegmentText,w
 10493  123A  00AC               	movwf	OneDigitHandler@digit_number
 10494  123B  01AD               	clrf	OneDigitHandler@decimal_point
 10495  123C  0AAD               	incf	OneDigitHandler@decimal_point,f
 10496  123D  2A43               	goto	L14
 10497  123E                     l6676:	
 10498                           ;display-7-segment.c: 138:         }else
 10499                           
 10500                           
 10501                           ;display-7-segment.c: 139:         {;display-7-segment.c: 140:             OneDigitHandl
      +                          er(*(text+3),4,0);
 10502  123E  3004               	movlw	4
 10503  123F  00B2               	movwf	??_Display7SegmentText
 10504  1240  0832               	movf	??_Display7SegmentText,w
 10505  1241  00AC               	movwf	OneDigitHandler@digit_number
 10506  1242  01AD               	clrf	OneDigitHandler@decimal_point
 10507  1243                     L14:	
 10508  1243  0833               	movf	Display7SegmentText@text,w
 10509  1244  3E03               	addlw	3
 10510  1245  0084               	movwf	4
 10511  1246  1383               	bcf	3,7	;select IRP bank0
 10512  1247  0800               	movf	0,w
 10513  1248  160A  158A  2305   	fcall	_OneDigitHandler
 10514                           
 10515                           ;display-7-segment.c: 142:         enable_digit=1;
 10516  124B  01DE               	clrf	Display7SegmentText@enable_digit
 10517  124C  0ADE               	incf	Display7SegmentText@enable_digit,f
 10518  124D  0008               	return
 10519  124E                     __end_of_Display7SegmentText:	
 10520                           
 10521                           	psect	text43
 10522  1B05                     __ptext43:	
 10523 ;; *************** function _OneDigitHandler *****************
 10524 ;; Defined at:
 10525 ;;		line 147 in file "display-7-segment.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;  sign            1    wreg     unsigned char 
 10528 ;;  digit_number    1   12[BANK0 ] unsigned char 
 10529 ;;  decimal_poin    1   13[BANK0 ] unsigned char 
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  sign            1   16[BANK0 ] unsigned char 
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  1    wreg      void 
 10534 ;; Registers used:
 10535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10536 ;; Tracked objects:
 10537 ;;		On entry : B00/0
 10538 ;;		On exit  : 300/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10541 ;;      Params:         0       2       0       0       0
 10542 ;;      Locals:         0       1       0       0       0
 10543 ;;      Temps:          0       2       0       0       0
 10544 ;;      Totals:         0       5       0       0       0
 10545 ;;Total ram usage:        5 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:    5
 10548 ;; This function calls:
 10549 ;;		_Disable_All_Digits
 10550 ;;		_SetAnodeOutputs
 10551 ;;		_SignAnodeData
 10552 ;; This function is called by:
 10553 ;;		_Display7SegmentText
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function _OneDigitHandler
 10559  1B05                     _OneDigitHandler:	
 10560                           
 10561                           ;incstack = 0
 10562 ;; hardware stack exceeded
 10563                           ; Regs used in _OneDigitHandler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10564                           ;OneDigitHandler@sign stored from wreg
 10565  1B05  00B0               	movwf	OneDigitHandler@sign
 10566                           
 10567                           ;display-7-segment.c: 147: void OneDigitHandler(unsigned char sign, unsigned char digit_
      +                          number, unsigned char decimal_point);display-7-segment.c: 148: {;display-7-segment.c: 15
      +                          0:     Disable_All_Digits();
 10568  1B06  160A  158A  2067  160A  158A  	fcall	_Disable_All_Digits
 10569                           
 10570                           ;display-7-segment.c: 151:     SetAnodeOutputs(SignAnodeData(sign),decimal_point);
 10571  1B0B  082D               	movf	OneDigitHandler@decimal_point,w
 10572  1B0C  00AE               	movwf	??_OneDigitHandler
 10573  1B0D  082E               	movf	??_OneDigitHandler,w
 10574  1B0E  00A9               	movwf	SetAnodeOutputs@decimal_point
 10575  1B0F  0830               	movf	OneDigitHandler@sign,w
 10576  1B10  160A  118A  2731  160A  158A  	fcall	_SignAnodeData
 10577  1B15  160A  158A  279D  160A  158A  	fcall	_SetAnodeOutputs
 10578                           
 10579                           ;display-7-segment.c: 152:     switch (digit_number)
 10580  1B1A  2B23               	goto	l6446
 10581  1B1B                     l492:	
 10582                           ;display-7-segment.c: 153:     {;display-7-segment.c: 154:         case 1 : PORTBbits.RB
      +                          7=0; break;
 10583                           
 10584  1B1B  1386               	bcf	6,7	;volatile
 10585  1B1C  0008               	return
 10586  1B1D                     l494:	
 10587                           ;display-7-segment.c: 155:         case 2 : PORTBbits.RB6=0; break;
 10588                           
 10589  1B1D  1306               	bcf	6,6	;volatile
 10590  1B1E  0008               	return
 10591  1B1F                     l495:	
 10592                           ;display-7-segment.c: 156:         case 3 : PORTBbits.RB5=0; break;
 10593                           
 10594  1B1F  1286               	bcf	6,5	;volatile
 10595  1B20  0008               	return
 10596  1B21                     l496:	
 10597                           ;display-7-segment.c: 157:         case 4 : PORTBbits.RB4=0; break;
 10598                           
 10599  1B21  1206               	bcf	6,4	;volatile
 10600  1B22  0008               	return
 10601  1B23                     l6446:	
 10602  1B23  082C               	movf	OneDigitHandler@digit_number,w
 10603  1B24  00AE               	movwf	??_OneDigitHandler
 10604  1B25  01AF               	clrf	??_OneDigitHandler+1
 10605                           
 10606                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10607                           ; Switch size 1, requested type "simple"
 10608                           ; Number of cases is 1, Range of values is 0 to 0
 10609                           ; switch strategies available:
 10610                           ; Name         Instructions Cycles
 10611                           ; simple_byte            4     3 (average)
 10612                           ; direct_byte           11     8 (fixed)
 10613                           ; jumptable            260     6 (fixed)
 10614                           ;	Chosen strategy is simple_byte
 10615  1B26  082F               	movf	??_OneDigitHandler+1,w
 10616  1B27  3A00               	xorlw	0	; case 0
 10617  1B28  1903               	skipnz
 10618  1B29  2B2B               	goto	l8494
 10619  1B2A  2B39               	goto	l497
 10620  1B2B                     l8494:	
 10621                           
 10622                           ; Switch size 1, requested type "simple"
 10623                           ; Number of cases is 4, Range of values is 1 to 4
 10624                           ; switch strategies available:
 10625                           ; Name         Instructions Cycles
 10626                           ; simple_byte           13     7 (average)
 10627                           ; direct_byte           23    11 (fixed)
 10628                           ; jumptable            263     9 (fixed)
 10629                           ;	Chosen strategy is simple_byte
 10630  1B2B  082E               	movf	??_OneDigitHandler,w
 10631  1B2C  3A01               	xorlw	1	; case 1
 10632  1B2D  1903               	skipnz
 10633  1B2E  2B1B               	goto	l492
 10634  1B2F  3A03               	xorlw	3	; case 2
 10635  1B30  1903               	skipnz
 10636  1B31  2B1D               	goto	l494
 10637  1B32  3A01               	xorlw	1	; case 3
 10638  1B33  1903               	skipnz
 10639  1B34  2B1F               	goto	l495
 10640  1B35  3A07               	xorlw	7	; case 4
 10641  1B36  1903               	skipnz
 10642  1B37  2B21               	goto	l496
 10643  1B38  2B39               	goto	l497
 10644  1B39                     l497:	
 10645  1B39  0008               	return
 10646  1B3A                     __end_of_OneDigitHandler:	
 10647                           
 10648                           	psect	text44
 10649  1731                     __ptext44:	
 10650 ;; *************** function _SignAnodeData *****************
 10651 ;; Defined at:
 10652 ;;		line 27 in file "display-7-segment.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;  sign            1    wreg     unsigned char 
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;  sign            1    8[BANK0 ] unsigned char 
 10657 ;; Return value:  Size  Location     Type
 10658 ;;                  1    wreg      unsigned char 
 10659 ;; Registers used:
 10660 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10661 ;; Tracked objects:
 10662 ;;		On entry : 300/0
 10663 ;;		On exit  : 300/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10666 ;;      Params:         0       0       0       0       0
 10667 ;;      Locals:         0       1       0       0       0
 10668 ;;      Temps:          0       2       0       0       0
 10669 ;;      Totals:         0       3       0       0       0
 10670 ;;Total ram usage:        3 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; Hardware stack levels required when called:    4
 10673 ;; This function calls:
 10674 ;;		Nothing
 10675 ;; This function is called by:
 10676 ;;		_OneDigitHandler
 10677 ;; This function uses a non-reentrant model
 10678 ;;
 10679                           
 10680                           
 10681                           ;psect for function _SignAnodeData
 10682  1731                     _SignAnodeData:	
 10683                           
 10684                           ;incstack = 0
 10685 ;; hardware stack exceeded
 10686                           ; Regs used in _SignAnodeData: [wreg-fsr0h+status,2+status,0]
 10687                           ;SignAnodeData@sign stored from wreg
 10688  1731  00A8               	movwf	SignAnodeData@sign
 10689                           
 10690                           ;display-7-segment.c: 27: unsigned char SignAnodeData(unsigned char sign);display-7-segm
      +                          ent.c: 28: {;display-7-segment.c: 29:     switch (sign)
 10691  1732  2F6B               	goto	l6384
 10692  1733                     l6198:	
 10693  1733  30FC               	movlw	252
 10694  1734  0008               	return
 10695  1735                     l6202:	
 10696  1735  3060               	movlw	96
 10697  1736  0008               	return
 10698  1737                     l6206:	
 10699  1737  30DA               	movlw	218
 10700  1738  0008               	return
 10701  1739                     l6210:	
 10702  1739  30F2               	movlw	242
 10703  173A  0008               	return
 10704  173B                     l6214:	
 10705  173B  3066               	movlw	102
 10706  173C  0008               	return
 10707  173D                     l6218:	
 10708  173D  30B6               	movlw	182
 10709  173E  0008               	return
 10710  173F                     l6222:	
 10711  173F  30BE               	movlw	190
 10712  1740  0008               	return
 10713  1741                     l6226:	
 10714  1741  30E4               	movlw	228
 10715  1742  0008               	return
 10716  1743                     l6230:	
 10717  1743  30FE               	movlw	254
 10718  1744  0008               	return
 10719  1745                     l6234:	
 10720  1745  30F6               	movlw	246
 10721  1746  0008               	return
 10722  1747                     l6278:	
 10723  1747  30EE               	movlw	238
 10724  1748  0008               	return
 10725  1749                     l6282:	
 10726  1749  303E               	movlw	62
 10727  174A  0008               	return
 10728  174B                     l6286:	
 10729  174B  309C               	movlw	156
 10730  174C  0008               	return
 10731  174D                     l6290:	
 10732  174D  307A               	movlw	122
 10733  174E  0008               	return
 10734  174F                     l6294:	
 10735  174F  309E               	movlw	158
 10736  1750  0008               	return
 10737  1751                     l6298:	
 10738  1751  308E               	movlw	142
 10739  1752  0008               	return
 10740  1753                     l6302:	
 10741  1753  30BC               	movlw	188
 10742  1754  0008               	return
 10743  1755                     l6306:	
 10744  1755  306E               	movlw	110
 10745  1756  0008               	return
 10746  1757                     l6314:	
 10747  1757  3070               	movlw	112
 10748  1758  0008               	return
 10749  1759                     l6322:	
 10750  1759  301C               	movlw	28
 10751  175A  0008               	return
 10752  175B                     l6326:	
 10753  175B  30EC               	movlw	236
 10754  175C  0008               	return
 10755  175D                     l6330:	
 10756  175D  302A               	movlw	42
 10757  175E  0008               	return
 10758  175F                     l6338:	
 10759  175F  3073               	movlw	115
 10760  1760  0008               	return
 10761  1761                     l6342:	
 10762  1761  300A               	movlw	10
 10763  1762  0008               	return
 10764  1763                     l6350:	
 10765  1763  301E               	movlw	30
 10766  1764  0008               	return
 10767  1765                     l6354:	
 10768  1765  307C               	movlw	124
 10769  1766  0008               	return
 10770  1767                     l6370:	
 10771  1767  3076               	movlw	118
 10772  1768  0008               	return
 10773  1769                     l6378:	
 10774  1769  3000               	movlw	0
 10775  176A  0008               	return
 10776  176B                     l6384:	
 10777  176B  0828               	movf	SignAnodeData@sign,w
 10778  176C  00A6               	movwf	??_SignAnodeData
 10779  176D  01A7               	clrf	??_SignAnodeData+1
 10780                           
 10781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10782                           ; Switch size 1, requested type "simple"
 10783                           ; Number of cases is 1, Range of values is 0 to 0
 10784                           ; switch strategies available:
 10785                           ; Name         Instructions Cycles
 10786                           ; simple_byte            4     3 (average)
 10787                           ; direct_byte           11     8 (fixed)
 10788                           ; jumptable            260     6 (fixed)
 10789                           ;	Chosen strategy is simple_byte
 10790  176E  0827               	movf	??_SignAnodeData+1,w
 10791  176F  3A00               	xorlw	0	; case 0
 10792  1770  1903               	skipnz
 10793  1771  2F73               	goto	l8496
 10794  1772  2F69               	goto	l6378
 10795  1773                     l8496:	
 10796                           
 10797                           ; Switch size 1, requested type "simple"
 10798                           ; Number of cases is 46, Range of values is 0 to 122
 10799                           ; switch strategies available:
 10800                           ; Name         Instructions Cycles
 10801                           ; simple_byte          139    70 (average)
 10802                           ; jumptable            260     6 (fixed)
 10803                           ;	Chosen strategy is simple_byte
 10804  1773  0826               	movf	??_SignAnodeData,w
 10805  1774  3A00               	xorlw	0	; case 0
 10806  1775  1903               	skipnz
 10807  1776  2F33               	goto	l6198
 10808  1777  3A01               	xorlw	1	; case 1
 10809  1778  1903               	skipnz
 10810  1779  2F35               	goto	l6202
 10811  177A  3A03               	xorlw	3	; case 2
 10812  177B  1903               	skipnz
 10813  177C  2F37               	goto	l6206
 10814  177D  3A01               	xorlw	1	; case 3
 10815  177E  1903               	skipnz
 10816  177F  2F39               	goto	l6210
 10817  1780  3A07               	xorlw	7	; case 4
 10818  1781  1903               	skipnz
 10819  1782  2F3B               	goto	l6214
 10820  1783  3A01               	xorlw	1	; case 5
 10821  1784  1903               	skipnz
 10822  1785  2F3D               	goto	l6218
 10823  1786  3A03               	xorlw	3	; case 6
 10824  1787  1903               	skipnz
 10825  1788  2F3F               	goto	l6222
 10826  1789  3A01               	xorlw	1	; case 7
 10827  178A  1903               	skipnz
 10828  178B  2F41               	goto	l6226
 10829  178C  3A0F               	xorlw	15	; case 8
 10830  178D  1903               	skipnz
 10831  178E  2F43               	goto	l6230
 10832  178F  3A01               	xorlw	1	; case 9
 10833  1790  1903               	skipnz
 10834  1791  2F45               	goto	l6234
 10835  1792  3A23               	xorlw	35	; case 42
 10836  1793  1903               	skipnz
 10837  1794  2F69               	goto	l6378
 10838  1795  3A1A               	xorlw	26	; case 48
 10839  1796  1903               	skipnz
 10840  1797  2F33               	goto	l6198
 10841  1798  3A01               	xorlw	1	; case 49
 10842  1799  1903               	skipnz
 10843  179A  2F35               	goto	l6202
 10844  179B  3A03               	xorlw	3	; case 50
 10845  179C  1903               	skipnz
 10846  179D  2F37               	goto	l6206
 10847  179E  3A01               	xorlw	1	; case 51
 10848  179F  1903               	skipnz
 10849  17A0  2F39               	goto	l6210
 10850  17A1  3A07               	xorlw	7	; case 52
 10851  17A2  1903               	skipnz
 10852  17A3  2F3B               	goto	l6214
 10853  17A4  3A01               	xorlw	1	; case 53
 10854  17A5  1903               	skipnz
 10855  17A6  2F3D               	goto	l6218
 10856  17A7  3A03               	xorlw	3	; case 54
 10857  17A8  1903               	skipnz
 10858  17A9  2F3F               	goto	l6222
 10859  17AA  3A01               	xorlw	1	; case 55
 10860  17AB  1903               	skipnz
 10861  17AC  2F41               	goto	l6226
 10862  17AD  3A0F               	xorlw	15	; case 56
 10863  17AE  1903               	skipnz
 10864  17AF  2F43               	goto	l6230
 10865  17B0  3A01               	xorlw	1	; case 57
 10866  17B1  1903               	skipnz
 10867  17B2  2F45               	goto	l6234
 10868  17B3  3A58               	xorlw	88	; case 97
 10869  17B4  1903               	skipnz
 10870  17B5  2F47               	goto	l6278
 10871  17B6  3A03               	xorlw	3	; case 98
 10872  17B7  1903               	skipnz
 10873  17B8  2F49               	goto	l6282
 10874  17B9  3A01               	xorlw	1	; case 99
 10875  17BA  1903               	skipnz
 10876  17BB  2F4B               	goto	l6286
 10877  17BC  3A07               	xorlw	7	; case 100
 10878  17BD  1903               	skipnz
 10879  17BE  2F4D               	goto	l6290
 10880  17BF  3A01               	xorlw	1	; case 101
 10881  17C0  1903               	skipnz
 10882  17C1  2F4F               	goto	l6294
 10883  17C2  3A03               	xorlw	3	; case 102
 10884  17C3  1903               	skipnz
 10885  17C4  2F51               	goto	l6298
 10886  17C5  3A01               	xorlw	1	; case 103
 10887  17C6  1903               	skipnz
 10888  17C7  2F53               	goto	l6302
 10889  17C8  3A0F               	xorlw	15	; case 104
 10890  17C9  1903               	skipnz
 10891  17CA  2F55               	goto	l6306
 10892  17CB  3A01               	xorlw	1	; case 105
 10893  17CC  1903               	skipnz
 10894  17CD  2F35               	goto	l6202
 10895  17CE  3A03               	xorlw	3	; case 106
 10896  17CF  1903               	skipnz
 10897  17D0  2F57               	goto	l6314
 10898  17D1  3A01               	xorlw	1	; case 107
 10899  17D2  1903               	skipnz
 10900  17D3  2F55               	goto	l6306
 10901  17D4  3A07               	xorlw	7	; case 108
 10902  17D5  1903               	skipnz
 10903  17D6  2F59               	goto	l6322
 10904  17D7  3A01               	xorlw	1	; case 109
 10905  17D8  1903               	skipnz
 10906  17D9  2F5B               	goto	l6326
 10907  17DA  3A03               	xorlw	3	; case 110
 10908  17DB  1903               	skipnz
 10909  17DC  2F5D               	goto	l6330
 10910  17DD  3A01               	xorlw	1	; case 111
 10911  17DE  1903               	skipnz
 10912  17DF  2F33               	goto	l6198
 10913  17E0  3A1F               	xorlw	31	; case 112
 10914  17E1  1903               	skipnz
 10915  17E2  2F5F               	goto	l6338
 10916  17E3  3A02               	xorlw	2	; case 114
 10917  17E4  1903               	skipnz
 10918  17E5  2F61               	goto	l6342
 10919  17E6  3A01               	xorlw	1	; case 115
 10920  17E7  1903               	skipnz
 10921  17E8  2F3D               	goto	l6218
 10922  17E9  3A07               	xorlw	7	; case 116
 10923  17EA  1903               	skipnz
 10924  17EB  2F63               	goto	l6350
 10925  17EC  3A01               	xorlw	1	; case 117
 10926  17ED  1903               	skipnz
 10927  17EE  2F65               	goto	l6354
 10928  17EF  3A03               	xorlw	3	; case 118
 10929  17F0  1903               	skipnz
 10930  17F1  2F65               	goto	l6354
 10931  17F2  3A01               	xorlw	1	; case 119
 10932  17F3  1903               	skipnz
 10933  17F4  2F65               	goto	l6354
 10934  17F5  3A0F               	xorlw	15	; case 120
 10935  17F6  1903               	skipnz
 10936  17F7  2F55               	goto	l6306
 10937  17F8  3A01               	xorlw	1	; case 121
 10938  17F9  1903               	skipnz
 10939  17FA  2F67               	goto	l6370
 10940  17FB  3A03               	xorlw	3	; case 122
 10941  17FC  1903               	skipnz
 10942  17FD  2F37               	goto	l6206
 10943  17FE  2F69               	goto	l6378
 10944  17FF  0008               	return
 10945  1800                     __end_of_SignAnodeData:	
 10946                           
 10947                           	psect	text45
 10948  1F9D                     __ptext45:	
 10949 ;; *************** function _SetAnodeOutputs *****************
 10950 ;; Defined at:
 10951 ;;		line 161 in file "display-7-segment.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;  sign            1    wreg     unsigned char 
 10954 ;;  decimal_poin    1    9[BANK0 ] unsigned char 
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;  sign            1   11[BANK0 ] unsigned char 
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      void 
 10959 ;; Registers used:
 10960 ;;		wreg, status,2, status,0
 10961 ;; Tracked objects:
 10962 ;;		On entry : 300/0
 10963 ;;		On exit  : 300/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10966 ;;      Params:         0       1       0       0       0
 10967 ;;      Locals:         0       1       0       0       0
 10968 ;;      Temps:          0       1       0       0       0
 10969 ;;      Totals:         0       3       0       0       0
 10970 ;;Total ram usage:        3 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; Hardware stack levels required when called:    4
 10973 ;; This function calls:
 10974 ;;		Nothing
 10975 ;; This function is called by:
 10976 ;;		_OneDigitHandler
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           
 10981                           ;psect for function _SetAnodeOutputs
 10982  1F9D                     _SetAnodeOutputs:	
 10983                           
 10984                           ;incstack = 0
 10985 ;; hardware stack exceeded
 10986                           ; Regs used in _SetAnodeOutputs: [wreg+status,2+status,0]
 10987                           ;SetAnodeOutputs@sign stored from wreg
 10988  1F9D  00AB               	movwf	SetAnodeOutputs@sign
 10989                           
 10990                           ;display-7-segment.c: 161: void SetAnodeOutputs(unsigned char sign, unsigned char decima
      +                          l_point);display-7-segment.c: 162: {;display-7-segment.c: 164:     if(sign>>7 & 1)
 10991  1F9E  082B               	movf	SetAnodeOutputs@sign,w
 10992  1F9F  00AA               	movwf	??_SetAnodeOutputs
 10993  1FA0  3007               	movlw	7
 10994  1FA1                     u5815:	
 10995  1FA1  1003               	clrc
 10996  1FA2  0CAA               	rrf	??_SetAnodeOutputs,f
 10997  1FA3  3EFF               	addlw	-1
 10998  1FA4  1D03               	skipz
 10999  1FA5  2FA1               	goto	u5815
 11000  1FA6  1C2A               	btfss	??_SetAnodeOutputs,0
 11001  1FA7  2FAA               	goto	l500
 11002                           
 11003                           ;display-7-segment.c: 165:     {;display-7-segment.c: 166:         PORTAbits.RA6=1;
 11004  1FA8  1705               	bsf	5,6	;volatile
 11005                           
 11006                           ;display-7-segment.c: 167:     }else
 11007  1FA9  2FAB               	goto	l6400
 11008  1FAA                     l500:	
 11009                           
 11010                           ;display-7-segment.c: 168:     {;display-7-segment.c: 169:         PORTAbits.RA6=0;
 11011  1FAA  1305               	bcf	5,6	;volatile
 11012  1FAB                     l6400:	
 11013                           
 11014                           ;display-7-segment.c: 172:     if(sign>>6 & 1)
 11015  1FAB  082B               	movf	SetAnodeOutputs@sign,w
 11016  1FAC  00AA               	movwf	??_SetAnodeOutputs
 11017  1FAD  3006               	movlw	6
 11018  1FAE                     u5835:	
 11019  1FAE  1003               	clrc
 11020  1FAF  0CAA               	rrf	??_SetAnodeOutputs,f
 11021  1FB0  3EFF               	addlw	-1
 11022  1FB1  1D03               	skipz
 11023  1FB2  2FAE               	goto	u5835
 11024  1FB3  1C2A               	btfss	??_SetAnodeOutputs,0
 11025  1FB4  2FB7               	goto	l502
 11026                           
 11027                           ;display-7-segment.c: 173:     {;display-7-segment.c: 174:         PORTAbits.RA7=1;
 11028  1FB5  1785               	bsf	5,7	;volatile
 11029                           
 11030                           ;display-7-segment.c: 175:     }else
 11031  1FB6  2FB8               	goto	l6404
 11032  1FB7                     l502:	
 11033                           
 11034                           ;display-7-segment.c: 176:     {;display-7-segment.c: 177:         PORTAbits.RA7=0;
 11035  1FB7  1385               	bcf	5,7	;volatile
 11036  1FB8                     l6404:	
 11037                           
 11038                           ;display-7-segment.c: 180:     if(sign>>5 & 1)
 11039  1FB8  082B               	movf	SetAnodeOutputs@sign,w
 11040  1FB9  00AA               	movwf	??_SetAnodeOutputs
 11041  1FBA  3005               	movlw	5
 11042  1FBB                     u5855:	
 11043  1FBB  1003               	clrc
 11044  1FBC  0CAA               	rrf	??_SetAnodeOutputs,f
 11045  1FBD  3EFF               	addlw	-1
 11046  1FBE  1D03               	skipz
 11047  1FBF  2FBB               	goto	u5855
 11048  1FC0  1C2A               	btfss	??_SetAnodeOutputs,0
 11049  1FC1  2FC4               	goto	l504
 11050                           
 11051                           ;display-7-segment.c: 181:     {;display-7-segment.c: 182:         PORTAbits.RA5=1;
 11052  1FC2  1685               	bsf	5,5	;volatile
 11053                           
 11054                           ;display-7-segment.c: 183:     }else
 11055  1FC3  2FC5               	goto	l6408
 11056  1FC4                     l504:	
 11057                           
 11058                           ;display-7-segment.c: 184:     {;display-7-segment.c: 185:         PORTAbits.RA5=0;
 11059  1FC4  1285               	bcf	5,5	;volatile
 11060  1FC5                     l6408:	
 11061                           
 11062                           ;display-7-segment.c: 188:     if(sign>>4 & 1)
 11063  1FC5  082B               	movf	SetAnodeOutputs@sign,w
 11064  1FC6  00AA               	movwf	??_SetAnodeOutputs
 11065  1FC7  3004               	movlw	4
 11066  1FC8                     u5875:	
 11067  1FC8  1003               	clrc
 11068  1FC9  0CAA               	rrf	??_SetAnodeOutputs,f
 11069  1FCA  3EFF               	addlw	-1
 11070  1FCB  1D03               	skipz
 11071  1FCC  2FC8               	goto	u5875
 11072  1FCD  1C2A               	btfss	??_SetAnodeOutputs,0
 11073  1FCE  2FD1               	goto	l506
 11074                           
 11075                           ;display-7-segment.c: 189:     {;display-7-segment.c: 190:         PORTAbits.RA4=1;
 11076  1FCF  1605               	bsf	5,4	;volatile
 11077                           
 11078                           ;display-7-segment.c: 191:     }else
 11079  1FD0  2FD2               	goto	l6412
 11080  1FD1                     l506:	
 11081                           
 11082                           ;display-7-segment.c: 192:     {;display-7-segment.c: 193:         PORTAbits.RA4=0;
 11083  1FD1  1205               	bcf	5,4	;volatile
 11084  1FD2                     l6412:	
 11085                           
 11086                           ;display-7-segment.c: 196:     if(sign>>3 & 1)
 11087  1FD2  082B               	movf	SetAnodeOutputs@sign,w
 11088  1FD3  00AA               	movwf	??_SetAnodeOutputs
 11089  1FD4  3003               	movlw	3
 11090  1FD5                     u5895:	
 11091  1FD5  1003               	clrc
 11092  1FD6  0CAA               	rrf	??_SetAnodeOutputs,f
 11093  1FD7  3EFF               	addlw	-1
 11094  1FD8  1D03               	skipz
 11095  1FD9  2FD5               	goto	u5895
 11096  1FDA  1C2A               	btfss	??_SetAnodeOutputs,0
 11097  1FDB  2FDE               	goto	l508
 11098                           
 11099                           ;display-7-segment.c: 197:     {;display-7-segment.c: 198:         PORTAbits.RA3=1;
 11100  1FDC  1585               	bsf	5,3	;volatile
 11101                           
 11102                           ;display-7-segment.c: 199:     }else
 11103  1FDD  2FDF               	goto	l6416
 11104  1FDE                     l508:	
 11105                           
 11106                           ;display-7-segment.c: 200:     {;display-7-segment.c: 201:         PORTAbits.RA3=0;
 11107  1FDE  1185               	bcf	5,3	;volatile
 11108  1FDF                     l6416:	
 11109                           
 11110                           ;display-7-segment.c: 204:     if(sign>>2 & 1)
 11111  1FDF  082B               	movf	SetAnodeOutputs@sign,w
 11112  1FE0  00AA               	movwf	??_SetAnodeOutputs
 11113  1FE1  3002               	movlw	2
 11114  1FE2                     u5915:	
 11115  1FE2  1003               	clrc
 11116  1FE3  0CAA               	rrf	??_SetAnodeOutputs,f
 11117  1FE4  3EFF               	addlw	-1
 11118  1FE5  1D03               	skipz
 11119  1FE6  2FE2               	goto	u5915
 11120  1FE7  1C2A               	btfss	??_SetAnodeOutputs,0
 11121  1FE8  2FEB               	goto	l510
 11122                           
 11123                           ;display-7-segment.c: 205:     {;display-7-segment.c: 206:         PORTAbits.RA2=1;
 11124  1FE9  1505               	bsf	5,2	;volatile
 11125                           
 11126                           ;display-7-segment.c: 207:     }else
 11127  1FEA  2FEC               	goto	l6420
 11128  1FEB                     l510:	
 11129                           
 11130                           ;display-7-segment.c: 208:     {;display-7-segment.c: 209:         PORTAbits.RA2=0;
 11131  1FEB  1105               	bcf	5,2	;volatile
 11132  1FEC                     l6420:	
 11133                           
 11134                           ;display-7-segment.c: 212:     if(sign>>1 & 1)
 11135  1FEC  082B               	movf	SetAnodeOutputs@sign,w
 11136  1FED  00AA               	movwf	??_SetAnodeOutputs
 11137  1FEE  3001               	movlw	1
 11138  1FEF                     u5935:	
 11139  1FEF  1003               	clrc
 11140  1FF0  0CAA               	rrf	??_SetAnodeOutputs,f
 11141  1FF1  3EFF               	addlw	-1
 11142  1FF2  1D03               	skipz
 11143  1FF3  2FEF               	goto	u5935
 11144  1FF4  1C2A               	btfss	??_SetAnodeOutputs,0
 11145  1FF5  2FF8               	goto	l512
 11146                           
 11147                           ;display-7-segment.c: 213:     {;display-7-segment.c: 214:         PORTAbits.RA1=1;
 11148  1FF6  1485               	bsf	5,1	;volatile
 11149                           
 11150                           ;display-7-segment.c: 215:     }else
 11151  1FF7  2FF9               	goto	l6424
 11152  1FF8                     l512:	
 11153                           
 11154                           ;display-7-segment.c: 216:     {;display-7-segment.c: 217:         PORTAbits.RA1=0;
 11155  1FF8  1085               	bcf	5,1	;volatile
 11156  1FF9                     l6424:	
 11157                           
 11158                           ;display-7-segment.c: 220:     if(decimal_point==1)
 11159  1FF9  0329               	decf	SetAnodeOutputs@decimal_point,w
 11160  1FFA  1D03               	btfss	3,2
 11161  1FFB  2FFE               	goto	l514
 11162                           
 11163                           ;display-7-segment.c: 221:     {;display-7-segment.c: 222:         PORTAbits.RA0=1;
 11164  1FFC  1405               	bsf	5,0	;volatile
 11165                           
 11166                           ;display-7-segment.c: 223:     }else
 11167  1FFD  0008               	return
 11168  1FFE                     l514:	
 11169                           
 11170                           ;display-7-segment.c: 224:     {;display-7-segment.c: 225:         PORTAbits.RA0=0;
 11171  1FFE  1005               	bcf	5,0	;volatile
 11172  1FFF  0008               	return
 11173  2000                     __end_of_SetAnodeOutputs:	
 11174                           
 11175                           	psect	text46
 11176  1DD4                     __ptext46:	
 11177 ;; *************** function _FrameDecode *****************
 11178 ;; Defined at:
 11179 ;;		line 155 in file "manchester_decode.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  DataRCV         1    wreg     PTR struct .
 11182 ;;		 -> main@data_rcv(5), 
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;  DataRCV         1   13[BANK0 ] PTR struct .
 11185 ;;		 -> main@data_rcv(5), 
 11186 ;;  i               1   15[BANK0 ] unsigned char 
 11187 ;;  data            1   14[BANK0 ] unsigned char 
 11188 ;; Return value:  Size  Location     Type
 11189 ;;                  2    9[BANK0 ] unsigned int 
 11190 ;; Registers used:
 11191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11192 ;; Tracked objects:
 11193 ;;		On entry : 300/800
 11194 ;;		On exit  : 300/0
 11195 ;;		Unchanged: 0/0
 11196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11197 ;;      Params:         0       2       0       0       0
 11198 ;;      Locals:         0       3       0       0       0
 11199 ;;      Temps:          0       2       0       0       0
 11200 ;;      Totals:         0       7       0       0       0
 11201 ;;Total ram usage:        7 bytes
 11202 ;; Hardware stack levels used:    1
 11203 ;; Hardware stack levels required when called:    5
 11204 ;; This function calls:
 11205 ;;		_FrameBuffer
 11206 ;; This function is called by:
 11207 ;;		_Check_Event
 11208 ;;		_ProcessRCVData
 11209 ;; This function uses a non-reentrant model
 11210 ;;
 11211                           
 11212                           
 11213                           ;psect for function _FrameDecode
 11214  1DD4                     _FrameDecode:	
 11215                           
 11216                           ;incstack = 0
 11217                           ; Regs used in _FrameDecode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11218                           ;FrameDecode@DataRCV stored from wreg
 11219  1DD4  00AD               	movwf	FrameDecode@DataRCV
 11220  1DD5                     l275:	
 11221                           ;manchester_decode.c: 155: unsigned int FrameDecode(DataStruct *DataRCV);manchester_deco
      +                          de.c: 156: {;manchester_decode.c: 157:     unsigned char data, i;;manchester_decode.c: 1
      +                          59:     while(1)
 11222                           
 11223                           
 11224                           ;manchester_decode.c: 160:     {;manchester_decode.c: 161:         if(FrameBuffer(&data,
      +                          0)==0xFF)
 11225  1DD5  01A6               	clrf	FrameBuffer@mode
 11226  1DD6  302E               	movlw	(low (FrameDecode@data| 0))& (0+255)
 11227  1DD7  160A  158A  246B  160A  158A  	fcall	_FrameBuffer
 11228  1DDC  3AFF               	xorlw	255
 11229  1DDD  1D03               	skipz
 11230  1DDE  2DE4               	goto	l6970
 11231  1DDF                     l6966:	
 11232                           
 11233                           ;manchester_decode.c: 162:         {;manchester_decode.c: 163:             return 0xFF;
 11234  1DDF  30FF               	movlw	255
 11235  1DE0  00A9               	movwf	?_FrameDecode
 11236  1DE1  3000               	movlw	0
 11237  1DE2  00AA               	movwf	?_FrameDecode+1
 11238  1DE3  0008               	return
 11239  1DE4                     l6970:	
 11240                           
 11241                           ;manchester_decode.c: 166:         if(data=='$')
 11242  1DE4  3024               	movlw	36
 11243  1DE5  062E               	xorwf	FrameDecode@data,w
 11244  1DE6  1D03               	btfss	3,2
 11245  1DE7  2DD5               	goto	l275
 11246                           
 11247                           ;manchester_decode.c: 167:         {;manchester_decode.c: 168:             for(i=0;i<(6 
      +                          -2);i++)
 11248  1DE8  01AF               	clrf	FrameDecode@i
 11249  1DE9                     l6978:	
 11250                           
 11251                           ;manchester_decode.c: 169:    {;manchester_decode.c: 170:     DataRCV->frame[i]=0;
 11252  1DE9  082F               	movf	FrameDecode@i,w
 11253  1DEA  072D               	addwf	FrameDecode@DataRCV,w
 11254  1DEB  00AB               	movwf	??_FrameDecode
 11255  1DEC  082B               	movf	??_FrameDecode,w
 11256  1DED  0084               	movwf	4
 11257  1DEE  1783               	bsf	3,7	;select IRP bank2
 11258  1DEF  0180               	clrf	0
 11259                           
 11260                           ;manchester_decode.c: 171:    }
 11261  1DF0  3001               	movlw	1
 11262  1DF1  00AB               	movwf	??_FrameDecode
 11263  1DF2  082B               	movf	??_FrameDecode,w
 11264  1DF3  07AF               	addwf	FrameDecode@i,f
 11265  1DF4  3004               	movlw	4
 11266  1DF5  022F               	subwf	FrameDecode@i,w
 11267  1DF6  1C03               	skipc
 11268  1DF7  2DE9               	goto	l6978
 11269                           
 11270                           ;manchester_decode.c: 172:             i=0;
 11271  1DF8  01AF               	clrf	FrameDecode@i
 11272  1DF9                     l6986:	
 11273                           
 11274                           ;manchester_decode.c: 175:             {;manchester_decode.c: 176:                 if(Fr
      +                          ameBuffer(&data,0)==0xFF)
 11275  1DF9  01A6               	clrf	FrameBuffer@mode
 11276  1DFA  302E               	movlw	(low (FrameDecode@data| 0))& (0+255)
 11277  1DFB  160A  158A  246B  160A  158A  	fcall	_FrameBuffer
 11278  1E00  3AFF               	xorlw	255
 11279  1E01  1903               	btfsc	3,2
 11280  1E02  2DDF               	goto	l6966
 11281                           
 11282                           ;manchester_decode.c: 180:                 if(data=='&' && i==(6 -2))
 11283  1E03  3026               	movlw	38
 11284  1E04  062E               	xorwf	FrameDecode@data,w
 11285  1E05  1D03               	btfss	3,2
 11286  1E06  2E16               	goto	l7002
 11287  1E07  3004               	movlw	4
 11288  1E08  062F               	xorwf	FrameDecode@i,w
 11289  1E09  1D03               	btfss	3,2
 11290  1E0A  2E16               	goto	l7002
 11291                           
 11292                           ;manchester_decode.c: 181:                 {;manchester_decode.c: 182:                  
      +                             DataRCV->RCV_Frame=1;
 11293  1E0B  082D               	movf	FrameDecode@DataRCV,w
 11294  1E0C  3E04               	addlw	4
 11295  1E0D  0084               	movwf	4
 11296  1E0E  1783               	bsf	3,7	;select IRP bank2
 11297  1E0F  0180               	clrf	0
 11298  1E10  0A80               	incf	0,f
 11299                           
 11300                           ;manchester_decode.c: 183:                     return 10;
 11301  1E11  300A               	movlw	10
 11302  1E12  00A9               	movwf	?_FrameDecode
 11303  1E13  3000               	movlw	0
 11304  1E14  00AA               	movwf	?_FrameDecode+1
 11305  1E15  0008               	return
 11306  1E16                     l7002:	
 11307                           
 11308                           ;manchester_decode.c: 185:                 DataRCV->frame[i]=data;
 11309  1E16  082E               	movf	FrameDecode@data,w
 11310  1E17  00AB               	movwf	??_FrameDecode
 11311  1E18  082F               	movf	FrameDecode@i,w
 11312  1E19  072D               	addwf	FrameDecode@DataRCV,w
 11313  1E1A  00AC               	movwf	??_FrameDecode+1
 11314  1E1B  082C               	movf	??_FrameDecode+1,w
 11315  1E1C  0084               	movwf	4
 11316  1E1D  082B               	movf	??_FrameDecode,w
 11317  1E1E  1783               	bsf	3,7	;select IRP bank2
 11318  1E1F  0080               	movwf	0
 11319                           
 11320                           ;manchester_decode.c: 186:                 i++;
 11321  1E20  3001               	movlw	1
 11322  1E21  00AB               	movwf	??_FrameDecode
 11323  1E22  082B               	movf	??_FrameDecode,w
 11324  1E23  07AF               	addwf	FrameDecode@i,f
 11325                           
 11326                           ;manchester_decode.c: 187:                 if(i>(6 -2))
 11327  1E24  3005               	movlw	5
 11328  1E25  022F               	subwf	FrameDecode@i,w
 11329  1E26  1803               	btfsc	3,0
 11330  1E27  2DD5               	goto	l275
 11331  1E28  2DF9               	goto	l6986
 11332  1E29                     __end_of_FrameDecode:	
 11333                           
 11334                           	psect	text47
 11335  1C6B                     __ptext47:	
 11336 ;; *************** function _FrameBuffer *****************
 11337 ;; Defined at:
 11338 ;;		line 13 in file "circular_buffer.c"
 11339 ;; Parameters:    Size  Location     Type
 11340 ;;  data            1    wreg     PTR unsigned char 
 11341 ;;		 -> FrameDecode@data(1), ManchesterDecode@decoded_byte(1), 
 11342 ;;  mode            1    6[BANK0 ] unsigned char 
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;  data            1    8[BANK0 ] PTR unsigned char 
 11345 ;;		 -> FrameDecode@data(1), ManchesterDecode@decoded_byte(1), 
 11346 ;; Return value:  Size  Location     Type
 11347 ;;                  1    wreg      unsigned char 
 11348 ;; Registers used:
 11349 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11350 ;; Tracked objects:
 11351 ;;		On entry : 300/800
 11352 ;;		On exit  : 300/0
 11353 ;;		Unchanged: 0/0
 11354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11355 ;;      Params:         0       1       0       0       0
 11356 ;;      Locals:         0       1       0       0       0
 11357 ;;      Temps:          0       1       0       0       0
 11358 ;;      Totals:         0       3       0       0       0
 11359 ;;Total ram usage:        3 bytes
 11360 ;; Hardware stack levels used:    1
 11361 ;; Hardware stack levels required when called:    4
 11362 ;; This function calls:
 11363 ;;		Nothing
 11364 ;; This function is called by:
 11365 ;;		_FrameDecode
 11366 ;; This function uses a non-reentrant model
 11367 ;;
 11368                           
 11369                           
 11370                           ;psect for function _FrameBuffer
 11371  1C6B                     _FrameBuffer:	
 11372                           
 11373                           ;incstack = 0
 11374                           ; Regs used in _FrameBuffer: [wreg-fsr0h+status,2+status,0]
 11375                           ;FrameBuffer@data stored from wreg
 11376  1C6B  00A8               	movwf	FrameBuffer@data
 11377                           
 11378                           ;circular_buffer.c: 13: unsigned char FrameBuffer(unsigned char *data,unsigned char mode
      +                          );circular_buffer.c: 14: {;circular_buffer.c: 15:  static unsigned char buffer[30];;circ
      +                          ular_buffer.c: 16:  static unsigned char read_pointer, write_pointer, write_pointer_mem;
      +                          ;circular_buffer.c: 18:  if(mode==1)
 11379  1C6C  0326               	decf	FrameBuffer@mode,w
 11380  1C6D  1D03               	btfss	3,2
 11381  1C6E  2CA9               	goto	l6622
 11382                           
 11383                           ;circular_buffer.c: 19:  {;circular_buffer.c: 20:   write_pointer_mem=write_pointer;
 11384  1C6F  085C               	movf	FrameBuffer@write_pointer,w
 11385  1C70  00A7               	movwf	??_FrameBuffer
 11386  1C71  0827               	movf	??_FrameBuffer,w
 11387  1C72  1683               	bsf	3,5	;RP0=1, select bank1
 11388  1C73  00AF               	movwf	FrameBuffer@write_pointer_mem^(0+128)
 11389                           
 11390                           ;circular_buffer.c: 21:   write_pointer++;
 11391  1C74  3001               	movlw	1
 11392  1C75  1283               	bcf	3,5	;RP0=0, select bank0
 11393  1C76  00A7               	movwf	??_FrameBuffer
 11394  1C77  0827               	movf	??_FrameBuffer,w
 11395  1C78  07DC               	addwf	FrameBuffer@write_pointer,f
 11396                           
 11397                           ;circular_buffer.c: 23:   if(write_pointer==30)
 11398  1C79  301E               	movlw	30
 11399  1C7A  065C               	xorwf	FrameBuffer@write_pointer,w
 11400  1C7B  1903               	btfsc	3,2
 11401                           
 11402                           ;circular_buffer.c: 24:   {;circular_buffer.c: 25:    write_pointer=0;
 11403  1C7C  01DC               	clrf	FrameBuffer@write_pointer
 11404                           
 11405                           ;circular_buffer.c: 27:   if(write_pointer==read_pointer)
 11406  1C7D  085C               	movf	FrameBuffer@write_pointer,w
 11407  1C7E  065D               	xorwf	FrameBuffer@read_pointer,w
 11408  1C7F  1D03               	skipz
 11409  1C80  2C89               	goto	l6614
 11410                           
 11411                           ;circular_buffer.c: 28:   {;circular_buffer.c: 29:    write_pointer=write_pointer_mem;
 11412  1C81  1683               	bsf	3,5	;RP0=1, select bank1
 11413  1C82  082F               	movf	FrameBuffer@write_pointer_mem^(0+128),w
 11414  1C83  1283               	bcf	3,5	;RP0=0, select bank0
 11415  1C84  00A7               	movwf	??_FrameBuffer
 11416  1C85  0827               	movf	??_FrameBuffer,w
 11417  1C86  00DC               	movwf	FrameBuffer@write_pointer
 11418                           
 11419                           ;circular_buffer.c: 30:    return 0xFE;
 11420  1C87  30FE               	movlw	254
 11421  1C88  0008               	return
 11422  1C89                     l6614:	
 11423                           
 11424                           ;circular_buffer.c: 33:   buffer[write_pointer]=*data;
 11425  1C89  0828               	movf	FrameBuffer@data,w
 11426  1C8A  0084               	movwf	4
 11427  1C8B  1383               	bcf	3,7	;select IRP bank0
 11428  1C8C  0800               	movf	0,w
 11429  1C8D  00A7               	movwf	??_FrameBuffer
 11430  1C8E  085C               	movf	FrameBuffer@write_pointer,w
 11431  1C8F  3E10               	addlw	(low (FrameBuffer@buffer| (0+256)))& (0+255)
 11432  1C90  0084               	movwf	4
 11433  1C91  0827               	movf	??_FrameBuffer,w
 11434  1C92  1783               	bsf	3,7	;select IRP bank2
 11435  1C93  2CA6               	goto	L15
 11436  1C94                     l6624:	
 11437                           
 11438                           ;circular_buffer.c: 40:   {;circular_buffer.c: 41:    read_pointer++;
 11439  1C94  3001               	movlw	1
 11440  1C95  00A7               	movwf	??_FrameBuffer
 11441  1C96  0827               	movf	??_FrameBuffer,w
 11442  1C97  07DD               	addwf	FrameBuffer@read_pointer,f
 11443                           
 11444                           ;circular_buffer.c: 42:    if(read_pointer==30)
 11445  1C98  301E               	movlw	30
 11446  1C99  065D               	xorwf	FrameBuffer@read_pointer,w
 11447  1C9A  1903               	btfsc	3,2
 11448                           
 11449                           ;circular_buffer.c: 43:    {;circular_buffer.c: 44:     read_pointer=0;
 11450  1C9B  01DD               	clrf	FrameBuffer@read_pointer
 11451                           
 11452                           ;circular_buffer.c: 46:    *data=buffer[read_pointer];
 11453  1C9C  085D               	movf	FrameBuffer@read_pointer,w
 11454  1C9D  3E10               	addlw	(low (FrameBuffer@buffer| (0+256)))& (0+255)
 11455  1C9E  0084               	movwf	4
 11456  1C9F  1783               	bsf	3,7	;select IRP bank2
 11457  1CA0  0800               	movf	0,w
 11458  1CA1  00A7               	movwf	??_FrameBuffer
 11459  1CA2  0828               	movf	FrameBuffer@data,w
 11460  1CA3  0084               	movwf	4
 11461  1CA4  0827               	movf	??_FrameBuffer,w
 11462  1CA5  1383               	bcf	3,7	;select IRP bank0
 11463  1CA6                     L15:	
 11464  1CA6  0080               	movwf	0
 11465                           
 11466                           ;circular_buffer.c: 35:   return 1;
 11467  1CA7  3001               	movlw	1
 11468  1CA8  0008               	return
 11469  1CA9                     l6622:	
 11470                           
 11471                           ;circular_buffer.c: 38:  {;circular_buffer.c: 39:   if(write_pointer!=read_pointer)
 11472  1CA9  085C               	movf	FrameBuffer@write_pointer,w
 11473  1CAA  065D               	xorwf	FrameBuffer@read_pointer,w
 11474  1CAB  1D03               	btfss	3,2
 11475  1CAC  2C94               	goto	l6624
 11476                           
 11477                           ;circular_buffer.c: 50:   {;circular_buffer.c: 51:    return 0xFF;
 11478  1CAD  30FF               	movlw	255
 11479  1CAE  0008               	return
 11480  1CAF                     __end_of_FrameBuffer:	
 11481                           
 11482                           	psect	text48
 11483  1902                     __ptext48:	
 11484 ;; *************** function _Display_7Seg_Text *****************
 11485 ;; Defined at:
 11486 ;;		line 640 in file "menu.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;  text            1    wreg     PTR unsigned char 
 11489 ;;		 -> STR_21(5), STR_20(5), STR_19(5), STR_18(5), 
 11490 ;;		 -> STR_17(5), STR_16(5), STR_15(5), STR_14(5), 
 11491 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(5), 
 11492 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(5), 
 11493 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
 11494 ;;		 -> STR_1(5), 
 11495 ;;  decimal_poin    1    6[BANK0 ] unsigned char 
 11496 ;; Auto vars:     Size  Location     Type
 11497 ;;  text            1    9[BANK0 ] PTR unsigned char 
 11498 ;;		 -> STR_21(5), STR_20(5), STR_19(5), STR_18(5), 
 11499 ;;		 -> STR_17(5), STR_16(5), STR_15(5), STR_14(5), 
 11500 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(5), 
 11501 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(5), 
 11502 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
 11503 ;;		 -> STR_1(5), 
 11504 ;;  i               1    8[BANK0 ] unsigned char 
 11505 ;; Return value:  Size  Location     Type
 11506 ;;                  1    wreg      void 
 11507 ;; Registers used:
 11508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11509 ;; Tracked objects:
 11510 ;;		On entry : 300/800
 11511 ;;		On exit  : B00/100
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11514 ;;      Params:         0       1       0       0       0
 11515 ;;      Locals:         0       2       0       0       0
 11516 ;;      Temps:          0       1       0       0       0
 11517 ;;      Totals:         0       4       0       0       0
 11518 ;;Total ram usage:        4 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    4
 11521 ;; This function calls:
 11522 ;;		Nothing
 11523 ;; This function is called by:
 11524 ;;		_Check_Event
 11525 ;;		_Menu_Set_Time
 11526 ;;		_Display_Weekday
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           
 11531                           ;psect for function _Display_7Seg_Text
 11532  1902                     _Display_7Seg_Text:	
 11533                           
 11534                           ;incstack = 0
 11535 ;; using string table level
 11536                           ; Regs used in _Display_7Seg_Text: [wreg-fsr0h+status,2+status,0+pclath]
 11537                           ;Display_7Seg_Text@text stored from wreg
 11538  1902  00A9               	movwf	Display_7Seg_Text@text
 11539                           
 11540                           ;menu.c: 640: void Display_7Seg_Text(char *text, unsigned char decimal_point);menu.c: 64
      +                          1: {;menu.c: 642:     unsigned char i;;menu.c: 644:     for(i=0;i<4;i++)
 11541  1903  01A8               	clrf	Display_7Seg_Text@i
 11542  1904                     l6686:	
 11543                           
 11544                           ;menu.c: 645:     {;menu.c: 646:         g_display_text[i]=*(text+i);
 11545  1904  0828               	movf	Display_7Seg_Text@i,w
 11546  1905  0729               	addwf	Display_7Seg_Text@text,w
 11547  1906  0084               	movwf	4
 11548  1907  160A  118A  2000  160A  158A  	fcall	stringdir
 11549  190C  00A7               	movwf	??_Display_7Seg_Text
 11550  190D  0828               	movf	Display_7Seg_Text@i,w
 11551  190E  3ECC               	addlw	(low (_g_display_text| 0))& (0+255)
 11552  190F  0084               	movwf	4
 11553  1910  0827               	movf	??_Display_7Seg_Text,w
 11554  1911  1383               	bcf	3,7	;select IRP bank1
 11555  1912  0080               	movwf	0
 11556                           
 11557                           ;menu.c: 647:     }
 11558  1913  3001               	movlw	1
 11559  1914  00A7               	movwf	??_Display_7Seg_Text
 11560  1915  0827               	movf	??_Display_7Seg_Text,w
 11561  1916  07A8               	addwf	Display_7Seg_Text@i,f
 11562  1917  3004               	movlw	4
 11563  1918  0228               	subwf	Display_7Seg_Text@i,w
 11564  1919  1C03               	skipc
 11565  191A  2904               	goto	l6686
 11566                           
 11567                           ;menu.c: 649:     g_decimal_point=decimal_point;
 11568  191B  0826               	movf	Display_7Seg_Text@decimal_point,w
 11569  191C  00A7               	movwf	??_Display_7Seg_Text
 11570  191D  0827               	movf	??_Display_7Seg_Text,w
 11571  191E  1683               	bsf	3,5	;RP0=1, select bank1
 11572  191F  00AC               	movwf	_g_decimal_point^(0+128)
 11573  1920  0008               	return
 11574  1921                     __end_of_Display_7Seg_Text:	
 11575                           
 11576                           	psect	text49
 11577  1921                     __ptext49:	
 11578 ;; *************** function _CRC_check *****************
 11579 ;; Defined at:
 11580 ;;		line 205 in file "manchester_decode.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;  DataRCV         1    wreg     PTR struct .
 11583 ;;		 -> main@data_rcv(5), 
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;  DataRCV         1   19[BANK0 ] PTR struct .
 11586 ;;		 -> main@data_rcv(5), 
 11587 ;;  crc_val         2   17[BANK0 ] unsigned int 
 11588 ;; Return value:  Size  Location     Type
 11589 ;;                  1    wreg      unsigned char 
 11590 ;; Registers used:
 11591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11592 ;; Tracked objects:
 11593 ;;		On entry : B00/800
 11594 ;;		On exit  : B00/800
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11597 ;;      Params:         0       0       0       0       0
 11598 ;;      Locals:         0       3       0       0       0
 11599 ;;      Temps:          0       1       0       0       0
 11600 ;;      Totals:         0       4       0       0       0
 11601 ;;Total ram usage:        4 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; Hardware stack levels required when called:    5
 11604 ;; This function calls:
 11605 ;;		_CRC16
 11606 ;; This function is called by:
 11607 ;;		_ProcessRCVData
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           
 11612                           ;psect for function _CRC_check
 11613  1921                     _CRC_check:	
 11614                           
 11615                           ;incstack = 0
 11616                           ; Regs used in _CRC_check: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11617                           ;CRC_check@DataRCV stored from wreg
 11618  1921  00B3               	movwf	CRC_check@DataRCV
 11619                           
 11620                           ;manchester_decode.c: 205: unsigned char CRC_check(DataStruct *DataRCV);manchester_decod
      +                          e.c: 206: {;manchester_decode.c: 207:  unsigned int crc_val;;manchester_decode.c: 209:  
      +                          crc_val=CRC16(&DataRCV->frame[0],6 -4);
 11621  1922  3002               	movlw	2
 11622  1923  00B0               	movwf	??_CRC_check
 11623  1924  0830               	movf	??_CRC_check,w
 11624  1925  00A6               	movwf	CRC16@size
 11625  1926  0833               	movf	CRC_check@DataRCV,w
 11626  1927  160A  158A  242A  160A  158A  	fcall	_CRC16
 11627  192C  0827               	movf	?_CRC16+1,w
 11628  192D  00B2               	movwf	CRC_check@crc_val+1
 11629  192E  0826               	movf	?_CRC16,w
 11630  192F  00B1               	movwf	CRC_check@crc_val
 11631                           
 11632                           ;manchester_decode.c: 211:  if((DataRCV->frame[6 -4]==crc_val>>8) &&
 11633  1930  0833               	movf	CRC_check@DataRCV,w
 11634  1931  3E02               	addlw	2
 11635  1932  0084               	movwf	4
 11636  1933  0800               	movf	0,w
 11637  1934  0632               	xorwf	CRC_check@crc_val+1,w
 11638  1935  1D03               	skipz
 11639  1936  2940               	goto	l7400
 11640  1937  0833               	movf	CRC_check@DataRCV,w
 11641  1938  3E03               	addlw	3
 11642  1939  0084               	movwf	4
 11643  193A  0800               	movf	0,w
 11644  193B  0631               	xorwf	CRC_check@crc_val,w
 11645  193C  1D03               	skipz
 11646  193D  2940               	goto	l7400
 11647                           
 11648                           ;manchester_decode.c: 213:     {;manchester_decode.c: 214:   return 1;
 11649  193E  3001               	movlw	1
 11650  193F  0008               	return
 11651  1940                     l7400:	
 11652                           
 11653                           ;manchester_decode.c: 216:  {;manchester_decode.c: 217:   return 0;
 11654  1940  3000               	movlw	0
 11655  1941  0008               	return
 11656  1942                     __end_of_CRC_check:	
 11657                           
 11658                           	psect	text50
 11659  1C2A                     __ptext50:	
 11660 ;; *************** function _CRC16 *****************
 11661 ;; Defined at:
 11662 ;;		line 7 in file "crc16.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  data_tab_ptr    1    wreg     PTR unsigned char 
 11665 ;;		 -> main@data_rcv(5), 
 11666 ;;  size            1    6[BANK0 ] unsigned char 
 11667 ;; Auto vars:     Size  Location     Type
 11668 ;;  data_tab_ptr    1   11[BANK0 ] PTR unsigned char 
 11669 ;;		 -> main@data_rcv(5), 
 11670 ;;  crc             2   14[BANK0 ] unsigned int 
 11671 ;;  i               1   13[BANK0 ] unsigned char 
 11672 ;;  k               1   12[BANK0 ] unsigned char 
 11673 ;; Return value:  Size  Location     Type
 11674 ;;                  2    6[BANK0 ] unsigned int 
 11675 ;; Registers used:
 11676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
 11677 ;; Tracked objects:
 11678 ;;		On entry : B00/800
 11679 ;;		On exit  : B00/800
 11680 ;;		Unchanged: 0/0
 11681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11682 ;;      Params:         0       2       0       0       0
 11683 ;;      Locals:         0       5       0       0       0
 11684 ;;      Temps:          0       3       0       0       0
 11685 ;;      Totals:         0      10       0       0       0
 11686 ;;Total ram usage:       10 bytes
 11687 ;; Hardware stack levels used:    1
 11688 ;; Hardware stack levels required when called:    4
 11689 ;; This function calls:
 11690 ;;		Nothing
 11691 ;; This function is called by:
 11692 ;;		_CRC_check
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696                           
 11697                           ;psect for function _CRC16
 11698  1C2A                     _CRC16:	
 11699                           
 11700                           ;incstack = 0
 11701                           ; Regs used in _CRC16: [wreg-fsr0h+status,2+status,0+btemp+1]
 11702                           ;CRC16@data_tab_ptr stored from wreg
 11703  1C2A  00AB               	movwf	CRC16@data_tab_ptr
 11704                           
 11705                           ;crc16.c: 7: unsigned int CRC16(unsigned char *data_tab_ptr, unsigned char size);crc16.c
      +                          : 8: {;crc16.c: 9:     const unsigned int generator = 0x1021;;crc16.c: 10:     unsigned 
      +                          int crc = 0;
 11706  1C2B  01AE               	clrf	CRC16@crc
 11707  1C2C  01AF               	clrf	CRC16@crc+1
 11708                           
 11709                           ;crc16.c: 11:     unsigned char k,i;;crc16.c: 13:     for(k=0;k<size;k++)
 11710  1C2D  01AC               	clrf	CRC16@k
 11711  1C2E                     l6958:	
 11712  1C2E  0826               	movf	CRC16@size,w
 11713  1C2F  022C               	subwf	CRC16@k,w
 11714  1C30  1803               	btfsc	3,0
 11715  1C31  2C66               	goto	l6960
 11716                           
 11717                           ;crc16.c: 14:     {;crc16.c: 15:         crc ^= (*(data_tab_ptr+k) << 8);
 11718  1C32  082C               	movf	CRC16@k,w
 11719  1C33  072B               	addwf	CRC16@data_tab_ptr,w
 11720  1C34  00A8               	movwf	??_CRC16
 11721  1C35  0828               	movf	??_CRC16,w
 11722  1C36  0084               	movwf	4
 11723  1C37  0800               	movf	0,w
 11724  1C38  00A9               	movwf	??_CRC16+1
 11725  1C39  01AA               	clrf	??_CRC16+2
 11726  1C3A  0829               	movf	??_CRC16+1,w
 11727  1C3B  00AA               	movwf	??_CRC16+2
 11728  1C3C  01A9               	clrf	??_CRC16+1
 11729  1C3D  0829               	movf	??_CRC16+1,w
 11730  1C3E  06AE               	xorwf	CRC16@crc,f
 11731  1C3F  082A               	movf	??_CRC16+2,w
 11732  1C40  06AF               	xorwf	CRC16@crc+1,f
 11733                           
 11734                           ;crc16.c: 17:         for (i=0;i<8;i++)
 11735  1C41  01AD               	clrf	CRC16@i
 11736  1C42                     l25:	
 11737                           
 11738                           ;crc16.c: 18:         {;crc16.c: 19:             if ((crc&0x8000)!=0)
 11739  1C42  1FAF               	btfss	CRC16@crc+1,7
 11740  1C43  2C52               	goto	l6950
 11741                           
 11742                           ;crc16.c: 20:             {;crc16.c: 21:                  crc=(crc<<1)^generator;
 11743  1C44  082F               	movf	CRC16@crc+1,w
 11744  1C45  00A9               	movwf	??_CRC16+1
 11745  1C46  082E               	movf	CRC16@crc,w
 11746  1C47  00A8               	movwf	??_CRC16
 11747  1C48  1003               	clrc
 11748  1C49  0DA8               	rlf	??_CRC16,f
 11749  1C4A  0DA9               	rlf	??_CRC16+1,f
 11750  1C4B  3021               	movlw	33
 11751  1C4C  0628               	xorwf	??_CRC16,w
 11752  1C4D  00AE               	movwf	CRC16@crc
 11753  1C4E  3010               	movlw	16
 11754  1C4F  0629               	xorwf	??_CRC16+1,w
 11755  1C50  00AF               	movwf	CRC16@crc+1
 11756                           
 11757                           ;crc16.c: 22:             }else
 11758  1C51  2C59               	goto	l6952
 11759  1C52                     l6950:	
 11760                           
 11761                           ;crc16.c: 23:             {;crc16.c: 24:                 crc<<=1;
 11762  1C52  3001               	movlw	1
 11763  1C53                     u6945:	
 11764  1C53  1003               	clrc
 11765  1C54  0DAE               	rlf	CRC16@crc,f
 11766  1C55  0DAF               	rlf	CRC16@crc+1,f
 11767  1C56  3EFF               	addlw	-1
 11768  1C57  1D03               	skipz
 11769  1C58  2C53               	goto	u6945
 11770  1C59                     l6952:	
 11771                           
 11772                           ;crc16.c: 26:         }
 11773  1C59  3001               	movlw	1
 11774  1C5A  00A8               	movwf	??_CRC16
 11775  1C5B  0828               	movf	??_CRC16,w
 11776  1C5C  07AD               	addwf	CRC16@i,f
 11777  1C5D  3008               	movlw	8
 11778  1C5E  022D               	subwf	CRC16@i,w
 11779  1C5F  1C03               	skipc
 11780  1C60  2C42               	goto	l25
 11781                           
 11782                           ;crc16.c: 27:     }
 11783  1C61  3001               	movlw	1
 11784  1C62  00A8               	movwf	??_CRC16
 11785  1C63  0828               	movf	??_CRC16,w
 11786  1C64  07AC               	addwf	CRC16@k,f
 11787  1C65  2C2E               	goto	l6958
 11788  1C66                     l6960:	
 11789                           
 11790                           ;crc16.c: 29:     return crc;
 11791  1C66  082F               	movf	CRC16@crc+1,w
 11792  1C67  00A7               	movwf	?_CRC16+1
 11793  1C68  082E               	movf	CRC16@crc,w
 11794  1C69  00A6               	movwf	?_CRC16
 11795  1C6A  0008               	return
 11796  1C6B                     __end_of_CRC16:	
 11797                           
 11798                           	psect	text51
 11799  0B06                     __ptext51:	
 11800 ;; *************** function _Menu_Init *****************
 11801 ;; Defined at:
 11802 ;;		line 42 in file "menu.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;  menudef         1    wreg     PTR struct .
 11805 ;;		 -> main@menudef(7), 
 11806 ;; Auto vars:     Size  Location     Type
 11807 ;;  menudef         1   12[BANK0 ] PTR struct .
 11808 ;;		 -> main@menudef(7), 
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  1    wreg      void 
 11811 ;; Registers used:
 11812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : B00/B00
 11815 ;;		On exit  : B00/B00
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11818 ;;      Params:         0       0       0       0       0
 11819 ;;      Locals:         0       1       0       0       0
 11820 ;;      Temps:          0       1       0       0       0
 11821 ;;      Totals:         0       2       0       0       0
 11822 ;;Total ram usage:        2 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    6
 11825 ;; This function calls:
 11826 ;;		_Disable_All_Digits
 11827 ;;		_Read_Limit_From_EEprom
 11828 ;; This function is called by:
 11829 ;;		_main
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           
 11834                           ;psect for function _Menu_Init
 11835  0B06                     _Menu_Init:	
 11836                           
 11837                           ;incstack = 0
 11838                           ; Regs used in _Menu_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11839                           ;Menu_Init@menudef stored from wreg
 11840  0B06  1283               	bcf	3,5	;RP0=0, select bank0
 11841  0B07  1303               	bcf	3,6	;RP1=0, select bank0
 11842  0B08  00AC               	movwf	Menu_Init@menudef
 11843                           
 11844                           ;menu.c: 42: void Menu_Init(MenuParamPonterStruct *menudef);menu.c: 43: {;menu.c: 44:   
      +                             g_display_controll=0;
 11845  0B09  1683               	bsf	3,5	;RP0=1, select bank1
 11846  0B0A  01AD               	clrf	_g_display_controll^(0+128)	;volatile
 11847                           
 11848                           ;menu.c: 45:      Disable_All_Digits();
 11849  0B0B  160A  158A  2067  120A  158A  	fcall	_Disable_All_Digits
 11850                           
 11851                           ;menu.c: 47:     static MenuParamStruct hours_minutes;;menu.c: 48:     static MenuParamS
      +                          truct day_month;;menu.c: 49:     static MenuParamStruct year;;menu.c: 50:     static Men
      +                          uParamStruct time_limit_work_day_1;;menu.c: 51:     static MenuParamStruct time_limit_wo
      +                          rk_day_2;;menu.c: 52:     static MenuParamStruct time_limit_free_day_1;;menu.c: 53:     
      +                          static MenuParamStruct time_limit_free_day_2;;menu.c: 55:     menudef->hours_minutes_ptr
      +                          =&hours_minutes;
 11852  0B10  30C0               	movlw	(low (Menu_Init@hours_minutes| (0+256)))& (0+255)
 11853  0B11  00AB               	movwf	??_Menu_Init
 11854  0B12  082C               	movf	Menu_Init@menudef,w
 11855  0B13  0084               	movwf	4
 11856  0B14  082B               	movf	??_Menu_Init,w
 11857  0B15  1783               	bsf	3,7	;select IRP bank2
 11858  0B16  0080               	movwf	0
 11859                           
 11860                           ;menu.c: 56:     menudef->day_month_ptr=&day_month;
 11861  0B17  30B8               	movlw	(low (Menu_Init@day_month| (0+256)))& (0+255)
 11862  0B18  00AB               	movwf	??_Menu_Init
 11863  0B19  0A2C               	incf	Menu_Init@menudef,w
 11864  0B1A  0084               	movwf	4
 11865  0B1B  082B               	movf	??_Menu_Init,w
 11866  0B1C  0080               	movwf	0
 11867                           
 11868                           ;menu.c: 57:     menudef->year_ptr=&year;
 11869  0B1D  30B0               	movlw	(low (Menu_Init@year| (0+256)))& (0+255)
 11870  0B1E  00AB               	movwf	??_Menu_Init
 11871  0B1F  082C               	movf	Menu_Init@menudef,w
 11872  0B20  3E02               	addlw	2
 11873  0B21  0084               	movwf	4
 11874  0B22  082B               	movf	??_Menu_Init,w
 11875  0B23  0080               	movwf	0
 11876                           
 11877                           ;menu.c: 59:     menudef->time_limit_free_day_1_ptr=&time_limit_free_day_1;
 11878  0B24  3098               	movlw	(low (Menu_Init@time_limit_free_day_1| (0+256)))& (0+255)
 11879  0B25  00AB               	movwf	??_Menu_Init
 11880  0B26  082C               	movf	Menu_Init@menudef,w
 11881  0B27  3E05               	addlw	5
 11882  0B28  0084               	movwf	4
 11883  0B29  082B               	movf	??_Menu_Init,w
 11884  0B2A  0080               	movwf	0
 11885                           
 11886                           ;menu.c: 60:     menudef->time_limit_free_day_2_ptr=&time_limit_free_day_2;
 11887  0B2B  3090               	movlw	(low (Menu_Init@time_limit_free_day_2| (0+256)))& (0+255)
 11888  0B2C  00AB               	movwf	??_Menu_Init
 11889  0B2D  082C               	movf	Menu_Init@menudef,w
 11890  0B2E  3E06               	addlw	6
 11891  0B2F  0084               	movwf	4
 11892  0B30  082B               	movf	??_Menu_Init,w
 11893  0B31  0080               	movwf	0
 11894                           
 11895                           ;menu.c: 61:     menudef->time_limit_work_day_1_ptr=&time_limit_work_day_1;
 11896  0B32  30A8               	movlw	(low (Menu_Init@time_limit_work_day_1| (0+256)))& (0+255)
 11897  0B33  00AB               	movwf	??_Menu_Init
 11898  0B34  082C               	movf	Menu_Init@menudef,w
 11899  0B35  3E03               	addlw	3
 11900  0B36  0084               	movwf	4
 11901  0B37  082B               	movf	??_Menu_Init,w
 11902  0B38  0080               	movwf	0
 11903                           
 11904                           ;menu.c: 62:     menudef->time_limit_work_day_2_ptr=&time_limit_work_day_2;
 11905  0B39  30A0               	movlw	(low (Menu_Init@time_limit_work_day_2| (0+256)))& (0+255)
 11906  0B3A  00AB               	movwf	??_Menu_Init
 11907  0B3B  082C               	movf	Menu_Init@menudef,w
 11908  0B3C  3E04               	addlw	4
 11909  0B3D  0084               	movwf	4
 11910  0B3E  082B               	movf	??_Menu_Init,w
 11911  0B3F  0080               	movwf	0
 11912                           
 11913                           ;menu.c: 64:     Read_Limit_From_EEprom(menudef->time_limit_free_day_1_ptr,menudef->time
      +                          _limit_free_day_2_ptr,1);
 11914  0B40  082C               	movf	Menu_Init@menudef,w
 11915  0B41  3E06               	addlw	6
 11916  0B42  0084               	movwf	4
 11917  0B43  0800               	movf	0,w
 11918  0B44  00AB               	movwf	??_Menu_Init
 11919  0B45  082B               	movf	??_Menu_Init,w
 11920  0B46  00A7               	movwf	Read_Limit_From_EEprom@limit2
 11921  0B47  01A8               	clrf	Read_Limit_From_EEprom@limit_type
 11922  0B48  0AA8               	incf	Read_Limit_From_EEprom@limit_type,f
 11923  0B49  082C               	movf	Menu_Init@menudef,w
 11924  0B4A  3E05               	addlw	5
 11925  0B4B  0084               	movwf	4
 11926  0B4C  0800               	movf	0,w
 11927  0B4D  160A  118A  20F6  120A  158A  	fcall	_Read_Limit_From_EEprom
 11928                           
 11929                           ;menu.c: 65:     Read_Limit_From_EEprom(menudef->time_limit_work_day_1_ptr,menudef->time
      +                          _limit_work_day_2_ptr,0);
 11930  0B52  082C               	movf	Menu_Init@menudef,w
 11931  0B53  3E04               	addlw	4
 11932  0B54  0084               	movwf	4
 11933  0B55  0800               	movf	0,w
 11934  0B56  00AB               	movwf	??_Menu_Init
 11935  0B57  082B               	movf	??_Menu_Init,w
 11936  0B58  00A7               	movwf	Read_Limit_From_EEprom@limit2
 11937  0B59  01A8               	clrf	Read_Limit_From_EEprom@limit_type
 11938  0B5A  082C               	movf	Menu_Init@menudef,w
 11939  0B5B  3E03               	addlw	3
 11940  0B5C  0084               	movwf	4
 11941  0B5D  0800               	movf	0,w
 11942  0B5E  160A  118A  20F6  120A  158A  	fcall	_Read_Limit_From_EEprom
 11943                           
 11944                           ;menu.c: 67:     hours_minutes.max_limit=23;
 11945  0B63  3017               	movlw	23
 11946  0B64  00AB               	movwf	??_Menu_Init
 11947  0B65  082B               	movf	??_Menu_Init,w
 11948  0B66  1683               	bsf	3,5	;RP0=1, select bank3
 11949  0B67  1703               	bsf	3,6	;RP1=1, select bank3
 11950  0B68  00C0               	movwf	Menu_Init@hours_minutes^(0+384)
 11951                           
 11952                           ;menu.c: 68:     hours_minutes.max_limit1=59;
 11953  0B69  303B               	movlw	59
 11954  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
 11955  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
 11956  0B6C  00AB               	movwf	??_Menu_Init
 11957  0B6D  082B               	movf	??_Menu_Init,w
 11958  0B6E  1683               	bsf	3,5	;RP0=1, select bank3
 11959  0B6F  1703               	bsf	3,6	;RP1=1, select bank3
 11960  0B70  00C1               	movwf	(Menu_Init@hours_minutes^(0+384)+1)
 11961                           
 11962                           ;menu.c: 69:     hours_minutes.min_limit=0;
 11963  0B71  01C3               	clrf	(Menu_Init@hours_minutes^(0+384)+3)
 11964                           
 11965                           ;menu.c: 70:     hours_minutes.min_limit1=0;
 11966  0B72  01C4               	clrf	(Menu_Init@hours_minutes^(0+384)+4)
 11967                           
 11968                           ;menu.c: 71:     hours_minutes.next_menu=&day_month;
 11969  0B73  30B8               	movlw	(low (Menu_Init@day_month| (0+256)))& (0+255)
 11970  0B74  1283               	bcf	3,5	;RP0=0, select bank0
 11971  0B75  1303               	bcf	3,6	;RP1=0, select bank0
 11972  0B76  00AB               	movwf	??_Menu_Init
 11973  0B77  082B               	movf	??_Menu_Init,w
 11974  0B78  1683               	bsf	3,5	;RP0=1, select bank3
 11975  0B79  1703               	bsf	3,6	;RP1=1, select bank3
 11976  0B7A  00C7               	movwf	(low ((Menu_Init@hours_minutes| (0+256)+7)))^(0+128)
 11977                           
 11978                           ;menu.c: 73:     day_month.max_limit=31;
 11979  0B7B  301F               	movlw	31
 11980  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
 11981  0B7D  1303               	bcf	3,6	;RP1=0, select bank0
 11982  0B7E  00AB               	movwf	??_Menu_Init
 11983  0B7F  082B               	movf	??_Menu_Init,w
 11984  0B80  1683               	bsf	3,5	;RP0=1, select bank3
 11985  0B81  1703               	bsf	3,6	;RP1=1, select bank3
 11986  0B82  00B8               	movwf	Menu_Init@day_month^(0+384)
 11987                           
 11988                           ;menu.c: 74:     day_month.max_limit1=12;
 11989  0B83  300C               	movlw	12
 11990  0B84  1283               	bcf	3,5	;RP0=0, select bank0
 11991  0B85  1303               	bcf	3,6	;RP1=0, select bank0
 11992  0B86  00AB               	movwf	??_Menu_Init
 11993  0B87  082B               	movf	??_Menu_Init,w
 11994  0B88  1683               	bsf	3,5	;RP0=1, select bank3
 11995  0B89  1703               	bsf	3,6	;RP1=1, select bank3
 11996  0B8A  00B9               	movwf	(Menu_Init@day_month^(0+384)+1)
 11997                           
 11998                           ;menu.c: 75:     day_month.min_limit=1;
 11999  0B8B  01BB               	clrf	(Menu_Init@day_month^(0+384)+3)
 12000  0B8C  0ABB               	incf	(Menu_Init@day_month^(0+384)+3),f
 12001                           
 12002                           ;menu.c: 76:     day_month.min_limit1=1;
 12003  0B8D  01BC               	clrf	(Menu_Init@day_month^(0+384)+4)
 12004  0B8E  0ABC               	incf	(Menu_Init@day_month^(0+384)+4),f
 12005                           
 12006                           ;menu.c: 77:     day_month.next_menu=&year;
 12007  0B8F  30B0               	movlw	(low (Menu_Init@year| (0+256)))& (0+255)
 12008  0B90  1283               	bcf	3,5	;RP0=0, select bank0
 12009  0B91  1303               	bcf	3,6	;RP1=0, select bank0
 12010  0B92  00AB               	movwf	??_Menu_Init
 12011  0B93  082B               	movf	??_Menu_Init,w
 12012  0B94  1683               	bsf	3,5	;RP0=1, select bank3
 12013  0B95  1703               	bsf	3,6	;RP1=1, select bank3
 12014  0B96  00BF               	movwf	(low ((Menu_Init@day_month| (0+256)+7)))^(0+128)
 12015                           
 12016                           ;menu.c: 79:     year.max_limit=21;
 12017  0B97  3015               	movlw	21
 12018  0B98  1283               	bcf	3,5	;RP0=0, select bank0
 12019  0B99  1303               	bcf	3,6	;RP1=0, select bank0
 12020  0B9A  00AB               	movwf	??_Menu_Init
 12021  0B9B  082B               	movf	??_Menu_Init,w
 12022  0B9C  1683               	bsf	3,5	;RP0=1, select bank3
 12023  0B9D  1703               	bsf	3,6	;RP1=1, select bank3
 12024  0B9E  00B0               	movwf	Menu_Init@year^(0+384)
 12025                           
 12026                           ;menu.c: 80:     year.max_limit1=99;
 12027  0B9F  3063               	movlw	99
 12028  0BA0  1283               	bcf	3,5	;RP0=0, select bank0
 12029  0BA1  1303               	bcf	3,6	;RP1=0, select bank0
 12030  0BA2  00AB               	movwf	??_Menu_Init
 12031  0BA3  082B               	movf	??_Menu_Init,w
 12032  0BA4  1683               	bsf	3,5	;RP0=1, select bank3
 12033  0BA5  1703               	bsf	3,6	;RP1=1, select bank3
 12034  0BA6  00B1               	movwf	(Menu_Init@year^(0+384)+1)
 12035                           
 12036                           ;menu.c: 81:     year.min_limit=20;
 12037  0BA7  3014               	movlw	20
 12038  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
 12039  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
 12040  0BAA  00AB               	movwf	??_Menu_Init
 12041  0BAB  082B               	movf	??_Menu_Init,w
 12042  0BAC  1683               	bsf	3,5	;RP0=1, select bank3
 12043  0BAD  1703               	bsf	3,6	;RP1=1, select bank3
 12044  0BAE  00B3               	movwf	(Menu_Init@year^(0+384)+3)
 12045                           
 12046                           ;menu.c: 82:     year.min_limit1=0;
 12047  0BAF  01B4               	clrf	(Menu_Init@year^(0+384)+4)
 12048                           
 12049                           ;menu.c: 83:     year.next_menu=0;
 12050  0BB0  01B7               	clrf	(low ((Menu_Init@year| (0+256)+7)))^(0+128)
 12051                           
 12052                           ;menu.c: 85:     time_limit_work_day_1.max_limit=23;
 12053  0BB1  3017               	movlw	23
 12054  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
 12055  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
 12056  0BB4  00AB               	movwf	??_Menu_Init
 12057  0BB5  082B               	movf	??_Menu_Init,w
 12058  0BB6  1683               	bsf	3,5	;RP0=1, select bank3
 12059  0BB7  1703               	bsf	3,6	;RP1=1, select bank3
 12060  0BB8  00A8               	movwf	Menu_Init@time_limit_work_day_1^(0+384)
 12061                           
 12062                           ;menu.c: 86:     time_limit_work_day_1.max_limit1=59;
 12063  0BB9  303B               	movlw	59
 12064  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
 12065  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
 12066  0BBC  00AB               	movwf	??_Menu_Init
 12067  0BBD  082B               	movf	??_Menu_Init,w
 12068  0BBE  1683               	bsf	3,5	;RP0=1, select bank3
 12069  0BBF  1703               	bsf	3,6	;RP1=1, select bank3
 12070  0BC0  00A9               	movwf	(Menu_Init@time_limit_work_day_1^(0+384)+1)
 12071                           
 12072                           ;menu.c: 87:     time_limit_work_day_1.min_limit=0;
 12073  0BC1  01AB               	clrf	(Menu_Init@time_limit_work_day_1^(0+384)+3)
 12074                           
 12075                           ;menu.c: 88:     time_limit_work_day_1.min_limit1=0;
 12076  0BC2  01AC               	clrf	(Menu_Init@time_limit_work_day_1^(0+384)+4)
 12077                           
 12078                           ;menu.c: 89:     time_limit_work_day_1.next_menu=&time_limit_work_day_2;
 12079  0BC3  30A0               	movlw	(low (Menu_Init@time_limit_work_day_2| (0+256)))& (0+255)
 12080  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
 12081  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
 12082  0BC6  00AB               	movwf	??_Menu_Init
 12083  0BC7  082B               	movf	??_Menu_Init,w
 12084  0BC8  1683               	bsf	3,5	;RP0=1, select bank3
 12085  0BC9  1703               	bsf	3,6	;RP1=1, select bank3
 12086  0BCA  00AF               	movwf	(low ((Menu_Init@time_limit_work_day_1| (0+256)+7)))^(0+128)
 12087                           
 12088                           ;menu.c: 91:     time_limit_work_day_2.max_limit=23;
 12089  0BCB  3017               	movlw	23
 12090  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
 12091  0BCD  1303               	bcf	3,6	;RP1=0, select bank0
 12092  0BCE  00AB               	movwf	??_Menu_Init
 12093  0BCF  082B               	movf	??_Menu_Init,w
 12094  0BD0  1683               	bsf	3,5	;RP0=1, select bank3
 12095  0BD1  1703               	bsf	3,6	;RP1=1, select bank3
 12096  0BD2  00A0               	movwf	Menu_Init@time_limit_work_day_2^(0+384)
 12097                           
 12098                           ;menu.c: 92:     time_limit_work_day_2.max_limit1=59;
 12099  0BD3  303B               	movlw	59
 12100  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
 12101  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
 12102  0BD6  00AB               	movwf	??_Menu_Init
 12103  0BD7  082B               	movf	??_Menu_Init,w
 12104  0BD8  1683               	bsf	3,5	;RP0=1, select bank3
 12105  0BD9  1703               	bsf	3,6	;RP1=1, select bank3
 12106  0BDA  00A1               	movwf	(Menu_Init@time_limit_work_day_2^(0+384)+1)
 12107                           
 12108                           ;menu.c: 93:     time_limit_work_day_2.min_limit=0;
 12109  0BDB  01A3               	clrf	(Menu_Init@time_limit_work_day_2^(0+384)+3)
 12110                           
 12111                           ;menu.c: 94:     time_limit_work_day_2.min_limit1=0;
 12112  0BDC  01A4               	clrf	(Menu_Init@time_limit_work_day_2^(0+384)+4)
 12113                           
 12114                           ;menu.c: 95:     time_limit_work_day_2.next_menu=0;
 12115  0BDD  01A7               	clrf	(low ((Menu_Init@time_limit_work_day_2| (0+256)+7)))^(0+128)
 12116                           
 12117                           ;menu.c: 98:     time_limit_free_day_1.max_limit=23;
 12118  0BDE  3017               	movlw	23
 12119  0BDF  1283               	bcf	3,5	;RP0=0, select bank0
 12120  0BE0  1303               	bcf	3,6	;RP1=0, select bank0
 12121  0BE1  00AB               	movwf	??_Menu_Init
 12122  0BE2  082B               	movf	??_Menu_Init,w
 12123  0BE3  1683               	bsf	3,5	;RP0=1, select bank3
 12124  0BE4  1703               	bsf	3,6	;RP1=1, select bank3
 12125  0BE5  0098               	movwf	Menu_Init@time_limit_free_day_1^(0+384)
 12126                           
 12127                           ;menu.c: 99:     time_limit_free_day_1.max_limit1=59;
 12128  0BE6  303B               	movlw	59
 12129  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
 12130  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
 12131  0BE9  00AB               	movwf	??_Menu_Init
 12132  0BEA  082B               	movf	??_Menu_Init,w
 12133  0BEB  1683               	bsf	3,5	;RP0=1, select bank3
 12134  0BEC  1703               	bsf	3,6	;RP1=1, select bank3
 12135  0BED  0099               	movwf	(Menu_Init@time_limit_free_day_1^(0+384)+1)
 12136                           
 12137                           ;menu.c: 100:     time_limit_free_day_1.min_limit=0;
 12138  0BEE  019B               	clrf	(Menu_Init@time_limit_free_day_1^(0+384)+3)
 12139                           
 12140                           ;menu.c: 101:     time_limit_free_day_1.min_limit1=0;
 12141  0BEF  019C               	clrf	(Menu_Init@time_limit_free_day_1^(0+384)+4)
 12142                           
 12143                           ;menu.c: 102:     time_limit_free_day_1.next_menu=&time_limit_free_day_2;
 12144  0BF0  3090               	movlw	(low (Menu_Init@time_limit_free_day_2| (0+256)))& (0+255)
 12145  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
 12146  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
 12147  0BF3  00AB               	movwf	??_Menu_Init
 12148  0BF4  082B               	movf	??_Menu_Init,w
 12149  0BF5  1683               	bsf	3,5	;RP0=1, select bank3
 12150  0BF6  1703               	bsf	3,6	;RP1=1, select bank3
 12151  0BF7  009F               	movwf	(low ((Menu_Init@time_limit_free_day_1| (0+256)+7)))^(0+128)
 12152                           
 12153                           ;menu.c: 104:     time_limit_free_day_2.max_limit=23;
 12154  0BF8  3017               	movlw	23
 12155  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
 12156  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
 12157  0BFB  00AB               	movwf	??_Menu_Init
 12158  0BFC  082B               	movf	??_Menu_Init,w
 12159  0BFD  1683               	bsf	3,5	;RP0=1, select bank3
 12160  0BFE  1703               	bsf	3,6	;RP1=1, select bank3
 12161  0BFF  0090               	movwf	Menu_Init@time_limit_free_day_2^(0+384)
 12162                           
 12163                           ;menu.c: 105:     time_limit_free_day_2.max_limit1=59;
 12164  0C00  303B               	movlw	59
 12165  0C01  1283               	bcf	3,5	;RP0=0, select bank0
 12166  0C02  1303               	bcf	3,6	;RP1=0, select bank0
 12167  0C03  00AB               	movwf	??_Menu_Init
 12168  0C04  082B               	movf	??_Menu_Init,w
 12169  0C05  1683               	bsf	3,5	;RP0=1, select bank3
 12170  0C06  1703               	bsf	3,6	;RP1=1, select bank3
 12171  0C07  0091               	movwf	(Menu_Init@time_limit_free_day_2^(0+384)+1)
 12172                           
 12173                           ;menu.c: 106:     time_limit_free_day_2.min_limit=0;
 12174  0C08  0193               	clrf	(Menu_Init@time_limit_free_day_2^(0+384)+3)
 12175                           
 12176                           ;menu.c: 107:     time_limit_free_day_2.min_limit1=0;
 12177  0C09  0194               	clrf	(Menu_Init@time_limit_free_day_2^(0+384)+4)
 12178                           
 12179                           ;menu.c: 108:     time_limit_free_day_2.next_menu=0;
 12180  0C0A  0197               	clrf	(low ((Menu_Init@time_limit_free_day_2| (0+256)+7)))^(0+128)
 12181  0C0B  0008               	return
 12182  0C0C                     __end_of_Menu_Init:	
 12183                           
 12184                           	psect	text52
 12185  10F6                     __ptext52:	
 12186 ;; *************** function _Read_Limit_From_EEprom *****************
 12187 ;; Defined at:
 12188 ;;		line 613 in file "menu.c"
 12189 ;; Parameters:    Size  Location     Type
 12190 ;;  limit1          1    wreg     PTR struct MenuParamStru
 12191 ;;		 -> Menu_Init@time_limit_work_day_1(8), Menu_Init@time_limit_free_day_1(8), 
 12192 ;;  limit2          1    7[BANK0 ] PTR struct MenuParamStru
 12193 ;;		 -> Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_free_day_2(8), 
 12194 ;;  limit_type      1    8[BANK0 ] unsigned char 
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;  limit1          1   10[BANK0 ] PTR struct MenuParamStru
 12197 ;;		 -> Menu_Init@time_limit_work_day_1(8), Menu_Init@time_limit_free_day_1(8), 
 12198 ;; Return value:  Size  Location     Type
 12199 ;;                  1    wreg      void 
 12200 ;; Registers used:
 12201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12202 ;; Tracked objects:
 12203 ;;		On entry : A00/900
 12204 ;;		On exit  : B00/800
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12207 ;;      Params:         0       2       0       0       0
 12208 ;;      Locals:         0       1       0       0       0
 12209 ;;      Temps:          0       1       0       0       0
 12210 ;;      Totals:         0       4       0       0       0
 12211 ;;Total ram usage:        4 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    5
 12214 ;; This function calls:
 12215 ;;		_Read_EEprom
 12216 ;; This function is called by:
 12217 ;;		_Menu_Init
 12218 ;;		_Menu_Set_Time
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           
 12223                           ;psect for function _Read_Limit_From_EEprom
 12224  10F6                     _Read_Limit_From_EEprom:	
 12225                           
 12226                           ;incstack = 0
 12227                           ; Regs used in _Read_Limit_From_EEprom: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12228                           ;Read_Limit_From_EEprom@limit1 stored from wreg
 12229  10F6  1283               	bcf	3,5	;RP0=0, select bank0
 12230  10F7  00AA               	movwf	Read_Limit_From_EEprom@limit1
 12231                           
 12232                           ;menu.c: 613: void Read_Limit_From_EEprom(MenuParamStruct *limit1, MenuParamStruct *limi
      +                          t2,;menu.c: 614:                             unsigned char limit_type);menu.c: 615: {;me
      +                          nu.c: 616:     if(limit_type==0)
 12233  10F8  0828               	movf	Read_Limit_From_EEprom@limit_type,w
 12234  10F9  1D03               	btfss	3,2
 12235  10FA  292E               	goto	l7164
 12236                           
 12237                           ;menu.c: 617:     {;menu.c: 618:         limit1->param=Read_EEprom(0x00);
 12238  10FB  3000               	movlw	0
 12239  10FC  160A  158A  2088  160A  118A  	fcall	_Read_EEprom
 12240  1101  1303               	bcf	3,6	;RP1=0, select bank0
 12241  1102  00A9               	movwf	??_Read_Limit_From_EEprom
 12242  1103  082A               	movf	Read_Limit_From_EEprom@limit1,w
 12243  1104  3E05               	addlw	5
 12244  1105  0084               	movwf	4
 12245  1106  0829               	movf	??_Read_Limit_From_EEprom,w
 12246  1107  0080               	movwf	0
 12247                           
 12248                           ;menu.c: 619:         limit1->param1=Read_EEprom(0x01);
 12249  1108  3001               	movlw	1
 12250  1109  160A  158A  2088  160A  118A  	fcall	_Read_EEprom
 12251  110E  1303               	bcf	3,6	;RP1=0, select bank0
 12252  110F  00A9               	movwf	??_Read_Limit_From_EEprom
 12253  1110  082A               	movf	Read_Limit_From_EEprom@limit1,w
 12254  1111  3E06               	addlw	6
 12255  1112  0084               	movwf	4
 12256  1113  0829               	movf	??_Read_Limit_From_EEprom,w
 12257  1114  0080               	movwf	0
 12258                           
 12259                           ;menu.c: 620:         limit2->param=Read_EEprom(0x02);
 12260  1115  3002               	movlw	2
 12261  1116  160A  158A  2088  160A  118A  	fcall	_Read_EEprom
 12262  111B  1303               	bcf	3,6	;RP1=0, select bank0
 12263  111C  00A9               	movwf	??_Read_Limit_From_EEprom
 12264  111D  0827               	movf	Read_Limit_From_EEprom@limit2,w
 12265  111E  3E05               	addlw	5
 12266  111F  0084               	movwf	4
 12267  1120  0829               	movf	??_Read_Limit_From_EEprom,w
 12268  1121  0080               	movwf	0
 12269                           
 12270                           ;menu.c: 621:         limit2->param1=Read_EEprom(0x03);
 12271  1122  3003               	movlw	3
 12272  1123  160A  158A  2088   	fcall	_Read_EEprom
 12273  1126  1303               	bcf	3,6	;RP1=0, select bank0
 12274  1127  00A9               	movwf	??_Read_Limit_From_EEprom
 12275  1128  0827               	movf	Read_Limit_From_EEprom@limit2,w
 12276  1129  3E06               	addlw	6
 12277  112A  0084               	movwf	4
 12278  112B  0829               	movf	??_Read_Limit_From_EEprom,w
 12279  112C  0080               	movwf	0
 12280                           
 12281                           ;menu.c: 623:     }else if(limit_type==1)
 12282  112D  0008               	return
 12283  112E                     l7164:	
 12284  112E  0328               	decf	Read_Limit_From_EEprom@limit_type,w
 12285  112F  1D03               	btfss	3,2
 12286  1130  0008               	return
 12287                           
 12288                           ;menu.c: 624:     {;menu.c: 625:         limit1->param=Read_EEprom(0x04);
 12289  1131  3004               	movlw	4
 12290  1132  160A  158A  2088  160A  118A  	fcall	_Read_EEprom
 12291  1137  1303               	bcf	3,6	;RP1=0, select bank0
 12292  1138  00A9               	movwf	??_Read_Limit_From_EEprom
 12293  1139  082A               	movf	Read_Limit_From_EEprom@limit1,w
 12294  113A  3E05               	addlw	5
 12295  113B  0084               	movwf	4
 12296  113C  0829               	movf	??_Read_Limit_From_EEprom,w
 12297  113D  0080               	movwf	0
 12298                           
 12299                           ;menu.c: 626:         limit1->param1=Read_EEprom(0x05);
 12300  113E  3005               	movlw	5
 12301  113F  160A  158A  2088  160A  118A  	fcall	_Read_EEprom
 12302  1144  1303               	bcf	3,6	;RP1=0, select bank0
 12303  1145  00A9               	movwf	??_Read_Limit_From_EEprom
 12304  1146  082A               	movf	Read_Limit_From_EEprom@limit1,w
 12305  1147  3E06               	addlw	6
 12306  1148  0084               	movwf	4
 12307  1149  0829               	movf	??_Read_Limit_From_EEprom,w
 12308  114A  0080               	movwf	0
 12309                           
 12310                           ;menu.c: 627:         limit2->param=Read_EEprom(0x06);
 12311  114B  3006               	movlw	6
 12312  114C  160A  158A  2088  160A  118A  	fcall	_Read_EEprom
 12313  1151  1303               	bcf	3,6	;RP1=0, select bank0
 12314  1152  00A9               	movwf	??_Read_Limit_From_EEprom
 12315  1153  0827               	movf	Read_Limit_From_EEprom@limit2,w
 12316  1154  3E05               	addlw	5
 12317  1155  0084               	movwf	4
 12318  1156  0829               	movf	??_Read_Limit_From_EEprom,w
 12319  1157  0080               	movwf	0
 12320                           
 12321                           ;menu.c: 628:         limit2->param1=Read_EEprom(0x07);
 12322  1158  3007               	movlw	7
 12323  1159  160A  158A  2088   	fcall	_Read_EEprom
 12324  115C  1303               	bcf	3,6	;RP1=0, select bank0
 12325  115D  00A9               	movwf	??_Read_Limit_From_EEprom
 12326  115E  0827               	movf	Read_Limit_From_EEprom@limit2,w
 12327  115F  3E06               	addlw	6
 12328  1160  0084               	movwf	4
 12329  1161  0829               	movf	??_Read_Limit_From_EEprom,w
 12330  1162  0080               	movwf	0
 12331  1163  0008               	return
 12332  1164                     __end_of_Read_Limit_From_EEprom:	
 12333                           
 12334                           	psect	text53
 12335  1888                     __ptext53:	
 12336 ;; *************** function _Read_EEprom *****************
 12337 ;; Defined at:
 12338 ;;		line 26 in file "flash.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;  adress          1    wreg     unsigned char 
 12341 ;; Auto vars:     Size  Location     Type
 12342 ;;  adress          1    6[BANK0 ] unsigned char 
 12343 ;; Return value:  Size  Location     Type
 12344 ;;                  1    wreg      char 
 12345 ;; Registers used:
 12346 ;;		wreg
 12347 ;; Tracked objects:
 12348 ;;		On entry : B00/800
 12349 ;;		On exit  : B00/A00
 12350 ;;		Unchanged: 800/0
 12351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12352 ;;      Params:         0       0       0       0       0
 12353 ;;      Locals:         0       1       0       0       0
 12354 ;;      Temps:          0       0       0       0       0
 12355 ;;      Totals:         0       1       0       0       0
 12356 ;;Total ram usage:        1 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:    4
 12359 ;; This function calls:
 12360 ;;		Nothing
 12361 ;; This function is called by:
 12362 ;;		_Read_Limit_From_EEprom
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           
 12367                           ;psect for function _Read_EEprom
 12368  1888                     _Read_EEprom:	
 12369                           
 12370                           ;incstack = 0
 12371                           ; Regs used in _Read_EEprom: [wreg]
 12372                           ;Read_EEprom@adress stored from wreg
 12373  1888  00A6               	movwf	Read_EEprom@adress
 12374                           
 12375                           ;flash.c: 26: signed char Read_EEprom(unsigned char adress);flash.c: 27: {;flash.c: 28: 
      +                              INTCONbits.GIE=0;
 12376  1889  138B               	bcf	11,7	;volatile
 12377                           
 12378                           ;flash.c: 29:     EEADR=adress;
 12379  188A  0826               	movf	Read_EEprom@adress,w
 12380  188B  1703               	bsf	3,6	;RP1=1, select bank2
 12381  188C  008D               	movwf	13	;volatile
 12382                           
 12383                           ;flash.c: 30:     EEPGD=0;
 12384  188D  1683               	bsf	3,5	;RP0=1, select bank3
 12385  188E  138C               	bcf	12,7	;volsfr
 12386                           
 12387                           ;flash.c: 31:     RD=1;
 12388  188F  140C               	bsf	12,0	;volsfr
 12389                           
 12390                           ;flash.c: 32:     INTCONbits.GIE=1;
 12391  1890  178B               	bsf	11,7	;volatile
 12392                           
 12393                           ;flash.c: 33:     return EEDAT;
 12394  1891  1283               	bcf	3,5	;RP0=0, select bank2
 12395  1892  080C               	movf	12,w	;volatile
 12396  1893  0008               	return
 12397  1894                     __end_of_Read_EEprom:	
 12398                           
 12399                           	psect	text54
 12400  1867                     __ptext54:	
 12401 ;; *************** function _Disable_All_Digits *****************
 12402 ;; Defined at:
 12403 ;;		line 86 in file "display-7-segment.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;		None
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;		None
 12408 ;; Return value:  Size  Location     Type
 12409 ;;                  1    wreg      void 
 12410 ;; Registers used:
 12411 ;;		None
 12412 ;; Tracked objects:
 12413 ;;		On entry : 200/900
 12414 ;;		On exit  : 300/0
 12415 ;;		Unchanged: 0/0
 12416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12417 ;;      Params:         0       0       0       0       0
 12418 ;;      Locals:         0       0       0       0       0
 12419 ;;      Temps:          0       0       0       0       0
 12420 ;;      Totals:         0       0       0       0       0
 12421 ;;Total ram usage:        0 bytes
 12422 ;; Hardware stack levels used:    1
 12423 ;; Hardware stack levels required when called:    4
 12424 ;; This function calls:
 12425 ;;		Nothing
 12426 ;; This function is called by:
 12427 ;;		_OneDigitHandler
 12428 ;;		_Menu_Init
 12429 ;;		_Show_Time
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           
 12434                           ;psect for function _Disable_All_Digits
 12435  1867                     _Disable_All_Digits:	
 12436                           
 12437                           ;display-7-segment.c: 88:     PORTBbits.RB7=1;
 12438                           
 12439                           ;incstack = 0
 12440                           ; Regs used in _Disable_All_Digits: []
 12441  1867  1283               	bcf	3,5	;RP0=0, select bank0
 12442  1868  1786               	bsf	6,7	;volatile
 12443                           
 12444                           ;display-7-segment.c: 89:     PORTBbits.RB6=1;
 12445  1869  1706               	bsf	6,6	;volatile
 12446                           
 12447                           ;display-7-segment.c: 90:     PORTBbits.RB5=1;
 12448  186A  1686               	bsf	6,5	;volatile
 12449                           
 12450                           ;display-7-segment.c: 91:     PORTBbits.RB4=1;
 12451  186B  1606               	bsf	6,4	;volatile
 12452  186C  0008               	return
 12453  186D                     __end_of_Disable_All_Digits:	
 12454                           
 12455                           	psect	text55
 12456  107A                     __ptext55:	
 12457 ;; *************** function _InterruptConfig *****************
 12458 ;; Defined at:
 12459 ;;		line 9 in file "interrupts.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;		None
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;		None
 12464 ;; Return value:  Size  Location     Type
 12465 ;;                  1    wreg      void 
 12466 ;; Registers used:
 12467 ;;		wreg, status,2, status,0
 12468 ;; Tracked objects:
 12469 ;;		On entry : B00/100
 12470 ;;		On exit  : B00/100
 12471 ;;		Unchanged: 800/0
 12472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12473 ;;      Params:         0       0       0       0       0
 12474 ;;      Locals:         0       0       0       0       0
 12475 ;;      Temps:          0       0       0       0       0
 12476 ;;      Totals:         0       0       0       0       0
 12477 ;;Total ram usage:        0 bytes
 12478 ;; Hardware stack levels used:    1
 12479 ;; Hardware stack levels required when called:    4
 12480 ;; This function calls:
 12481 ;;		Nothing
 12482 ;; This function is called by:
 12483 ;;		_main
 12484 ;; This function uses a non-reentrant model
 12485 ;;
 12486                           
 12487                           
 12488                           ;psect for function _InterruptConfig
 12489  107A                     _InterruptConfig:	
 12490                           
 12491                           ;interrupts.c: 12:     OPTION_REGbits.T0CS=0;
 12492                           
 12493                           ;incstack = 0
 12494                           ; Regs used in _InterruptConfig: [wreg+status,2+status,0]
 12495  107A  1281               	bcf	1,5	;volatile
 12496                           
 12497                           ;interrupts.c: 13:     OPTION_REGbits.PSA=0;
 12498  107B  1181               	bcf	1,3	;volatile
 12499                           
 12500                           ;interrupts.c: 14:     OPTION_REGbits.PS=0b000;
 12501  107C  30F8               	movlw	-8
 12502  107D  0581               	andwf	1,f	;volatile
 12503                           
 12504                           ;interrupts.c: 15:     INTCONbits.T0IE=1;
 12505  107E  168B               	bsf	11,5	;volatile
 12506                           
 12507                           ;interrupts.c: 18:     T1CONbits.TMR1ON=1;
 12508  107F  1283               	bcf	3,5	;RP0=0, select bank0
 12509  1080  1410               	bsf	16,0	;volatile
 12510                           
 12511                           ;interrupts.c: 19:     T1CONbits.TMR1CS=0;
 12512  1081  1090               	bcf	16,1	;volatile
 12513                           
 12514                           ;interrupts.c: 20:     T1CONbits.T1CKPS=0b00;
 12515  1082  30CF               	movlw	-49
 12516  1083  0590               	andwf	16,f	;volatile
 12517                           
 12518                           ;interrupts.c: 23:     INTCONbits.GIE=1;
 12519  1084  178B               	bsf	11,7	;volatile
 12520                           
 12521                           ;interrupts.c: 24:     INTCONbits.PEIE=1;
 12522  1085  170B               	bsf	11,6	;volatile
 12523                           
 12524                           ;interrupts.c: 27:     CCP2CONbits.CCP2M=0b0100;
 12525  1086  081D               	movf	29,w	;volatile
 12526  1087  39F0               	andlw	-16
 12527  1088  3804               	iorlw	4
 12528  1089  009D               	movwf	29	;volatile
 12529                           
 12530                           ;interrupts.c: 28:     PIE2bits.CCP2IE=1;
 12531  108A  1683               	bsf	3,5	;RP0=1, select bank1
 12532  108B  140D               	bsf	13,0	;volatile
 12533  108C  0008               	return
 12534  108D                     __end_of_InterruptConfig:	
 12535                           
 12536                           	psect	text56
 12537  187C                     __ptext56:	
 12538 ;; *************** function _Init_I2C *****************
 12539 ;; Defined at:
 12540 ;;		line 18 in file "hw_i2c.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;		None
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;		None
 12545 ;; Return value:  Size  Location     Type
 12546 ;;                  1    wreg      void 
 12547 ;; Registers used:
 12548 ;;		wreg, status,2, status,0
 12549 ;; Tracked objects:
 12550 ;;		On entry : B00/100
 12551 ;;		On exit  : B00/100
 12552 ;;		Unchanged: 800/0
 12553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12554 ;;      Params:         0       0       0       0       0
 12555 ;;      Locals:         0       0       0       0       0
 12556 ;;      Temps:          0       0       0       0       0
 12557 ;;      Totals:         0       0       0       0       0
 12558 ;;Total ram usage:        0 bytes
 12559 ;; Hardware stack levels used:    1
 12560 ;; Hardware stack levels required when called:    4
 12561 ;; This function calls:
 12562 ;;		Nothing
 12563 ;; This function is called by:
 12564 ;;		_main
 12565 ;; This function uses a non-reentrant model
 12566 ;;
 12567                           
 12568                           
 12569                           ;psect for function _Init_I2C
 12570  187C                     _Init_I2C:	
 12571                           
 12572                           ;hw_i2c.c: 21:     SSPCONbits.SSPEN=1;
 12573                           
 12574                           ;incstack = 0
 12575                           ; Regs used in _Init_I2C: [wreg+status,2+status,0]
 12576  187C  1283               	bcf	3,5	;RP0=0, select bank0
 12577  187D  1694               	bsf	20,5	;volatile
 12578                           
 12579                           ;hw_i2c.c: 22:     SSPCONbits.SSPM=0b1000;
 12580  187E  0814               	movf	20,w	;volatile
 12581  187F  39F0               	andlw	-16
 12582  1880  3808               	iorlw	8
 12583  1881  0094               	movwf	20	;volatile
 12584                           
 12585                           ;hw_i2c.c: 23:     SSPADD=19;
 12586  1882  3013               	movlw	19
 12587  1883  1683               	bsf	3,5	;RP0=1, select bank1
 12588  1884  0093               	movwf	19	;volatile
 12589                           
 12590                           ;hw_i2c.c: 24:     SSPCON2=0;
 12591  1885  0191               	clrf	17	;volatile
 12592                           
 12593                           ;hw_i2c.c: 25:     SSPSTAT=0;
 12594  1886  0194               	clrf	20	;volatile
 12595  1887  0008               	return
 12596  1888                     __end_of_Init_I2C:	
 12597                           
 12598                           	psect	text57
 12599  1984                     __ptext57:	
 12600 ;; *************** function _Global_Inits *****************
 12601 ;; Defined at:
 12602 ;;		line 4 in file "inits.c"
 12603 ;; Parameters:    Size  Location     Type
 12604 ;;		None
 12605 ;; Auto vars:     Size  Location     Type
 12606 ;;		None
 12607 ;; Return value:  Size  Location     Type
 12608 ;;                  1    wreg      void 
 12609 ;; Registers used:
 12610 ;;		wreg, status,2, status,0
 12611 ;; Tracked objects:
 12612 ;;		On entry : B00/0
 12613 ;;		On exit  : B00/100
 12614 ;;		Unchanged: 800/0
 12615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12616 ;;      Params:         0       0       0       0       0
 12617 ;;      Locals:         0       0       0       0       0
 12618 ;;      Temps:          0       0       0       0       0
 12619 ;;      Totals:         0       0       0       0       0
 12620 ;;Total ram usage:        0 bytes
 12621 ;; Hardware stack levels used:    1
 12622 ;; Hardware stack levels required when called:    4
 12623 ;; This function calls:
 12624 ;;		Nothing
 12625 ;; This function is called by:
 12626 ;;		_main
 12627 ;; This function uses a non-reentrant model
 12628 ;;
 12629                           
 12630                           
 12631                           ;psect for function _Global_Inits
 12632  1984                     _Global_Inits:	
 12633                           
 12634                           ;inits.c: 7:     OSCCONbits.IRCF=0b111;
 12635                           
 12636                           ;incstack = 0
 12637                           ; Regs used in _Global_Inits: [wreg+status,2+status,0]
 12638  1984  3070               	movlw	112
 12639  1985  1683               	bsf	3,5	;RP0=1, select bank1
 12640  1986  048F               	iorwf	15,f	;volatile
 12641                           
 12642                           ;inits.c: 8:     OSCCONbits.OSTS=0;
 12643  1987  118F               	bcf	15,3	;volatile
 12644                           
 12645                           ;inits.c: 9:     OSCCONbits.SCS=1;
 12646  1988  140F               	bsf	15,0	;volatile
 12647                           
 12648                           ;inits.c: 12:     ANSEL=0x00;
 12649  1989  1703               	bsf	3,6	;RP1=1, select bank3
 12650  198A  0188               	clrf	8	;volatile
 12651                           
 12652                           ;inits.c: 13:     ANSELH=0x00;
 12653  198B  0189               	clrf	9	;volatile
 12654                           
 12655                           ;inits.c: 15:     TRISC0=0;
 12656  198C  1303               	bcf	3,6	;RP1=0, select bank1
 12657  198D  1007               	bcf	7,0	;volatile
 12658                           
 12659                           ;inits.c: 16:     TRISC1=1;
 12660  198E  1487               	bsf	7,1	;volatile
 12661                           
 12662                           ;inits.c: 17:     TRISC2=0;
 12663  198F  1107               	bcf	7,2	;volatile
 12664                           
 12665                           ;inits.c: 18:     TRISC3=1;
 12666  1990  1587               	bsf	7,3	;volatile
 12667                           
 12668                           ;inits.c: 19:     TRISC4=1;
 12669  1991  1607               	bsf	7,4	;volatile
 12670                           
 12671                           ;inits.c: 20:     TRISC5=1;
 12672  1992  1687               	bsf	7,5	;volatile
 12673                           
 12674                           ;inits.c: 21:     TRISC6=0;
 12675  1993  1307               	bcf	7,6	;volatile
 12676                           
 12677                           ;inits.c: 22:     TRISC7=1;
 12678  1994  1787               	bsf	7,7	;volatile
 12679                           
 12680                           ;inits.c: 24:     TRISA0=0;
 12681  1995  1005               	bcf	5,0	;volatile
 12682                           
 12683                           ;inits.c: 25:     TRISA1=0;
 12684  1996  1085               	bcf	5,1	;volatile
 12685                           
 12686                           ;inits.c: 26:     TRISA2=0;
 12687  1997  1105               	bcf	5,2	;volatile
 12688                           
 12689                           ;inits.c: 27:     TRISA3=0;
 12690  1998  1185               	bcf	5,3	;volatile
 12691                           
 12692                           ;inits.c: 28:     TRISA4=0;
 12693  1999  1205               	bcf	5,4	;volatile
 12694                           
 12695                           ;inits.c: 29:     TRISA5=0;
 12696  199A  1285               	bcf	5,5	;volatile
 12697                           
 12698                           ;inits.c: 30:     TRISA6=0;
 12699  199B  1305               	bcf	5,6	;volatile
 12700                           
 12701                           ;inits.c: 31:     TRISA7=0;
 12702  199C  1385               	bcf	5,7	;volatile
 12703                           
 12704                           ;inits.c: 33:     TRISB0=1;
 12705  199D  1406               	bsf	6,0	;volatile
 12706                           
 12707                           ;inits.c: 34:     TRISB1=1;
 12708  199E  1486               	bsf	6,1	;volatile
 12709                           
 12710                           ;inits.c: 35:     TRISB2=1;
 12711  199F  1506               	bsf	6,2	;volatile
 12712                           
 12713                           ;inits.c: 36:     TRISB3=1;
 12714  19A0  1586               	bsf	6,3	;volatile
 12715                           
 12716                           ;inits.c: 37:     TRISB4=0;
 12717  19A1  1206               	bcf	6,4	;volatile
 12718                           
 12719                           ;inits.c: 38:     TRISB5=0;
 12720  19A2  1286               	bcf	6,5	;volatile
 12721                           
 12722                           ;inits.c: 39:     TRISB6=0;
 12723  19A3  1306               	bcf	6,6	;volatile
 12724                           
 12725                           ;inits.c: 40:     TRISB7=0;
 12726  19A4  1386               	bcf	6,7	;volatile
 12727  19A5  0008               	return
 12728  19A6                     __end_of_Global_Inits:	
 12729                           
 12730                           	psect	text58
 12731  14EE                     __ptext58:	
 12732 ;; *************** function _Button_Init *****************
 12733 ;; Defined at:
 12734 ;;		line 38 in file "key-handler.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;  keydef          1    wreg     PTR struct .
 12737 ;;		 -> main@keydef(6), 
 12738 ;; Auto vars:     Size  Location     Type
 12739 ;;  keydef          1    7[BANK0 ] PTR struct .
 12740 ;;		 -> main@keydef(6), 
 12741 ;; Return value:  Size  Location     Type
 12742 ;;                  1    wreg      void 
 12743 ;; Registers used:
 12744 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12745 ;; Tracked objects:
 12746 ;;		On entry : B00/100
 12747 ;;		On exit  : B00/B00
 12748 ;;		Unchanged: 0/0
 12749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12750 ;;      Params:         0       0       0       0       0
 12751 ;;      Locals:         0       1       0       0       0
 12752 ;;      Temps:          0       1       0       0       0
 12753 ;;      Totals:         0       2       0       0       0
 12754 ;;Total ram usage:        2 bytes
 12755 ;; Hardware stack levels used:    1
 12756 ;; Hardware stack levels required when called:    4
 12757 ;; This function calls:
 12758 ;;		Nothing
 12759 ;; This function is called by:
 12760 ;;		_main
 12761 ;; This function uses a non-reentrant model
 12762 ;;
 12763                           
 12764                           
 12765                           ;psect for function _Button_Init
 12766  14EE                     _Button_Init:	
 12767                           
 12768                           ;incstack = 0
 12769                           ; Regs used in _Button_Init: [wreg-fsr0h+status,2+status,0]
 12770                           ;Button_Init@keydef stored from wreg
 12771  14EE  1283               	bcf	3,5	;RP0=0, select bank0
 12772  14EF  00A7               	movwf	Button_Init@keydef
 12773                           
 12774                           ;key-handler.c: 38: void Button_Init (KeyPointerStruct *keydef);key-handler.c: 39: {;key
      +                          -handler.c: 40:     static KeyStruct set_rtc;;key-handler.c: 41:     static KeyStruct se
      +                          t_time1;;key-handler.c: 42:     static KeyStruct set_time2;;key-handler.c: 43:     stati
      +                          c KeyStruct set_right;;key-handler.c: 44:     static KeyStruct set_up;;key-handler.c: 45
      +                          :     static KeyStruct set_down;;key-handler.c: 47:     keydef->set_rtc=&set_rtc;
 12775  14F0  30C5               	movlw	(low (Button_Init@set_rtc| 0))& (0+255)
 12776  14F1  00A6               	movwf	??_Button_Init
 12777  14F2  0827               	movf	Button_Init@keydef,w
 12778  14F3  0084               	movwf	4
 12779  14F4  0826               	movf	??_Button_Init,w
 12780  14F5  1783               	bsf	3,7	;select IRP bank2
 12781  14F6  0080               	movwf	0
 12782                           
 12783                           ;key-handler.c: 48:     keydef->set_time1=&set_time1;
 12784  14F7  30BE               	movlw	(low (Button_Init@set_time1| 0))& (0+255)
 12785  14F8  00A6               	movwf	??_Button_Init
 12786  14F9  0A27               	incf	Button_Init@keydef,w
 12787  14FA  0084               	movwf	4
 12788  14FB  0826               	movf	??_Button_Init,w
 12789  14FC  0080               	movwf	0
 12790                           
 12791                           ;key-handler.c: 49:     keydef->set_time2=&set_time2;
 12792  14FD  30B7               	movlw	(low (Button_Init@set_time2| 0))& (0+255)
 12793  14FE  00A6               	movwf	??_Button_Init
 12794  14FF  0827               	movf	Button_Init@keydef,w
 12795  1500  3E02               	addlw	2
 12796  1501  0084               	movwf	4
 12797  1502  0826               	movf	??_Button_Init,w
 12798  1503  0080               	movwf	0
 12799                           
 12800                           ;key-handler.c: 50:     keydef->set_right=&set_right;
 12801  1504  30B0               	movlw	(low (Button_Init@set_right| 0))& (0+255)
 12802  1505  00A6               	movwf	??_Button_Init
 12803  1506  0827               	movf	Button_Init@keydef,w
 12804  1507  3E03               	addlw	3
 12805  1508  0084               	movwf	4
 12806  1509  0826               	movf	??_Button_Init,w
 12807  150A  0080               	movwf	0
 12808                           
 12809                           ;key-handler.c: 51:     keydef->set_up=&set_up;
 12810  150B  30CF               	movlw	(low (Button_Init@set_up| (0+256)))& (0+255)
 12811  150C  00A6               	movwf	??_Button_Init
 12812  150D  0827               	movf	Button_Init@keydef,w
 12813  150E  3E04               	addlw	4
 12814  150F  0084               	movwf	4
 12815  1510  0826               	movf	??_Button_Init,w
 12816  1511  0080               	movwf	0
 12817                           
 12818                           ;key-handler.c: 52:     keydef->set_down=&set_down;
 12819  1512  30C8               	movlw	(low (Button_Init@set_down| (0+256)))& (0+255)
 12820  1513  00A6               	movwf	??_Button_Init
 12821  1514  0827               	movf	Button_Init@keydef,w
 12822  1515  3E05               	addlw	5
 12823  1516  0084               	movwf	4
 12824  1517  0826               	movf	??_Button_Init,w
 12825  1518  0080               	movwf	0
 12826                           
 12827                           ;key-handler.c: 54:     set_rtc.pin=0;
 12828  1519  1683               	bsf	3,5	;RP0=1, select bank1
 12829  151A  01C6               	clrf	(Button_Init@set_rtc^(0+128)+1)
 12830                           
 12831                           ;key-handler.c: 55:     set_rtc.port=&PORTB;
 12832  151B  3000               	movlw	0
 12833  151C  00C9               	movwf	((low ((Button_Init@set_rtc| 0+3))+1))^(0+128)
 12834  151D  3006               	movlw	6
 12835  151E  00C8               	movwf	(low ((Button_Init@set_rtc| 0+3)))^(0+128)
 12836                           
 12837                           ;key-handler.c: 56:     set_rtc.button_short_function=k_set_rtc_short;
 12838  151F  01CA               	clrf	(Button_Init@set_rtc^(0+128)+5)
 12839                           
 12840                           ;key-handler.c: 57:     set_rtc.button_long_function=k_set_rtc_long;
 12841  1520  01CB               	clrf	(Button_Init@set_rtc^(0+128)+6)
 12842  1521  0ACB               	incf	(Button_Init@set_rtc^(0+128)+6),f
 12843                           
 12844                           ;key-handler.c: 58:     set_rtc.klock=0;
 12845  1522  01C5               	clrf	Button_Init@set_rtc^(0+128)
 12846                           
 12847                           ;key-handler.c: 59:     set_rtc.lock_long_press=0;
 12848  1523  01C7               	clrf	(Button_Init@set_rtc^(0+128)+2)
 12849                           
 12850                           ;key-handler.c: 61:     set_time1.pin=7;
 12851  1524  3007               	movlw	7
 12852  1525  1283               	bcf	3,5	;RP0=0, select bank0
 12853  1526  00A6               	movwf	??_Button_Init
 12854  1527  0826               	movf	??_Button_Init,w
 12855  1528  1683               	bsf	3,5	;RP0=1, select bank1
 12856  1529  00BF               	movwf	(Button_Init@set_time1^(0+128)+1)
 12857                           
 12858                           ;key-handler.c: 62:     set_time1.port=&PORTC;
 12859  152A  3000               	movlw	0
 12860  152B  00C2               	movwf	((low ((Button_Init@set_time1| 0+3))+1))^(0+128)
 12861  152C  3007               	movlw	7
 12862  152D  00C1               	movwf	(low ((Button_Init@set_time1| 0+3)))^(0+128)
 12863                           
 12864                           ;key-handler.c: 63:     set_time1.button_short_function=k_set_time1_short;
 12865  152E  3002               	movlw	2
 12866  152F  1283               	bcf	3,5	;RP0=0, select bank0
 12867  1530  00A6               	movwf	??_Button_Init
 12868  1531  0826               	movf	??_Button_Init,w
 12869  1532  1683               	bsf	3,5	;RP0=1, select bank1
 12870  1533  00C3               	movwf	(Button_Init@set_time1^(0+128)+5)
 12871                           
 12872                           ;key-handler.c: 64:     set_time1.button_long_function=k_set_time1_long;
 12873  1534  3003               	movlw	3
 12874  1535  1283               	bcf	3,5	;RP0=0, select bank0
 12875  1536  00A6               	movwf	??_Button_Init
 12876  1537  0826               	movf	??_Button_Init,w
 12877  1538  1683               	bsf	3,5	;RP0=1, select bank1
 12878  1539  00C4               	movwf	(Button_Init@set_time1^(0+128)+6)
 12879                           
 12880                           ;key-handler.c: 65:     set_time1.klock=0;
 12881  153A  01BE               	clrf	Button_Init@set_time1^(0+128)
 12882                           
 12883                           ;key-handler.c: 66:     set_time1.lock_long_press=0;
 12884  153B  01C0               	clrf	(Button_Init@set_time1^(0+128)+2)
 12885                           
 12886                           ;key-handler.c: 68:     set_time2.pin=5;
 12887  153C  3005               	movlw	5
 12888  153D  1283               	bcf	3,5	;RP0=0, select bank0
 12889  153E  00A6               	movwf	??_Button_Init
 12890  153F  0826               	movf	??_Button_Init,w
 12891  1540  1683               	bsf	3,5	;RP0=1, select bank1
 12892  1541  00B8               	movwf	(Button_Init@set_time2^(0+128)+1)
 12893                           
 12894                           ;key-handler.c: 69:     set_time2.port=&PORTC;
 12895  1542  3000               	movlw	0
 12896  1543  00BB               	movwf	((low ((Button_Init@set_time2| 0+3))+1))^(0+128)
 12897  1544  3007               	movlw	7
 12898  1545  00BA               	movwf	(low ((Button_Init@set_time2| 0+3)))^(0+128)
 12899                           
 12900                           ;key-handler.c: 70:     set_time2.button_short_function=k_set_time2_short;
 12901  1546  3004               	movlw	4
 12902  1547  1283               	bcf	3,5	;RP0=0, select bank0
 12903  1548  00A6               	movwf	??_Button_Init
 12904  1549  0826               	movf	??_Button_Init,w
 12905  154A  1683               	bsf	3,5	;RP0=1, select bank1
 12906  154B  00BC               	movwf	(Button_Init@set_time2^(0+128)+5)
 12907                           
 12908                           ;key-handler.c: 71:     set_time2.button_long_function=k_set_time2_long;
 12909  154C  3005               	movlw	5
 12910  154D  1283               	bcf	3,5	;RP0=0, select bank0
 12911  154E  00A6               	movwf	??_Button_Init
 12912  154F  0826               	movf	??_Button_Init,w
 12913  1550  1683               	bsf	3,5	;RP0=1, select bank1
 12914  1551  00BD               	movwf	(Button_Init@set_time2^(0+128)+6)
 12915                           
 12916                           ;key-handler.c: 72:     set_time2.klock=0;
 12917  1552  01B7               	clrf	Button_Init@set_time2^(0+128)
 12918                           
 12919                           ;key-handler.c: 73:     set_time2.lock_long_press=0;
 12920  1553  01B9               	clrf	(Button_Init@set_time2^(0+128)+2)
 12921                           
 12922                           ;key-handler.c: 75:     set_right.pin=1;
 12923  1554  01B1               	clrf	(Button_Init@set_right^(0+128)+1)
 12924  1555  0AB1               	incf	(Button_Init@set_right^(0+128)+1),f
 12925                           
 12926                           ;key-handler.c: 76:     set_right.port=&PORTB;
 12927  1556  3000               	movlw	0
 12928  1557  00B4               	movwf	((low ((Button_Init@set_right| 0+3))+1))^(0+128)
 12929  1558  3006               	movlw	6
 12930  1559  00B3               	movwf	(low ((Button_Init@set_right| 0+3)))^(0+128)
 12931                           
 12932                           ;key-handler.c: 77:     set_right.button_short_function= k_set_right_short;
 12933  155A  3006               	movlw	6
 12934  155B  1283               	bcf	3,5	;RP0=0, select bank0
 12935  155C  00A6               	movwf	??_Button_Init
 12936  155D  0826               	movf	??_Button_Init,w
 12937  155E  1683               	bsf	3,5	;RP0=1, select bank1
 12938  155F  00B5               	movwf	(Button_Init@set_right^(0+128)+5)
 12939                           
 12940                           ;key-handler.c: 78:     set_right.button_long_function=k_set_right_long;
 12941  1560  3007               	movlw	7
 12942  1561  1283               	bcf	3,5	;RP0=0, select bank0
 12943  1562  00A6               	movwf	??_Button_Init
 12944  1563  0826               	movf	??_Button_Init,w
 12945  1564  1683               	bsf	3,5	;RP0=1, select bank1
 12946  1565  00B6               	movwf	(Button_Init@set_right^(0+128)+6)
 12947                           
 12948                           ;key-handler.c: 79:     set_right.klock=0;
 12949  1566  01B0               	clrf	Button_Init@set_right^(0+128)
 12950                           
 12951                           ;key-handler.c: 80:     set_right.lock_long_press=0;
 12952  1567  01B2               	clrf	(Button_Init@set_right^(0+128)+2)
 12953                           
 12954                           ;key-handler.c: 82:     set_up.pin=3;
 12955  1568  3003               	movlw	3
 12956  1569  1283               	bcf	3,5	;RP0=0, select bank0
 12957  156A  00A6               	movwf	??_Button_Init
 12958  156B  0826               	movf	??_Button_Init,w
 12959  156C  1683               	bsf	3,5	;RP0=1, select bank3
 12960  156D  1703               	bsf	3,6	;RP1=1, select bank3
 12961  156E  00D0               	movwf	(Button_Init@set_up^(0+384)+1)
 12962                           
 12963                           ;key-handler.c: 83:     set_up.port=&PORTB;
 12964  156F  3000               	movlw	0
 12965  1570  00D3               	movwf	((low ((Button_Init@set_up| (0+256)+3))+1))^(0+128)
 12966  1571  3006               	movlw	6
 12967  1572  00D2               	movwf	(low ((Button_Init@set_up| (0+256)+3)))^(0+128)
 12968                           
 12969                           ;key-handler.c: 84:     set_up.button_short_function=k_set_up_short;
 12970  1573  3008               	movlw	8
 12971  1574  1283               	bcf	3,5	;RP0=0, select bank0
 12972  1575  1303               	bcf	3,6	;RP1=0, select bank0
 12973  1576  00A6               	movwf	??_Button_Init
 12974  1577  0826               	movf	??_Button_Init,w
 12975  1578  1683               	bsf	3,5	;RP0=1, select bank3
 12976  1579  1703               	bsf	3,6	;RP1=1, select bank3
 12977  157A  00D4               	movwf	(Button_Init@set_up^(0+384)+5)
 12978                           
 12979                           ;key-handler.c: 85:     set_up.button_long_function=k_set_up_long;
 12980  157B  3009               	movlw	9
 12981  157C  1283               	bcf	3,5	;RP0=0, select bank0
 12982  157D  1303               	bcf	3,6	;RP1=0, select bank0
 12983  157E  00A6               	movwf	??_Button_Init
 12984  157F  0826               	movf	??_Button_Init,w
 12985  1580  1683               	bsf	3,5	;RP0=1, select bank3
 12986  1581  1703               	bsf	3,6	;RP1=1, select bank3
 12987  1582  00D5               	movwf	(Button_Init@set_up^(0+384)+6)
 12988                           
 12989                           ;key-handler.c: 86:     set_up.klock=0;
 12990  1583  01CF               	clrf	Button_Init@set_up^(0+384)
 12991                           
 12992                           ;key-handler.c: 87:     set_up.lock_long_press=0;
 12993  1584  01D1               	clrf	(Button_Init@set_up^(0+384)+2)
 12994                           
 12995                           ;key-handler.c: 89:     set_down.pin=2;
 12996  1585  3002               	movlw	2
 12997  1586  1283               	bcf	3,5	;RP0=0, select bank0
 12998  1587  1303               	bcf	3,6	;RP1=0, select bank0
 12999  1588  00A6               	movwf	??_Button_Init
 13000  1589  0826               	movf	??_Button_Init,w
 13001  158A  1683               	bsf	3,5	;RP0=1, select bank3
 13002  158B  1703               	bsf	3,6	;RP1=1, select bank3
 13003  158C  00C9               	movwf	(Button_Init@set_down^(0+384)+1)
 13004                           
 13005                           ;key-handler.c: 90:     set_down.port=&PORTB;
 13006  158D  3000               	movlw	0
 13007  158E  00CC               	movwf	((low ((Button_Init@set_down| (0+256)+3))+1))^(0+128)
 13008  158F  3006               	movlw	6
 13009  1590  00CB               	movwf	(low ((Button_Init@set_down| (0+256)+3)))^(0+128)
 13010                           
 13011                           ;key-handler.c: 91:     set_down.button_short_function=k_set_down_short;
 13012  1591  300A               	movlw	10
 13013  1592  1283               	bcf	3,5	;RP0=0, select bank0
 13014  1593  1303               	bcf	3,6	;RP1=0, select bank0
 13015  1594  00A6               	movwf	??_Button_Init
 13016  1595  0826               	movf	??_Button_Init,w
 13017  1596  1683               	bsf	3,5	;RP0=1, select bank3
 13018  1597  1703               	bsf	3,6	;RP1=1, select bank3
 13019  1598  00CD               	movwf	(Button_Init@set_down^(0+384)+5)
 13020                           
 13021                           ;key-handler.c: 92:     set_down.button_long_function=k_set_down_long;
 13022  1599  300B               	movlw	11
 13023  159A  1283               	bcf	3,5	;RP0=0, select bank0
 13024  159B  1303               	bcf	3,6	;RP1=0, select bank0
 13025  159C  00A6               	movwf	??_Button_Init
 13026  159D  0826               	movf	??_Button_Init,w
 13027  159E  1683               	bsf	3,5	;RP0=1, select bank3
 13028  159F  1703               	bsf	3,6	;RP1=1, select bank3
 13029  15A0  00CE               	movwf	(Button_Init@set_down^(0+384)+6)
 13030                           
 13031                           ;key-handler.c: 93:     set_down.klock=0;
 13032  15A1  01C8               	clrf	Button_Init@set_down^(0+384)
 13033                           
 13034                           ;key-handler.c: 94:     set_down.lock_long_press=0;
 13035  15A2  01CA               	clrf	(Button_Init@set_down^(0+384)+2)
 13036  15A3  0008               	return
 13037  15A4                     __end_of_Button_Init:	
 13038                           
 13039                           	psect	text59
 13040  13C5                     __ptext59:	
 13041 ;; *************** function _ISR *****************
 13042 ;; Defined at:
 13043 ;;		line 39 in file "interrupts.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;		None
 13046 ;; Auto vars:     Size  Location     Type
 13047 ;;  pulse_time      2    4[BANK0 ] unsigned int 
 13048 ;; Return value:  Size  Location     Type
 13049 ;;                  1    wreg      void 
 13050 ;; Registers used:
 13051 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 300/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13057 ;;      Params:         0       0       0       0       0
 13058 ;;      Locals:         0       2       0       0       0
 13059 ;;      Temps:          0       4       0       0       0
 13060 ;;      Totals:         0       6       0       0       0
 13061 ;;Total ram usage:        6 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:    3
 13064 ;; This function calls:
 13065 ;;		_ManchesterDecode
 13066 ;;		i1_Display7SegmentText
 13067 ;; This function is called by:
 13068 ;;		Interrupt level 1
 13069 ;; This function uses a non-reentrant model
 13070 ;;
 13071                           
 13072                           
 13073                           ;psect for function _ISR
 13074  13C5                     _ISR:	
 13075                           
 13076                           ;interrupts.c: 41:     static unsigned char edge_dir, set_flag, display_timer;;interrupt
      +                          s.c: 42:     unsigned int pulse_time;;interrupts.c: 50:     if (TMR0IE && TMR0IF)
 13077  13C5  1A8B               	btfsc	11,5	;volatile
 13078  13C6  1D0B               	btfss	11,2	;volatile
 13079  13C7  2BFA               	goto	i1l6022
 13080                           
 13081                           ;interrupts.c: 51:     {;interrupts.c: 52:         if(display_timer>15 && g_display_cont
      +                          roll==1)
 13082  13C8  3010               	movlw	16
 13083  13C9  1683               	bsf	3,5	;RP0=1, select bank1
 13084  13CA  022A               	subwf	ISR@display_timer^(0+128),w
 13085  13CB  1C03               	skipc
 13086  13CC  2BDE               	goto	i1l6012
 13087  13CD  032D               	decf	_g_display_controll^(0+128),w	;volatile
 13088  13CE  1D03               	btfss	3,2
 13089  13CF  2BDE               	goto	i1l6012
 13090                           
 13091                           ;interrupts.c: 53:         {;interrupts.c: 54:             Display7SegmentText(&g_displa
      +                          y_text[0],g_decimal_point);
 13092  13D0  082C               	movf	_g_decimal_point^(0+128),w
 13093  13D1  1283               	bcf	3,5	;RP0=0, select bank0
 13094  13D2  00A0               	movwf	??_ISR
 13095  13D3  0820               	movf	??_ISR,w
 13096  13D4  00FB               	movwf	i1Display7SegmentText@decimal_point
 13097  13D5  30CC               	movlw	(low (_g_display_text| 0))& (0+255)
 13098  13D6  160A  118A  2164  160A  118A  	fcall	i1_Display7SegmentText
 13099                           
 13100                           ;interrupts.c: 55:             display_timer=0;
 13101  13DB  1683               	bsf	3,5	;RP0=1, select bank1
 13102  13DC  01AA               	clrf	ISR@display_timer^(0+128)
 13103                           
 13104                           ;interrupts.c: 57:         }else
 13105  13DD  2BE4               	goto	i1l163
 13106  13DE                     i1l6012:	
 13107                           
 13108                           ;interrupts.c: 58:         {;interrupts.c: 59:             display_timer++;
 13109  13DE  3001               	movlw	1
 13110  13DF  1283               	bcf	3,5	;RP0=0, select bank0
 13111  13E0  00A0               	movwf	??_ISR
 13112  13E1  0820               	movf	??_ISR,w
 13113  13E2  1683               	bsf	3,5	;RP0=1, select bank1
 13114  13E3  07AA               	addwf	ISR@display_timer^(0+128),f
 13115  13E4                     i1l163:	
 13116                           ;interrupts.c: 60:         }
 13117                           
 13118                           
 13119                           ;interrupts.c: 62:         if(g_button_timer)
 13120  13E4  0820               	movf	_g_button_timer^(0+128),w	;volatile
 13121  13E5  0421               	iorwf	(_g_button_timer+1)^(0+128),w	;volatile
 13122  13E6  1903               	btfsc	3,2
 13123  13E7  2BEE               	goto	i1l6016
 13124                           
 13125                           ;interrupts.c: 63:         {;interrupts.c: 64:             g_button_timer--;
 13126  13E8  3001               	movlw	1
 13127  13E9  02A0               	subwf	_g_button_timer^(0+128),f	;volatile
 13128  13EA  3000               	movlw	0
 13129  13EB  1C03               	skipc
 13130  13EC  03A1               	decf	(_g_button_timer+1)^(0+128),f	;volatile
 13131  13ED  02A1               	subwf	(_g_button_timer+1)^(0+128),f	;volatile
 13132  13EE                     i1l6016:	
 13133                           
 13134                           ;interrupts.c: 67:         if(g_generic_timer)
 13135  13EE  1283               	bcf	3,5	;RP0=0, select bank0
 13136  13EF  0859               	movf	_g_generic_timer,w	;volatile
 13137  13F0  045A               	iorwf	_g_generic_timer+1,w	;volatile
 13138  13F1  1903               	btfsc	3,2
 13139  13F2  2BF9               	goto	i1l6020
 13140                           
 13141                           ;interrupts.c: 68:         {;interrupts.c: 69:             g_generic_timer--;
 13142  13F3  3001               	movlw	1
 13143  13F4  02D9               	subwf	_g_generic_timer,f	;volatile
 13144  13F5  3000               	movlw	0
 13145  13F6  1C03               	skipc
 13146  13F7  03DA               	decf	_g_generic_timer+1,f	;volatile
 13147  13F8  02DA               	subwf	_g_generic_timer+1,f	;volatile
 13148  13F9                     i1l6020:	
 13149                           
 13150                           ;interrupts.c: 72:         TMR0IF=0;
 13151  13F9  110B               	bcf	11,2	;volatile
 13152  13FA                     i1l6022:	
 13153                           
 13154                           ;interrupts.c: 81:     if(CCP2IF && CCP2IE)
 13155  13FA  1C0D               	btfss	13,0	;volatile
 13156  13FB  2C2B               	goto	i1l6046
 13157  13FC  1683               	bsf	3,5	;RP0=1, select bank1
 13158  13FD  1C0D               	btfss	13,0	;volatile
 13159  13FE  2C2B               	goto	i1l6046
 13160                           
 13161                           ;interrupts.c: 82:     {;interrupts.c: 83:         g_reciver_ccp2_isr_fire_flag=1;
 13162  13FF  3001               	movlw	1
 13163  1400  1283               	bcf	3,5	;RP0=0, select bank0
 13164  1401  00A0               	movwf	??_ISR
 13165  1402  0820               	movf	??_ISR,w
 13166  1403  1683               	bsf	3,5	;RP0=1, select bank1
 13167  1404  00AE               	movwf	_g_reciver_ccp2_isr_fire_flag^(0+128)	;volatile
 13168                           
 13169                           ;interrupts.c: 85:         if(edge_dir==0)
 13170  1405  0851               	movf	ISR@edge_dir^(0+128),w
 13171  1406  1D03               	btfss	3,2
 13172  1407  2C11               	goto	i1l6034
 13173                           
 13174                           ;interrupts.c: 86:         {;interrupts.c: 87:             CCP2CONbits.CCP2M=0b0101;
 13175  1408  1283               	bcf	3,5	;RP0=0, select bank0
 13176  1409  081D               	movf	29,w	;volatile
 13177  140A  39F0               	andlw	-16
 13178  140B  3805               	iorlw	5
 13179  140C  009D               	movwf	29	;volatile
 13180                           
 13181                           ;interrupts.c: 88:             edge_dir=1;
 13182  140D  1683               	bsf	3,5	;RP0=1, select bank1
 13183  140E  01D1               	clrf	ISR@edge_dir^(0+128)
 13184  140F  0AD1               	incf	ISR@edge_dir^(0+128),f
 13185                           
 13186                           ;interrupts.c: 90:         }else
 13187  1410  2C18               	goto	i1l6038
 13188  1411                     i1l6034:	
 13189                           
 13190                           ;interrupts.c: 91:         {;interrupts.c: 92:             CCP2CONbits.CCP2M=0b0100;
 13191  1411  1283               	bcf	3,5	;RP0=0, select bank0
 13192  1412  081D               	movf	29,w	;volatile
 13193  1413  39F0               	andlw	-16
 13194  1414  3804               	iorlw	4
 13195  1415  009D               	movwf	29	;volatile
 13196                           
 13197                           ;interrupts.c: 93:             edge_dir=0;
 13198  1416  1683               	bsf	3,5	;RP0=1, select bank1
 13199  1417  01D1               	clrf	ISR@edge_dir^(0+128)
 13200  1418                     i1l6038:	
 13201                           
 13202                           ;interrupts.c: 96:         pulse_time=CCPR2;
 13203  1418  1283               	bcf	3,5	;RP0=0, select bank0
 13204  1419  081C               	movf	28,w	;volatile
 13205  141A  00A5               	movwf	ISR@pulse_time+1
 13206  141B  081B               	movf	27,w	;volatile
 13207  141C  00A4               	movwf	ISR@pulse_time
 13208                           
 13209                           ;interrupts.c: 98:         ManchesterDecode(&edge_dir,&pulse_time);
 13210  141D  3024               	movlw	(low (ISR@pulse_time| 0))& (0+255)
 13211  141E  00A0               	movwf	??_ISR
 13212  141F  0820               	movf	??_ISR,w
 13213  1420  00F3               	movwf	ManchesterDecode@pulse_time
 13214  1421  30D1               	movlw	(low (ISR@edge_dir| 0))& (0+255)
 13215  1422  120A  158A  220B  160A  118A  	fcall	_ManchesterDecode
 13216                           
 13217                           ;interrupts.c: 100:         TMR1=0;
 13218  1427  1283               	bcf	3,5	;RP0=0, select bank0
 13219  1428  018E               	clrf	14	;volatile
 13220  1429  018F               	clrf	15	;volatile
 13221                           
 13222                           ;interrupts.c: 101:         CCP2IF=0;
 13223  142A  100D               	bcf	13,0	;volatile
 13224  142B                     i1l6046:	
 13225                           
 13226                           ;interrupts.c: 110:     if(CCP1IF && CCP1IE)
 13227  142B  1283               	bcf	3,5	;RP0=0, select bank0
 13228  142C  1D0C               	btfss	12,2	;volatile
 13229  142D  2C4E               	goto	i1l172
 13230  142E  1683               	bsf	3,5	;RP0=1, select bank1
 13231  142F  1D0C               	btfss	12,2	;volatile
 13232  1430  2C4E               	goto	i1l172
 13233                           
 13234                           ;interrupts.c: 111:     {;interrupts.c: 112:         if(set_flag)
 13235  1431  082B               	movf	ISR@set_flag^(0+128),w
 13236  1432  1903               	btfsc	3,2
 13237  1433  2C3C               	goto	i1l6056
 13238                           
 13239                           ;interrupts.c: 113:         {;interrupts.c: 114:             CCP1CONbits.CCP1M=0b1000;
 13240  1434  1283               	bcf	3,5	;RP0=0, select bank0
 13241  1435  0817               	movf	23,w	;volatile
 13242  1436  39F0               	andlw	-16
 13243  1437  3808               	iorlw	8
 13244  1438  0097               	movwf	23	;volatile
 13245                           
 13246                           ;interrupts.c: 115:             set_flag=0;
 13247  1439  1683               	bsf	3,5	;RP0=1, select bank1
 13248  143A  01AB               	clrf	ISR@set_flag^(0+128)
 13249                           
 13250                           ;interrupts.c: 116:         }else
 13251  143B  2C44               	goto	i1l6060
 13252  143C                     i1l6056:	
 13253                           
 13254                           ;interrupts.c: 117:         {;interrupts.c: 118:             CCP1CONbits.CCP1M=0b1001;
 13255  143C  1283               	bcf	3,5	;RP0=0, select bank0
 13256  143D  0817               	movf	23,w	;volatile
 13257  143E  39F0               	andlw	-16
 13258  143F  3809               	iorlw	9
 13259  1440  0097               	movwf	23	;volatile
 13260                           
 13261                           ;interrupts.c: 119:             set_flag=1;
 13262  1441  1683               	bsf	3,5	;RP0=1, select bank1
 13263  1442  01AB               	clrf	ISR@set_flag^(0+128)
 13264  1443  0AAB               	incf	ISR@set_flag^(0+128),f
 13265  1444                     i1l6060:	
 13266                           
 13267                           ;interrupts.c: 122:         CCPR1=g_pwm_freq;
 13268  1444  0823               	movf	(_g_pwm_freq+1)^(0+128),w	;volatile
 13269  1445  1283               	bcf	3,5	;RP0=0, select bank0
 13270  1446  0096               	movwf	22	;volatile
 13271  1447  1683               	bsf	3,5	;RP0=1, select bank1
 13272  1448  0822               	movf	_g_pwm_freq^(0+128),w	;volatile
 13273  1449  1283               	bcf	3,5	;RP0=0, select bank0
 13274  144A  0095               	movwf	21	;volatile
 13275                           
 13276                           ;interrupts.c: 123:         TMR1=0;
 13277  144B  018E               	clrf	14	;volatile
 13278  144C  018F               	clrf	15	;volatile
 13279                           
 13280                           ;interrupts.c: 124:         CCP1IF=0;
 13281  144D  110C               	bcf	12,2	;volatile
 13282  144E                     i1l172:	
 13283  144E  1283               	bcf	3,5	;RP0=0, select bank0
 13284  144F  0823               	movf	??_ISR+3,w
 13285  1450  008A               	movwf	10
 13286  1451  0822               	movf	??_ISR+2,w
 13287  1452  0084               	movwf	4
 13288  1453  0E21               	swapf	(??_ISR+1)^0,w
 13289  1454  0083               	movwf	3
 13290  1455  0EFE               	swapf	126,f
 13291  1456  0E7E               	swapf	126,w
 13292  1457  0009               	retfie
 13293  1458                     __end_of_ISR:	
 13294                           
 13295                           	psect	intentry
 13296  0004                     __pintentry:	
 13297                           ;incstack = 0
 13298 ;; hardware stack exceeded
 13299                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13300                           
 13301  0004                     interrupt_function:	
 13302  007E                     saved_w	set	btemp
 13303  0004  00FE               	movwf	btemp
 13304  0005  0E03               	swapf	3,w
 13305  0006  1283               	bcf	3,5	;RP0=0, select bank0
 13306  0007  1303               	bcf	3,6	;RP1=0, select bank0
 13307  0008  00A1               	movwf	??_ISR+1
 13308  0009  0804               	movf	4,w
 13309  000A  00A2               	movwf	??_ISR+2
 13310  000B  080A               	movf	10,w
 13311  000C  00A3               	movwf	??_ISR+3
 13312  000D  160A  118A  2BC5   	ljmp	_ISR
 13313                           
 13314                           	psect	text60
 13315  1164                     __ptext60:	
 13316 ;; *************** function i1_Display7SegmentText *****************
 13317 ;; Defined at:
 13318 ;;		line 96 in file "display-7-segment.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;  text            1    wreg     PTR unsigned char 
 13321 ;;		 -> g_display_text(4), 
 13322 ;;  decimal_poin    1   11[COMMON] unsigned char 
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;  text            1   13[COMMON] PTR unsigned char 
 13325 ;;		 -> g_display_text(4), 
 13326 ;; Return value:  Size  Location     Type
 13327 ;;                  1    wreg      void 
 13328 ;; Registers used:
 13329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13330 ;; Tracked objects:
 13331 ;;		On entry : 300/0
 13332 ;;		On exit  : 300/0
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13335 ;;      Params:         1       0       0       0       0
 13336 ;;      Locals:         1       0       0       0       0
 13337 ;;      Temps:          1       0       0       0       0
 13338 ;;      Totals:         3       0       0       0       0
 13339 ;;Total ram usage:        3 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    2
 13342 ;; This function calls:
 13343 ;;		i1_OneDigitHandler
 13344 ;; This function is called by:
 13345 ;;		_ISR
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           
 13350                           ;psect for function i1_Display7SegmentText
 13351  1164                     i1_Display7SegmentText:	
 13352                           
 13353                           ;incstack = 0
 13354 ;; hardware stack exceeded
 13355                           ; Regs used in i1_Display7SegmentText: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13356                           ;i1Display7SegmentText@text stored from wreg
 13357  1164  00FD               	movwf	i1Display7SegmentText@text
 13358                           
 13359                           ;display-7-segment.c: 96: void Display7SegmentText(unsigned char *text, unsigned char de
      +                          cimal_point);display-7-segment.c: 97: {;display-7-segment.c: 98:     static unsigned cha
      +                          r enable_digit=1;;display-7-segment.c: 100:     if(enable_digit<=1)
 13360  1165  3002               	movlw	2
 13361  1166  025E               	subwf	Display7SegmentText@enable_digit,w
 13362  1167  1803               	skipnc
 13363  1168  297F               	goto	i1l5970
 13364                           
 13365                           ;display-7-segment.c: 101:     {;display-7-segment.c: 102:         if(decimal_point & 0b
      +                          1000)
 13366  1169  1DFB               	btfss	i1Display7SegmentText@decimal_point,3
 13367  116A  2970               	goto	i1l5966
 13368                           
 13369                           ;display-7-segment.c: 103:         {;display-7-segment.c: 104:             OneDigitHandl
      +                          er(*text,1,1);
 13370  116B  01F6               	clrf	i1OneDigitHandler@digit_number
 13371  116C  0AF6               	incf	i1OneDigitHandler@digit_number,f
 13372  116D  01F7               	clrf	i1OneDigitHandler@decimal_point
 13373  116E  0AF7               	incf	i1OneDigitHandler@decimal_point,f
 13374  116F  2973               	goto	L16
 13375  1170                     i1l5966:	
 13376                           ;display-7-segment.c: 105:         }else
 13377                           
 13378                           
 13379                           ;display-7-segment.c: 106:         {;display-7-segment.c: 107:             OneDigitHandl
      +                          er(*text,1,0);
 13380  1170  01F6               	clrf	i1OneDigitHandler@digit_number
 13381  1171  0AF6               	incf	i1OneDigitHandler@digit_number,f
 13382  1172  01F7               	clrf	i1OneDigitHandler@decimal_point
 13383  1173                     L16:	
 13384  1173  087D               	movf	i1Display7SegmentText@text,w
 13385  1174  0084               	movwf	4
 13386  1175  1383               	bcf	3,7	;select IRP bank0
 13387  1176  0800               	movf	0,w
 13388  1177  160A  158A  22D0   	fcall	i1_OneDigitHandler
 13389                           
 13390                           ;display-7-segment.c: 109:         enable_digit=2;
 13391  117A  3002               	movlw	2
 13392  117B  00FC               	movwf	??i1_Display7SegmentText
 13393  117C  087C               	movf	??i1_Display7SegmentText,w
 13394  117D  00DE               	movwf	Display7SegmentText@enable_digit
 13395                           
 13396                           ;display-7-segment.c: 111:     }else if(enable_digit==2)
 13397  117E  0008               	return
 13398  117F                     i1l5970:	
 13399  117F  3002               	movlw	2
 13400  1180  065E               	xorwf	Display7SegmentText@enable_digit,w
 13401  1181  1D03               	btfss	3,2
 13402  1182  299D               	goto	i1l5980
 13403                           
 13404                           ;display-7-segment.c: 112:     {;display-7-segment.c: 113:         if(decimal_point & 0b
      +                          0100)
 13405  1183  1D7B               	btfss	i1Display7SegmentText@decimal_point,2
 13406  1184  298C               	goto	i1l5976
 13407                           
 13408                           ;display-7-segment.c: 114:         {;display-7-segment.c: 115:             OneDigitHandl
      +                          er(*(text+1),2,1);
 13409  1185  3002               	movlw	2
 13410  1186  00FC               	movwf	??i1_Display7SegmentText
 13411  1187  087C               	movf	??i1_Display7SegmentText,w
 13412  1188  00F6               	movwf	i1OneDigitHandler@digit_number
 13413  1189  01F7               	clrf	i1OneDigitHandler@decimal_point
 13414  118A  0AF7               	incf	i1OneDigitHandler@decimal_point,f
 13415  118B  2991               	goto	L17
 13416  118C                     i1l5976:	
 13417                           ;display-7-segment.c: 116:         }else
 13418                           
 13419                           
 13420                           ;display-7-segment.c: 117:         {;display-7-segment.c: 118:             OneDigitHandl
      +                          er(*(text+1),2,0);
 13421  118C  3002               	movlw	2
 13422  118D  00FC               	movwf	??i1_Display7SegmentText
 13423  118E  087C               	movf	??i1_Display7SegmentText,w
 13424  118F  00F6               	movwf	i1OneDigitHandler@digit_number
 13425  1190  01F7               	clrf	i1OneDigitHandler@decimal_point
 13426  1191                     L17:	
 13427  1191  0A7D               	incf	i1Display7SegmentText@text,w
 13428  1192  0084               	movwf	4
 13429  1193  1383               	bcf	3,7	;select IRP bank0
 13430  1194  0800               	movf	0,w
 13431  1195  160A  158A  22D0   	fcall	i1_OneDigitHandler
 13432                           
 13433                           ;display-7-segment.c: 120:         enable_digit=3;
 13434  1198  3003               	movlw	3
 13435  1199  00FC               	movwf	??i1_Display7SegmentText
 13436  119A  087C               	movf	??i1_Display7SegmentText,w
 13437  119B  00DE               	movwf	Display7SegmentText@enable_digit
 13438                           
 13439                           ;display-7-segment.c: 122:     }else if(enable_digit==3)
 13440  119C  0008               	return
 13441  119D                     i1l5980:	
 13442  119D  3003               	movlw	3
 13443  119E  065E               	xorwf	Display7SegmentText@enable_digit,w
 13444  119F  1D03               	btfss	3,2
 13445  11A0  29BC               	goto	i1l5990
 13446                           
 13447                           ;display-7-segment.c: 123:     {;display-7-segment.c: 124:         if(decimal_point & 0b
      +                          0010)
 13448  11A1  1CFB               	btfss	i1Display7SegmentText@decimal_point,1
 13449  11A2  29AA               	goto	i1l5986
 13450                           
 13451                           ;display-7-segment.c: 125:         {;display-7-segment.c: 126:            OneDigitHandle
      +                          r(*(text+2),3,1);
 13452  11A3  3003               	movlw	3
 13453  11A4  00FC               	movwf	??i1_Display7SegmentText
 13454  11A5  087C               	movf	??i1_Display7SegmentText,w
 13455  11A6  00F6               	movwf	i1OneDigitHandler@digit_number
 13456  11A7  01F7               	clrf	i1OneDigitHandler@decimal_point
 13457  11A8  0AF7               	incf	i1OneDigitHandler@decimal_point,f
 13458  11A9  29AF               	goto	L18
 13459  11AA                     i1l5986:	
 13460                           ;display-7-segment.c: 127:         }else
 13461                           
 13462                           
 13463                           ;display-7-segment.c: 128:         {;display-7-segment.c: 129:            OneDigitHandle
      +                          r(*(text+2),3,0);
 13464  11AA  3003               	movlw	3
 13465  11AB  00FC               	movwf	??i1_Display7SegmentText
 13466  11AC  087C               	movf	??i1_Display7SegmentText,w
 13467  11AD  00F6               	movwf	i1OneDigitHandler@digit_number
 13468  11AE  01F7               	clrf	i1OneDigitHandler@decimal_point
 13469  11AF                     L18:	
 13470  11AF  087D               	movf	i1Display7SegmentText@text,w
 13471  11B0  3E02               	addlw	2
 13472  11B1  0084               	movwf	4
 13473  11B2  1383               	bcf	3,7	;select IRP bank0
 13474  11B3  0800               	movf	0,w
 13475  11B4  160A  158A  22D0   	fcall	i1_OneDigitHandler
 13476                           
 13477                           ;display-7-segment.c: 131:         enable_digit=4;
 13478  11B7  3004               	movlw	4
 13479  11B8  00FC               	movwf	??i1_Display7SegmentText
 13480  11B9  087C               	movf	??i1_Display7SegmentText,w
 13481  11BA  00DE               	movwf	Display7SegmentText@enable_digit
 13482                           
 13483                           ;display-7-segment.c: 133:     }else if(enable_digit>=4)
 13484  11BB  0008               	return
 13485  11BC                     i1l5990:	
 13486  11BC  3004               	movlw	4
 13487  11BD  025E               	subwf	Display7SegmentText@enable_digit,w
 13488  11BE  1C03               	skipc
 13489  11BF  0008               	return
 13490                           
 13491                           ;display-7-segment.c: 134:     {;display-7-segment.c: 135:         if(decimal_point & 0b
      +                          0001)
 13492  11C0  1C7B               	btfss	i1Display7SegmentText@decimal_point,0
 13493  11C1  29C9               	goto	i1l5996
 13494                           
 13495                           ;display-7-segment.c: 136:         {;display-7-segment.c: 137:             OneDigitHandl
      +                          er(*(text+3),4,1);
 13496  11C2  3004               	movlw	4
 13497  11C3  00FC               	movwf	??i1_Display7SegmentText
 13498  11C4  087C               	movf	??i1_Display7SegmentText,w
 13499  11C5  00F6               	movwf	i1OneDigitHandler@digit_number
 13500  11C6  01F7               	clrf	i1OneDigitHandler@decimal_point
 13501  11C7  0AF7               	incf	i1OneDigitHandler@decimal_point,f
 13502  11C8  29CE               	goto	L19
 13503  11C9                     i1l5996:	
 13504                           ;display-7-segment.c: 138:         }else
 13505                           
 13506                           
 13507                           ;display-7-segment.c: 139:         {;display-7-segment.c: 140:             OneDigitHandl
      +                          er(*(text+3),4,0);
 13508  11C9  3004               	movlw	4
 13509  11CA  00FC               	movwf	??i1_Display7SegmentText
 13510  11CB  087C               	movf	??i1_Display7SegmentText,w
 13511  11CC  00F6               	movwf	i1OneDigitHandler@digit_number
 13512  11CD  01F7               	clrf	i1OneDigitHandler@decimal_point
 13513  11CE                     L19:	
 13514  11CE  087D               	movf	i1Display7SegmentText@text,w
 13515  11CF  3E03               	addlw	3
 13516  11D0  0084               	movwf	4
 13517  11D1  1383               	bcf	3,7	;select IRP bank0
 13518  11D2  0800               	movf	0,w
 13519  11D3  160A  158A  22D0   	fcall	i1_OneDigitHandler
 13520                           
 13521                           ;display-7-segment.c: 142:         enable_digit=1;
 13522  11D6  01DE               	clrf	Display7SegmentText@enable_digit
 13523  11D7  0ADE               	incf	Display7SegmentText@enable_digit,f
 13524  11D8  0008               	return
 13525  11D9                     __end_ofi1_Display7SegmentText:	
 13526                           
 13527                           	psect	text61
 13528  1AD0                     __ptext61:	
 13529 ;; *************** function i1_OneDigitHandler *****************
 13530 ;; Defined at:
 13531 ;;		line 147 in file "display-7-segment.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;  sign            1    wreg     unsigned char 
 13534 ;;  digit_number    1    6[COMMON] unsigned char 
 13535 ;;  decimal_poin    1    7[COMMON] unsigned char 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  sign            1   10[COMMON] unsigned char 
 13538 ;; Return value:  Size  Location     Type
 13539 ;;                  1    wreg      void 
 13540 ;; Registers used:
 13541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13542 ;; Tracked objects:
 13543 ;;		On entry : B00/0
 13544 ;;		On exit  : B00/0
 13545 ;;		Unchanged: 800/0
 13546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13547 ;;      Params:         2       0       0       0       0
 13548 ;;      Locals:         1       0       0       0       0
 13549 ;;      Temps:          2       0       0       0       0
 13550 ;;      Totals:         5       0       0       0       0
 13551 ;;Total ram usage:        5 bytes
 13552 ;; Hardware stack levels used:    1
 13553 ;; Hardware stack levels required when called:    1
 13554 ;; This function calls:
 13555 ;;		i1_Disable_All_Digits
 13556 ;;		i1_SetAnodeOutputs
 13557 ;;		i1_SignAnodeData
 13558 ;; This function is called by:
 13559 ;;		i1_Display7SegmentText
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563                           
 13564                           ;psect for function i1_OneDigitHandler
 13565  1AD0                     i1_OneDigitHandler:	
 13566                           
 13567                           ;incstack = 0
 13568 ;; hardware stack exceeded
 13569                           ; Regs used in i1_OneDigitHandler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13570                           ;i1OneDigitHandler@sign stored from wreg
 13571  1AD0  00FA               	movwf	i1OneDigitHandler@sign
 13572                           
 13573                           ;display-7-segment.c: 147: void OneDigitHandler(unsigned char sign, unsigned char digit_
      +                          number, unsigned char decimal_point);display-7-segment.c: 148: {;display-7-segment.c: 15
      +                          0:     Disable_All_Digits();
 13574  1AD1  160A  158A  2058  160A  158A  	fcall	i1_Disable_All_Digits
 13575                           
 13576                           ;display-7-segment.c: 151:     SetAnodeOutputs(SignAnodeData(sign),decimal_point);
 13577  1AD6  0877               	movf	i1OneDigitHandler@decimal_point,w
 13578  1AD7  00F8               	movwf	??i1_OneDigitHandler
 13579  1AD8  0878               	movf	??i1_OneDigitHandler,w
 13580  1AD9  00F3               	movwf	i1SetAnodeOutputs@decimal_point
 13581  1ADA  087A               	movf	i1OneDigitHandler@sign,w
 13582  1ADB  160A  118A  2662  160A  158A  	fcall	i1_SignAnodeData
 13583  1AE0  160A  158A  273A  160A  158A  	fcall	i1_SetAnodeOutputs
 13584                           
 13585                           ;display-7-segment.c: 152:     switch (digit_number)
 13586  1AE5  2AEE               	goto	i1l5574
 13587  1AE6                     i1l492:	
 13588                           ;display-7-segment.c: 153:     {;display-7-segment.c: 154:         case 1 : PORTBbits.RB
      +                          7=0; break;
 13589                           
 13590  1AE6  1386               	bcf	6,7	;volatile
 13591  1AE7  0008               	return
 13592  1AE8                     i1l494:	
 13593                           ;display-7-segment.c: 155:         case 2 : PORTBbits.RB6=0; break;
 13594                           
 13595  1AE8  1306               	bcf	6,6	;volatile
 13596  1AE9  0008               	return
 13597  1AEA                     i1l495:	
 13598                           ;display-7-segment.c: 156:         case 3 : PORTBbits.RB5=0; break;
 13599                           
 13600  1AEA  1286               	bcf	6,5	;volatile
 13601  1AEB  0008               	return
 13602  1AEC                     i1l496:	
 13603                           ;display-7-segment.c: 157:         case 4 : PORTBbits.RB4=0; break;
 13604                           
 13605  1AEC  1206               	bcf	6,4	;volatile
 13606  1AED  0008               	return
 13607  1AEE                     i1l5574:	
 13608  1AEE  0876               	movf	i1OneDigitHandler@digit_number,w
 13609  1AEF  00F8               	movwf	??i1_OneDigitHandler
 13610  1AF0  01F9               	clrf	??i1_OneDigitHandler+1
 13611                           
 13612                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13613                           ; Switch size 1, requested type "simple"
 13614                           ; Number of cases is 1, Range of values is 0 to 0
 13615                           ; switch strategies available:
 13616                           ; Name         Instructions Cycles
 13617                           ; simple_byte            4     3 (average)
 13618                           ; direct_byte           11     8 (fixed)
 13619                           ; jumptable            260     6 (fixed)
 13620                           ;	Chosen strategy is simple_byte
 13621  1AF1  0879               	movf	??i1_OneDigitHandler+1,w
 13622  1AF2  3A00               	xorlw	0	; case 0
 13623  1AF3  1903               	skipnz
 13624  1AF4  2AF6               	goto	i1l8498
 13625  1AF5  2B04               	goto	i1l497
 13626  1AF6                     i1l8498:	
 13627                           
 13628                           ; Switch size 1, requested type "simple"
 13629                           ; Number of cases is 4, Range of values is 1 to 4
 13630                           ; switch strategies available:
 13631                           ; Name         Instructions Cycles
 13632                           ; simple_byte           13     7 (average)
 13633                           ; direct_byte           23    11 (fixed)
 13634                           ; jumptable            263     9 (fixed)
 13635                           ;	Chosen strategy is simple_byte
 13636  1AF6  0878               	movf	??i1_OneDigitHandler,w
 13637  1AF7  3A01               	xorlw	1	; case 1
 13638  1AF8  1903               	skipnz
 13639  1AF9  2AE6               	goto	i1l492
 13640  1AFA  3A03               	xorlw	3	; case 2
 13641  1AFB  1903               	skipnz
 13642  1AFC  2AE8               	goto	i1l494
 13643  1AFD  3A01               	xorlw	1	; case 3
 13644  1AFE  1903               	skipnz
 13645  1AFF  2AEA               	goto	i1l495
 13646  1B00  3A07               	xorlw	7	; case 4
 13647  1B01  1903               	skipnz
 13648  1B02  2AEC               	goto	i1l496
 13649  1B03  2B04               	goto	i1l497
 13650  1B04                     i1l497:	
 13651  1B04  0008               	return
 13652  1B05                     __end_ofi1_OneDigitHandler:	
 13653                           
 13654                           	psect	text62
 13655  1662                     __ptext62:	
 13656 ;; *************** function i1_SignAnodeData *****************
 13657 ;; Defined at:
 13658 ;;		line 27 in file "display-7-segment.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  sign            1    wreg     unsigned char 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  sign            1    2[COMMON] unsigned char 
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      unsigned char 
 13665 ;; Registers used:
 13666 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13667 ;; Tracked objects:
 13668 ;;		On entry : B00/0
 13669 ;;		On exit  : B00/0
 13670 ;;		Unchanged: B00/0
 13671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13672 ;;      Params:         0       0       0       0       0
 13673 ;;      Locals:         1       0       0       0       0
 13674 ;;      Temps:          2       0       0       0       0
 13675 ;;      Totals:         3       0       0       0       0
 13676 ;;Total ram usage:        3 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; This function calls:
 13679 ;;		Nothing
 13680 ;; This function is called by:
 13681 ;;		i1_OneDigitHandler
 13682 ;; This function uses a non-reentrant model
 13683 ;;
 13684                           
 13685                           
 13686                           ;psect for function i1_SignAnodeData
 13687  1662                     i1_SignAnodeData:	
 13688                           
 13689                           ;incstack = 0
 13690 ;; hardware stack exceeded
 13691                           ; Regs used in i1_SignAnodeData: [wreg-fsr0h+status,2+status,0]
 13692                           ;i1SignAnodeData@sign stored from wreg
 13693  1662  00F2               	movwf	i1SignAnodeData@sign
 13694                           
 13695                           ;display-7-segment.c: 27: unsigned char SignAnodeData(unsigned char sign);display-7-segm
      +                          ent.c: 28: {;display-7-segment.c: 29:     switch (sign)
 13696  1663  2E9C               	goto	i1l5212
 13697  1664                     i1l5026:	
 13698  1664  30FC               	movlw	252
 13699  1665  0008               	return
 13700  1666                     i1l5030:	
 13701  1666  3060               	movlw	96
 13702  1667  0008               	return
 13703  1668                     i1l5034:	
 13704  1668  30DA               	movlw	218
 13705  1669  0008               	return
 13706  166A                     i1l5038:	
 13707  166A  30F2               	movlw	242
 13708  166B  0008               	return
 13709  166C                     i1l5042:	
 13710  166C  3066               	movlw	102
 13711  166D  0008               	return
 13712  166E                     i1l5046:	
 13713  166E  30B6               	movlw	182
 13714  166F  0008               	return
 13715  1670                     i1l5050:	
 13716  1670  30BE               	movlw	190
 13717  1671  0008               	return
 13718  1672                     i1l5054:	
 13719  1672  30E4               	movlw	228
 13720  1673  0008               	return
 13721  1674                     i1l5058:	
 13722  1674  30FE               	movlw	254
 13723  1675  0008               	return
 13724  1676                     i1l5062:	
 13725  1676  30F6               	movlw	246
 13726  1677  0008               	return
 13727  1678                     i1l5106:	
 13728  1678  30EE               	movlw	238
 13729  1679  0008               	return
 13730  167A                     i1l5110:	
 13731  167A  303E               	movlw	62
 13732  167B  0008               	return
 13733  167C                     i1l5114:	
 13734  167C  309C               	movlw	156
 13735  167D  0008               	return
 13736  167E                     i1l5118:	
 13737  167E  307A               	movlw	122
 13738  167F  0008               	return
 13739  1680                     i1l5122:	
 13740  1680  309E               	movlw	158
 13741  1681  0008               	return
 13742  1682                     i1l5126:	
 13743  1682  308E               	movlw	142
 13744  1683  0008               	return
 13745  1684                     i1l5130:	
 13746  1684  30BC               	movlw	188
 13747  1685  0008               	return
 13748  1686                     i1l5134:	
 13749  1686  306E               	movlw	110
 13750  1687  0008               	return
 13751  1688                     i1l5142:	
 13752  1688  3070               	movlw	112
 13753  1689  0008               	return
 13754  168A                     i1l5150:	
 13755  168A  301C               	movlw	28
 13756  168B  0008               	return
 13757  168C                     i1l5154:	
 13758  168C  30EC               	movlw	236
 13759  168D  0008               	return
 13760  168E                     i1l5158:	
 13761  168E  302A               	movlw	42
 13762  168F  0008               	return
 13763  1690                     i1l5166:	
 13764  1690  3073               	movlw	115
 13765  1691  0008               	return
 13766  1692                     i1l5170:	
 13767  1692  300A               	movlw	10
 13768  1693  0008               	return
 13769  1694                     i1l5178:	
 13770  1694  301E               	movlw	30
 13771  1695  0008               	return
 13772  1696                     i1l5182:	
 13773  1696  307C               	movlw	124
 13774  1697  0008               	return
 13775  1698                     i1l5198:	
 13776  1698  3076               	movlw	118
 13777  1699  0008               	return
 13778  169A                     i1l5206:	
 13779  169A  3000               	movlw	0
 13780  169B  0008               	return
 13781  169C                     i1l5212:	
 13782  169C  0872               	movf	i1SignAnodeData@sign,w
 13783  169D  00F0               	movwf	??i1_SignAnodeData
 13784  169E  01F1               	clrf	??i1_SignAnodeData+1
 13785                           
 13786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13787                           ; Switch size 1, requested type "simple"
 13788                           ; Number of cases is 1, Range of values is 0 to 0
 13789                           ; switch strategies available:
 13790                           ; Name         Instructions Cycles
 13791                           ; simple_byte            4     3 (average)
 13792                           ; direct_byte           11     8 (fixed)
 13793                           ; jumptable            260     6 (fixed)
 13794                           ;	Chosen strategy is simple_byte
 13795  169F  0871               	movf	??i1_SignAnodeData+1,w
 13796  16A0  3A00               	xorlw	0	; case 0
 13797  16A1  1903               	skipnz
 13798  16A2  2EA4               	goto	i1l8500
 13799  16A3  2E9A               	goto	i1l5206
 13800  16A4                     i1l8500:	
 13801                           
 13802                           ; Switch size 1, requested type "simple"
 13803                           ; Number of cases is 46, Range of values is 0 to 122
 13804                           ; switch strategies available:
 13805                           ; Name         Instructions Cycles
 13806                           ; simple_byte          139    70 (average)
 13807                           ; jumptable            260     6 (fixed)
 13808                           ;	Chosen strategy is simple_byte
 13809  16A4  0870               	movf	??i1_SignAnodeData,w
 13810  16A5  3A00               	xorlw	0	; case 0
 13811  16A6  1903               	skipnz
 13812  16A7  2E64               	goto	i1l5026
 13813  16A8  3A01               	xorlw	1	; case 1
 13814  16A9  1903               	skipnz
 13815  16AA  2E66               	goto	i1l5030
 13816  16AB  3A03               	xorlw	3	; case 2
 13817  16AC  1903               	skipnz
 13818  16AD  2E68               	goto	i1l5034
 13819  16AE  3A01               	xorlw	1	; case 3
 13820  16AF  1903               	skipnz
 13821  16B0  2E6A               	goto	i1l5038
 13822  16B1  3A07               	xorlw	7	; case 4
 13823  16B2  1903               	skipnz
 13824  16B3  2E6C               	goto	i1l5042
 13825  16B4  3A01               	xorlw	1	; case 5
 13826  16B5  1903               	skipnz
 13827  16B6  2E6E               	goto	i1l5046
 13828  16B7  3A03               	xorlw	3	; case 6
 13829  16B8  1903               	skipnz
 13830  16B9  2E70               	goto	i1l5050
 13831  16BA  3A01               	xorlw	1	; case 7
 13832  16BB  1903               	skipnz
 13833  16BC  2E72               	goto	i1l5054
 13834  16BD  3A0F               	xorlw	15	; case 8
 13835  16BE  1903               	skipnz
 13836  16BF  2E74               	goto	i1l5058
 13837  16C0  3A01               	xorlw	1	; case 9
 13838  16C1  1903               	skipnz
 13839  16C2  2E76               	goto	i1l5062
 13840  16C3  3A23               	xorlw	35	; case 42
 13841  16C4  1903               	skipnz
 13842  16C5  2E9A               	goto	i1l5206
 13843  16C6  3A1A               	xorlw	26	; case 48
 13844  16C7  1903               	skipnz
 13845  16C8  2E64               	goto	i1l5026
 13846  16C9  3A01               	xorlw	1	; case 49
 13847  16CA  1903               	skipnz
 13848  16CB  2E66               	goto	i1l5030
 13849  16CC  3A03               	xorlw	3	; case 50
 13850  16CD  1903               	skipnz
 13851  16CE  2E68               	goto	i1l5034
 13852  16CF  3A01               	xorlw	1	; case 51
 13853  16D0  1903               	skipnz
 13854  16D1  2E6A               	goto	i1l5038
 13855  16D2  3A07               	xorlw	7	; case 52
 13856  16D3  1903               	skipnz
 13857  16D4  2E6C               	goto	i1l5042
 13858  16D5  3A01               	xorlw	1	; case 53
 13859  16D6  1903               	skipnz
 13860  16D7  2E6E               	goto	i1l5046
 13861  16D8  3A03               	xorlw	3	; case 54
 13862  16D9  1903               	skipnz
 13863  16DA  2E70               	goto	i1l5050
 13864  16DB  3A01               	xorlw	1	; case 55
 13865  16DC  1903               	skipnz
 13866  16DD  2E72               	goto	i1l5054
 13867  16DE  3A0F               	xorlw	15	; case 56
 13868  16DF  1903               	skipnz
 13869  16E0  2E74               	goto	i1l5058
 13870  16E1  3A01               	xorlw	1	; case 57
 13871  16E2  1903               	skipnz
 13872  16E3  2E76               	goto	i1l5062
 13873  16E4  3A58               	xorlw	88	; case 97
 13874  16E5  1903               	skipnz
 13875  16E6  2E78               	goto	i1l5106
 13876  16E7  3A03               	xorlw	3	; case 98
 13877  16E8  1903               	skipnz
 13878  16E9  2E7A               	goto	i1l5110
 13879  16EA  3A01               	xorlw	1	; case 99
 13880  16EB  1903               	skipnz
 13881  16EC  2E7C               	goto	i1l5114
 13882  16ED  3A07               	xorlw	7	; case 100
 13883  16EE  1903               	skipnz
 13884  16EF  2E7E               	goto	i1l5118
 13885  16F0  3A01               	xorlw	1	; case 101
 13886  16F1  1903               	skipnz
 13887  16F2  2E80               	goto	i1l5122
 13888  16F3  3A03               	xorlw	3	; case 102
 13889  16F4  1903               	skipnz
 13890  16F5  2E82               	goto	i1l5126
 13891  16F6  3A01               	xorlw	1	; case 103
 13892  16F7  1903               	skipnz
 13893  16F8  2E84               	goto	i1l5130
 13894  16F9  3A0F               	xorlw	15	; case 104
 13895  16FA  1903               	skipnz
 13896  16FB  2E86               	goto	i1l5134
 13897  16FC  3A01               	xorlw	1	; case 105
 13898  16FD  1903               	skipnz
 13899  16FE  2E66               	goto	i1l5030
 13900  16FF  3A03               	xorlw	3	; case 106
 13901  1700  1903               	skipnz
 13902  1701  2E88               	goto	i1l5142
 13903  1702  3A01               	xorlw	1	; case 107
 13904  1703  1903               	skipnz
 13905  1704  2E86               	goto	i1l5134
 13906  1705  3A07               	xorlw	7	; case 108
 13907  1706  1903               	skipnz
 13908  1707  2E8A               	goto	i1l5150
 13909  1708  3A01               	xorlw	1	; case 109
 13910  1709  1903               	skipnz
 13911  170A  2E8C               	goto	i1l5154
 13912  170B  3A03               	xorlw	3	; case 110
 13913  170C  1903               	skipnz
 13914  170D  2E8E               	goto	i1l5158
 13915  170E  3A01               	xorlw	1	; case 111
 13916  170F  1903               	skipnz
 13917  1710  2E64               	goto	i1l5026
 13918  1711  3A1F               	xorlw	31	; case 112
 13919  1712  1903               	skipnz
 13920  1713  2E90               	goto	i1l5166
 13921  1714  3A02               	xorlw	2	; case 114
 13922  1715  1903               	skipnz
 13923  1716  2E92               	goto	i1l5170
 13924  1717  3A01               	xorlw	1	; case 115
 13925  1718  1903               	skipnz
 13926  1719  2E6E               	goto	i1l5046
 13927  171A  3A07               	xorlw	7	; case 116
 13928  171B  1903               	skipnz
 13929  171C  2E94               	goto	i1l5178
 13930  171D  3A01               	xorlw	1	; case 117
 13931  171E  1903               	skipnz
 13932  171F  2E96               	goto	i1l5182
 13933  1720  3A03               	xorlw	3	; case 118
 13934  1721  1903               	skipnz
 13935  1722  2E96               	goto	i1l5182
 13936  1723  3A01               	xorlw	1	; case 119
 13937  1724  1903               	skipnz
 13938  1725  2E96               	goto	i1l5182
 13939  1726  3A0F               	xorlw	15	; case 120
 13940  1727  1903               	skipnz
 13941  1728  2E86               	goto	i1l5134
 13942  1729  3A01               	xorlw	1	; case 121
 13943  172A  1903               	skipnz
 13944  172B  2E98               	goto	i1l5198
 13945  172C  3A03               	xorlw	3	; case 122
 13946  172D  1903               	skipnz
 13947  172E  2E68               	goto	i1l5034
 13948  172F  2E9A               	goto	i1l5206
 13949  1730  0008               	return
 13950  1731                     __end_ofi1_SignAnodeData:	
 13951                           
 13952                           	psect	text63
 13953  1F3A                     __ptext63:	
 13954 ;; *************** function i1_SetAnodeOutputs *****************
 13955 ;; Defined at:
 13956 ;;		line 161 in file "display-7-segment.c"
 13957 ;; Parameters:    Size  Location     Type
 13958 ;;  sign            1    wreg     unsigned char 
 13959 ;;  decimal_poin    1    3[COMMON] unsigned char 
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  sign            1    5[COMMON] unsigned char 
 13962 ;; Return value:  Size  Location     Type
 13963 ;;                  1    wreg      void 
 13964 ;; Registers used:
 13965 ;;		wreg, status,2, status,0
 13966 ;; Tracked objects:
 13967 ;;		On entry : B00/0
 13968 ;;		On exit  : B00/0
 13969 ;;		Unchanged: 800/0
 13970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13971 ;;      Params:         1       0       0       0       0
 13972 ;;      Locals:         1       0       0       0       0
 13973 ;;      Temps:          1       0       0       0       0
 13974 ;;      Totals:         3       0       0       0       0
 13975 ;;Total ram usage:        3 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; This function calls:
 13978 ;;		Nothing
 13979 ;; This function is called by:
 13980 ;;		i1_OneDigitHandler
 13981 ;; This function uses a non-reentrant model
 13982 ;;
 13983                           
 13984                           
 13985                           ;psect for function i1_SetAnodeOutputs
 13986  1F3A                     i1_SetAnodeOutputs:	
 13987                           
 13988                           ;incstack = 0
 13989 ;; hardware stack exceeded
 13990                           ; Regs used in i1_SetAnodeOutputs: [wreg+status,2+status,0]
 13991                           ;i1SetAnodeOutputs@sign stored from wreg
 13992  1F3A  00F5               	movwf	i1SetAnodeOutputs@sign
 13993                           
 13994                           ;display-7-segment.c: 161: void SetAnodeOutputs(unsigned char sign, unsigned char decima
      +                          l_point);display-7-segment.c: 162: {;display-7-segment.c: 164:     if(sign>>7 & 1)
 13995  1F3B  0875               	movf	i1SetAnodeOutputs@sign,w
 13996  1F3C  00F4               	movwf	??i1_SetAnodeOutputs
 13997  1F3D  3007               	movlw	7
 13998  1F3E                     u477_25:	
 13999  1F3E  1003               	clrc
 14000  1F3F  0CF4               	rrf	??i1_SetAnodeOutputs,f
 14001  1F40  3EFF               	addlw	-1
 14002  1F41  1D03               	skipz
 14003  1F42  2F3E               	goto	u477_25
 14004  1F43  1C74               	btfss	??i1_SetAnodeOutputs,0
 14005  1F44  2F47               	goto	i1l500
 14006                           
 14007                           ;display-7-segment.c: 165:     {;display-7-segment.c: 166:         PORTAbits.RA6=1;
 14008  1F45  1705               	bsf	5,6	;volatile
 14009                           
 14010                           ;display-7-segment.c: 167:     }else
 14011  1F46  2F48               	goto	i1l5228
 14012  1F47                     i1l500:	
 14013                           
 14014                           ;display-7-segment.c: 168:     {;display-7-segment.c: 169:         PORTAbits.RA6=0;
 14015  1F47  1305               	bcf	5,6	;volatile
 14016  1F48                     i1l5228:	
 14017                           
 14018                           ;display-7-segment.c: 172:     if(sign>>6 & 1)
 14019  1F48  0875               	movf	i1SetAnodeOutputs@sign,w
 14020  1F49  00F4               	movwf	??i1_SetAnodeOutputs
 14021  1F4A  3006               	movlw	6
 14022  1F4B                     u479_25:	
 14023  1F4B  1003               	clrc
 14024  1F4C  0CF4               	rrf	??i1_SetAnodeOutputs,f
 14025  1F4D  3EFF               	addlw	-1
 14026  1F4E  1D03               	skipz
 14027  1F4F  2F4B               	goto	u479_25
 14028  1F50  1C74               	btfss	??i1_SetAnodeOutputs,0
 14029  1F51  2F54               	goto	i1l502
 14030                           
 14031                           ;display-7-segment.c: 173:     {;display-7-segment.c: 174:         PORTAbits.RA7=1;
 14032  1F52  1785               	bsf	5,7	;volatile
 14033                           
 14034                           ;display-7-segment.c: 175:     }else
 14035  1F53  2F55               	goto	i1l5232
 14036  1F54                     i1l502:	
 14037                           
 14038                           ;display-7-segment.c: 176:     {;display-7-segment.c: 177:         PORTAbits.RA7=0;
 14039  1F54  1385               	bcf	5,7	;volatile
 14040  1F55                     i1l5232:	
 14041                           
 14042                           ;display-7-segment.c: 180:     if(sign>>5 & 1)
 14043  1F55  0875               	movf	i1SetAnodeOutputs@sign,w
 14044  1F56  00F4               	movwf	??i1_SetAnodeOutputs
 14045  1F57  3005               	movlw	5
 14046  1F58                     u481_25:	
 14047  1F58  1003               	clrc
 14048  1F59  0CF4               	rrf	??i1_SetAnodeOutputs,f
 14049  1F5A  3EFF               	addlw	-1
 14050  1F5B  1D03               	skipz
 14051  1F5C  2F58               	goto	u481_25
 14052  1F5D  1C74               	btfss	??i1_SetAnodeOutputs,0
 14053  1F5E  2F61               	goto	i1l504
 14054                           
 14055                           ;display-7-segment.c: 181:     {;display-7-segment.c: 182:         PORTAbits.RA5=1;
 14056  1F5F  1685               	bsf	5,5	;volatile
 14057                           
 14058                           ;display-7-segment.c: 183:     }else
 14059  1F60  2F62               	goto	i1l5236
 14060  1F61                     i1l504:	
 14061                           
 14062                           ;display-7-segment.c: 184:     {;display-7-segment.c: 185:         PORTAbits.RA5=0;
 14063  1F61  1285               	bcf	5,5	;volatile
 14064  1F62                     i1l5236:	
 14065                           
 14066                           ;display-7-segment.c: 188:     if(sign>>4 & 1)
 14067  1F62  0875               	movf	i1SetAnodeOutputs@sign,w
 14068  1F63  00F4               	movwf	??i1_SetAnodeOutputs
 14069  1F64  3004               	movlw	4
 14070  1F65                     u483_25:	
 14071  1F65  1003               	clrc
 14072  1F66  0CF4               	rrf	??i1_SetAnodeOutputs,f
 14073  1F67  3EFF               	addlw	-1
 14074  1F68  1D03               	skipz
 14075  1F69  2F65               	goto	u483_25
 14076  1F6A  1C74               	btfss	??i1_SetAnodeOutputs,0
 14077  1F6B  2F6E               	goto	i1l506
 14078                           
 14079                           ;display-7-segment.c: 189:     {;display-7-segment.c: 190:         PORTAbits.RA4=1;
 14080  1F6C  1605               	bsf	5,4	;volatile
 14081                           
 14082                           ;display-7-segment.c: 191:     }else
 14083  1F6D  2F6F               	goto	i1l5240
 14084  1F6E                     i1l506:	
 14085                           
 14086                           ;display-7-segment.c: 192:     {;display-7-segment.c: 193:         PORTAbits.RA4=0;
 14087  1F6E  1205               	bcf	5,4	;volatile
 14088  1F6F                     i1l5240:	
 14089                           
 14090                           ;display-7-segment.c: 196:     if(sign>>3 & 1)
 14091  1F6F  0875               	movf	i1SetAnodeOutputs@sign,w
 14092  1F70  00F4               	movwf	??i1_SetAnodeOutputs
 14093  1F71  3003               	movlw	3
 14094  1F72                     u485_25:	
 14095  1F72  1003               	clrc
 14096  1F73  0CF4               	rrf	??i1_SetAnodeOutputs,f
 14097  1F74  3EFF               	addlw	-1
 14098  1F75  1D03               	skipz
 14099  1F76  2F72               	goto	u485_25
 14100  1F77  1C74               	btfss	??i1_SetAnodeOutputs,0
 14101  1F78  2F7B               	goto	i1l508
 14102                           
 14103                           ;display-7-segment.c: 197:     {;display-7-segment.c: 198:         PORTAbits.RA3=1;
 14104  1F79  1585               	bsf	5,3	;volatile
 14105                           
 14106                           ;display-7-segment.c: 199:     }else
 14107  1F7A  2F7C               	goto	i1l5244
 14108  1F7B                     i1l508:	
 14109                           
 14110                           ;display-7-segment.c: 200:     {;display-7-segment.c: 201:         PORTAbits.RA3=0;
 14111  1F7B  1185               	bcf	5,3	;volatile
 14112  1F7C                     i1l5244:	
 14113                           
 14114                           ;display-7-segment.c: 204:     if(sign>>2 & 1)
 14115  1F7C  0875               	movf	i1SetAnodeOutputs@sign,w
 14116  1F7D  00F4               	movwf	??i1_SetAnodeOutputs
 14117  1F7E  3002               	movlw	2
 14118  1F7F                     u487_25:	
 14119  1F7F  1003               	clrc
 14120  1F80  0CF4               	rrf	??i1_SetAnodeOutputs,f
 14121  1F81  3EFF               	addlw	-1
 14122  1F82  1D03               	skipz
 14123  1F83  2F7F               	goto	u487_25
 14124  1F84  1C74               	btfss	??i1_SetAnodeOutputs,0
 14125  1F85  2F88               	goto	i1l510
 14126                           
 14127                           ;display-7-segment.c: 205:     {;display-7-segment.c: 206:         PORTAbits.RA2=1;
 14128  1F86  1505               	bsf	5,2	;volatile
 14129                           
 14130                           ;display-7-segment.c: 207:     }else
 14131  1F87  2F89               	goto	i1l5248
 14132  1F88                     i1l510:	
 14133                           
 14134                           ;display-7-segment.c: 208:     {;display-7-segment.c: 209:         PORTAbits.RA2=0;
 14135  1F88  1105               	bcf	5,2	;volatile
 14136  1F89                     i1l5248:	
 14137                           
 14138                           ;display-7-segment.c: 212:     if(sign>>1 & 1)
 14139  1F89  0875               	movf	i1SetAnodeOutputs@sign,w
 14140  1F8A  00F4               	movwf	??i1_SetAnodeOutputs
 14141  1F8B  3001               	movlw	1
 14142  1F8C                     u489_25:	
 14143  1F8C  1003               	clrc
 14144  1F8D  0CF4               	rrf	??i1_SetAnodeOutputs,f
 14145  1F8E  3EFF               	addlw	-1
 14146  1F8F  1D03               	skipz
 14147  1F90  2F8C               	goto	u489_25
 14148  1F91  1C74               	btfss	??i1_SetAnodeOutputs,0
 14149  1F92  2F95               	goto	i1l512
 14150                           
 14151                           ;display-7-segment.c: 213:     {;display-7-segment.c: 214:         PORTAbits.RA1=1;
 14152  1F93  1485               	bsf	5,1	;volatile
 14153                           
 14154                           ;display-7-segment.c: 215:     }else
 14155  1F94  2F96               	goto	i1l5252
 14156  1F95                     i1l512:	
 14157                           
 14158                           ;display-7-segment.c: 216:     {;display-7-segment.c: 217:         PORTAbits.RA1=0;
 14159  1F95  1085               	bcf	5,1	;volatile
 14160  1F96                     i1l5252:	
 14161                           
 14162                           ;display-7-segment.c: 220:     if(decimal_point==1)
 14163  1F96  0373               	decf	i1SetAnodeOutputs@decimal_point,w
 14164  1F97  1D03               	btfss	3,2
 14165  1F98  2F9B               	goto	i1l514
 14166                           
 14167                           ;display-7-segment.c: 221:     {;display-7-segment.c: 222:         PORTAbits.RA0=1;
 14168  1F99  1405               	bsf	5,0	;volatile
 14169                           
 14170                           ;display-7-segment.c: 223:     }else
 14171  1F9A  0008               	return
 14172  1F9B                     i1l514:	
 14173                           
 14174                           ;display-7-segment.c: 224:     {;display-7-segment.c: 225:         PORTAbits.RA0=0;
 14175  1F9B  1005               	bcf	5,0	;volatile
 14176  1F9C  0008               	return
 14177  1F9D                     __end_ofi1_SetAnodeOutputs:	
 14178                           
 14179                           	psect	text64
 14180  1858                     __ptext64:	
 14181 ;; *************** function i1_Disable_All_Digits *****************
 14182 ;; Defined at:
 14183 ;;		line 86 in file "display-7-segment.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;		None
 14186 ;; Auto vars:     Size  Location     Type
 14187 ;;		None
 14188 ;; Return value:  Size  Location     Type
 14189 ;;                  1    wreg      void 
 14190 ;; Registers used:
 14191 ;;		None
 14192 ;; Tracked objects:
 14193 ;;		On entry : B00/0
 14194 ;;		On exit  : B00/0
 14195 ;;		Unchanged: 800/0
 14196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14197 ;;      Params:         0       0       0       0       0
 14198 ;;      Locals:         0       0       0       0       0
 14199 ;;      Temps:          0       0       0       0       0
 14200 ;;      Totals:         0       0       0       0       0
 14201 ;;Total ram usage:        0 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; This function calls:
 14204 ;;		Nothing
 14205 ;; This function is called by:
 14206 ;;		i1_OneDigitHandler
 14207 ;; This function uses a non-reentrant model
 14208 ;;
 14209                           
 14210                           
 14211                           ;psect for function i1_Disable_All_Digits
 14212  1858                     i1_Disable_All_Digits:	
 14213                           
 14214                           ;display-7-segment.c: 88:     PORTBbits.RB7=1;
 14215                           
 14216                           ;incstack = 0
 14217 ;; hardware stack exceeded
 14218                           ; Regs used in i1_Disable_All_Digits: []
 14219  1858  1786               	bsf	6,7	;volatile
 14220                           
 14221                           ;display-7-segment.c: 89:     PORTBbits.RB6=1;
 14222  1859  1706               	bsf	6,6	;volatile
 14223                           
 14224                           ;display-7-segment.c: 90:     PORTBbits.RB5=1;
 14225  185A  1686               	bsf	6,5	;volatile
 14226                           
 14227                           ;display-7-segment.c: 91:     PORTBbits.RB4=1;
 14228  185B  1606               	bsf	6,4	;volatile
 14229  185C  0008               	return
 14230  185D                     __end_ofi1_Disable_All_Digits:	
 14231                           
 14232                           	psect	text65
 14233  0A0B                     __ptext65:	
 14234 ;; *************** function _ManchesterDecode *****************
 14235 ;; Defined at:
 14236 ;;		line 42 in file "manchester_decode.c"
 14237 ;; Parameters:    Size  Location     Type
 14238 ;;  edge_dir        1    wreg     PTR unsigned char 
 14239 ;;		 -> ISR@edge_dir(1), 
 14240 ;;  pulse_time      1    3[COMMON] PTR unsigned int 
 14241 ;;		 -> ISR@pulse_time(2), 
 14242 ;; Auto vars:     Size  Location     Type
 14243 ;;  edge_dir        1    8[COMMON] PTR unsigned char 
 14244 ;;		 -> ISR@edge_dir(1), 
 14245 ;; Return value:  Size  Location     Type
 14246 ;;                  1    wreg      void 
 14247 ;; Registers used:
 14248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14249 ;; Tracked objects:
 14250 ;;		On entry : 300/0
 14251 ;;		On exit  : 300/100
 14252 ;;		Unchanged: 0/0
 14253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14254 ;;      Params:         1       0       0       0       0
 14255 ;;      Locals:         1       0       0       0       0
 14256 ;;      Temps:          4       0       0       0       0
 14257 ;;      Totals:         6       0       0       0       0
 14258 ;;Total ram usage:        6 bytes
 14259 ;; Hardware stack levels used:    1
 14260 ;; Hardware stack levels required when called:    1
 14261 ;; This function calls:
 14262 ;;		i1_FrameBuffer
 14263 ;; This function is called by:
 14264 ;;		_ISR
 14265 ;; This function uses a non-reentrant model
 14266 ;;
 14267                           
 14268                           
 14269                           ;psect for function _ManchesterDecode
 14270  0A0B                     _ManchesterDecode:	
 14271                           
 14272                           ;incstack = 0
 14273 ;; hardware stack exceeded
 14274                           ; Regs used in _ManchesterDecode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14275                           ;ManchesterDecode@edge_dir stored from wreg
 14276  0A0B  00F8               	movwf	ManchesterDecode@edge_dir
 14277                           
 14278                           ;manchester_decode.c: 42: void ManchesterDecode(unsigned char *edge_dir, unsigned int *p
      +                          ulse_time);manchester_decode.c: 43: {;manchester_decode.c: 44:     static unsigned char 
      +                          decoded_byte, bit_pos, data_counter, start_data_flag;;manchester_decode.c: 45:     stati
      +                          c unsigned char next_edge_also_T_flag,sync_flag;;manchester_decode.c: 47:  if(sync_flag=
      +                          =0)
 14279  0A0C  1683               	bsf	3,5	;RP0=1, select bank1
 14280  0A0D  0825               	movf	ManchesterDecode@sync_flag^(0+128),w
 14281  0A0E  1D03               	btfss	3,2
 14282  0A0F  2A34               	goto	i1l5668
 14283                           
 14284                           ;manchester_decode.c: 48:     {;manchester_decode.c: 51:         if((*pulse_time>((80000
      +                          00/4)/300*2)*80/100) && (*pulse_time<((8000000/4)/300*2)*120/100))
 14285  0A10  0873               	movf	ManchesterDecode@pulse_time,w
 14286  0A11  0084               	movwf	4
 14287  0A12  1383               	bcf	3,7	;select IRP bank0
 14288  0A13  0800               	movf	0,w
 14289  0A14  00F4               	movwf	??_ManchesterDecode
 14290  0A15  0A84               	incf	4,f
 14291  0A16  0800               	movf	0,w
 14292  0A17  00F5               	movwf	??_ManchesterDecode+1
 14293  0A18  3029               	movlw	41
 14294  0A19  0275               	subwf	??_ManchesterDecode+1,w
 14295  0A1A  30AA               	movlw	170
 14296  0A1B  1903               	skipnz
 14297  0A1C  0274               	subwf	??_ManchesterDecode,w
 14298  0A1D  1C03               	skipc
 14299  0A1E  0008               	return
 14300  0A1F  0873               	movf	ManchesterDecode@pulse_time,w
 14301  0A20  0084               	movwf	4
 14302  0A21  0800               	movf	0,w
 14303  0A22  00F4               	movwf	??_ManchesterDecode
 14304  0A23  0A84               	incf	4,f
 14305  0A24  0800               	movf	0,w
 14306  0A25  00F5               	movwf	??_ManchesterDecode+1
 14307  0A26  303E               	movlw	62
 14308  0A27  0275               	subwf	??_ManchesterDecode+1,w
 14309  0A28  307E               	movlw	126
 14310  0A29  1903               	skipnz
 14311  0A2A  0274               	subwf	??_ManchesterDecode,w
 14312  0A2B  1803               	skipnc
 14313  0A2C  0008               	return
 14314                           
 14315                           ;manchester_decode.c: 52:         {;manchester_decode.c: 53:             next_edge_also_
      +                          T_flag=0;
 14316  0A2D  01A6               	clrf	ManchesterDecode@next_edge_also_T_flag^(0+128)
 14317                           
 14318                           ;manchester_decode.c: 54:             decoded_byte=0;
 14319  0A2E  01D0               	clrf	ManchesterDecode@decoded_byte^(0+128)
 14320                           
 14321                           ;manchester_decode.c: 55:             bit_pos=0;
 14322  0A2F  01A9               	clrf	ManchesterDecode@bit_pos^(0+128)
 14323                           
 14324                           ;manchester_decode.c: 56:             sync_flag=1;
 14325  0A30  01A5               	clrf	ManchesterDecode@sync_flag^(0+128)
 14326  0A31  0AA5               	incf	ManchesterDecode@sync_flag^(0+128),f
 14327                           
 14328                           ;manchester_decode.c: 57:             data_counter=0;
 14329  0A32  01A8               	clrf	ManchesterDecode@data_counter^(0+128)
 14330  0A33  0008               	return
 14331  0A34                     i1l5668:	
 14332  0A34  0825               	movf	ManchesterDecode@sync_flag^(0+128),w
 14333  0A35  1903               	btfsc	3,2
 14334  0A36  0008               	return
 14335                           
 14336                           ;manchester_decode.c: 67:     {;manchester_decode.c: 69:         if(next_edge_also_T_fla
      +                          g==0)
 14337  0A37  0826               	movf	ManchesterDecode@next_edge_also_T_flag^(0+128),w
 14338  0A38  1D03               	btfss	3,2
 14339  0A39  2A9F               	goto	i1l5694
 14340                           
 14341                           ;manchester_decode.c: 70:         {;manchester_decode.c: 71:             if((*pulse_time
      +                          >(8000000/4)/300*80/100) &&
 14342  0A3A  0873               	movf	ManchesterDecode@pulse_time,w
 14343  0A3B  0084               	movwf	4
 14344  0A3C  1383               	bcf	3,7	;select IRP bank0
 14345  0A3D  0800               	movf	0,w
 14346  0A3E  00F4               	movwf	??_ManchesterDecode
 14347  0A3F  0A84               	incf	4,f
 14348  0A40  0800               	movf	0,w
 14349  0A41  00F5               	movwf	??_ManchesterDecode+1
 14350  0A42  3014               	movlw	20
 14351  0A43  0275               	subwf	??_ManchesterDecode+1,w
 14352  0A44  30D5               	movlw	213
 14353  0A45  1903               	skipnz
 14354  0A46  0274               	subwf	??_ManchesterDecode,w
 14355  0A47  1C03               	skipc
 14356  0A48  2A5A               	goto	i1l5680
 14357  0A49  0873               	movf	ManchesterDecode@pulse_time,w
 14358  0A4A  0084               	movwf	4
 14359  0A4B  0800               	movf	0,w
 14360  0A4C  00F4               	movwf	??_ManchesterDecode
 14361  0A4D  0A84               	incf	4,f
 14362  0A4E  0800               	movf	0,w
 14363  0A4F  00F5               	movwf	??_ManchesterDecode+1
 14364  0A50  301F               	movlw	31
 14365  0A51  0275               	subwf	??_ManchesterDecode+1,w
 14366  0A52  303F               	movlw	63
 14367  0A53  1903               	skipnz
 14368  0A54  0274               	subwf	??_ManchesterDecode,w
 14369  0A55  1803               	skipnc
 14370  0A56  2A5A               	goto	i1l5680
 14371                           
 14372                           ;manchester_decode.c: 73:             {;manchester_decode.c: 74:                     nex
      +                          t_edge_also_T_flag=1;
 14373  0A57  01A6               	clrf	ManchesterDecode@next_edge_also_T_flag^(0+128)
 14374  0A58  0AA6               	incf	ManchesterDecode@next_edge_also_T_flag^(0+128),f
 14375                           
 14376                           ;manchester_decode.c: 75:                     return;
 14377  0A59  0008               	return
 14378  0A5A                     i1l5680:	
 14379  0A5A  0873               	movf	ManchesterDecode@pulse_time,w
 14380  0A5B  0084               	movwf	4
 14381  0A5C  0800               	movf	0,w
 14382  0A5D  00F4               	movwf	??_ManchesterDecode
 14383  0A5E  0A84               	incf	4,f
 14384  0A5F  0800               	movf	0,w
 14385  0A60  00F5               	movwf	??_ManchesterDecode+1
 14386  0A61  3029               	movlw	41
 14387  0A62  0275               	subwf	??_ManchesterDecode+1,w
 14388  0A63  30AA               	movlw	170
 14389  0A64  1903               	skipnz
 14390  0A65  0274               	subwf	??_ManchesterDecode,w
 14391  0A66  1C03               	skipc
 14392  0A67  2A9D               	goto	i1l5690
 14393  0A68  0873               	movf	ManchesterDecode@pulse_time,w
 14394  0A69  0084               	movwf	4
 14395  0A6A  0800               	movf	0,w
 14396  0A6B  00F4               	movwf	??_ManchesterDecode
 14397  0A6C  0A84               	incf	4,f
 14398  0A6D  0800               	movf	0,w
 14399  0A6E  00F5               	movwf	??_ManchesterDecode+1
 14400  0A6F  303E               	movlw	62
 14401  0A70  0275               	subwf	??_ManchesterDecode+1,w
 14402  0A71  307E               	movlw	126
 14403  0A72  1903               	skipnz
 14404  0A73  0274               	subwf	??_ManchesterDecode,w
 14405  0A74  1803               	skipnc
 14406  0A75  2A9D               	goto	i1l5690
 14407                           
 14408                           ;manchester_decode.c: 79:             {;manchester_decode.c: 80:                 if(*edg
      +                          e_dir==0)
 14409  0A76  0878               	movf	ManchesterDecode@edge_dir,w
 14410  0A77  0084               	movwf	4
 14411  0A78  0800               	movf	0,w
 14412  0A79  1D03               	btfss	3,2
 14413  0A7A  2A88               	goto	i1l5688
 14414                           
 14415                           ;manchester_decode.c: 81:                 {;manchester_decode.c: 82:                    
      +                           decoded_byte^=(0x80>>bit_pos);
 14416  0A7B  0A29               	incf	ManchesterDecode@bit_pos^(0+128),w
 14417  0A7C  00F4               	movwf	??_ManchesterDecode
 14418  0A7D  3080               	movlw	128
 14419  0A7E  00F5               	movwf	??_ManchesterDecode+1
 14420  0A7F  3000               	movlw	0
 14421  0A80  00F6               	movwf	??_ManchesterDecode+2
 14422  0A81  2A85               	goto	u538_24
 14423  0A82                     u538_25:	
 14424  0A82  0D76               	rlf	??_ManchesterDecode+2,w
 14425  0A83  0CF6               	rrf	??_ManchesterDecode+2,f
 14426  0A84  0CF5               	rrf	??_ManchesterDecode+1,f
 14427  0A85                     u538_24:	
 14428  0A85  0BF4               	decfsz	??_ManchesterDecode,f
 14429  0A86  2A82               	goto	u538_25
 14430  0A87  2A92               	goto	L20
 14431  0A88                     i1l5688:	
 14432                           ;manchester_decode.c: 83:                 }else
 14433                           
 14434                           
 14435                           ;manchester_decode.c: 84:                 {;manchester_decode.c: 85:                    
      +                           decoded_byte^=(0x00>>bit_pos);
 14436  0A88  0A29               	incf	ManchesterDecode@bit_pos^(0+128),w
 14437  0A89  00F4               	movwf	??_ManchesterDecode
 14438  0A8A  01F5               	clrf	??_ManchesterDecode+1
 14439  0A8B  01F6               	clrf	??_ManchesterDecode+2
 14440  0A8C  2A90               	goto	u539_24
 14441  0A8D                     u539_25:	
 14442  0A8D  0D76               	rlf	??_ManchesterDecode+2,w
 14443  0A8E  0CF6               	rrf	??_ManchesterDecode+2,f
 14444  0A8F  0CF5               	rrf	??_ManchesterDecode+1,f
 14445  0A90                     u539_24:	
 14446  0A90  0BF4               	decfsz	??_ManchesterDecode,f
 14447  0A91  2A8D               	goto	u539_25
 14448  0A92                     L20:	
 14449  0A92  0875               	movf	??_ManchesterDecode+1,w
 14450  0A93  00F7               	movwf	??_ManchesterDecode+3
 14451  0A94  0877               	movf	??_ManchesterDecode+3,w
 14452  0A95  1683               	bsf	3,5	;RP0=1, select bank1
 14453  0A96  1303               	bcf	3,6	;RP1=0, select bank1
 14454  0A97  06D0               	xorwf	ManchesterDecode@decoded_byte^(0+128),f
 14455                           
 14456                           ;manchester_decode.c: 87:                 bit_pos++;
 14457                           
 14458                           ;manchester_decode.c: 86:                 }
 14459  0A98  3001               	movlw	1
 14460  0A99  00F4               	movwf	??_ManchesterDecode
 14461  0A9A  0874               	movf	??_ManchesterDecode,w
 14462  0A9B  07A9               	addwf	ManchesterDecode@bit_pos^(0+128),f
 14463                           
 14464                           ;manchester_decode.c: 89:             }else
 14465  0A9C  2AE3               	goto	i1l5710
 14466  0A9D                     i1l5690:	
 14467                           
 14468                           ;manchester_decode.c: 90:             {;manchester_decode.c: 92:                 sync_fl
      +                          ag=0;
 14469  0A9D  01A5               	clrf	ManchesterDecode@sync_flag^(0+128)
 14470  0A9E  0008               	return
 14471  0A9F                     i1l5694:	
 14472                           
 14473                           ;manchester_decode.c: 97:         {;manchester_decode.c: 98:             if((*pulse_time
      +                          >(8000000/4)/300*80/100) &&
 14474  0A9F  0873               	movf	ManchesterDecode@pulse_time,w
 14475  0AA0  0084               	movwf	4
 14476  0AA1  1383               	bcf	3,7	;select IRP bank0
 14477  0AA2  0800               	movf	0,w
 14478  0AA3  00F4               	movwf	??_ManchesterDecode
 14479  0AA4  0A84               	incf	4,f
 14480  0AA5  0800               	movf	0,w
 14481  0AA6  00F5               	movwf	??_ManchesterDecode+1
 14482  0AA7  3014               	movlw	20
 14483  0AA8  0275               	subwf	??_ManchesterDecode+1,w
 14484  0AA9  30D5               	movlw	213
 14485  0AAA  1903               	skipnz
 14486  0AAB  0274               	subwf	??_ManchesterDecode,w
 14487  0AAC  1C03               	skipc
 14488  0AAD  2A9D               	goto	i1l5690
 14489  0AAE  0873               	movf	ManchesterDecode@pulse_time,w
 14490  0AAF  0084               	movwf	4
 14491  0AB0  0800               	movf	0,w
 14492  0AB1  00F4               	movwf	??_ManchesterDecode
 14493  0AB2  0A84               	incf	4,f
 14494  0AB3  0800               	movf	0,w
 14495  0AB4  00F5               	movwf	??_ManchesterDecode+1
 14496  0AB5  301F               	movlw	31
 14497  0AB6  0275               	subwf	??_ManchesterDecode+1,w
 14498  0AB7  303F               	movlw	63
 14499  0AB8  1903               	skipnz
 14500  0AB9  0274               	subwf	??_ManchesterDecode,w
 14501  0ABA  1803               	skipnc
 14502  0ABB  2A9D               	goto	i1l5690
 14503                           
 14504                           ;manchester_decode.c: 100:             {;manchester_decode.c: 101:                 if(*e
      +                          dge_dir==0)
 14505  0ABC  0878               	movf	ManchesterDecode@edge_dir,w
 14506  0ABD  0084               	movwf	4
 14507  0ABE  0800               	movf	0,w
 14508  0ABF  1D03               	btfss	3,2
 14509  0AC0  2ACE               	goto	i1l5702
 14510                           
 14511                           ;manchester_decode.c: 102:                 {;manchester_decode.c: 103:                  
      +                             decoded_byte^=(0x80>>bit_pos);
 14512  0AC1  0A29               	incf	ManchesterDecode@bit_pos^(0+128),w
 14513  0AC2  00F4               	movwf	??_ManchesterDecode
 14514  0AC3  3080               	movlw	128
 14515  0AC4  00F5               	movwf	??_ManchesterDecode+1
 14516  0AC5  3000               	movlw	0
 14517  0AC6  00F6               	movwf	??_ManchesterDecode+2
 14518  0AC7  2ACB               	goto	u543_24
 14519  0AC8                     u543_25:	
 14520  0AC8  0D76               	rlf	??_ManchesterDecode+2,w
 14521  0AC9  0CF6               	rrf	??_ManchesterDecode+2,f
 14522  0ACA  0CF5               	rrf	??_ManchesterDecode+1,f
 14523  0ACB                     u543_24:	
 14524  0ACB  0BF4               	decfsz	??_ManchesterDecode,f
 14525  0ACC  2AC8               	goto	u543_25
 14526  0ACD  2AD8               	goto	L21
 14527  0ACE                     i1l5702:	
 14528                           ;manchester_decode.c: 104:                 }else
 14529                           
 14530                           
 14531                           ;manchester_decode.c: 105:                 {;manchester_decode.c: 106:                  
      +                             decoded_byte^=(0x00>>bit_pos);
 14532  0ACE  0A29               	incf	ManchesterDecode@bit_pos^(0+128),w
 14533  0ACF  00F4               	movwf	??_ManchesterDecode
 14534  0AD0  01F5               	clrf	??_ManchesterDecode+1
 14535  0AD1  01F6               	clrf	??_ManchesterDecode+2
 14536  0AD2  2AD6               	goto	u544_24
 14537  0AD3                     u544_25:	
 14538  0AD3  0D76               	rlf	??_ManchesterDecode+2,w
 14539  0AD4  0CF6               	rrf	??_ManchesterDecode+2,f
 14540  0AD5  0CF5               	rrf	??_ManchesterDecode+1,f
 14541  0AD6                     u544_24:	
 14542  0AD6  0BF4               	decfsz	??_ManchesterDecode,f
 14543  0AD7  2AD3               	goto	u544_25
 14544  0AD8                     L21:	
 14545  0AD8  0875               	movf	??_ManchesterDecode+1,w
 14546  0AD9  00F7               	movwf	??_ManchesterDecode+3
 14547  0ADA  0877               	movf	??_ManchesterDecode+3,w
 14548  0ADB  1683               	bsf	3,5	;RP0=1, select bank1
 14549  0ADC  1303               	bcf	3,6	;RP1=0, select bank1
 14550  0ADD  06D0               	xorwf	ManchesterDecode@decoded_byte^(0+128),f
 14551                           
 14552                           ;manchester_decode.c: 108:                 bit_pos++;
 14553                           
 14554                           ;manchester_decode.c: 107:                 }
 14555  0ADE  3001               	movlw	1
 14556  0ADF  00F4               	movwf	??_ManchesterDecode
 14557  0AE0  0874               	movf	??_ManchesterDecode,w
 14558  0AE1  07A9               	addwf	ManchesterDecode@bit_pos^(0+128),f
 14559                           
 14560                           ;manchester_decode.c: 109:                 next_edge_also_T_flag=0;
 14561  0AE2  01A6               	clrf	ManchesterDecode@next_edge_also_T_flag^(0+128)
 14562  0AE3                     i1l5710:	
 14563                           ;manchester_decode.c: 111:             }else
 14564                           
 14565                           
 14566                           ;manchester_decode.c: 119:         if(bit_pos>7)
 14567  0AE3  3008               	movlw	8
 14568  0AE4  0229               	subwf	ManchesterDecode@bit_pos^(0+128),w
 14569  0AE5  1C03               	skipc
 14570  0AE6  0008               	return
 14571                           
 14572                           ;manchester_decode.c: 120:         {;manchester_decode.c: 121:             if(decoded_by
      +                          te=='$')
 14573  0AE7  3024               	movlw	36
 14574  0AE8  0650               	xorwf	ManchesterDecode@decoded_byte^(0+128),w
 14575  0AE9  1D03               	btfss	3,2
 14576  0AEA  2AED               	goto	i1l5716
 14577                           
 14578                           ;manchester_decode.c: 122:             {;manchester_decode.c: 123:                 start
      +                          _data_flag=1;
 14579  0AEB  01A7               	clrf	ManchesterDecode@start_data_flag^(0+128)
 14580  0AEC  0AA7               	incf	ManchesterDecode@start_data_flag^(0+128),f
 14581  0AED                     i1l5716:	
 14582                           
 14583                           ;manchester_decode.c: 126:             if(start_data_flag)
 14584  0AED  0827               	movf	ManchesterDecode@start_data_flag^(0+128),w
 14585  0AEE  1903               	btfsc	3,2
 14586  0AEF  2AFD               	goto	i1l5722
 14587                           
 14588                           ;manchester_decode.c: 127:             {;manchester_decode.c: 129:                 Frame
      +                          Buffer(&decoded_byte,1);
 14589  0AF0  01F0               	clrf	i1FrameBuffer@mode
 14590  0AF1  0AF0               	incf	i1FrameBuffer@mode,f
 14591  0AF2  30D0               	movlw	(low (ManchesterDecode@decoded_byte| 0))& (0+255)
 14592  0AF3  120A  158A  2000  120A  158A  	fcall	i1_FrameBuffer
 14593                           
 14594                           ;manchester_decode.c: 130:                 data_counter++;
 14595  0AF8  3001               	movlw	1
 14596  0AF9  00F4               	movwf	??_ManchesterDecode
 14597  0AFA  0874               	movf	??_ManchesterDecode,w
 14598  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
 14599  0AFC  07A8               	addwf	ManchesterDecode@data_counter^(0+128),f
 14600  0AFD                     i1l5722:	
 14601                           
 14602                           ;manchester_decode.c: 133:             decoded_byte=0;
 14603  0AFD  01D0               	clrf	ManchesterDecode@decoded_byte^(0+128)
 14604                           
 14605                           ;manchester_decode.c: 134:             bit_pos=0;
 14606  0AFE  01A9               	clrf	ManchesterDecode@bit_pos^(0+128)
 14607                           
 14608                           ;manchester_decode.c: 136:             if(data_counter>=6)
 14609  0AFF  3006               	movlw	6
 14610  0B00  0228               	subwf	ManchesterDecode@data_counter^(0+128),w
 14611  0B01  1C03               	skipc
 14612  0B02  0008               	return
 14613                           
 14614                           ;manchester_decode.c: 137:             {;manchester_decode.c: 138:                 start
      +                          _data_flag=0;
 14615  0B03  01A7               	clrf	ManchesterDecode@start_data_flag^(0+128)
 14616                           
 14617                           ;manchester_decode.c: 139:                 sync_flag=0;
 14618  0B04  01A5               	clrf	ManchesterDecode@sync_flag^(0+128)
 14619  0B05  0008               	return
 14620  0B06                     __end_of_ManchesterDecode:	
 14621                           
 14622                           	psect	text66
 14623  0800                     __ptext66:	
 14624 ;; *************** function i1_FrameBuffer *****************
 14625 ;; Defined at:
 14626 ;;		line 13 in file "circular_buffer.c"
 14627 ;; Parameters:    Size  Location     Type
 14628 ;;  data            1    wreg     PTR unsigned char 
 14629 ;;		 -> FrameDecode@data(1), ManchesterDecode@decoded_byte(1), 
 14630 ;;  mode            1    0[COMMON] unsigned char 
 14631 ;; Auto vars:     Size  Location     Type
 14632 ;;  data            1    2[COMMON] PTR unsigned char 
 14633 ;;		 -> FrameDecode@data(1), ManchesterDecode@decoded_byte(1), 
 14634 ;; Return value:  Size  Location     Type
 14635 ;;                  1    wreg      unsigned char 
 14636 ;; Registers used:
 14637 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14638 ;; Tracked objects:
 14639 ;;		On entry : 300/100
 14640 ;;		On exit  : 300/0
 14641 ;;		Unchanged: 0/0
 14642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14643 ;;      Params:         1       0       0       0       0
 14644 ;;      Locals:         1       0       0       0       0
 14645 ;;      Temps:          1       0       0       0       0
 14646 ;;      Totals:         3       0       0       0       0
 14647 ;;Total ram usage:        3 bytes
 14648 ;; Hardware stack levels used:    1
 14649 ;; This function calls:
 14650 ;;		Nothing
 14651 ;; This function is called by:
 14652 ;;		_ManchesterDecode
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           
 14657                           ;psect for function i1_FrameBuffer
 14658  0800                     i1_FrameBuffer:	
 14659                           
 14660                           ;incstack = 0
 14661 ;; hardware stack exceeded
 14662                           ; Regs used in i1_FrameBuffer: [wreg-fsr0h+status,2+status,0]
 14663                           ;i1FrameBuffer@data stored from wreg
 14664  0800  00F2               	movwf	i1FrameBuffer@data
 14665                           
 14666                           ;circular_buffer.c: 13: unsigned char FrameBuffer(unsigned char *data,unsigned char mode
      +                          );circular_buffer.c: 14: {;circular_buffer.c: 15:  static unsigned char buffer[30];;circ
      +                          ular_buffer.c: 16:  static unsigned char read_pointer, write_pointer, write_pointer_mem;
      +                          ;circular_buffer.c: 18:  if(mode==1)
 14667  0801  0370               	decf	i1FrameBuffer@mode,w
 14668  0802  1D03               	btfss	3,2
 14669  0803  282A               	goto	i1l5556
 14670                           
 14671                           ;circular_buffer.c: 19:  {;circular_buffer.c: 20:   write_pointer_mem=write_pointer;
 14672  0804  1283               	bcf	3,5	;RP0=0, select bank0
 14673  0805  085C               	movf	FrameBuffer@write_pointer,w
 14674  0806  00F1               	movwf	??i1_FrameBuffer
 14675  0807  0871               	movf	??i1_FrameBuffer,w
 14676  0808  1683               	bsf	3,5	;RP0=1, select bank1
 14677  0809  00AF               	movwf	FrameBuffer@write_pointer_mem^(0+128)
 14678                           
 14679                           ;circular_buffer.c: 21:   write_pointer++;
 14680  080A  3001               	movlw	1
 14681  080B  00F1               	movwf	??i1_FrameBuffer
 14682  080C  0871               	movf	??i1_FrameBuffer,w
 14683  080D  1283               	bcf	3,5	;RP0=0, select bank0
 14684  080E  07DC               	addwf	FrameBuffer@write_pointer,f
 14685                           
 14686                           ;circular_buffer.c: 23:   if(write_pointer==30)
 14687  080F  301E               	movlw	30
 14688  0810  065C               	xorwf	FrameBuffer@write_pointer,w
 14689  0811  1903               	btfsc	3,2
 14690                           
 14691                           ;circular_buffer.c: 24:   {;circular_buffer.c: 25:    write_pointer=0;
 14692  0812  01DC               	clrf	FrameBuffer@write_pointer
 14693                           
 14694                           ;circular_buffer.c: 27:   if(write_pointer==read_pointer)
 14695  0813  085C               	movf	FrameBuffer@write_pointer,w
 14696  0814  065D               	xorwf	FrameBuffer@read_pointer,w
 14697  0815  1D03               	skipz
 14698  0816  281E               	goto	i1l5550
 14699                           
 14700                           ;circular_buffer.c: 28:   {;circular_buffer.c: 29:    write_pointer=write_pointer_mem;
 14701  0817  1683               	bsf	3,5	;RP0=1, select bank1
 14702  0818  082F               	movf	FrameBuffer@write_pointer_mem^(0+128),w
 14703  0819  00F1               	movwf	??i1_FrameBuffer
 14704  081A  0871               	movf	??i1_FrameBuffer,w
 14705  081B  1283               	bcf	3,5	;RP0=0, select bank0
 14706  081C  00DC               	movwf	FrameBuffer@write_pointer
 14707  081D  0008               	return
 14708  081E                     i1l5550:	
 14709                           
 14710                           ;circular_buffer.c: 33:   buffer[write_pointer]=*data;
 14711  081E  0872               	movf	i1FrameBuffer@data,w
 14712  081F  0084               	movwf	4
 14713  0820  1383               	bcf	3,7	;select IRP bank0
 14714  0821  0800               	movf	0,w
 14715  0822  00F1               	movwf	??i1_FrameBuffer
 14716  0823  085C               	movf	FrameBuffer@write_pointer,w
 14717  0824  3E10               	addlw	(low (FrameBuffer@buffer| (0+256)))& (0+255)
 14718  0825  0084               	movwf	4
 14719  0826  0871               	movf	??i1_FrameBuffer,w
 14720  0827  1783               	bsf	3,7	;select IRP bank2
 14721  0828  0080               	movwf	0
 14722  0829  0008               	return
 14723  082A                     i1l5556:	
 14724                           
 14725                           ;circular_buffer.c: 38:  {;circular_buffer.c: 39:   if(write_pointer!=read_pointer)
 14726  082A  1283               	bcf	3,5	;RP0=0, select bank0
 14727  082B  085C               	movf	FrameBuffer@write_pointer,w
 14728  082C  065D               	xorwf	FrameBuffer@read_pointer,w
 14729  082D  1903               	skipnz
 14730  082E  0008               	return
 14731                           
 14732                           ;circular_buffer.c: 40:   {;circular_buffer.c: 41:    read_pointer++;
 14733  082F  3001               	movlw	1
 14734  0830  00F1               	movwf	??i1_FrameBuffer
 14735  0831  0871               	movf	??i1_FrameBuffer,w
 14736  0832  07DD               	addwf	FrameBuffer@read_pointer,f
 14737                           
 14738                           ;circular_buffer.c: 42:    if(read_pointer==30)
 14739  0833  301E               	movlw	30
 14740  0834  065D               	xorwf	FrameBuffer@read_pointer,w
 14741  0835  1903               	btfsc	3,2
 14742                           
 14743                           ;circular_buffer.c: 43:    {;circular_buffer.c: 44:     read_pointer=0;
 14744  0836  01DD               	clrf	FrameBuffer@read_pointer
 14745                           
 14746                           ;circular_buffer.c: 46:    *data=buffer[read_pointer];
 14747  0837  085D               	movf	FrameBuffer@read_pointer,w
 14748  0838  3E10               	addlw	(low (FrameBuffer@buffer| (0+256)))& (0+255)
 14749  0839  0084               	movwf	4
 14750  083A  1783               	bsf	3,7	;select IRP bank2
 14751  083B  0800               	movf	0,w
 14752  083C  00F1               	movwf	??i1_FrameBuffer
 14753  083D  0872               	movf	i1FrameBuffer@data,w
 14754  083E  0084               	movwf	4
 14755  083F  0871               	movf	??i1_FrameBuffer,w
 14756  0840  1383               	bcf	3,7	;select IRP bank0
 14757  0841  0080               	movwf	0
 14758  0842  0008               	return
 14759  0843                     __end_ofi1_FrameBuffer:	
 14760  007E                     btemp	set	126	;btemp
 14761  007E                     wtemp0	set	126


Data Sizes:
    Strings     80
    Constant    35
    Data        1
    BSS         155
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      63
    BANK1            80     20      70
    BANK3            96     25      95
    BANK2            96      0      30

Pointer List with Targets:

    Select_Menu@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Select_Menu@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Select_Menu@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Select_Menu@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Select_Menu@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Select_Menu@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@year(BANK3[8]), 

    Select_Menu@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@day_month(BANK3[8]), 

    Select_Menu@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Init@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Button_Init@keydef.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Menu_Set_Time@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Button_Handler@keydef.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Display_7Seg_Text@text	PTR unsigned char  size(1) Largest target is 5
		 -> STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), 
		 -> STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[5]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    Read_Limit_From_EEprom@limit2.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Read_Limit_From_EEprom@limit2	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Read_Limit_From_EEprom@limit1.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Read_Limit_From_EEprom@limit1	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Write_Limit_To_EEprom@limit2.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Write_Limit_To_EEprom@limit2	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Write_Limit_To_EEprom@limit1.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Write_Limit_To_EEprom@limit1	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Select_Menu@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    Select_Menu@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK3[7]), 

    Select_Menu@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    Menu_Set_Param_Time_Limit@menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Param_Time_Limit@menu	PTR struct MenuParamStruct size(2) Largest target is 9
		 -> Menu_Set_Time@current_menu(BANK1[8]), NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_work_day_1(BANK3[8]), 
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@time_limit_free_day_1(BANK3[8]), Menu_Init@year(BANK3[8]), Menu_Init@day_month(BANK3[8]), 
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Set_Time@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    Menu_Set_Time@menudef.year_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@menudef.day_month_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@menudef.hours_minutes_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Set_Time@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    Menu_Set_Time@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Set_Time@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    Menu_Set_Time@current_menu_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@current_menu_ptr	PTR struct MenuParamStruct size(2) Largest target is 9
		 -> Menu_Set_Time@current_menu(BANK1[8]), NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_work_day_1(BANK3[8]), 
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@time_limit_free_day_1(BANK3[8]), Menu_Init@year(BANK3[8]), Menu_Init@day_month(BANK3[8]), 
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    current_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Show_Time@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    Show_Time@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK3[7]), 

    F1346.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1344.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1342.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1341.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.year_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.day_month_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.hours_minutes_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Init@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    Menu_Init@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Init@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    F1347.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1346.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1345.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1344.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1343.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1342.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1341.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Button_Handler@keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), 

    Button_Handler@keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK3[7]), 

    Button_Handler@keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    Button_Handler@keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    Button_Handler@keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    Button_Handler@keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    Button_Handler@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    Button_Init@keydef.set_down.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_up.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_right.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_time2.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_time1.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_rtc.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), 

    Button_Init@keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK3[7]), 

    Button_Init@keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    Button_Init@keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    Button_Init@keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    Button_Init@keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    Button_Init@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    F1308.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1307.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1306.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1305.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1304.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1303.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    S369$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Key_Press@button.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Key_Press@button	PTR struct . size(2) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), Button_Init@set_up(BANK3[7]), Button_Init@set_right(BANK1[7]), Button_Init@set_time2(BANK1[7]), 
		 -> Button_Init@set_time1(BANK1[7]), Button_Init@set_rtc(BANK1[7]), 

    PCF8583_Set_Date_Time@time_struct_ptr	PTR struct . size(1) Largest target is 7
		 -> Menu_Set_Time@time(BANK1[7]), 

    PCF8583_Read_Time_Date@time_struct_ptr	PTR struct . size(2) Largest target is 7
		 -> Menu_Set_Time@time(BANK1[7]), main@time(BANK3[7]), 

    Display7SegmentText@text	PTR unsigned char  size(1) Largest target is 4
		 -> g_display_text(BANK1[4]), 

    Check_Time_Date@time_limit.time_limit_work_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    S383MenuParamStruct$next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Check_Time_Date@time_limit.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    Check_Time_Date@time_limit.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Check_Time_Date@time_limit	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    Check_Time_Date@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK3[7]), 

    ProcessRCVData@time_limit	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    ProcessRCVData@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK3[7]), 

    ProcessRCVData@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    Check_Event@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    CRC_check@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    FrameDecode@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    ManchesterDecode@edge_dir	PTR unsigned char  size(1) Largest target is 1
		 -> ISR@edge_dir(BANK1[1]), 

    ManchesterDecode@pulse_time	PTR unsigned int  size(1) Largest target is 2
		 -> ISR@pulse_time(BANK0[2]), 

    S392$time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    S392$time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    S392$time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    S392$time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    S392$year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    S392$day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    S392$hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    S376$set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), 

    keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), 

    S376$set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK3[7]), 

    keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK3[7]), 

    S376$set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    S376$set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    S376$set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    S376$set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    CRC16@data_tab_ptr	PTR unsigned char  size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    FrameBuffer@data	PTR unsigned char  size(1) Largest target is 1
		 -> FrameDecode@data(BANK0[1]), ManchesterDecode@decoded_byte(BANK1[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_Display7SegmentText
    i1_Display7SegmentText->i1_OneDigitHandler
    i1_OneDigitHandler->i1_SetAnodeOutputs
    i1_SetAnodeOutputs->i1_SignAnodeData
    _ManchesterDecode->i1_FrameBuffer

Critical Paths under _main in BANK0

    _main->_Select_Menu
    _Select_Menu->_Menu_Set_Time
    _Show_Time->_PCF8583_Read_Time_Date
    _Display_Weekday->_Display_7Seg_Text
    _Menu_Set_Time->_Find_Weekday
    _Write_Limit_To_EEprom->_Write_EEprom
    _PCF8583_Set_Date_Time->_DEC_2_BCD
    _DEC_2_BCD->___lbmod
    _Menu_Set_Param_Time_Limit->___awdiv
    ___awdiv->___awmod
    _Is_Valid_Date->_Is_Leap
    _Is_Leap->___lwmod
    _Find_Weekday->___lwmod
    ___lwmod->___lwdiv
    _Button_Handler->_Key_Press
    _ProcessRCVData->_Check_Time_Date
    _Check_Time_Date->_PCF8583_Read_Time_Date
    _PCF8583_Read_Time_Date->_BCD_2_DEC
    _PCF8583_Write_Byte->_I2C_Master_Write
    _PCF8583_Read_Byte->_I2C_Master_Read
    _BCD_2_DEC->___bmul
    ___bmul->___awmod
    _Check_Event->_PlayRing
    _PlayRing->_Generate_PWM
    ___lwdiv->___wmul
    _Wait_ms->___lmul
    _Generate_PWM->___lldiv
    _Display7SegmentText->_OneDigitHandler
    _OneDigitHandler->_SetAnodeOutputs
    _SetAnodeOutputs->_SignAnodeData
    _FrameDecode->_FrameBuffer
    _CRC_check->_CRC16
    _Menu_Init->_Read_Limit_From_EEprom
    _Read_Limit_From_EEprom->_Read_EEprom

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Select_Menu->_Menu_Set_Time

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   88863
                                             55 BANK0      2     2      0
                                              0 BANK3     25    25      0
                        _Button_Init
                       _Global_Inits
                           _Init_I2C
                    _InterruptConfig
                          _Menu_Init
                     _ProcessRCVData
                        _Select_Menu
 ---------------------------------------------------------------------------------
 (1) _Select_Menu                                          6     4      2   66118
                                             49 BANK0      6     4      2
                     _Button_Handler
                      _Menu_Set_Time
                          _Show_Time
 ---------------------------------------------------------------------------------
 (2) _Show_Time                                            4     3      1   18317
                                             34 BANK0      4     3      1
                     _Button_Handler
                 _Disable_All_Digits
                    _Display_Weekday
             _PCF8583_Read_Time_Date
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _Display_Weekday                                      3     3      0    2869
                                             10 BANK0      3     3      0
                  _Display_7Seg_Text
 ---------------------------------------------------------------------------------
 (2) _Menu_Set_Time                                       25    23      2   45532
                                             44 BANK0      5     3      2
                                              0 BANK1     20    20      0
                     _Button_Handler
                  _Display_7Seg_Text
                       _Find_Weekday
                      _Is_Valid_Date
          _Menu_Set_Param_Time_Limit
             _PCF8583_Read_Time_Date
              _PCF8583_Set_Date_Time
             _Read_Limit_From_EEprom
              _Write_Limit_To_EEprom
                            ___awdiv
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _Write_Limit_To_EEprom                                4     2      2    1524
                                              8 BANK0      4     2      2
                       _Write_EEprom
 ---------------------------------------------------------------------------------
 (4) _Write_EEprom                                         2     1      1     782
                                              6 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _PCF8583_Set_Date_Time                                8     8      0    5163
                                             17 BANK0      8     8      0
                          _DEC_2_BCD
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                 _PCF8583_Write_Byte
 ---------------------------------------------------------------------------------
 (4) _DEC_2_BCD                                            4     4      0    1345
                                             13 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _Menu_Set_Param_Time_Limit                           16    13      3   10562
                                             22 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              7     6      1     772
                                              6 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              5     4      1     511
                                              6 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    3493
                                              6 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    3145
                                             13 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Is_Valid_Date                                        4     1      3    1637
                                             29 BANK0      4     1      3
                            _Is_Leap
 ---------------------------------------------------------------------------------
 (4) _Is_Leap                                              3     1      2     992
                                             26 BANK0      3     1      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _Find_Weekday                                        18    12      6    3693
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     772
                                             20 BANK0      6     2      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Button_Handler                                       3     3      0    1466
                                             16 BANK0      3     3      0
                          _Key_Press
 ---------------------------------------------------------------------------------
 (4) _Key_Press                                           10     8      2     674
                                              6 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _ProcessRCVData                                       4     2      2   19897
                                             42 BANK0      4     2      2
                          _CRC_check
                        _Check_Event
                    _Check_Time_Date
                        _FrameDecode
 ---------------------------------------------------------------------------------
 (2) _Check_Time_Date                                      8     7      1    8884
                                             34 BANK0      8     7      1
             _PCF8583_Read_Time_Date
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1396
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _PCF8583_Read_Time_Date                              13    11      2    6341
                                             21 BANK0     13    11      2
                          _BCD_2_DEC
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                  _PCF8583_Read_Byte
                 _PCF8583_Write_Byte
 ---------------------------------------------------------------------------------
 (4) _PCF8583_Write_Byte                                   4     3      1    1893
                                              8 BANK0      4     3      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _PCF8583_Read_Byte                                    4     4      0    1601
                                             11 BANK0      4     4      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2    1471
                                              6 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      5     5      0      65
                                              6 BANK0      5     5      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _BCD_2_DEC                                            4     4      0     378
                                             17 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     316
                                             13 BANK0      4     3      1
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Check_Event                                          2     2      0    8798
                                             36 BANK0      2     2      0
                  _Display_7Seg_Text
                        _FrameDecode
                           _PlayRing
 ---------------------------------------------------------------------------------
 (3) _PlayRing                                             8     8      0    4601
                                             28 BANK0      8     8      0
                _Display7SegmentText
                       _Generate_PWM
                   _Init_CaptureMode
                   _Init_CompareMode
                            _Wait_ms
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     961
                                             12 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _Wait_ms                                              6     4      2     437
                                             19 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     316
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Init_CompareMode                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Init_CaptureMode                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Generate_PWM                                         8     4      4     542
                                             20 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     421
                                              6 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _Display7SegmentText                                  3     2      1    2491
                                             17 BANK0      3     2      1
                    _OneDigitHandler
 ---------------------------------------------------------------------------------
 (5) _OneDigitHandler                                      5     3      2    1902
                                             12 BANK0      5     3      2
                 _Disable_All_Digits
                    _SetAnodeOutputs
                      _SignAnodeData
 ---------------------------------------------------------------------------------
 (6) _SignAnodeData                                        3     3      0      31
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _SetAnodeOutputs                                      3     2      1     338
                                              9 BANK0      3     2      1
                      _SignAnodeData (ARG)
 ---------------------------------------------------------------------------------
 (2) _FrameDecode                                          7     5      2    1044
                                              9 BANK0      7     5      2
                        _FrameBuffer
 ---------------------------------------------------------------------------------
 (3) _FrameBuffer                                          3     2      1     436
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _Display_7Seg_Text                                    4     3      1    2838
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _CRC_check                                            4     4      0     626
                                             16 BANK0      4     4      0
                              _CRC16
 ---------------------------------------------------------------------------------
 (3) _CRC16                                               10     8      2     429
                                              6 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _Menu_Init                                            2     2      0    1582
                                             11 BANK0      2     2      0
                 _Disable_All_Digits
             _Read_Limit_From_EEprom
 ---------------------------------------------------------------------------------
 (3) _Read_Limit_From_EEprom                               4     2      2    1205
                                              7 BANK0      4     2      2
                        _Read_EEprom
 ---------------------------------------------------------------------------------
 (4) _Read_EEprom                                          1     1      0      31
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Disable_All_Digits                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InterruptConfig                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Global_Inits                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Button_Init                                          2     2      0     222
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  6     6      0    1448
                                              0 BANK0      6     6      0
                   _ManchesterDecode
              i1_Display7SegmentText
 ---------------------------------------------------------------------------------
 (8) i1_Display7SegmentText                                3     2      1     996
                                             11 COMMON     3     2      1
                  i1_OneDigitHandler
 ---------------------------------------------------------------------------------
 (9) i1_OneDigitHandler                                    5     3      2     706
                                              6 COMMON     5     3      2
               i1_Disable_All_Digits
                  i1_SetAnodeOutputs
                    i1_SignAnodeData
 ---------------------------------------------------------------------------------
 (10) i1_SignAnodeData                                     3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) i1_SetAnodeOutputs                                   3     2      1     202
                                              3 COMMON     3     2      1
                    i1_SignAnodeData (ARG)
 ---------------------------------------------------------------------------------
 (10) i1_Disable_All_Digits                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ManchesterDecode                                     6     5      1     421
                                              3 COMMON     6     5      1
                      i1_FrameBuffer
 ---------------------------------------------------------------------------------
 (9) i1_FrameBuffer                                        3     2      1      92
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Button_Init
   _Global_Inits
   _Init_I2C
   _InterruptConfig
   _Menu_Init
     _Disable_All_Digits
     _Read_Limit_From_EEprom
       _Read_EEprom
   _ProcessRCVData
     _CRC_check
       _CRC16
     _Check_Event
       _Display_7Seg_Text
       _FrameDecode
         _FrameBuffer
       _PlayRing
         _Display7SegmentText
           _OneDigitHandler
             _Disable_All_Digits
             _SetAnodeOutputs
               _SignAnodeData (ARG)
             _SignAnodeData
         _Generate_PWM
           ___lldiv
         _Init_CaptureMode
         _Init_CompareMode
         _Wait_ms
           ___lmul
         ___lwdiv
           ___wmul (ARG)
     _Check_Time_Date
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
             ___awmod (ARG)
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       ___wmul
     _FrameDecode
       _FrameBuffer
   _Select_Menu
     _Button_Handler
       _Key_Press
     _Menu_Set_Time
       _Button_Handler
         _Key_Press
       _Display_7Seg_Text
       _Find_Weekday
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         ___wmul
       _Is_Valid_Date
         _Is_Leap
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
       _Menu_Set_Param_Time_Limit
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___lbdiv
         ___lbmod
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
             ___awmod (ARG)
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _PCF8583_Set_Date_Time
         _DEC_2_BCD
           ___lbdiv
           ___lbmod
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _Read_Limit_From_EEprom
         _Read_EEprom
       _Write_Limit_To_EEprom
         _Write_EEprom
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awmod (ARG)
     _Show_Time
       _Button_Handler
         _Key_Press
       _Disable_All_Digits
       _Display_Weekday
         _Display_7Seg_Text
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
             ___awmod (ARG)
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       ___awdiv
         ___awmod (ARG)
       ___awmod

 _ISR (ROOT)
   _ManchesterDecode
     i1_FrameBuffer
   i1_Display7SegmentText
     i1_OneDigitHandler
       i1_Disable_All_Digits
       i1_SetAnodeOutputs
         i1_SignAnodeData (ARG)
       i1_SignAnodeData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     19      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      1E      11       31.2%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     14      46       7       87.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     39      3F       5       78.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     110      12        0.0%
ABS                  0      0     110       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu May 28 22:29:08 2020

                        ??_FrameBuffer 0027                                      pc 0002  
                    i1_OneDigitHandler 1AD0                         ___bmul@product 002F  
                          __CFG_CP$OFF 0000                            _SSPSTATbits 0094  
                                   l25 1C42                                     _RD 0C60  
                                   _WR 0C61                           ___awdiv@sign 0033  
                   __size_of_DEC_2_BCD 001C                                     fsr 0004  
                  ___wmul@multiplicand 0028                     ?i1_OneDigitHandler 0076  
                _Write_Limit_To_EEprom 108D              _Menu_Set_Param_Time_Limit 003A  
             __size_of_OneDigitHandler 0035                                    l500 1FAA  
                                  l510 1FEB                                    l502 1FB7  
                                  l512 1FF8                                    l504 1FC4  
                                  l514 1FFE                                    l506 1FD1  
                                  l275 1DD5                                    l508 1FDE  
                                  l492 1B1B                                    l573 18A0  
                                  l494 1B1D                                    l495 1B1F  
                                  l496 1B21                                    l497 1B39  
                                  l870 18F6                                    l849 1DD3  
                                  l697 0C80                                    l962 194C  
                                  l787 01FE                           __CFG_CPD$OFF 0000  
                                  _ISR 13C5                                    fsr0 0004  
                                  indf 0000                           ___awmod@sign 002C  
             ??_Read_Limit_From_EEprom 0029                         ??_Global_Inits 0026  
                  ??i1_OneDigitHandler 0078           FrameBuffer@write_pointer_mem 00AF  
                    ?_Init_CompareMode 0070                  __size_of_Write_EEprom 001C  
                         __CFG_LVP$OFF 0000                                   ?_ISR 0070  
          __size_of_PCF8583_Write_Byte 002C                       ISR@display_timer 00AA  
                   ??_Init_CompareMode 0026                                   l1172 19C3  
                                 l7002 1E16                                   l6210 1739  
                                 l6202 1735                                   l6302 1753  
                                 l6230 1743                                   l6222 173F  
                                 l6214 173B                                   l6206 1737  
                                 l7030 1258                                   l6400 1FAB  
                                 l7032 12C5                                   l7112 1359  
                                 l7200 1E94                                   l6330 175D  
                                 l6322 1759                                   l6314 1757  
                                 l6306 1755                                   l6234 1745  
                                 l6226 1741                                   l6218 173D  
                                 l7026 127B                                   l6420 1FEC  
                                 l6412 1FD2                                   l6404 1FB8  
                                 l7028 12C0                                   l7116 135B  
                                 l6350 1763                                   l6342 1761  
                                 l6326 175B                                   l6502 18C1  
                                 l7230 1EC2                                   l7302 015B  
                                 l7400 1940                                   l6424 1FF9  
                                 l6416 1FDF                                   l6408 1FC5  
                                 l6370 1767                                   l6354 1765  
                                 l6338 175F                                   l6290 174D  
                                 l6282 1749                                   l6530 1F31  
                                 l7242 1EDA                                   l7226 1EBA  
                                 l7322 02C7                                   l7306 017E  
                                 l7170 1D8A                                   l7164 112E  
                                 l6516 1EEC                                   l8140 15BE  
                                 l7252 146E                                   l7316 0271  
                                 l7180 1DA8                                   l7172 1D90  
                                 l8212 0D5E                                   l6614 1C89  
                                 l6622 1CA9                                   l6294 174F  
                                 l6286 174B                                   l6278 1747  
                                 l6198 1733                                   l6446 1B23  
                                 l6526 1F24                                   l6518 1EFC  
                                 l6710 1A99                                   l7414 12E3  
                                 l8126 07C1                                   l7254 147A  
                                 l7238 1ED2                                   l7334 03C6  
                                 l7182 1DAE                                   l7174 1D96  
                                 l6624 1C94                                   l6384 176B  
                                 l8128 07CB                                   l8152 1638  
                                 l6544 196A                                   l7352 04DC  
                                 l7328 035B                                   l7344 0450  
                                 l7176 1D9C                                   l6378 1769  
                                 l6298 1751                                   l6650 11F4  
                                 l7450 130C                                   l7426 1336  
                                 l6546 1973                                   l7370 0646  
                                 l8242 0DCC                                   l7178 1DA2  
                                 l7186 1DB4                                   l8218 0D76  
                                 l6660 1212                                   l6484 1BF3  
                                 l7436 1301                                   l7428 12EE  
                                 l6476 19ED                                   l8156 163A  
                                 l7196 1E92                                   l6900 1D70  
                                 l6556 1982                                   l6564 19AC  
                                 l7364 05D9                                   l7284 00E3  
                                 l7276 00CF                                   l8316 0FBE  
                                 l8324 0FDC                                   l6670 1231  
                                 l6646 11E5                                   l8350 1D03  
                                 l8334 1CFF                                   l6590 1AC0  
                                 l7358 0540                                   l7294 0112  
                                 l8318 0FC5                                   l8254 0E09  
                                 l6656 1201                                   l6488 1C09  
                                 l7448 133C                                   l8352 1D3A  
                                 l6760 097D                                   l6584 1AA4  
                                 l6904 1D7B                                   l7384 10C0  
                                 l8280 0EAA                                   l8360 1CC6  
                                 l6666 121F                                   l6930 1BDB  
                                 l6922 1BB7                                   l7458 131F  
                                 l6498 18BB                                   l6818 1944  
                                 l6770 09D6                                   l6586 1AB2  
                                 l6594 1ACB                                   l7298 0137  
                                 l6676 123E                                   l6924 1BC5  
                                 l7468 1342                                   l8348 1D33  
                                 l6844 1E3E                                   l6908 1D83  
                                 l8292 0EF7                                   l8364 1CD6  
                                 l6950 1C52                                   l6686 1904  
                                 l6934 1BE6                                   l6870 1E7D  
                                 l6862 1E6A                                   l6854 1E46  
                                 l6838 1E33                                   l8278 0EA4  
                                 l8198 0CF3                                   l6960 1C66  
                                 l6952 1C59                                   l6792 1A17  
                                 l6856 1E54                                   l8296 0F10  
                                 l8368 1CE4                                   l6970 1DE4  
                                 l6778 0A09                                   l6866 1E75  
                                 l6882 1D47                                   l8378 1B8F  
                                 l6788 1A08                                   l8492 1DBC  
                                 l6958 1C2E                                   l6966 1DDF  
                                 l8494 1B2B                                   l6894 1D54  
                                 l6886 1D4E                                   l8496 1773  
                                 l6896 1D62                                   l6986 1DF9  
                                 l6978 1DE9                                   _EEIF 006C  
                                 STR_1 106A                                   STR_2 1065  
                                 STR_3 1074                                   STR_4 1065  
                                 STR_5 106F                                   STR_6 1065  
                                 STR_7 102E                                   STR_8 1029  
                                 STR_9 1033                ManchesterDecode@bit_pos 00A9  
                                 u6020 19EA                                   u6125 1EF0  
                                 u6145 1EFE                                   u6065 1C0B  
                                 u6225 19AF                                   u7105 088A  
                        PlayRing@beats 1018                                   u6155 1F13  
                                 u6075 1C13                                   _RCEN 048B  
                                 u6165 1F25                                   u7045 12A2  
                                 u8105 0796                                   u6265 1AA7  
                                 u6514 094B                                   u8115 07AF  
                                 u6515 0949                      ??_Check_Time_Date 0043  
                                 u6285 1AB8                                   u6534 09A9  
                                 u7350 1ED8                                   u7270 1EB8  
                                 u5815 1FA1                                   u6455 1A22  
                                 u6535 09A7                                   u6295 1AC1  
                                 u7095 0871                                   u6465 1A8D  
                                 u6705 1E49                                   u7290 1EC0  
                                 u5915 1FE2                                   u5835 1FAE  
                                 u8155 162C                                   u7515 02B1  
                                 u6485 07F1                                   u6645 194D  
                                 u8165 1634                                   u6725 1E55  
                                 u6805 1D57                                   u7605 0526  
                                 u8325 0FFC                                   u5935 1FEF  
                                 u5855 1FBB                                   u6655 1954  
                                 u6735 1E61                                   u7535 0310  
                                 u6495 18D7                                   u6905 1BD2  
                                 u6745 1E6B                                   u6825 1D68  
                                 u7625 058B                                   u5875 1FC8  
                                 u6915 1BDC                                   u6835 1D71  
                                 u7555 03A4                                   u7645 0624  
                                 u7485 01C3                                   u5895 1FD5  
                                 u6945 1C53                                   u7585 049E  
                                 u8457 0DA5                                   u6875 1BBA  
                                 u8467 0DDE                                   u8477 0E1C  
                                 u6895 1BC6                                   u8487 0FCD  
                                 _TMR1 000E                                   _WREN 0C62  
               __size_of_Menu_Set_Time 027A                            main@menudef 01E8  
                         __CFG_WRT$OFF 0000                          PlayRing@tempo 1025  
                   Menu_Init@day_month 01B8                                   _main 1B74  
                   __size_of_CRC_check 0021              PCF8583_Write_Byte@address 002B  
         PCF8583_Set_Date_Time@bcd_day 0036                                   btemp 007E  
         PCF8583_Set_Date_Time@bcd_min 0034           PCF8583_Set_Date_Time@bcd_hrs 0035  
         PCF8583_Set_Date_Time@bcd_sec 0033           PCF8583_Set_Date_Time@bcd_mon 0037  
         Read_Limit_From_EEprom@limit1 002A           Read_Limit_From_EEprom@limit2 0027  
                                 start 0010                          __CFG_IESO$OFF 0000  
                i1OneDigitHandler@sign 007A                          ??_Read_EEprom 0026  
                    CRC16@data_tab_ptr 002B                      ___bmul@multiplier 0030  
            __end_ofi1_OneDigitHandler 1B05                          __CFG_MCLRE$ON 0000  
                      __end_of_Is_Leap 1A19                           main@data_rcv 01D6  
                    ??_SetAnodeOutputs 002A                __size_of_Button_Handler 0081  
                                ??_ISR 0020        Write_Limit_To_EEprom@limit_type 0029  
                      ??_Is_Valid_Date 0040                            _Check_Event 12C9  
                     ?_I2C_Master_Read 0070                       ?_I2C_Master_Wait 0070  
                      __end_of_Wait_ms 1A9E               ManchesterDecode@edge_dir 0078  
           __end_of_Disable_All_Digits 186D                       ?_I2C_Master_Stop 0070  
                        ??_Button_Init 0026                           _Write_EEprom 18E6  
                  __end_of_FrameDecode 1E29                                  ?_main 0070  
                                _ACKEN 048C                                  _ACKDT 048D  
                      __end_of___awdiv 1E82                        __end_of___lbdiv 1984  
                                _EEADR 010D                                  _CCPR1 0015  
                                STR_10 1051                                  _EEDAT 010C  
                                _CCPR2 001B                                  STR_11 1051  
                                STR_12 1051                                  STR_20 1060  
                                STR_21 1047                                  STR_13 1038  
                                STR_14 1065                                  STR_15 1042  
                                STR_16 105B                                  _CRC16 1C2A  
                                STR_17 104C                          __CFG_WDTE$OFF 0000  
                                STR_18 1056                                  STR_19 103D  
                      __end_of___awmod 1D88                        __end_of___lbmod 19C9  
                                _EEPGD 0C67                                  _ANSEL 0188  
                      __end_of___lldiv 1F3A                        ___awdiv@divisor 002D  
                  __end_of_FrameBuffer 1CAF                        __end_of___lwdiv 1BEB  
                                i1l163 13E4                                  i1l500 1F47  
                                i1l172 144E                                  i1l510 1F88  
                                i1l502 1F54                                  i1l512 1F95  
                                i1l504 1F61                         Is_Valid_Date@d 0040  
                      __end_of___lwmod 1AD0                                  i1l514 1F9B  
                                i1l506 1F6E                                  i1l508 1F7B  
                       Is_Valid_Date@m 003D                                  i1l492 1AE6  
                                i1l494 1AE8                                  i1l495 1AEA  
                                i1l496 1AEC                                  i1l497 1B04  
                       Is_Valid_Date@y 003E                        ___awdiv@counter 0032  
                                _PORTB 0006                                  _PORTC 0007  
                  ___lmul@multiplicand 002A                         PlayRing@melody 1006  
                       __CFG_FCMEN$OFF 0000                   __end_of_Find_Weekday 14EE  
           __size_ofi1_SetAnodeOutputs 0063                      __end_of_BCD_2_DEC 07FC  
                 i1_Disable_All_Digits 1858         __size_of_PCF8583_Set_Date_Time 00D4  
                       __CFG_BOREN$OFF 0000                                  pclath 000A  
__end_ofIs_Valid_Date@k_max_valid_year 1025          Is_Valid_Date@k_max_valid_year 1023  
        __end_of_PCF8583_Set_Date_Time 0917                      __end_of_DEC_2_BCD 18E6  
                                status 0003                                  wtemp0 007E  
                      ___lbdiv@divisor 0026                      ?_ManchesterDecode 0073  
                 __end_of_Generate_PWM 1A45                        ___lbdiv@counter 0029  
                   ??_ManchesterDecode 0074                        __initialization 0013  
                         __end_of_main 1BAF                       __end_of_Init_I2C 1888  
             ??_PCF8583_Read_Time_Date 0037                 ?_Write_Limit_To_EEprom 0028  
                        _Menu_Set_Time 0D86                                 CRC16@i 002D  
                               CRC16@k 002C                    __end_of_Read_EEprom 1894  
         __size_of_Display7SegmentText 0075                   Button_Handler@keydef 0031  
                 Button_Handler@button 0032                                 ??_main 0057  
                     __end_of_PlayRing 12C9                                 ?_CRC16 0026  
                    __end_of_CRC_check 1942                 __end_ofPlayRing@melody 1018  
                        ??_Select_Menu 0053                      ?_I2C_Master_Start 0070  
                    ?_I2C_Master_Write 0026        __size_of_Read_Limit_From_EEprom 006E  
                  __end_of_Button_Init 15A4                  ?i1_Disable_All_Digits 0070  
                       _g_display_text 00CC                     ??_I2C_Master_Start 0026  
                   ??_I2C_Master_Write 0028                      ??_OneDigitHandler 002E  
                               _CCP1IE 0462                                 _CCP1IF 0062  
                               _CCP2IE 0468                                 _CCP2IF 0068  
                               _EECON2 018D                       ___awdiv@dividend 002F  
                               _ANSELH 0189                                 i1l5110 167A  
                               i1l5030 1666                                 i1l5130 1684  
                               i1l5122 1680                                 i1l5114 167C  
                               i1l5106 1678                                 i1l5050 1670  
                               i1l5042 166C                                 i1l5034 1668  
                               i1l5026 1664                                 i1l5212 169C  
                               i1l6020 13F9                                 i1l6012 13DE  
                               i1l5206 169A                                 i1l5150 168A  
                               i1l5142 1688                                 i1l5134 1686  
                               i1l5126 1682                                 i1l5118 167E  
                               i1l5062 1676                                 i1l5054 1672  
                               i1l5046 166E                                 i1l5038 166A  
                               i1l6022 13FA                                 i1l5240 1F6F  
                               i1l5232 1F55                                 i1l6016 13EE  
                               i1l5170 1692                                 i1l5154 168C  
                               i1l5058 1674                                 i1l6034 1411  
                               i1l5252 1F96                                 i1l5244 1F7C  
                               i1l5236 1F62                                 i1l5228 1F48  
                               i1l6060 1444                                 i1l5182 1696  
                               i1l5166 1690                                 i1l5158 168E  
                               i1l6038 1418                                 i1l6046 142B  
                               i1l5248 1F89                                 i1l6056 143C  
                               i1l5178 1694                                 i1l5550 081E  
                               i1l5702 0ACE                                 i1l5710 0AE3  
                               i1l5198 1698                                 i1l5722 0AFD  
                               i1l5556 082A                                 i1l5716 0AED  
                               i1l5574 1AEE                                 i1l5680 0A5A  
                               i1l5690 0A9D                                 i1l5668 0A34  
                               i1l8500 16A4                                 i1l5694 0A9F  
                               i1l5688 0A88                                 i1l5970 117F  
                               i1l5980 119D                                 i1l5990 11BC  
                               i1l5966 1170                                 i1l5976 118C  
                               i1l5986 11AA                                 i1l5996 11C9  
                               i1l8498 1AF6                     __size_of_Key_Press 00F4  
                            CRC16@size 0026                                 u543_24 0ACB  
                               u543_25 0AC8                                 u544_24 0AD6  
                               u544_25 0AD3                                 u481_25 1F58  
                               u538_24 0A85                                 u538_25 0A82  
                               u539_24 0A90                                 u539_25 0A8D  
                               u483_25 1F65                                 u485_25 1F72  
                               u477_25 1F3E                                 u487_25 1F7F  
                               u479_25 1F4B                                 u489_25 1F8C  
                               _TMR0IE 005D                                 _TMR0IF 005A  
                               _SSPADD 0093                                 _TRISA0 0428  
                               _TRISA1 0429                                 _TRISA2 042A  
                               _TRISB0 0430                                 _TRISA3 042B  
                               _TRISB1 0431                                 _TRISC0 0438  
                               _TRISA4 042C                                 _TRISB2 0432  
                               _TRISC1 0439                                 _TRISA5 042D  
                               _TRISB3 0433                                 _TRISC2 043A  
                               _TRISA6 042E                                 _TRISB4 0434  
                               _TRISC3 043B                                 _TRISA7 042F  
                               _TRISB5 0435                                 _TRISC4 043C  
                               _TRISB6 0436                                 _TRISC5 043D  
                               _TRISB7 0437                                 _TRISC6 043E  
                               _TRISC7 043F                                 _SSPBUF 0013  
                            ??_Is_Leap 003C                     __size_of_Menu_Init 0106  
      ManchesterDecode@start_data_flag 00A7                         __CFG_PWRTE$OFF 0000  
             __size_ofi1_SignAnodeData 00CF             __size_ofi1_OneDigitHandler 0035  
       i1SetAnodeOutputs@decimal_point 0073                              ??_Wait_ms 0035  
                 __end_of_Global_Inits 19A6                        Key_Press@button 0026  
                               ___bmul 18B9                            _FrameDecode 1DD4  
                               ___lmul 1BEB                                 ___wmul 1942  
                            ??___awdiv 0031                              ??___lbdiv 0027  
                          _FrameBuffer 1C6B                              ??___awmod 002A  
                            ??___lbmod 0027                              ??___lldiv 002E  
                       ?_Menu_Set_Time 004C                              ??___lwdiv 0030  
                            ??___lwmod 0038                       ___awdiv@quotient 0034  
                      ___awmod@divisor 0026                        ___awmod@counter 002B  
                   __size_of_Show_Time 017A                                 saved_w 007E  
              ??i1_Display7SegmentText 007C                        _Display_Weekday 1D88  
   __size_of_Menu_Set_Param_Time_Limit 0695                       ___lbdiv@dividend 0028  
                PlayRing@MELODY_LENGTH 0040                        _InterruptConfig 107A  
                  __end_of_Select_Menu 1CF3                        ___lbmod@divisor 0026  
                      _g_generic_timer 0059                __end_of__initialization 0036  
                      ___lbmod@counter 002B                           BCD_2_DEC@bcd 0034  
            __size_of_Init_CaptureMode 000D                          __end_of_CRC16 1C6B  
                    _PCF8583_Read_Byte 1B3A                 _Read_Limit_From_EEprom 10F6  
                  ___bmul@multiplicand 002D                            _Read_EEprom 1888  
                        ISR@pulse_time 0024         Display_7Seg_Text@decimal_point 0026  
                          ISR@edge_dir 00D1                     ?_PCF8583_Read_Byte 0070  
                       __pcstackCOMMON 0070                         _Button_Handler 1344  
              __size_of_ProcessRCVData 004A                           __pidataBANK0 07FC  
                __end_ofi1_FrameBuffer 0843                       Menu_Init@menudef 002C  
      __size_of_PCF8583_Read_Time_Date 0117                       ___lbdiv@quotient 002A  
                    __end_of_Key_Press 0A0B                            _Button_Init 14EE  
                  ??_PCF8583_Read_Byte 002B                  __size_of_Find_Weekday 0096  
                    i1FrameBuffer@data 0072                                ??_CRC16 0028  
                    i1FrameBuffer@mode 0070                     Select_Menu@menudef 0055  
                      _Check_Time_Date 15A4         i1OneDigitHandler@decimal_point 0077  
                    __end_of_Menu_Init 0C0C                         _OPTION_REGbits 0081  
               ??i1_Disable_All_Digits 0070  ManchesterDecode@next_edge_also_T_flag 00A6  
                          ISR@set_flag 00AB                 PCF8583_Write_Byte@data 0028  
                __size_of_Generate_PWM 002C       Read_Limit_From_EEprom@limit_type 0028  
                           __pbssBANK0 0059                             __pbssBANK1 00A0  
                           __pbssBANK2 0110                             __pbssBANK3 0190  
                            ?_Init_I2C 0070                        _SetAnodeOutputs 1F9D  
__end_ofIs_Valid_Date@k_min_valid_year 1023          Is_Valid_Date@k_min_valid_year 1021  
            __end_of_PCF8583_Read_Byte 1B74                      __end_of_Show_Time 0D86  
                            ?_PlayRing 0070                      Read_EEprom@adress 0026  
               __end_of_Button_Handler 13C5              Menu_Set_Time@current_menu 00D7  
            __size_of_Init_CompareMode 000C                             __pmaintext 1B74  
                         _Find_Weekday 1458                        ??_Menu_Set_Time 004E  
                              ?___bmul 002D                                ?___lmul 0026  
                              ?___wmul 0026                FrameBuffer@read_pointer 005D  
                       _g_button_timer 00A0                             __pintentry 0004  
               __size_of_SignAnodeData 00CF                           ?_Check_Event 0070  
                    ??i1_SignAnodeData 0070                         ___lmul@product 002F  
             ProcessRCVData@time_limit 004B                __end_of_Display_Weekday 1DD4  
                           _g_pwm_freq 00A2                           _Generate_PWM 1A19  
      Check_Time_Date@current_time_min 0045                __end_of_InterruptConfig 108D  
                          _Select_Menu 1CAF             __end_of_PCF8583_Write_Byte 1A71  
                              _SSPCON2 0091                     _Disable_All_Digits 1867  
        PCF8583_Read_Time_Date@bcd_day 003F                                _SSPSTAT 0094  
                         _Is_Leap$1539 003C          PCF8583_Read_Time_Date@bcd_min 003D  
        PCF8583_Read_Time_Date@bcd_hrs 003E          PCF8583_Read_Time_Date@bcd_sec 003C  
        PCF8583_Read_Time_Date@bcd_mon 0040                             __stringtab 1000  
               _PCF8583_Read_Time_Date 06CF                             ??_Init_I2C 0026  
                            _BCD_2_DEC 07E6                    _Display7SegmentText 11D9  
                __size_of_Global_Inits 0022                                _Is_Leap 19F1  
                  ?_Disable_All_Digits 0070                            Wait_ms@time 0033  
                           ??_PlayRing 003C                              _DEC_2_BCD 18CA  
                      ?_Button_Handler 0070                ??_Write_Limit_To_EEprom 002A  
                              _Wait_ms 1A71                        __size_of___bmul 0011  
              __end_of_Check_Time_Date 1662                                ___awdiv 1E29  
                              ___lbdiv 1963                        __size_of___lmul 003F  
                              ___awmod 1D3D                                ___lbmod 19A6  
                              ___lldiv 1EDC                        __size_of___wmul 0021  
                              ___lwdiv 1BAF                                ___lwmod 1A9E  
                  SetAnodeOutputs@sign 002B                   ?_Display7SegmentText 0031  
                      _OneDigitHandler 1B05                  __end_of_Is_Valid_Date 1EDC  
                              __ptext1 1CAF                                __ptext2 0C0C  
                              __ptext3 1D88                                __ptext4 0D86  
                              __ptext5 108D                                __ptext6 18E6  
                              __ptext7 0843                                __ptext8 18CA  
                              __ptext9 003A              __size_of_ManchesterDecode 00FB  
         SetAnodeOutputs@decimal_point 0029                   ??_Disable_All_Digits 0026  
                         __size_of_ISR 0093                              _T1CONbits 0010  
                     ___awmod@dividend 0028                        Find_Weekday@day 003E  
             __size_of_I2C_Master_Read 0028                __end_of_SetAnodeOutputs 2000  
             __size_of_I2C_Master_Wait 000C               __size_of_I2C_Master_Stop 0005  
                            _CRC_check 1921                           DEC_2_BCD@dec 0030  
                         _Global_Inits 1984                                clrloop0 1875  
                        _SignAnodeData 1731                   end_of_initialization 0036  
                    SignAnodeData@sign 0028                             ?_BCD_2_DEC 0070  
           __size_of_PCF8583_Read_Byte 003A                       _Init_CaptureMode 18AC  
                _PCF8583_Set_Date_Time 0843              __size_of_I2C_Master_Start 0005  
                           ?_DEC_2_BCD 0070              __size_of_I2C_Master_Write 0007  
                      ___lldiv@divisor 0026                        ___lldiv@counter 0033  
                       _ProcessRCVData 1CF3                           ?_FrameDecode 0029  
       Menu_Init@time_limit_free_day_1 0198         Menu_Init@time_limit_free_day_2 0190  
                         ?_FrameBuffer 0026        Check_Time_Date@time_limit_min_1 0047  
      Check_Time_Date@time_limit_min_2 0043                  ??_Display7SegmentText 0032  
                            _PORTAbits 0005                              _PORTBbits 0006  
                            _PORTCbits 0007                       ?_Display_Weekday 0070  
                   Button_Init@set_rtc 00C5                       ?_InterruptConfig 0070  
                     ___lbmod@dividend 002A                       Menu_Set_Time@key 00D2  
                           ?_CRC_check 0070                         ?_SignAnodeData 0070  
       __size_ofi1_Display7SegmentText 0075          __end_ofi1_Display7SegmentText 11D9  
         OneDigitHandler@decimal_point 002D                            ___lbmod@rem 002C  
              ?_Read_Limit_From_EEprom 0027                            _CCP1CONbits 0017  
                          _CCP2CONbits 001D                             main@keydef 01DB  
               __end_of_ProcessRCVData 1D3D                       _Init_CompareMode 1894  
                         ?_Read_EEprom 0070                __end_of_OneDigitHandler 1B3A  
                        Menu_Init@year 01B0                       ?_Check_Time_Date 0042  
                       __end_of___bmul 18CA                         __end_of___lmul 1C2A  
                       __end_of___wmul 1963                    Check_Time_Date@time 0049  
                         ?_Button_Init 0070                       CRC_check@DataRCV 0033  
                 __size_of_Check_Event 007B                    start_initialization 0013  
                            _Key_Press 0917                              PlayRing@i 0043  
                            PlayRing@j 0041                            __end_of_ISR 1458  
                     ?_SetAnodeOutputs 0029                     Write_EEprom@adress 0026  
                            _Menu_Init 0B06                  __end_ofPlayRing@beats 1021  
       __end_of_Read_Limit_From_EEprom 1164            OneDigitHandler@digit_number 002C  
                __end_ofPlayRing@tempo 1027                            ??_BCD_2_DEC 0031  
                    ??_I2C_Master_Read 0026                 ?_PCF8583_Set_Date_Time 0070  
                    ??_I2C_Master_Wait 0026                      ??_I2C_Master_Stop 0026  
                      i1_SignAnodeData 1662                               CRC16@crc 002E  
                    __size_of_Init_I2C 000C                        FrameDecode@data 002E  
             __CFG_FOSC$INTRC_NOCLKOUT 0000                       CRC_check@crc_val 0031  
                          ??_DEC_2_BCD 002D                        ?_ProcessRCVData 004A  
                  OneDigitHandler@sign 0030                        Show_Time@keydef 0042  
                    __size_of_PlayRing 007B                               ??___bmul 002E  
                             ??___lmul 002E                              _Show_Time 0C0C  
                             ??___wmul 002A        PCF8583_Read_Time_Date@year_bits 003B  
                          __pdataBANK0 005E                          ?_Write_EEprom 0026  
                     _ManchesterDecode 0A0B                           ?_Select_Menu 0051  
                           ?_Key_Press 0026                     ProcessRCVData@time 004A  
                      ??_SignAnodeData 0026                              ___latbits 0002  
                        __pcstackBANK0 0020                          __pcstackBANK1 00D2  
                        __pcstackBANK3 01D6  Menu_Set_Param_Time_Limit@check_button 0038  
              ?_PCF8583_Read_Time_Date 0035                            ??_CRC_check 0030  
Menu_Set_Param_Time_Limit@change_digit 005B                             ?_Menu_Init 0070  
       Menu_Init@time_limit_work_day_1 01A8         Menu_Init@time_limit_work_day_2 01A0  
     Display7SegmentText@decimal_point 0031     i1Display7SegmentText@decimal_point 007B  
        __size_ofi1_Disable_All_Digits 0005                      Select_Menu@keydef 0051  
               __size_ofi1_FrameBuffer 0043                       ??_Button_Handler 0030  
                        Show_Time@time 0045             ?_Menu_Set_Param_Time_Limit 0036  
                             ?_Is_Leap 003A                 Menu_Init@hours_minutes 01C0  
                   _PCF8583_Write_Byte 1A45                       _I2C_Master_Start 185D  
                     _I2C_Master_Write 186D                        Select_Menu@time 0052  
                     ___lwdiv@dividend 002E                               ?_Wait_ms 0033  
                     ?_OneDigitHandler 002C                       Generate_PWM@freq 0034  
                           ?_Show_Time 0042                    ?_PCF8583_Write_Byte 0028  
                             ?___awdiv 002D                               ?___lbdiv 0026  
       __size_of_Write_Limit_To_EEprom 0069                               ?___awmod 0026  
                             ?___lbmod 0026                               ?___lldiv 0026  
        __end_of_Write_Limit_To_EEprom 10F6                  __end_of_Menu_Set_Time 1000  
                             ?___lwdiv 002C                               ?___lwmod 0034  
        Menu_Set_Param_Time_Limit@flag 00A4                   __size_of_FrameDecode 0055  
                       ??_Write_EEprom 0027          Menu_Set_Param_Time_Limit@menu 0036  
                 __size_of_FrameBuffer 0044                   I2C_Master_Write@data 0026  
                            __pstrings 1000                     Check_Event@DataRCV 0045  
             __end_of_Init_CaptureMode 18B9                         __size_of_CRC16 0041  
       __end_of_PCF8583_Read_Time_Date 07E6                        FrameBuffer@data 0028  
                      FrameBuffer@mode 0026             ManchesterDecode@pulse_time 0073  
                   FrameDecode@DataRCV 002D                  Display_7Seg_Text@text 0029  
                   _g_display_controll 00AD                       ___lwdiv@quotient 0032  
                 ??_PCF8583_Write_Byte 0029                __end_ofi1_SignAnodeData 1731  
                   Display_7Seg_Text@i 0028                      interrupt_function 0004  
                       ___wmul@product 002A               FrameBuffer@write_pointer 005C  
    __end_of_Menu_Set_Param_Time_Limit 06CF                              clear_ram0 1874  
                             _PIE2bits 008D                      Find_Weekday@month 003C  
                 __size_of_Read_EEprom 000C            Write_Limit_To_EEprom@limit1 002B  
          Write_Limit_To_EEprom@limit2 0028                      Button_Init@keydef 0027  
                        i1_FrameBuffer 0800                      Button_Init@set_up 01CF  
                          __stringbase 1005                      ___wmul@multiplier 0026  
          __size_of_Disable_All_Digits 0006                   __size_of_Button_Init 00B6  
                          ??_Key_Press 0028               __end_of_Init_CompareMode 18A0  
                    _Display_7Seg_Text 1902                            ??_Menu_Init 002B  
                  I2C_Master_Read@data 0029                      ___lmul@multiplier 0026  
                   ?_Display_7Seg_Text 0026             PCF8583_Read_Time_Date@year 0041  
                       CRC16@generator 1027                               _Init_I2C 187C  
                    FrameBuffer@buffer 0110                 __size_of_Is_Valid_Date 005A  
         ManchesterDecode@decoded_byte 00D0           _g_reciver_ccp2_isr_fire_flag 00AE  
                  ??_Display_7Seg_Text 0027                       __size_of_Is_Leap 0028  
                             _PlayRing 124E            __end_of_Display7SegmentText 124E  
                          ??_Show_Time 0043                       __size_of_Wait_ms 002D  
         ManchesterDecode@data_counter 00A8                         ?i1_FrameBuffer 0070  
                     __size_of___awdiv 0059                       __size_of___lbdiv 0021  
                     __size_of___awmod 004B                       __size_of___lbmod 0023  
                  i1SignAnodeData@sign 0072                       __size_of___lldiv 005E  
                     __size_of___lwdiv 003C                       __size_of___lwmod 0032  
        Menu_Set_Time@current_menu_ptr 00D4                     __end_of__stringtab 1006  
            Check_Time_Date@time_limit 0042              __end_of_Display_7Seg_Text 1921  
                      _I2C_Master_Read 19C9                 Display_Weekday@weekday 002C  
                      _I2C_Master_Wait 18A0                        _I2C_Master_Stop 1862  
                      ___lwdiv@divisor 002C                        ___lwdiv@counter 0031  
             PCF8583_Read_Byte@address 002D                               __ptext10 19A6  
                             __ptext11 1963                               __ptext20 1CF3  
                             __ptext12 1D3D                               __ptext21 15A4  
                             __ptext13 1E29                               __ptext30 18A0  
                             __ptext22 1942                               __ptext14 1E82  
                             __ptext31 07E6                               __ptext23 06CF  
                             __ptext15 19F1                               __ptext40 1A19  
                             __ptext32 18B9                               __ptext24 1A45  
                             __ptext16 1458                               __ptext41 1EDC  
                             __ptext33 12C9                               __ptext25 1B3A  
                             __ptext17 1A9E                               __ptext50 1C2A  
                             __ptext42 11D9                               __ptext34 124E  
                             __ptext26 186D                               __ptext18 1344  
                             __ptext51 0B06                               __ptext43 1B05  
                             __ptext35 1BAF                               __ptext27 1862  
                             __ptext19 0917                               __ptext60 1164  
                             __ptext52 10F6                               __ptext44 1731  
                             __ptext36 1A71                               __ptext28 185D  
                             __ptext61 1AD0                               __ptext53 1888  
                             __ptext45 1F9D                               __ptext37 1BEB  
                             __ptext29 19C9                               __ptext62 1662  
                             __ptext54 1867                               __ptext46 1DD4  
                             __ptext38 1894                               __ptext63 1F3A  
                             __ptext55 107A                               __ptext47 1C6B  
                             __ptext39 18AC                               __ptext64 1858  
                             __ptext56 187C                               __ptext48 1902  
                             __ptext65 0A0B                               __ptext57 1984  
                             __ptext49 1921                   __size_of_Select_Menu 0044  
                             __ptext66 0800                               __ptext58 14EE  
                             __ptext59 13C5                 __end_ofCRC16@generator 1029  
              Display7SegmentText@text 0033                      __CFG_BOR4V$BOR40V 0000  
              ??_PCF8583_Set_Date_Time 0031                Select_Menu@check_button 0056  
                     ?i1_SignAnodeData 0070               __size_of_Display_Weekday 004C  
                     ??_ProcessRCVData 004C                 Menu_Set_Time@menu_type 004D  
                i1_Display7SegmentText 1164               __size_of_InterruptConfig 0013  
                 __end_of_Write_EEprom 1902               __end_of_ManchesterDecode 0B06  
                        __size_of_main 003B              ManchesterDecode@sync_flag 00A5  
            i1Display7SegmentText@text 007D                        _g_decimal_point 00AC  
                        ?_Find_Weekday 003A                       Find_Weekday@wday 004B  
                     Find_Weekday@year 003A                  i1SetAnodeOutputs@sign 0075  
                        ??_Check_Event 0044                               main@time 01E1  
                   I2C_Master_Read@ack 0028                          _Is_Valid_Date 1E82  
                        ?_Generate_PWM 0034                       Write_EEprom@data 0027  
             __end_of_I2C_Master_Start 1862               __end_of_I2C_Master_Write 1874  
                           _INTCONbits 000B               __size_of_Check_Time_Date 00BE  
PCF8583_Read_Time_Date@time_struct_ptr 0035                      i1_SetAnodeOutputs 1F3A  
                             intlevel1 0000                     ?i1_SetAnodeOutputs 0073  
                     ___lwmod@dividend 0036                       ___lldiv@dividend 002A  
          ??_Menu_Set_Param_Time_Limit 0039               __size_of_SetAnodeOutputs 0063  
                Show_Time@check_button 0044                              stringcode 1000  
                       ??_Find_Weekday 0040                PCF8583_Read_Byte@retval 002E  
                           _OSCCONbits 008F              Menu_Set_Time@check_button 00D3  
                  ??i1_SetAnodeOutputs 0074                        ??i1_FrameBuffer 0071  
         __end_ofi1_Disable_All_Digits 185D                __end_of_I2C_Master_Read 19F1  
              __end_of_I2C_Master_Wait 18AC                __end_of_I2C_Master_Stop 1867  
                         FrameDecode@i 002F                         ?_Is_Valid_Date 003D  
      Display7SegmentText@enable_digit 005E                         ??_Generate_PWM 0038  
 PCF8583_Set_Date_Time@time_struct_ptr 0038                      ?_Init_CaptureMode 0070  
           __size_of_Display_7Seg_Text 001F                       ___lldiv@quotient 002F  
                      ___lwmod@divisor 0034                    __end_of_Check_Event 1344  
                 Menu_Set_Time@menudef 00D6                        ___lwmod@counter 0039  
                             stringdir 1000                               stringtab 1000  
                          Is_Leap@year 003A                     ??_Init_CaptureMode 0026  
            __end_ofi1_SetAnodeOutputs 1F9D                          ?_Global_Inits 0070  
                          _SSPCON2bits 0091          i1OneDigitHandler@digit_number 0076  
                __end_of_SignAnodeData 1800                 ?i1_Display7SegmentText 007B  
                 Button_Init@set_time1 00BE                   Button_Init@set_time2 00B7  
                 Button_Init@set_right 00B0                    Menu_Set_Time@keydef 004C  
                ProcessRCVData@DataRCV 004D                    Button_Init@set_down 01C8  
                           _SSPCONbits 0014                      ??_Display_Weekday 002A  
                    Menu_Set_Time@time 00DF                      ??_InterruptConfig 0026  
                        ??_FrameDecode 002B                     __size_of_BCD_2_DEC 0016  
