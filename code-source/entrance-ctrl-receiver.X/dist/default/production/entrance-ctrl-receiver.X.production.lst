

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jun 20 22:24:14 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	text52,local,class=CODE,merge=1,delta=2
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	psect	text54,local,class=CODE,merge=1,delta=2
    72                           	psect	text55,local,class=CODE,merge=1,delta=2
    73                           	psect	text56,local,class=CODE,merge=1,delta=2
    74                           	psect	text57,local,class=CODE,merge=1,delta=2
    75                           	psect	text58,local,class=CODE,merge=1,delta=2
    76                           	psect	text59,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	dabs	1,0x7E,2
    86  0000                     
    87                           ; Version 2.10
    88                           ; Generated 31/07/2019 GMT
    89                           ; 
    90                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC16F886 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  001D                     	;# 
   153  001E                     	;# 
   154  001F                     	;# 
   155  0081                     	;# 
   156  0085                     	;# 
   157  0086                     	;# 
   158  0087                     	;# 
   159  0089                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  008F                     	;# 
   164  0090                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0093                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0097                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009A                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  009F                     	;# 
   182  0105                     	;# 
   183  0107                     	;# 
   184  0108                     	;# 
   185  0109                     	;# 
   186  010C                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  010F                     	;# 
   191  0185                     	;# 
   192  0187                     	;# 
   193  0188                     	;# 
   194  0189                     	;# 
   195  018C                     	;# 
   196  018D                     	;# 
   197  0000                     	;# 
   198  0001                     	;# 
   199  0002                     	;# 
   200  0003                     	;# 
   201  0004                     	;# 
   202  0005                     	;# 
   203  0006                     	;# 
   204  0007                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000D                     	;# 
   210  000E                     	;# 
   211  000E                     	;# 
   212  000F                     	;# 
   213  0010                     	;# 
   214  0011                     	;# 
   215  0012                     	;# 
   216  0013                     	;# 
   217  0014                     	;# 
   218  0015                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  001D                     	;# 
   229  001E                     	;# 
   230  001F                     	;# 
   231  0081                     	;# 
   232  0085                     	;# 
   233  0086                     	;# 
   234  0087                     	;# 
   235  0089                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  008E                     	;# 
   239  008F                     	;# 
   240  0090                     	;# 
   241  0091                     	;# 
   242  0092                     	;# 
   243  0093                     	;# 
   244  0093                     	;# 
   245  0093                     	;# 
   246  0094                     	;# 
   247  0095                     	;# 
   248  0096                     	;# 
   249  0097                     	;# 
   250  0098                     	;# 
   251  0099                     	;# 
   252  009A                     	;# 
   253  009B                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  009F                     	;# 
   258  0105                     	;# 
   259  0107                     	;# 
   260  0108                     	;# 
   261  0109                     	;# 
   262  010C                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  010F                     	;# 
   267  0185                     	;# 
   268  0187                     	;# 
   269  0188                     	;# 
   270  0189                     	;# 
   271  018C                     	;# 
   272  018D                     	;# 
   273  0000                     	;# 
   274  0001                     	;# 
   275  0002                     	;# 
   276  0003                     	;# 
   277  0004                     	;# 
   278  0005                     	;# 
   279  0006                     	;# 
   280  0007                     	;# 
   281  0009                     	;# 
   282  000A                     	;# 
   283  000B                     	;# 
   284  000C                     	;# 
   285  000D                     	;# 
   286  000E                     	;# 
   287  000E                     	;# 
   288  000F                     	;# 
   289  0010                     	;# 
   290  0011                     	;# 
   291  0012                     	;# 
   292  0013                     	;# 
   293  0014                     	;# 
   294  0015                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0017                     	;# 
   298  0018                     	;# 
   299  0019                     	;# 
   300  001A                     	;# 
   301  001B                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  001D                     	;# 
   305  001E                     	;# 
   306  001F                     	;# 
   307  0081                     	;# 
   308  0085                     	;# 
   309  0086                     	;# 
   310  0087                     	;# 
   311  0089                     	;# 
   312  008C                     	;# 
   313  008D                     	;# 
   314  008E                     	;# 
   315  008F                     	;# 
   316  0090                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0093                     	;# 
   320  0093                     	;# 
   321  0093                     	;# 
   322  0094                     	;# 
   323  0095                     	;# 
   324  0096                     	;# 
   325  0097                     	;# 
   326  0098                     	;# 
   327  0099                     	;# 
   328  009A                     	;# 
   329  009B                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  0105                     	;# 
   335  0107                     	;# 
   336  0108                     	;# 
   337  0109                     	;# 
   338  010C                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  010F                     	;# 
   343  0185                     	;# 
   344  0187                     	;# 
   345  0188                     	;# 
   346  0189                     	;# 
   347  018C                     	;# 
   348  018D                     	;# 
   349  0000                     	;# 
   350  0001                     	;# 
   351  0002                     	;# 
   352  0003                     	;# 
   353  0004                     	;# 
   354  0005                     	;# 
   355  0006                     	;# 
   356  0007                     	;# 
   357  0009                     	;# 
   358  000A                     	;# 
   359  000B                     	;# 
   360  000C                     	;# 
   361  000D                     	;# 
   362  000E                     	;# 
   363  000E                     	;# 
   364  000F                     	;# 
   365  0010                     	;# 
   366  0011                     	;# 
   367  0012                     	;# 
   368  0013                     	;# 
   369  0014                     	;# 
   370  0015                     	;# 
   371  0015                     	;# 
   372  0016                     	;# 
   373  0017                     	;# 
   374  0018                     	;# 
   375  0019                     	;# 
   376  001A                     	;# 
   377  001B                     	;# 
   378  001B                     	;# 
   379  001C                     	;# 
   380  001D                     	;# 
   381  001E                     	;# 
   382  001F                     	;# 
   383  0081                     	;# 
   384  0085                     	;# 
   385  0086                     	;# 
   386  0087                     	;# 
   387  0089                     	;# 
   388  008C                     	;# 
   389  008D                     	;# 
   390  008E                     	;# 
   391  008F                     	;# 
   392  0090                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0093                     	;# 
   396  0093                     	;# 
   397  0093                     	;# 
   398  0094                     	;# 
   399  0095                     	;# 
   400  0096                     	;# 
   401  0097                     	;# 
   402  0098                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  009F                     	;# 
   410  0105                     	;# 
   411  0107                     	;# 
   412  0108                     	;# 
   413  0109                     	;# 
   414  010C                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010E                     	;# 
   418  010F                     	;# 
   419  0185                     	;# 
   420  0187                     	;# 
   421  0188                     	;# 
   422  0189                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  0000                     	;# 
   426  0001                     	;# 
   427  0002                     	;# 
   428  0003                     	;# 
   429  0004                     	;# 
   430  0005                     	;# 
   431  0006                     	;# 
   432  0007                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  000E                     	;# 
   440  000F                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0013                     	;# 
   445  0014                     	;# 
   446  0015                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001D                     	;# 
   457  001E                     	;# 
   458  001F                     	;# 
   459  0081                     	;# 
   460  0085                     	;# 
   461  0086                     	;# 
   462  0087                     	;# 
   463  0089                     	;# 
   464  008C                     	;# 
   465  008D                     	;# 
   466  008E                     	;# 
   467  008F                     	;# 
   468  0090                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0093                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0095                     	;# 
   476  0096                     	;# 
   477  0097                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009A                     	;# 
   481  009B                     	;# 
   482  009C                     	;# 
   483  009D                     	;# 
   484  009E                     	;# 
   485  009F                     	;# 
   486  0105                     	;# 
   487  0107                     	;# 
   488  0108                     	;# 
   489  0109                     	;# 
   490  010C                     	;# 
   491  010C                     	;# 
   492  010D                     	;# 
   493  010E                     	;# 
   494  010F                     	;# 
   495  0185                     	;# 
   496  0187                     	;# 
   497  0188                     	;# 
   498  0189                     	;# 
   499  018C                     	;# 
   500  018D                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  000E                     	;# 
   516  000F                     	;# 
   517  0010                     	;# 
   518  0011                     	;# 
   519  0012                     	;# 
   520  0013                     	;# 
   521  0014                     	;# 
   522  0015                     	;# 
   523  0015                     	;# 
   524  0016                     	;# 
   525  0017                     	;# 
   526  0018                     	;# 
   527  0019                     	;# 
   528  001A                     	;# 
   529  001B                     	;# 
   530  001B                     	;# 
   531  001C                     	;# 
   532  001D                     	;# 
   533  001E                     	;# 
   534  001F                     	;# 
   535  0081                     	;# 
   536  0085                     	;# 
   537  0086                     	;# 
   538  0087                     	;# 
   539  0089                     	;# 
   540  008C                     	;# 
   541  008D                     	;# 
   542  008E                     	;# 
   543  008F                     	;# 
   544  0090                     	;# 
   545  0091                     	;# 
   546  0092                     	;# 
   547  0093                     	;# 
   548  0093                     	;# 
   549  0093                     	;# 
   550  0094                     	;# 
   551  0095                     	;# 
   552  0096                     	;# 
   553  0097                     	;# 
   554  0098                     	;# 
   555  0099                     	;# 
   556  009A                     	;# 
   557  009B                     	;# 
   558  009C                     	;# 
   559  009D                     	;# 
   560  009E                     	;# 
   561  009F                     	;# 
   562  0105                     	;# 
   563  0107                     	;# 
   564  0108                     	;# 
   565  0109                     	;# 
   566  010C                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0185                     	;# 
   572  0187                     	;# 
   573  0188                     	;# 
   574  0189                     	;# 
   575  018C                     	;# 
   576  018D                     	;# 
   577  0000                     	;# 
   578  0001                     	;# 
   579  0002                     	;# 
   580  0003                     	;# 
   581  0004                     	;# 
   582  0005                     	;# 
   583  0006                     	;# 
   584  0007                     	;# 
   585  0009                     	;# 
   586  000A                     	;# 
   587  000B                     	;# 
   588  000C                     	;# 
   589  000D                     	;# 
   590  000E                     	;# 
   591  000E                     	;# 
   592  000F                     	;# 
   593  0010                     	;# 
   594  0011                     	;# 
   595  0012                     	;# 
   596  0013                     	;# 
   597  0014                     	;# 
   598  0015                     	;# 
   599  0015                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001B                     	;# 
   607  001C                     	;# 
   608  001D                     	;# 
   609  001E                     	;# 
   610  001F                     	;# 
   611  0081                     	;# 
   612  0085                     	;# 
   613  0086                     	;# 
   614  0087                     	;# 
   615  0089                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  008F                     	;# 
   620  0090                     	;# 
   621  0091                     	;# 
   622  0092                     	;# 
   623  0093                     	;# 
   624  0093                     	;# 
   625  0093                     	;# 
   626  0094                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0097                     	;# 
   630  0098                     	;# 
   631  0099                     	;# 
   632  009A                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  0105                     	;# 
   639  0107                     	;# 
   640  0108                     	;# 
   641  0109                     	;# 
   642  010C                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  010F                     	;# 
   647  0185                     	;# 
   648  0187                     	;# 
   649  0188                     	;# 
   650  0189                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0009                     	;# 
   662  000A                     	;# 
   663  000B                     	;# 
   664  000C                     	;# 
   665  000D                     	;# 
   666  000E                     	;# 
   667  000E                     	;# 
   668  000F                     	;# 
   669  0010                     	;# 
   670  0011                     	;# 
   671  0012                     	;# 
   672  0013                     	;# 
   673  0014                     	;# 
   674  0015                     	;# 
   675  0015                     	;# 
   676  0016                     	;# 
   677  0017                     	;# 
   678  0018                     	;# 
   679  0019                     	;# 
   680  001A                     	;# 
   681  001B                     	;# 
   682  001B                     	;# 
   683  001C                     	;# 
   684  001D                     	;# 
   685  001E                     	;# 
   686  001F                     	;# 
   687  0081                     	;# 
   688  0085                     	;# 
   689  0086                     	;# 
   690  0087                     	;# 
   691  0089                     	;# 
   692  008C                     	;# 
   693  008D                     	;# 
   694  008E                     	;# 
   695  008F                     	;# 
   696  0090                     	;# 
   697  0091                     	;# 
   698  0092                     	;# 
   699  0093                     	;# 
   700  0093                     	;# 
   701  0093                     	;# 
   702  0094                     	;# 
   703  0095                     	;# 
   704  0096                     	;# 
   705  0097                     	;# 
   706  0098                     	;# 
   707  0099                     	;# 
   708  009A                     	;# 
   709  009B                     	;# 
   710  009C                     	;# 
   711  009D                     	;# 
   712  009E                     	;# 
   713  009F                     	;# 
   714  0105                     	;# 
   715  0107                     	;# 
   716  0108                     	;# 
   717  0109                     	;# 
   718  010C                     	;# 
   719  010C                     	;# 
   720  010D                     	;# 
   721  010E                     	;# 
   722  010F                     	;# 
   723  0185                     	;# 
   724  0187                     	;# 
   725  0188                     	;# 
   726  0189                     	;# 
   727  018C                     	;# 
   728  018D                     	;# 
   729  0000                     	;# 
   730  0001                     	;# 
   731  0002                     	;# 
   732  0003                     	;# 
   733  0004                     	;# 
   734  0005                     	;# 
   735  0006                     	;# 
   736  0007                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000D                     	;# 
   742  000E                     	;# 
   743  000E                     	;# 
   744  000F                     	;# 
   745  0010                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0013                     	;# 
   749  0014                     	;# 
   750  0015                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001D                     	;# 
   761  001E                     	;# 
   762  001F                     	;# 
   763  0081                     	;# 
   764  0085                     	;# 
   765  0086                     	;# 
   766  0087                     	;# 
   767  0089                     	;# 
   768  008C                     	;# 
   769  008D                     	;# 
   770  008E                     	;# 
   771  008F                     	;# 
   772  0090                     	;# 
   773  0091                     	;# 
   774  0092                     	;# 
   775  0093                     	;# 
   776  0093                     	;# 
   777  0093                     	;# 
   778  0094                     	;# 
   779  0095                     	;# 
   780  0096                     	;# 
   781  0097                     	;# 
   782  0098                     	;# 
   783  0099                     	;# 
   784  009A                     	;# 
   785  009B                     	;# 
   786  009C                     	;# 
   787  009D                     	;# 
   788  009E                     	;# 
   789  009F                     	;# 
   790  0105                     	;# 
   791  0107                     	;# 
   792  0108                     	;# 
   793  0109                     	;# 
   794  010C                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  010F                     	;# 
   799  0185                     	;# 
   800  0187                     	;# 
   801  0188                     	;# 
   802  0189                     	;# 
   803  018C                     	;# 
   804  018D                     	;# 
   805  0000                     	;# 
   806  0001                     	;# 
   807  0002                     	;# 
   808  0003                     	;# 
   809  0004                     	;# 
   810  0005                     	;# 
   811  0006                     	;# 
   812  0007                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000D                     	;# 
   818  000E                     	;# 
   819  000E                     	;# 
   820  000F                     	;# 
   821  0010                     	;# 
   822  0011                     	;# 
   823  0012                     	;# 
   824  0013                     	;# 
   825  0014                     	;# 
   826  0015                     	;# 
   827  0015                     	;# 
   828  0016                     	;# 
   829  0017                     	;# 
   830  0018                     	;# 
   831  0019                     	;# 
   832  001A                     	;# 
   833  001B                     	;# 
   834  001B                     	;# 
   835  001C                     	;# 
   836  001D                     	;# 
   837  001E                     	;# 
   838  001F                     	;# 
   839  0081                     	;# 
   840  0085                     	;# 
   841  0086                     	;# 
   842  0087                     	;# 
   843  0089                     	;# 
   844  008C                     	;# 
   845  008D                     	;# 
   846  008E                     	;# 
   847  008F                     	;# 
   848  0090                     	;# 
   849  0091                     	;# 
   850  0092                     	;# 
   851  0093                     	;# 
   852  0093                     	;# 
   853  0093                     	;# 
   854  0094                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0098                     	;# 
   859  0099                     	;# 
   860  009A                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  009F                     	;# 
   866  0105                     	;# 
   867  0107                     	;# 
   868  0108                     	;# 
   869  0109                     	;# 
   870  010C                     	;# 
   871  010C                     	;# 
   872  010D                     	;# 
   873  010E                     	;# 
   874  010F                     	;# 
   875  0185                     	;# 
   876  0187                     	;# 
   877  0188                     	;# 
   878  0189                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  0000                     	;# 
   882  0001                     	;# 
   883  0002                     	;# 
   884  0003                     	;# 
   885  0004                     	;# 
   886  0005                     	;# 
   887  0006                     	;# 
   888  0007                     	;# 
   889  0009                     	;# 
   890  000A                     	;# 
   891  000B                     	;# 
   892  000C                     	;# 
   893  000D                     	;# 
   894  000E                     	;# 
   895  000E                     	;# 
   896  000F                     	;# 
   897  0010                     	;# 
   898  0011                     	;# 
   899  0012                     	;# 
   900  0013                     	;# 
   901  0014                     	;# 
   902  0015                     	;# 
   903  0015                     	;# 
   904  0016                     	;# 
   905  0017                     	;# 
   906  0018                     	;# 
   907  0019                     	;# 
   908  001A                     	;# 
   909  001B                     	;# 
   910  001B                     	;# 
   911  001C                     	;# 
   912  001D                     	;# 
   913  001E                     	;# 
   914  001F                     	;# 
   915  0081                     	;# 
   916  0085                     	;# 
   917  0086                     	;# 
   918  0087                     	;# 
   919  0089                     	;# 
   920  008C                     	;# 
   921  008D                     	;# 
   922  008E                     	;# 
   923  008F                     	;# 
   924  0090                     	;# 
   925  0091                     	;# 
   926  0092                     	;# 
   927  0093                     	;# 
   928  0093                     	;# 
   929  0093                     	;# 
   930  0094                     	;# 
   931  0095                     	;# 
   932  0096                     	;# 
   933  0097                     	;# 
   934  0098                     	;# 
   935  0099                     	;# 
   936  009A                     	;# 
   937  009B                     	;# 
   938  009C                     	;# 
   939  009D                     	;# 
   940  009E                     	;# 
   941  009F                     	;# 
   942  0105                     	;# 
   943  0107                     	;# 
   944  0108                     	;# 
   945  0109                     	;# 
   946  010C                     	;# 
   947  010C                     	;# 
   948  010D                     	;# 
   949  010E                     	;# 
   950  010F                     	;# 
   951  0185                     	;# 
   952  0187                     	;# 
   953  0188                     	;# 
   954  0189                     	;# 
   955  018C                     	;# 
   956  018D                     	;# 
   957  0000                     	;# 
   958  0001                     	;# 
   959  0002                     	;# 
   960  0003                     	;# 
   961  0004                     	;# 
   962  0005                     	;# 
   963  0006                     	;# 
   964  0007                     	;# 
   965  0009                     	;# 
   966  000A                     	;# 
   967  000B                     	;# 
   968  000C                     	;# 
   969  000D                     	;# 
   970  000E                     	;# 
   971  000E                     	;# 
   972  000F                     	;# 
   973  0010                     	;# 
   974  0011                     	;# 
   975  0012                     	;# 
   976  0013                     	;# 
   977  0014                     	;# 
   978  0015                     	;# 
   979  0015                     	;# 
   980  0016                     	;# 
   981  0017                     	;# 
   982  0018                     	;# 
   983  0019                     	;# 
   984  001A                     	;# 
   985  001B                     	;# 
   986  001B                     	;# 
   987  001C                     	;# 
   988  001D                     	;# 
   989  001E                     	;# 
   990  001F                     	;# 
   991  0081                     	;# 
   992  0085                     	;# 
   993  0086                     	;# 
   994  0087                     	;# 
   995  0089                     	;# 
   996  008C                     	;# 
   997  008D                     	;# 
   998  008E                     	;# 
   999  008F                     	;# 
  1000  0090                     	;# 
  1001  0091                     	;# 
  1002  0092                     	;# 
  1003  0093                     	;# 
  1004  0093                     	;# 
  1005  0093                     	;# 
  1006  0094                     	;# 
  1007  0095                     	;# 
  1008  0096                     	;# 
  1009  0097                     	;# 
  1010  0098                     	;# 
  1011  0099                     	;# 
  1012  009A                     	;# 
  1013  009B                     	;# 
  1014  009C                     	;# 
  1015  009D                     	;# 
  1016  009E                     	;# 
  1017  009F                     	;# 
  1018  0105                     	;# 
  1019  0107                     	;# 
  1020  0108                     	;# 
  1021  0109                     	;# 
  1022  010C                     	;# 
  1023  010C                     	;# 
  1024  010D                     	;# 
  1025  010E                     	;# 
  1026  010F                     	;# 
  1027  0185                     	;# 
  1028  0187                     	;# 
  1029  0188                     	;# 
  1030  0189                     	;# 
  1031  018C                     	;# 
  1032  018D                     	;# 
  1033  0000                     	;# 
  1034  0001                     	;# 
  1035  0002                     	;# 
  1036  0003                     	;# 
  1037  0004                     	;# 
  1038  0005                     	;# 
  1039  0006                     	;# 
  1040  0007                     	;# 
  1041  0009                     	;# 
  1042  000A                     	;# 
  1043  000B                     	;# 
  1044  000C                     	;# 
  1045  000D                     	;# 
  1046  000E                     	;# 
  1047  000E                     	;# 
  1048  000F                     	;# 
  1049  0010                     	;# 
  1050  0011                     	;# 
  1051  0012                     	;# 
  1052  0013                     	;# 
  1053  0014                     	;# 
  1054  0015                     	;# 
  1055  0015                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001B                     	;# 
  1063  001C                     	;# 
  1064  001D                     	;# 
  1065  001E                     	;# 
  1066  001F                     	;# 
  1067  0081                     	;# 
  1068  0085                     	;# 
  1069  0086                     	;# 
  1070  0087                     	;# 
  1071  0089                     	;# 
  1072  008C                     	;# 
  1073  008D                     	;# 
  1074  008E                     	;# 
  1075  008F                     	;# 
  1076  0090                     	;# 
  1077  0091                     	;# 
  1078  0092                     	;# 
  1079  0093                     	;# 
  1080  0093                     	;# 
  1081  0093                     	;# 
  1082  0094                     	;# 
  1083  0095                     	;# 
  1084  0096                     	;# 
  1085  0097                     	;# 
  1086  0098                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009C                     	;# 
  1091  009D                     	;# 
  1092  009E                     	;# 
  1093  009F                     	;# 
  1094  0105                     	;# 
  1095  0107                     	;# 
  1096  0108                     	;# 
  1097  0109                     	;# 
  1098  010C                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  010F                     	;# 
  1103  0185                     	;# 
  1104  0187                     	;# 
  1105  0188                     	;# 
  1106  0189                     	;# 
  1107  018C                     	;# 
  1108  018D                     	;# 
  1109  0000                     	;# 
  1110  0001                     	;# 
  1111  0002                     	;# 
  1112  0003                     	;# 
  1113  0004                     	;# 
  1114  0005                     	;# 
  1115  0006                     	;# 
  1116  0007                     	;# 
  1117  0009                     	;# 
  1118  000A                     	;# 
  1119  000B                     	;# 
  1120  000C                     	;# 
  1121  000D                     	;# 
  1122  000E                     	;# 
  1123  000E                     	;# 
  1124  000F                     	;# 
  1125  0010                     	;# 
  1126  0011                     	;# 
  1127  0012                     	;# 
  1128  0013                     	;# 
  1129  0014                     	;# 
  1130  0015                     	;# 
  1131  0015                     	;# 
  1132  0016                     	;# 
  1133  0017                     	;# 
  1134  0018                     	;# 
  1135  0019                     	;# 
  1136  001A                     	;# 
  1137  001B                     	;# 
  1138  001B                     	;# 
  1139  001C                     	;# 
  1140  001D                     	;# 
  1141  001E                     	;# 
  1142  001F                     	;# 
  1143  0081                     	;# 
  1144  0085                     	;# 
  1145  0086                     	;# 
  1146  0087                     	;# 
  1147  0089                     	;# 
  1148  008C                     	;# 
  1149  008D                     	;# 
  1150  008E                     	;# 
  1151  008F                     	;# 
  1152  0090                     	;# 
  1153  0091                     	;# 
  1154  0092                     	;# 
  1155  0093                     	;# 
  1156  0093                     	;# 
  1157  0093                     	;# 
  1158  0094                     	;# 
  1159  0095                     	;# 
  1160  0096                     	;# 
  1161  0097                     	;# 
  1162  0098                     	;# 
  1163  0099                     	;# 
  1164  009A                     	;# 
  1165  009B                     	;# 
  1166  009C                     	;# 
  1167  009D                     	;# 
  1168  009E                     	;# 
  1169  009F                     	;# 
  1170  0105                     	;# 
  1171  0107                     	;# 
  1172  0108                     	;# 
  1173  0109                     	;# 
  1174  010C                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  010F                     	;# 
  1179  0185                     	;# 
  1180  0187                     	;# 
  1181  0188                     	;# 
  1182  0189                     	;# 
  1183  018C                     	;# 
  1184  018D                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  000E                     	;# 
  1200  000F                     	;# 
  1201  0010                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0013                     	;# 
  1205  0014                     	;# 
  1206  0015                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  001D                     	;# 
  1217  001E                     	;# 
  1218  001F                     	;# 
  1219  0081                     	;# 
  1220  0085                     	;# 
  1221  0086                     	;# 
  1222  0087                     	;# 
  1223  0089                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  008F                     	;# 
  1228  0090                     	;# 
  1229  0091                     	;# 
  1230  0092                     	;# 
  1231  0093                     	;# 
  1232  0093                     	;# 
  1233  0093                     	;# 
  1234  0094                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0097                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009E                     	;# 
  1245  009F                     	;# 
  1246  0105                     	;# 
  1247  0107                     	;# 
  1248  0108                     	;# 
  1249  0109                     	;# 
  1250  010C                     	;# 
  1251  010C                     	;# 
  1252  010D                     	;# 
  1253  010E                     	;# 
  1254  010F                     	;# 
  1255  0185                     	;# 
  1256  0187                     	;# 
  1257  0188                     	;# 
  1258  0189                     	;# 
  1259  018C                     	;# 
  1260  018D                     	;# 
  1261                           
  1262                           	psect	idataBANK0
  1263  07FC                     __pidataBANK0:	
  1264                           
  1265                           ;initializer for Display_7Seg@enable_digit
  1266  07FC  3401               	retlw	1
  1267                           
  1268                           	psect	strings
  1269  1000                     __pstrings:	
  1270  1000                     stringtab:	
  1271  1000                     __stringtab:	
  1272  1000                     stringcode:	
  1273                           ;	String table - string pointers are 1 byte each
  1274                           
  1275  1000                     stringdir:	
  1276  1000  3010               	movlw	high stringdir
  1277  1001  008A               	movwf	10
  1278  1002  0804               	movf	4,w
  1279  1003  0A84               	incf	4,f
  1280  1004  0782               	addwf	2,f
  1281  1005                     __stringbase:	
  1282  1005  3400               	retlw	0
  1283  1006                     __end_of__stringtab:	
  1284  1006                     Play_Ring@melody:	
  1285  1006  3493               	retlw	147
  1286  1007  3402               	retlw	2
  1287  1008  340B               	retlw	11
  1288  1009  3402               	retlw	2
  1289  100A  344B               	retlw	75
  1290  100B  3402               	retlw	2
  1291  100C  3488               	retlw	136
  1292  100D  3401               	retlw	1
  1293  100E  3401               	retlw	1
  1294  100F  3400               	retlw	0
  1295  1010  3488               	retlw	136
  1296  1011  3401               	retlw	1
  1297  1012  344B               	retlw	75
  1298  1013  3402               	retlw	2
  1299  1014  3493               	retlw	147
  1300  1015  3402               	retlw	2
  1301  1016  340B               	retlw	11
  1302  1017  3402               	retlw	2
  1303  1018                     __end_ofPlay_Ring@melody:	
  1304  1018                     Play_Ring@beats:	
  1305  1018  3404               	retlw	4
  1306  1019  3404               	retlw	4
  1307  101A  3404               	retlw	4
  1308  101B  3402               	retlw	2
  1309  101C  3440               	retlw	64
  1310  101D  3404               	retlw	4
  1311  101E  3404               	retlw	4
  1312  101F  3404               	retlw	4
  1313  1020  3402               	retlw	2
  1314  1021                     __end_ofPlay_Ring@beats:	
  1315  1021                     Is_Valid_Date@k_min_valid_year:	
  1316  1021  34D0               	retlw	208
  1317  1022  3407               	retlw	7
  1318  1023                     __end_ofIs_Valid_Date@k_min_valid_year:	
  1319  1023                     Is_Valid_Date@k_max_valid_year:	
  1320  1023  34B7               	retlw	183
  1321  1024  340B               	retlw	11
  1322  1025                     __end_ofIs_Valid_Date@k_max_valid_year:	
  1323  1025                     Play_Ring@tempo:	
  1324  1025  3408               	retlw	8
  1325  1026  3407               	retlw	7
  1326  1027                     __end_ofPlay_Ring@tempo:	
  1327  1027                     CRC16@generator:	
  1328  1027  3421               	retlw	33
  1329  1028  3410               	retlw	16
  1330  1029                     __end_ofCRC16@generator:	
  1331  0015                     _CCPR1	set	21
  1332  000E                     _TMR1	set	14
  1333  001B                     _CCPR2	set	27
  1334  0007                     _PORTCbits	set	7
  1335  0017                     _CCP1CONbits	set	23
  1336  001D                     _CCP2CONbits	set	29
  1337  0010                     _T1CONbits	set	16
  1338  000B                     _INTCONbits	set	11
  1339  0013                     _SSPBUF	set	19
  1340  0014                     _SSPCONbits	set	20
  1341  0005                     _PORTAbits	set	5
  1342  0006                     _PORTBbits	set	6
  1343  0007                     _PORTC	set	7
  1344  0006                     _PORTB	set	6
  1345  006C                     _EEIF	set	108
  1346  0062                     _CCP1IF	set	98
  1347  0068                     _CCP2IF	set	104
  1348  005A                     _TMR0IF	set	90
  1349  005D                     _TMR0IE	set	93
  1350  008D                     _PIE2bits	set	141
  1351  0081                     _OPTION_REGbits	set	129
  1352  008F                     _OSCCONbits	set	143
  1353  0094                     _SSPSTATbits	set	148
  1354  0091                     _SSPCON2bits	set	145
  1355  0094                     _SSPSTAT	set	148
  1356  0091                     _SSPCON2	set	145
  1357  0093                     _SSPADD	set	147
  1358  0462                     _CCP1IE	set	1122
  1359  0468                     _CCP2IE	set	1128
  1360  0437                     _TRISB7	set	1079
  1361  0436                     _TRISB6	set	1078
  1362  0435                     _TRISB5	set	1077
  1363  0434                     _TRISB4	set	1076
  1364  0433                     _TRISB3	set	1075
  1365  0432                     _TRISB2	set	1074
  1366  0431                     _TRISB1	set	1073
  1367  0430                     _TRISB0	set	1072
  1368  042F                     _TRISA7	set	1071
  1369  042E                     _TRISA6	set	1070
  1370  042D                     _TRISA5	set	1069
  1371  042C                     _TRISA4	set	1068
  1372  042B                     _TRISA3	set	1067
  1373  042A                     _TRISA2	set	1066
  1374  0429                     _TRISA1	set	1065
  1375  0428                     _TRISA0	set	1064
  1376  043F                     _TRISC7	set	1087
  1377  043E                     _TRISC6	set	1086
  1378  043D                     _TRISC5	set	1085
  1379  043C                     _TRISC4	set	1084
  1380  043B                     _TRISC3	set	1083
  1381  043A                     _TRISC2	set	1082
  1382  0439                     _TRISC1	set	1081
  1383  0438                     _TRISC0	set	1080
  1384  048C                     _ACKEN	set	1164
  1385  048D                     _ACKDT	set	1165
  1386  048B                     _RCEN	set	1163
  1387  010C                     _EEDAT	set	268
  1388  010D                     _EEADR	set	269
  1389  018D                     _EECON2	set	397
  1390  0189                     _ANSELH	set	393
  1391  0188                     _ANSEL	set	392
  1392  0C60                     _RD	set	3168
  1393  0C67                     _EEPGD	set	3175
  1394  0C61                     _WR	set	3169
  1395  0C62                     _WREN	set	3170
  1396  1029                     STR_8:	
  1397  1029  3473               	retlw	115	;'s'
  1398  102A  3465               	retlw	101	;'e'
  1399  102B  3474               	retlw	116	;'t'
  1400  102C  3431               	retlw	49	;'1'
  1401  102D  3400               	retlw	0
  1402  102E                     STR_7:	
  1403  102E  3473               	retlw	115	;'s'
  1404  102F  3465               	retlw	101	;'e'
  1405  1030  3474               	retlw	116	;'t'
  1406  1031  3432               	retlw	50	;'2'
  1407  1032  3400               	retlw	0
  1408  1033                     STR_9:	
  1409  1033  3473               	retlw	115	;'s'
  1410  1034  3472               	retlw	114	;'r'
  1411  1035  3474               	retlw	116	;'t'
  1412  1036  3463               	retlw	99	;'c'
  1413  1037  3400               	retlw	0
  1414  1038                     STR_13:	
  1415  1038  3462               	retlw	98	;'b'
  1416  1039  3461               	retlw	97	;'a'
  1417  103A  3464               	retlw	100	;'d'
  1418  103B  3464               	retlw	100	;'d'
  1419  103C  3400               	retlw	0
  1420  103D                     STR_19:	
  1421  103D  3466               	retlw	102	;'f'
  1422  103E  3472               	retlw	114	;'r'
  1423  103F  3469               	retlw	105	;'i'
  1424  1040  3464               	retlw	100	;'d'
  1425  1041  3400               	retlw	0
  1426  1042                     STR_15:	
  1427  1042  346D               	retlw	109	;'m'
  1428  1043  346F               	retlw	111	;'o'
  1429  1044  346E               	retlw	110	;'n'
  1430  1045  3464               	retlw	100	;'d'
  1431  1046  3400               	retlw	0
  1432  1047                     STR_21:	
  1433  1047  3473               	retlw	115	;'s'
  1434  1048  3475               	retlw	117	;'u'
  1435  1049  346E               	retlw	110	;'n'
  1436  104A  3464               	retlw	100	;'d'
  1437  104B  3400               	retlw	0
  1438  104C                     STR_17:	
  1439  104C  3477               	retlw	119	;'w'
  1440  104D  3465               	retlw	101	;'e'
  1441  104E  3464               	retlw	100	;'d'
  1442  104F  3465               	retlw	101	;'e'
  1443  1050  3400               	retlw	0
  1444  1051                     STR_10:	
  1445  1051  3473               	retlw	115	;'s'
  1446  1052  3461               	retlw	97	;'a'
  1447  1053  3476               	retlw	118	;'v'
  1448  1054  3465               	retlw	101	;'e'
  1449  1055  3400               	retlw	0
  1450  1056                     STR_18:	
  1451  1056  3474               	retlw	116	;'t'
  1452  1057  3468               	retlw	104	;'h'
  1453  1058  3475               	retlw	117	;'u'
  1454  1059  3472               	retlw	114	;'r'
  1455  105A  3400               	retlw	0
  1456  105B                     STR_16:	
  1457  105B  3474               	retlw	116	;'t'
  1458  105C  3475               	retlw	117	;'u'
  1459  105D  3465               	retlw	101	;'e'
  1460  105E  3473               	retlw	115	;'s'
  1461  105F  3400               	retlw	0
  1462  1060                     STR_20:	
  1463  1060  3473               	retlw	115	;'s'
  1464  1061  3461               	retlw	97	;'a'
  1465  1062  3474               	retlw	116	;'t'
  1466  1063  3475               	retlw	117	;'u'
  1467  1064  3400               	retlw	0
  1468  1065                     STR_2:	
  1469  1065  342A               	retlw	42	;'*'
  1470  1066  342A               	retlw	42	;'*'
  1471  1067  342A               	retlw	42	;'*'
  1472  1068  342A               	retlw	42	;'*'
  1473  1069  3400               	retlw	0
  1474  106A                     STR_1:	
  1475  106A  3462               	retlw	98	;'b'
  1476  106B  3472               	retlw	114	;'r'
  1477  106C  3461               	retlw	97	;'a'
  1478  106D  346D               	retlw	109	;'m'
  1479  106E  3400               	retlw	0
  1480  106F                     STR_5:	
  1481  106F  3464               	retlw	100	;'d'
  1482  1070  347A               	retlw	122	;'z'
  1483  1071  3477               	retlw	119	;'w'
  1484  1072  346F               	retlw	111	;'o'
  1485  1073  3400               	retlw	0
  1486  1074                     STR_3:	
  1487  1074  3466               	retlw	102	;'f'
  1488  1075  3475               	retlw	117	;'u'
  1489  1076  3472               	retlw	114	;'r'
  1490  1077  3474               	retlw	116	;'t'
  1491  1078  3400               	retlw	0
  1492  1065                     
  1493                           ; #config settings
  1494  0000                     
  1495                           	psect	cinit
  1496  0013                     start_initialization:	
  1497  0013                     __initialization:	
  1498                           
  1499                           ; Initialize objects allocated to BANK0
  1500  0013  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1501  0018  00DE               	movwf	__pdataBANK0& (0+127)
  1502                           
  1503                           ; Clear objects allocated to BANK3
  1504  0019  1783               	bsf	3,7	;select IRP bank2
  1505  001A  3090               	movlw	low __pbssBANK3
  1506  001B  0084               	movwf	4
  1507  001C  30D6               	movlw	low (__pbssBANK3+70)
  1508  001D  160A  158A  2074  120A  118A  	fcall	clear_ram0
  1509                           
  1510                           ; Clear objects allocated to BANK2
  1511  0022  3010               	movlw	low __pbssBANK2
  1512  0023  0084               	movwf	4
  1513  0024  302E               	movlw	low (__pbssBANK2+30)
  1514  0025  160A  158A  2074  120A  118A  	fcall	clear_ram0
  1515                           
  1516                           ; Clear objects allocated to BANK1
  1517  002A  1383               	bcf	3,7	;select IRP bank0
  1518  002B  30A0               	movlw	low __pbssBANK1
  1519  002C  0084               	movwf	4
  1520  002D  30D2               	movlw	low (__pbssBANK1+50)
  1521  002E  160A  158A  2074   	fcall	clear_ram0
  1522                           
  1523                           ; Clear objects allocated to BANK0
  1524  0031  01D9               	clrf	__pbssBANK0& (0+127)
  1525  0032  01DA               	clrf	(__pbssBANK0+1)& (0+127)
  1526  0033  01DB               	clrf	(__pbssBANK0+2)& (0+127)
  1527  0034  01DC               	clrf	(__pbssBANK0+3)& (0+127)
  1528  0035  01DD               	clrf	(__pbssBANK0+4)& (0+127)
  1529  0036                     end_of_initialization:	
  1530                           ;End of C runtime variable initialization code
  1531                           
  1532  0036                     __end_of__initialization:	
  1533  0036  0183               	clrf	3
  1534  0037  160A  158A  2B74   	ljmp	_main	;jump to C main() function
  1535                           
  1536                           	psect	bssBANK0
  1537  0059                     __pbssBANK0:	
  1538  0059                     _g_generic_timer:	
  1539  0059                     	ds	2
  1540  005B                     Menu_Set_Param_Time_Limit@change_digit:	
  1541  005B                     	ds	1
  1542  005C                     Frame_Buffer@write_pointer:	
  1543  005C                     	ds	1
  1544  005D                     Frame_Buffer@read_pointer:	
  1545  005D                     	ds	1
  1546                           
  1547                           	psect	dataBANK0
  1548  005E                     __pdataBANK0:	
  1549  005E                     Display_7Seg@enable_digit:	
  1550  005E                     	ds	1
  1551                           
  1552                           	psect	bssBANK1
  1553  00A0                     __pbssBANK1:	
  1554  00A0                     _g_button_timer:	
  1555  00A0                     	ds	2
  1556  00A2                     _g_pwm_freq:	
  1557  00A2                     	ds	2
  1558  00A4                     Menu_Set_Param_Time_Limit@flag:	
  1559  00A4                     	ds	1
  1560  00A5                     Manchester_Decode@sync_flag:	
  1561  00A5                     	ds	1
  1562  00A6                     Manchester_Decode@next_edge_also_T_flag:	
  1563  00A6                     	ds	1
  1564  00A7                     Manchester_Decode@start_data_flag:	
  1565  00A7                     	ds	1
  1566  00A8                     Manchester_Decode@data_counter:	
  1567  00A8                     	ds	1
  1568  00A9                     Manchester_Decode@bit_pos:	
  1569  00A9                     	ds	1
  1570  00AA                     ISR@display_timer:	
  1571  00AA                     	ds	1
  1572  00AB                     ISR@set_flag:	
  1573  00AB                     	ds	1
  1574  00AC                     Frame_Buffer@write_pointer_mem:	
  1575  00AC                     	ds	1
  1576  00AD                     _g_decimal_point:	
  1577  00AD                     	ds	1
  1578  00AE                     _g_display_controll:	
  1579  00AE                     	ds	1
  1580  00AF                     _g_reciver_ccp2_isr_fire_flag:	
  1581  00AF                     	ds	1
  1582  00B0                     Button_Init@set_right:	
  1583  00B0                     	ds	7
  1584  00B7                     Button_Init@set_time2:	
  1585  00B7                     	ds	7
  1586  00BE                     Button_Init@set_time1:	
  1587  00BE                     	ds	7
  1588  00C5                     Button_Init@set_rtc:	
  1589  00C5                     	ds	7
  1590  00CC                     _g_display_text:	
  1591  00CC                     	ds	4
  1592  00D0                     Manchester_Decode@decoded_byte:	
  1593  00D0                     	ds	1
  1594  00D1                     ISR@edge_dir:	
  1595  00D1                     	ds	1
  1596                           
  1597                           	psect	bssBANK3
  1598  0190                     __pbssBANK3:	
  1599  0190                     Menu_Init@time_limit_free_day_2:	
  1600  0190                     	ds	8
  1601  0198                     Menu_Init@time_limit_free_day_1:	
  1602  0198                     	ds	8
  1603  01A0                     Menu_Init@time_limit_work_day_2:	
  1604  01A0                     	ds	8
  1605  01A8                     Menu_Init@time_limit_work_day_1:	
  1606  01A8                     	ds	8
  1607  01B0                     Menu_Init@year:	
  1608  01B0                     	ds	8
  1609  01B8                     Menu_Init@day_month:	
  1610  01B8                     	ds	8
  1611  01C0                     Menu_Init@hours_minutes:	
  1612  01C0                     	ds	8
  1613  01C8                     Button_Init@set_down:	
  1614  01C8                     	ds	7
  1615  01CF                     Button_Init@set_up:	
  1616  01CF                     	ds	7
  1617                           
  1618                           	psect	bssBANK2
  1619  0110                     __pbssBANK2:	
  1620  0110                     Frame_Buffer@buffer:	
  1621  0110                     	ds	30
  1622                           
  1623                           	psect	clrtext
  1624  1874                     clear_ram0:	
  1625                           ;	Called with FSR containing the base address, and
  1626                           ;	W with the last address+1
  1627                           
  1628  1874  0064               	clrwdt	;clear the watchdog before getting into this loop
  1629  1875                     clrloop0:	
  1630  1875  0180               	clrf	0	;clear RAM location pointed to by FSR
  1631  1876  0A84               	incf	4,f	;increment pointer
  1632  1877  0604               	xorwf	4,w	;XOR with final address
  1633  1878  1903               	btfsc	3,2	;have we reached the end yet?
  1634  1879  3400               	retlw	0	;all done for this memory range, return
  1635  187A  0604               	xorwf	4,w	;XOR again to restore value
  1636  187B  2875               	goto	clrloop0	;do the next byte
  1637                           
  1638                           	psect	cstackBANK3
  1639  01D6                     __pcstackBANK3:	
  1640  01D6                     main@data_rcv:	
  1641                           
  1642                           ; 5 bytes @ 0x0
  1643  01D6                     	ds	5
  1644  01DB                     main@keydef:	
  1645                           
  1646                           ; 6 bytes @ 0x5
  1647  01DB                     	ds	6
  1648  01E1                     main@time:	
  1649                           
  1650                           ; 7 bytes @ 0xB
  1651  01E1                     	ds	7
  1652  01E8                     main@menudef:	
  1653                           
  1654                           ; 7 bytes @ 0x12
  1655  01E8                     	ds	7
  1656                           
  1657                           	psect	cstackBANK1
  1658  00D2                     __pcstackBANK1:	
  1659  00D2                     Menu_Set_Time@key:	
  1660                           
  1661                           ; 1 bytes @ 0x0
  1662  00D2                     	ds	1
  1663  00D3                     Menu_Set_Time@check_button:	
  1664                           
  1665                           ; 1 bytes @ 0x1
  1666  00D3                     	ds	1
  1667  00D4                     Menu_Set_Time@current_menu_ptr:	
  1668                           
  1669                           ; 2 bytes @ 0x2
  1670  00D4                     	ds	2
  1671  00D6                     Menu_Set_Time@menudef:	
  1672                           
  1673                           ; 1 bytes @ 0x4
  1674  00D6                     	ds	1
  1675  00D7                     Menu_Set_Time@current_menu:	
  1676                           
  1677                           ; 8 bytes @ 0x5
  1678  00D7                     	ds	8
  1679  00DF                     Menu_Set_Time@time:	
  1680                           
  1681                           ; 7 bytes @ 0xD
  1682  00DF                     	ds	7
  1683                           
  1684                           	psect	cstackCOMMON
  1685  0070                     __pcstackCOMMON:	
  1686  0070                     ?_Global_Init:	
  1687  0070                     ?_Interrupt_Init:	
  1688                           ; 1 bytes @ 0x0
  1689                           
  1690  0070                     ?_I2C_Init:	
  1691                           ; 1 bytes @ 0x0
  1692                           
  1693  0070                     ?_Button_Init:	
  1694                           ; 1 bytes @ 0x0
  1695                           
  1696  0070                     ?_Menu_Init:	
  1697                           ; 1 bytes @ 0x0
  1698                           
  1699  0070                     ?_Play_Ring:	
  1700                           ; 1 bytes @ 0x0
  1701                           
  1702  0070                     ?_Display_Weekday:	
  1703                           ; 1 bytes @ 0x0
  1704                           
  1705  0070                     ?_PCF8583_Set_Date_Time:	
  1706                           ; 1 bytes @ 0x0
  1707                           
  1708  0070                     ?_Read_EEprom:	
  1709                           ; 1 bytes @ 0x0
  1710                           
  1711  0070                     ?_main:	
  1712                           ; 1 bytes @ 0x0
  1713                           
  1714  0070                     ?_Sign_Anode_Data:	
  1715                           ; 1 bytes @ 0x0
  1716                           
  1717  0070                     ?_Disable_All_Digits:	
  1718                           ; 1 bytes @ 0x0
  1719                           
  1720  0070                     ?_I2C_Master_Wait:	
  1721                           ; 1 bytes @ 0x0
  1722                           
  1723  0070                     ?_I2C_Master_Start:	
  1724                           ; 1 bytes @ 0x0
  1725                           
  1726  0070                     ?_I2C_Master_Stop:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0070                     ?_I2C_Master_Read:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0070                     ?_ISR:	
  1733                           ; 1 bytes @ 0x0
  1734                           
  1735  0070                     ?_Button_Handler:	
  1736                           ; 1 bytes @ 0x0
  1737                           
  1738  0070                     ?_CRC_check:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0070                     ?_Check_Event:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0070                     ?_Init_CompareMode:	
  1745                           ; 1 bytes @ 0x0
  1746                           
  1747  0070                     ?_Init_CaptureMode:	
  1748                           ; 1 bytes @ 0x0
  1749                           
  1750  0070                     ?_BCD_2_DEC:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0070                     ?_DEC_2_BCD:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ?_PCF8583_Read_Byte:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759  0070                     ?i1_Frame_Buffer:	
  1760                           ; 1 bytes @ 0x0
  1761                           
  1762  0070                     ?i1_Sign_Anode_Data:	
  1763                           ; 1 bytes @ 0x0
  1764                           
  1765  0070                     ??i1_Sign_Anode_Data:	
  1766                           ; 1 bytes @ 0x0
  1767                           
  1768  0070                     ?i1_Disable_All_Digits:	
  1769                           ; 1 bytes @ 0x0
  1770                           
  1771  0070                     ??i1_Disable_All_Digits:	
  1772                           ; 1 bytes @ 0x0
  1773                           
  1774  0070                     i1Frame_Buffer@mode:	
  1775                           ; 1 bytes @ 0x0
  1776                           
  1777                           
  1778                           ; 1 bytes @ 0x0
  1779  0070                     	ds	1
  1780  0071                     ??i1_Frame_Buffer:	
  1781                           
  1782                           ; 1 bytes @ 0x1
  1783  0071                     	ds	1
  1784  0072                     i1Frame_Buffer@data:	
  1785  0072                     i1Sign_Anode_Data@sign:	
  1786                           ; 1 bytes @ 0x2
  1787                           
  1788                           
  1789                           ; 1 bytes @ 0x2
  1790  0072                     	ds	1
  1791  0073                     ?_Manchester_Decode:	
  1792  0073                     ?i1_Set_Anode_Outputs:	
  1793                           ; 1 bytes @ 0x3
  1794                           
  1795  0073                     Manchester_Decode@pulse_time:	
  1796                           ; 1 bytes @ 0x3
  1797                           
  1798  0073                     i1Set_Anode_Outputs@decimal_point:	
  1799                           ; 1 bytes @ 0x3
  1800                           
  1801                           
  1802                           ; 1 bytes @ 0x3
  1803  0073                     	ds	1
  1804  0074                     ??_Manchester_Decode:	
  1805  0074                     ??i1_Set_Anode_Outputs:	
  1806                           ; 1 bytes @ 0x4
  1807                           
  1808                           
  1809                           ; 1 bytes @ 0x4
  1810  0074                     	ds	1
  1811  0075                     i1Set_Anode_Outputs@sign:	
  1812                           
  1813                           ; 1 bytes @ 0x5
  1814  0075                     	ds	1
  1815  0076                     ?i1_One_Digit_Handler:	
  1816  0076                     i1One_Digit_Handler@digit_number:	
  1817                           ; 1 bytes @ 0x6
  1818                           
  1819                           
  1820                           ; 1 bytes @ 0x6
  1821  0076                     	ds	1
  1822  0077                     i1One_Digit_Handler@decimal_point:	
  1823                           
  1824                           ; 1 bytes @ 0x7
  1825  0077                     	ds	1
  1826  0078                     ??i1_One_Digit_Handler:	
  1827  0078                     Manchester_Decode@edge_dir:	
  1828                           ; 1 bytes @ 0x8
  1829                           
  1830                           
  1831                           ; 1 bytes @ 0x8
  1832  0078                     	ds	2
  1833  007A                     i1One_Digit_Handler@sign:	
  1834                           
  1835                           ; 1 bytes @ 0xA
  1836  007A                     	ds	1
  1837  007B                     ?i1_Display_7Seg:	
  1838  007B                     i1Display_7Seg@decimal_point:	
  1839                           ; 1 bytes @ 0xB
  1840                           
  1841                           
  1842                           ; 1 bytes @ 0xB
  1843  007B                     	ds	1
  1844  007C                     ??i1_Display_7Seg:	
  1845                           
  1846                           ; 1 bytes @ 0xC
  1847  007C                     	ds	1
  1848  007D                     i1Display_7Seg@text:	
  1849                           
  1850                           ; 1 bytes @ 0xD
  1851  007D                     	ds	1
  1852                           
  1853                           	psect	cstackBANK0
  1854  0020                     __pcstackBANK0:	
  1855  0020                     ??_ISR:	
  1856                           
  1857                           ; 1 bytes @ 0x0
  1858  0020                     	ds	4
  1859  0024                     ISR@pulse_time:	
  1860                           
  1861                           ; 2 bytes @ 0x4
  1862  0024                     	ds	2
  1863  0026                     ??_Global_Init:	
  1864  0026                     ??_Interrupt_Init:	
  1865                           ; 1 bytes @ 0x6
  1866                           
  1867  0026                     ??_I2C_Init:	
  1868                           ; 1 bytes @ 0x6
  1869                           
  1870  0026                     ??_Button_Init:	
  1871                           ; 1 bytes @ 0x6
  1872                           
  1873  0026                     ?_Send_7Seg_Text:	
  1874                           ; 1 bytes @ 0x6
  1875                           
  1876  0026                     ?_Write_EEprom:	
  1877                           ; 1 bytes @ 0x6
  1878                           
  1879  0026                     ??_Read_EEprom:	
  1880                           ; 1 bytes @ 0x6
  1881                           
  1882  0026                     ?_Frame_Buffer:	
  1883                           ; 1 bytes @ 0x6
  1884                           
  1885  0026                     ??_Sign_Anode_Data:	
  1886                           ; 1 bytes @ 0x6
  1887                           
  1888  0026                     ??_Disable_All_Digits:	
  1889                           ; 1 bytes @ 0x6
  1890                           
  1891  0026                     ??_I2C_Master_Wait:	
  1892                           ; 1 bytes @ 0x6
  1893                           
  1894  0026                     ??_I2C_Master_Start:	
  1895                           ; 1 bytes @ 0x6
  1896                           
  1897  0026                     ??_I2C_Master_Stop:	
  1898                           ; 1 bytes @ 0x6
  1899                           
  1900  0026                     ?_I2C_Master_Write:	
  1901                           ; 1 bytes @ 0x6
  1902                           
  1903  0026                     ??_I2C_Master_Read:	
  1904                           ; 1 bytes @ 0x6
  1905                           
  1906  0026                     ?_Key_Press:	
  1907                           ; 1 bytes @ 0x6
  1908                           
  1909  0026                     ??_Init_CompareMode:	
  1910                           ; 1 bytes @ 0x6
  1911                           
  1912  0026                     ??_Init_CaptureMode:	
  1913                           ; 1 bytes @ 0x6
  1914                           
  1915  0026                     ?___lbdiv:	
  1916                           ; 1 bytes @ 0x6
  1917                           
  1918  0026                     ?___lbmod:	
  1919                           ; 1 bytes @ 0x6
  1920                           
  1921  0026                     ?_CRC16:	
  1922                           ; 1 bytes @ 0x6
  1923                           
  1924  0026                     ?___wmul:	
  1925                           ; 2 bytes @ 0x6
  1926                           
  1927  0026                     ?___awmod:	
  1928                           ; 2 bytes @ 0x6
  1929                           
  1930  0026                     ?___lmul:	
  1931                           ; 2 bytes @ 0x6
  1932                           
  1933  0026                     ?___lldiv:	
  1934                           ; 4 bytes @ 0x6
  1935                           
  1936  0026                     Frame_Buffer@mode:	
  1937                           ; 4 bytes @ 0x6
  1938                           
  1939  0026                     CRC16@size:	
  1940                           ; 1 bytes @ 0x6
  1941                           
  1942  0026                     Send_7Seg_Text@decimal_point:	
  1943                           ; 1 bytes @ 0x6
  1944                           
  1945  0026                     Write_EEprom@adress:	
  1946                           ; 1 bytes @ 0x6
  1947                           
  1948  0026                     Read_EEprom@adress:	
  1949                           ; 1 bytes @ 0x6
  1950                           
  1951  0026                     ___lbdiv@divisor:	
  1952                           ; 1 bytes @ 0x6
  1953                           
  1954  0026                     ___lbmod@divisor:	
  1955                           ; 1 bytes @ 0x6
  1956                           
  1957  0026                     I2C_Master_Write@data:	
  1958                           ; 1 bytes @ 0x6
  1959                           
  1960  0026                     Key_Press@button:	
  1961                           ; 2 bytes @ 0x6
  1962                           
  1963  0026                     ___wmul@multiplier:	
  1964                           ; 2 bytes @ 0x6
  1965                           
  1966  0026                     ___awmod@divisor:	
  1967                           ; 2 bytes @ 0x6
  1968                           
  1969  0026                     ___lmul@multiplier:	
  1970                           ; 2 bytes @ 0x6
  1971                           
  1972  0026                     ___lldiv@divisor:	
  1973                           ; 4 bytes @ 0x6
  1974                           
  1975                           
  1976                           ; 4 bytes @ 0x6
  1977  0026                     	ds	1
  1978  0027                     ??_Send_7Seg_Text:	
  1979  0027                     ?_Read_Limit_From_EEprom:	
  1980                           ; 1 bytes @ 0x7
  1981                           
  1982  0027                     ??_Write_EEprom:	
  1983                           ; 1 bytes @ 0x7
  1984                           
  1985  0027                     ??_Frame_Buffer:	
  1986                           ; 1 bytes @ 0x7
  1987                           
  1988  0027                     ??___lbdiv:	
  1989                           ; 1 bytes @ 0x7
  1990                           
  1991  0027                     ??___lbmod:	
  1992                           ; 1 bytes @ 0x7
  1993                           
  1994  0027                     Button_Init@keydef:	
  1995                           ; 1 bytes @ 0x7
  1996                           
  1997  0027                     Read_Limit_From_EEprom@limit2:	
  1998                           ; 1 bytes @ 0x7
  1999                           
  2000  0027                     Write_EEprom@data:	
  2001                           ; 1 bytes @ 0x7
  2002                           
  2003                           
  2004                           ; 1 bytes @ 0x7
  2005  0027                     	ds	1
  2006  0028                     ?_Write_Limit_To_EEprom:	
  2007  0028                     ??_CRC16:	
  2008                           ; 1 bytes @ 0x8
  2009                           
  2010  0028                     ??_I2C_Master_Write:	
  2011                           ; 1 bytes @ 0x8
  2012                           
  2013  0028                     ??_Key_Press:	
  2014                           ; 1 bytes @ 0x8
  2015                           
  2016  0028                     ?_PCF8583_Write_Byte:	
  2017                           ; 1 bytes @ 0x8
  2018                           
  2019  0028                     Frame_Buffer@data:	
  2020                           ; 1 bytes @ 0x8
  2021                           
  2022  0028                     Sign_Anode_Data@sign:	
  2023                           ; 1 bytes @ 0x8
  2024                           
  2025  0028                     I2C_Master_Read@ack:	
  2026                           ; 1 bytes @ 0x8
  2027                           
  2028  0028                     Write_Limit_To_EEprom@limit2:	
  2029                           ; 1 bytes @ 0x8
  2030                           
  2031  0028                     Read_Limit_From_EEprom@limit_type:	
  2032                           ; 1 bytes @ 0x8
  2033                           
  2034  0028                     Send_7Seg_Text@i:	
  2035                           ; 1 bytes @ 0x8
  2036                           
  2037  0028                     PCF8583_Write_Byte@data:	
  2038                           ; 1 bytes @ 0x8
  2039                           
  2040  0028                     ___lbdiv@dividend:	
  2041                           ; 1 bytes @ 0x8
  2042                           
  2043  0028                     ___wmul@multiplicand:	
  2044                           ; 1 bytes @ 0x8
  2045                           
  2046  0028                     ___awmod@dividend:	
  2047                           ; 2 bytes @ 0x8
  2048                           
  2049                           
  2050                           ; 2 bytes @ 0x8
  2051  0028                     	ds	1
  2052  0029                     ?_Set_Anode_Outputs:	
  2053  0029                     ??_Read_Limit_From_EEprom:	
  2054                           ; 1 bytes @ 0x9
  2055                           
  2056  0029                     ??_PCF8583_Write_Byte:	
  2057                           ; 1 bytes @ 0x9
  2058                           
  2059  0029                     ?_Frame_Decode:	
  2060                           ; 1 bytes @ 0x9
  2061                           
  2062  0029                     Set_Anode_Outputs@decimal_point:	
  2063                           ; 2 bytes @ 0x9
  2064                           
  2065  0029                     Write_Limit_To_EEprom@limit_type:	
  2066                           ; 1 bytes @ 0x9
  2067                           
  2068  0029                     Send_7Seg_Text@text:	
  2069                           ; 1 bytes @ 0x9
  2070                           
  2071  0029                     ___lbdiv@counter:	
  2072                           ; 1 bytes @ 0x9
  2073                           
  2074  0029                     I2C_Master_Read@data:	
  2075                           ; 1 bytes @ 0x9
  2076                           
  2077                           
  2078                           ; 2 bytes @ 0x9
  2079  0029                     	ds	1
  2080  002A                     ??_Set_Anode_Outputs:	
  2081  002A                     ??_Display_Weekday:	
  2082                           ; 1 bytes @ 0xA
  2083                           
  2084  002A                     ??_Write_Limit_To_EEprom:	
  2085                           ; 1 bytes @ 0xA
  2086                           
  2087  002A                     ??___wmul:	
  2088                           ; 1 bytes @ 0xA
  2089                           
  2090  002A                     ??___awmod:	
  2091                           ; 1 bytes @ 0xA
  2092                           
  2093  002A                     Read_Limit_From_EEprom@limit1:	
  2094                           ; 1 bytes @ 0xA
  2095                           
  2096  002A                     ___lbdiv@quotient:	
  2097                           ; 1 bytes @ 0xA
  2098                           
  2099  002A                     ___lbmod@dividend:	
  2100                           ; 1 bytes @ 0xA
  2101                           
  2102  002A                     ___wmul@product:	
  2103                           ; 1 bytes @ 0xA
  2104                           
  2105  002A                     ___lmul@multiplicand:	
  2106                           ; 2 bytes @ 0xA
  2107                           
  2108  002A                     ___lldiv@dividend:	
  2109                           ; 4 bytes @ 0xA
  2110                           
  2111                           
  2112                           ; 4 bytes @ 0xA
  2113  002A                     	ds	1
  2114  002B                     ??_Menu_Init:	
  2115  002B                     ??_Frame_Decode:	
  2116                           ; 1 bytes @ 0xB
  2117                           
  2118  002B                     ??_PCF8583_Read_Byte:	
  2119                           ; 1 bytes @ 0xB
  2120                           
  2121  002B                     CRC16@data_tab_ptr:	
  2122                           ; 1 bytes @ 0xB
  2123                           
  2124  002B                     Set_Anode_Outputs@sign:	
  2125                           ; 1 bytes @ 0xB
  2126                           
  2127  002B                     Write_Limit_To_EEprom@limit1:	
  2128                           ; 1 bytes @ 0xB
  2129                           
  2130  002B                     PCF8583_Write_Byte@address:	
  2131                           ; 1 bytes @ 0xB
  2132                           
  2133  002B                     ___awmod@counter:	
  2134                           ; 1 bytes @ 0xB
  2135                           
  2136  002B                     ___lbmod@counter:	
  2137                           ; 1 bytes @ 0xB
  2138                           
  2139                           
  2140                           ; 1 bytes @ 0xB
  2141  002B                     	ds	1
  2142  002C                     ?_One_Digit_Handler:	
  2143  002C                     ?___lwdiv:	
  2144                           ; 1 bytes @ 0xC
  2145                           
  2146  002C                     CRC16@k:	
  2147                           ; 2 bytes @ 0xC
  2148                           
  2149  002C                     One_Digit_Handler@digit_number:	
  2150                           ; 1 bytes @ 0xC
  2151                           
  2152  002C                     Menu_Init@menudef:	
  2153                           ; 1 bytes @ 0xC
  2154                           
  2155  002C                     Display_Weekday@weekday:	
  2156                           ; 1 bytes @ 0xC
  2157                           
  2158  002C                     ___awmod@sign:	
  2159                           ; 1 bytes @ 0xC
  2160                           
  2161  002C                     ___lbmod@rem:	
  2162                           ; 1 bytes @ 0xC
  2163                           
  2164  002C                     ___lwdiv@divisor:	
  2165                           ; 1 bytes @ 0xC
  2166                           
  2167                           
  2168                           ; 2 bytes @ 0xC
  2169  002C                     	ds	1
  2170  002D                     ??_DEC_2_BCD:	
  2171  002D                     ?___bmul:	
  2172                           ; 1 bytes @ 0xD
  2173                           
  2174  002D                     ?___awdiv:	
  2175                           ; 1 bytes @ 0xD
  2176                           
  2177  002D                     CRC16@i:	
  2178                           ; 2 bytes @ 0xD
  2179                           
  2180  002D                     One_Digit_Handler@decimal_point:	
  2181                           ; 1 bytes @ 0xD
  2182                           
  2183  002D                     Frame_Decode@DataRCV:	
  2184                           ; 1 bytes @ 0xD
  2185                           
  2186  002D                     PCF8583_Read_Byte@address:	
  2187                           ; 1 bytes @ 0xD
  2188                           
  2189  002D                     ___bmul@multiplicand:	
  2190                           ; 1 bytes @ 0xD
  2191                           
  2192  002D                     ___awdiv@divisor:	
  2193                           ; 1 bytes @ 0xD
  2194                           
  2195                           
  2196                           ; 2 bytes @ 0xD
  2197  002D                     	ds	1
  2198  002E                     ??_One_Digit_Handler:	
  2199  002E                     ??___lmul:	
  2200                           ; 1 bytes @ 0xE
  2201                           
  2202  002E                     ??___bmul:	
  2203                           ; 1 bytes @ 0xE
  2204                           
  2205  002E                     ??___lldiv:	
  2206                           ; 1 bytes @ 0xE
  2207                           
  2208  002E                     Frame_Decode@data:	
  2209                           ; 1 bytes @ 0xE
  2210                           
  2211  002E                     PCF8583_Read_Byte@retval:	
  2212                           ; 1 bytes @ 0xE
  2213                           
  2214  002E                     CRC16@crc:	
  2215                           ; 1 bytes @ 0xE
  2216                           
  2217  002E                     ___lwdiv@dividend:	
  2218                           ; 2 bytes @ 0xE
  2219                           
  2220                           
  2221                           ; 2 bytes @ 0xE
  2222  002E                     	ds	1
  2223  002F                     Frame_Decode@i:	
  2224  002F                     ___bmul@product:	
  2225                           ; 1 bytes @ 0xF
  2226                           
  2227  002F                     ___awdiv@dividend:	
  2228                           ; 1 bytes @ 0xF
  2229                           
  2230  002F                     ___lmul@product:	
  2231                           ; 2 bytes @ 0xF
  2232                           
  2233  002F                     ___lldiv@quotient:	
  2234                           ; 4 bytes @ 0xF
  2235                           
  2236                           
  2237                           ; 4 bytes @ 0xF
  2238  002F                     	ds	1
  2239  0030                     ??_Button_Handler:	
  2240  0030                     ??_CRC_check:	
  2241                           ; 1 bytes @ 0x10
  2242                           
  2243  0030                     ??___lwdiv:	
  2244                           ; 1 bytes @ 0x10
  2245                           
  2246  0030                     One_Digit_Handler@sign:	
  2247                           ; 1 bytes @ 0x10
  2248                           
  2249  0030                     DEC_2_BCD@dec:	
  2250                           ; 1 bytes @ 0x10
  2251                           
  2252  0030                     ___bmul@multiplier:	
  2253                           ; 1 bytes @ 0x10
  2254                           
  2255                           
  2256                           ; 1 bytes @ 0x10
  2257  0030                     	ds	1
  2258  0031                     ??_PCF8583_Set_Date_Time:	
  2259  0031                     ?_Display_7Seg:	
  2260                           ; 1 bytes @ 0x11
  2261                           
  2262  0031                     ??_BCD_2_DEC:	
  2263                           ; 1 bytes @ 0x11
  2264                           
  2265  0031                     ??___awdiv:	
  2266                           ; 1 bytes @ 0x11
  2267                           
  2268  0031                     Display_7Seg@decimal_point:	
  2269                           ; 1 bytes @ 0x11
  2270                           
  2271  0031                     Button_Handler@keydef:	
  2272                           ; 1 bytes @ 0x11
  2273                           
  2274  0031                     ___lwdiv@counter:	
  2275                           ; 1 bytes @ 0x11
  2276                           
  2277  0031                     CRC_check@crc_val:	
  2278                           ; 1 bytes @ 0x11
  2279                           
  2280                           
  2281                           ; 2 bytes @ 0x11
  2282  0031                     	ds	1
  2283  0032                     ??_Display_7Seg:	
  2284  0032                     Button_Handler@button:	
  2285                           ; 1 bytes @ 0x12
  2286                           
  2287  0032                     ___awdiv@counter:	
  2288                           ; 1 bytes @ 0x12
  2289                           
  2290  0032                     ___lwdiv@quotient:	
  2291                           ; 1 bytes @ 0x12
  2292                           
  2293                           
  2294                           ; 2 bytes @ 0x12
  2295  0032                     	ds	1
  2296  0033                     ?_Wait_ms:	
  2297  0033                     Display_7Seg@text:	
  2298                           ; 1 bytes @ 0x13
  2299                           
  2300  0033                     CRC_check@DataRCV:	
  2301                           ; 1 bytes @ 0x13
  2302                           
  2303  0033                     PCF8583_Set_Date_Time@bcd_sec:	
  2304                           ; 1 bytes @ 0x13
  2305                           
  2306  0033                     ___lldiv@counter:	
  2307                           ; 1 bytes @ 0x13
  2308                           
  2309  0033                     ___awdiv@sign:	
  2310                           ; 1 bytes @ 0x13
  2311                           
  2312  0033                     Wait_ms@time:	
  2313                           ; 1 bytes @ 0x13
  2314                           
  2315                           
  2316                           ; 2 bytes @ 0x13
  2317  0033                     	ds	1
  2318  0034                     ?_Generate_PWM:	
  2319  0034                     ?___lwmod:	
  2320                           ; 1 bytes @ 0x14
  2321                           
  2322  0034                     BCD_2_DEC@bcd:	
  2323                           ; 2 bytes @ 0x14
  2324                           
  2325  0034                     PCF8583_Set_Date_Time@bcd_min:	
  2326                           ; 1 bytes @ 0x14
  2327                           
  2328  0034                     ___awdiv@quotient:	
  2329                           ; 1 bytes @ 0x14
  2330                           
  2331  0034                     ___lwmod@divisor:	
  2332                           ; 2 bytes @ 0x14
  2333                           
  2334  0034                     Generate_PWM@freq:	
  2335                           ; 2 bytes @ 0x14
  2336                           
  2337                           
  2338                           ; 4 bytes @ 0x14
  2339  0034                     	ds	1
  2340  0035                     ?_PCF8583_Read_Time_Date:	
  2341  0035                     ??_Wait_ms:	
  2342                           ; 1 bytes @ 0x15
  2343                           
  2344  0035                     PCF8583_Set_Date_Time@bcd_hrs:	
  2345                           ; 1 bytes @ 0x15
  2346                           
  2347  0035                     PCF8583_Read_Time_Date@time_struct_ptr:	
  2348                           ; 1 bytes @ 0x15
  2349                           
  2350                           
  2351                           ; 2 bytes @ 0x15
  2352  0035                     	ds	1
  2353  0036                     ?_Menu_Set_Param_Time_Limit:	
  2354  0036                     PCF8583_Set_Date_Time@bcd_day:	
  2355                           ; 1 bytes @ 0x16
  2356                           
  2357  0036                     Menu_Set_Param_Time_Limit@menu:	
  2358                           ; 1 bytes @ 0x16
  2359                           
  2360  0036                     ___lwmod@dividend:	
  2361                           ; 2 bytes @ 0x16
  2362                           
  2363                           
  2364                           ; 2 bytes @ 0x16
  2365  0036                     	ds	1
  2366  0037                     ??_PCF8583_Read_Time_Date:	
  2367  0037                     PCF8583_Set_Date_Time@bcd_mon:	
  2368                           ; 1 bytes @ 0x17
  2369                           
  2370                           
  2371                           ; 1 bytes @ 0x17
  2372  0037                     	ds	1
  2373  0038                     ??_Generate_PWM:	
  2374  0038                     ??___lwmod:	
  2375                           ; 1 bytes @ 0x18
  2376                           
  2377  0038                     Menu_Set_Param_Time_Limit@check_button:	
  2378                           ; 1 bytes @ 0x18
  2379                           
  2380  0038                     PCF8583_Set_Date_Time@time_struct_ptr:	
  2381                           ; 1 bytes @ 0x18
  2382                           
  2383                           
  2384                           ; 1 bytes @ 0x18
  2385  0038                     	ds	1
  2386  0039                     ??_Menu_Set_Param_Time_Limit:	
  2387  0039                     ___lwmod@counter:	
  2388                           ; 1 bytes @ 0x19
  2389                           
  2390                           
  2391                           ; 1 bytes @ 0x19
  2392  0039                     	ds	1
  2393  003A                     ?_Is_Leap:	
  2394  003A                     ?_Find_Weekday:	
  2395                           ; 1 bytes @ 0x1A
  2396                           
  2397  003A                     Is_Leap@year:	
  2398                           ; 1 bytes @ 0x1A
  2399                           
  2400  003A                     Find_Weekday@year:	
  2401                           ; 2 bytes @ 0x1A
  2402                           
  2403                           
  2404                           ; 2 bytes @ 0x1A
  2405  003A                     	ds	1
  2406  003B                     PCF8583_Read_Time_Date@year_bits:	
  2407                           
  2408                           ; 1 bytes @ 0x1B
  2409  003B                     	ds	1
  2410  003C                     ??_Play_Ring:	
  2411  003C                     ??_Is_Leap:	
  2412                           ; 1 bytes @ 0x1C
  2413                           
  2414  003C                     _Is_Leap$1446:	
  2415                           ; 1 bytes @ 0x1C
  2416                           
  2417  003C                     PCF8583_Read_Time_Date@bcd_sec:	
  2418                           ; 1 bytes @ 0x1C
  2419                           
  2420  003C                     Find_Weekday@month:	
  2421                           ; 1 bytes @ 0x1C
  2422                           
  2423                           
  2424                           ; 2 bytes @ 0x1C
  2425  003C                     	ds	1
  2426  003D                     ?_Is_Valid_Date:	
  2427  003D                     Is_Valid_Date@m:	
  2428                           ; 1 bytes @ 0x1D
  2429                           
  2430  003D                     PCF8583_Read_Time_Date@bcd_min:	
  2431                           ; 1 bytes @ 0x1D
  2432                           
  2433                           
  2434                           ; 1 bytes @ 0x1D
  2435  003D                     	ds	1
  2436  003E                     PCF8583_Read_Time_Date@bcd_hrs:	
  2437  003E                     Is_Valid_Date@y:	
  2438                           ; 1 bytes @ 0x1E
  2439                           
  2440  003E                     Find_Weekday@day:	
  2441                           ; 2 bytes @ 0x1E
  2442                           
  2443                           
  2444                           ; 2 bytes @ 0x1E
  2445  003E                     	ds	1
  2446  003F                     PCF8583_Read_Time_Date@bcd_day:	
  2447                           
  2448                           ; 1 bytes @ 0x1F
  2449  003F                     	ds	1
  2450  0040                     ??_Is_Valid_Date:	
  2451  0040                     ??_Find_Weekday:	
  2452                           ; 1 bytes @ 0x20
  2453                           
  2454  0040                     Play_Ring@MELODY_LENGTH:	
  2455                           ; 1 bytes @ 0x20
  2456                           
  2457  0040                     Is_Valid_Date@d:	
  2458                           ; 1 bytes @ 0x20
  2459                           
  2460  0040                     PCF8583_Read_Time_Date@bcd_mon:	
  2461                           ; 1 bytes @ 0x20
  2462                           
  2463                           
  2464                           ; 1 bytes @ 0x20
  2465  0040                     	ds	1
  2466  0041                     PCF8583_Read_Time_Date@year:	
  2467  0041                     Play_Ring@j:	
  2468                           ; 1 bytes @ 0x21
  2469                           
  2470                           
  2471                           ; 2 bytes @ 0x21
  2472  0041                     	ds	1
  2473  0042                     ?_Check_Time_Date:	
  2474  0042                     ?_Show_Time:	
  2475                           ; 1 bytes @ 0x22
  2476                           
  2477  0042                     Check_Time_Date@time_limit:	
  2478                           ; 1 bytes @ 0x22
  2479                           
  2480  0042                     Show_Time@keydef:	
  2481                           ; 1 bytes @ 0x22
  2482                           
  2483                           
  2484                           ; 1 bytes @ 0x22
  2485  0042                     	ds	1
  2486  0043                     ??_Check_Time_Date:	
  2487  0043                     ??_Show_Time:	
  2488                           ; 1 bytes @ 0x23
  2489                           
  2490  0043                     Play_Ring@i:	
  2491                           ; 1 bytes @ 0x23
  2492                           
  2493  0043                     Check_Time_Date@time_limit_min_2:	
  2494                           ; 1 bytes @ 0x23
  2495                           
  2496                           
  2497                           ; 2 bytes @ 0x23
  2498  0043                     	ds	1
  2499  0044                     ??_Check_Event:	
  2500  0044                     Show_Time@check_button:	
  2501                           ; 1 bytes @ 0x24
  2502                           
  2503                           
  2504                           ; 1 bytes @ 0x24
  2505  0044                     	ds	1
  2506  0045                     Check_Event@DataRCV:	
  2507  0045                     Show_Time@time:	
  2508                           ; 1 bytes @ 0x25
  2509                           
  2510  0045                     Check_Time_Date@current_time_min:	
  2511                           ; 1 bytes @ 0x25
  2512                           
  2513                           
  2514                           ; 2 bytes @ 0x25
  2515  0045                     	ds	2
  2516  0047                     Check_Time_Date@time_limit_min_1:	
  2517                           
  2518                           ; 2 bytes @ 0x27
  2519  0047                     	ds	2
  2520  0049                     Check_Time_Date@time:	
  2521                           
  2522                           ; 1 bytes @ 0x29
  2523  0049                     	ds	1
  2524  004A                     ?_Check_RCV_Data:	
  2525  004A                     Check_RCV_Data@time:	
  2526                           ; 1 bytes @ 0x2A
  2527                           
  2528                           
  2529                           ; 1 bytes @ 0x2A
  2530  004A                     	ds	1
  2531  004B                     Check_RCV_Data@time_limit:	
  2532  004B                     Find_Weekday@wday:	
  2533                           ; 1 bytes @ 0x2B
  2534                           
  2535                           
  2536                           ; 1 bytes @ 0x2B
  2537  004B                     	ds	1
  2538  004C                     ??_Check_RCV_Data:	
  2539  004C                     ?_Menu_Set_Time:	
  2540                           ; 1 bytes @ 0x2C
  2541                           
  2542  004C                     Menu_Set_Time@keydef:	
  2543                           ; 1 bytes @ 0x2C
  2544                           
  2545                           
  2546                           ; 1 bytes @ 0x2C
  2547  004C                     	ds	1
  2548  004D                     Check_RCV_Data@DataRCV:	
  2549  004D                     Menu_Set_Time@menu_type:	
  2550                           ; 1 bytes @ 0x2D
  2551                           
  2552                           
  2553                           ; 1 bytes @ 0x2D
  2554  004D                     	ds	1
  2555  004E                     ??_Menu_Set_Time:	
  2556                           
  2557                           ; 1 bytes @ 0x2E
  2558  004E                     	ds	3
  2559  0051                     ?_Menu_Handler:	
  2560  0051                     Menu_Handler@keydef:	
  2561                           ; 1 bytes @ 0x31
  2562                           
  2563                           
  2564                           ; 1 bytes @ 0x31
  2565  0051                     	ds	1
  2566  0052                     Menu_Handler@time:	
  2567                           
  2568                           ; 1 bytes @ 0x32
  2569  0052                     	ds	1
  2570  0053                     ??_Menu_Handler:	
  2571                           
  2572                           ; 1 bytes @ 0x33
  2573  0053                     	ds	2
  2574  0055                     Menu_Handler@menudef:	
  2575                           
  2576                           ; 1 bytes @ 0x35
  2577  0055                     	ds	1
  2578  0056                     Menu_Handler@check_button:	
  2579                           
  2580                           ; 1 bytes @ 0x36
  2581  0056                     	ds	1
  2582  0057                     ??_main:	
  2583                           
  2584                           ; 1 bytes @ 0x37
  2585  0057                     	ds	2
  2586                           
  2587                           	psect	maintext
  2588  1B74                     __pmaintext:	
  2589 ;;
  2590 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2591 ;;
  2592 ;; *************** function _main *****************
  2593 ;; Defined at:
  2594 ;;		line 25 in file "main.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;		None
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  menudef         7   18[BANK3 ] struct .
  2599 ;;  time            7   11[BANK3 ] struct .
  2600 ;;  keydef          6    5[BANK3 ] struct .
  2601 ;;  data_rcv        5    0[BANK3 ] struct .
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : B00/0
  2608 ;;		On exit  : 200/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2611 ;;      Params:         0       0       0       0       0
  2612 ;;      Locals:         0       0       0      25       0
  2613 ;;      Temps:          0       2       0       0       0
  2614 ;;      Totals:         0       2       0      25       0
  2615 ;;Total ram usage:       27 bytes
  2616 ;; Hardware stack levels required when called:   10
  2617 ;; This function calls:
  2618 ;;		_Button_Init
  2619 ;;		_Check_RCV_Data
  2620 ;;		_Global_Init
  2621 ;;		_I2C_Init
  2622 ;;		_Interrupt_Init
  2623 ;;		_Menu_Handler
  2624 ;;		_Menu_Init
  2625 ;; This function is called by:
  2626 ;;		Startup code after reset
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _main
  2632  1B74                     _main:	
  2633                           
  2634                           ;main.c: 27:     Global_Init();
  2635                           
  2636                           ;incstack = 0
  2637 ;; hardware stack exceeded
  2638                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2639  1B74  160A  158A  2184  160A  158A  	fcall	_Global_Init
  2640                           
  2641                           ;main.c: 28:     Interrupt_Init();
  2642  1B79  160A  118A  207A  160A  158A  	fcall	_Interrupt_Init
  2643                           
  2644                           ;main.c: 29:     I2C_Init();
  2645  1B7E  160A  158A  2094  160A  158A  	fcall	_I2C_Init
  2646                           
  2647                           ;main.c: 31:     DataStruct data_rcv;;main.c: 32:     KeyPointerStruct keydef;;main.c: 3
      +                          3:     MenuParamPonterStruct menudef;;main.c: 34:     TimeStruct time;;main.c: 36:     B
      +                          utton_Init(&keydef);
  2648  1B83  30DB               	movlw	(low (main@keydef| (0+256)))& (0+255)
  2649  1B84  160A  118A  24EE  160A  158A  	fcall	_Button_Init
  2650                           
  2651                           ;main.c: 37:     Menu_Init(&menudef);
  2652  1B89  30E8               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2653  1B8A  120A  158A  2306  160A  158A  	fcall	_Menu_Init
  2654  1B8F                     l8378:	
  2655                           
  2656                           ;main.c: 40:     {;main.c: 41:        Check_RCV_Data(&data_rcv,&time,&menudef);
  2657  1B8F  30E1               	movlw	(low (main@time| (0+256)))& (0+255)
  2658  1B90  1283               	bcf	3,5	;RP0=0, select bank0
  2659  1B91  1303               	bcf	3,6	;RP1=0, select bank0
  2660  1B92  00D7               	movwf	??_main
  2661  1B93  0857               	movf	??_main,w
  2662  1B94  00CA               	movwf	Check_RCV_Data@time
  2663  1B95  30E8               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2664  1B96  00D8               	movwf	??_main+1
  2665  1B97  0858               	movf	??_main+1,w
  2666  1B98  00CB               	movwf	Check_RCV_Data@time_limit
  2667  1B99  30D6               	movlw	(low (main@data_rcv| (0+256)))& (0+255)
  2668  1B9A  160A  158A  24F3  160A  158A  	fcall	_Check_RCV_Data
  2669                           
  2670                           ;main.c: 42:        Menu_Handler(&menudef,&keydef,&time);
  2671  1B9F  30DB               	movlw	(low (main@keydef| (0+256)))& (0+255)
  2672  1BA0  1283               	bcf	3,5	;RP0=0, select bank0
  2673  1BA1  00D7               	movwf	??_main
  2674  1BA2  0857               	movf	??_main,w
  2675  1BA3  00D1               	movwf	Menu_Handler@keydef
  2676  1BA4  30E1               	movlw	(low (main@time| (0+256)))& (0+255)
  2677  1BA5  00D8               	movwf	??_main+1
  2678  1BA6  0858               	movf	??_main+1,w
  2679  1BA7  00D2               	movwf	Menu_Handler@time
  2680  1BA8  30E8               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2681  1BA9  160A  158A  24AF  160A  158A  	fcall	_Menu_Handler
  2682  1BAE  2B8F               	goto	l8378
  2683  1BAF                     __end_of_main:	
  2684                           
  2685                           	psect	text1
  2686  0B06                     __ptext1:	
  2687 ;; *************** function _Menu_Init *****************
  2688 ;; Defined at:
  2689 ;;		line 42 in file "menu.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  menudef         1    wreg     PTR struct .
  2692 ;;		 -> main@menudef(7), 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  menudef         1   12[BANK0 ] PTR struct .
  2695 ;;		 -> main@menudef(7), 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2700 ;; Tracked objects:
  2701 ;;		On entry : B00/B00
  2702 ;;		On exit  : B00/B00
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2705 ;;      Params:         0       0       0       0       0
  2706 ;;      Locals:         0       1       0       0       0
  2707 ;;      Temps:          0       1       0       0       0
  2708 ;;      Totals:         0       2       0       0       0
  2709 ;;Total ram usage:        2 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    6
  2712 ;; This function calls:
  2713 ;;		_Disable_All_Digits
  2714 ;;		_Read_Limit_From_EEprom
  2715 ;; This function is called by:
  2716 ;;		_main
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           
  2721                           ;psect for function _Menu_Init
  2722  0B06                     _Menu_Init:	
  2723                           
  2724                           ;incstack = 0
  2725                           ; Regs used in _Menu_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2726                           ;Menu_Init@menudef stored from wreg
  2727  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  2728  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  2729  0B08  00AC               	movwf	Menu_Init@menudef
  2730                           
  2731                           ;menu.c: 42: void Menu_Init(MenuParamPonterStruct *menudef);menu.c: 43: {;menu.c: 44:   
      +                             g_display_controll=0;
  2732  0B09  1683               	bsf	3,5	;RP0=1, select bank1
  2733  0B0A  01AE               	clrf	_g_display_controll^(0+128)	;volatile
  2734                           
  2735                           ;menu.c: 45:      Disable_All_Digits();
  2736  0B0B  160A  158A  2067  120A  158A  	fcall	_Disable_All_Digits
  2737                           
  2738                           ;menu.c: 47:     static MenuParamStruct hours_minutes;;menu.c: 48:     static MenuParamS
      +                          truct day_month;;menu.c: 49:     static MenuParamStruct year;;menu.c: 50:     static Men
      +                          uParamStruct time_limit_work_day_1;;menu.c: 51:     static MenuParamStruct time_limit_wo
      +                          rk_day_2;;menu.c: 52:     static MenuParamStruct time_limit_free_day_1;;menu.c: 53:     
      +                          static MenuParamStruct time_limit_free_day_2;;menu.c: 55:     menudef->hours_minutes_ptr
      +                          =&hours_minutes;
  2739  0B10  30C0               	movlw	(low (Menu_Init@hours_minutes| (0+256)))& (0+255)
  2740  0B11  00AB               	movwf	??_Menu_Init
  2741  0B12  082C               	movf	Menu_Init@menudef,w
  2742  0B13  0084               	movwf	4
  2743  0B14  082B               	movf	??_Menu_Init,w
  2744  0B15  1783               	bsf	3,7	;select IRP bank2
  2745  0B16  0080               	movwf	0
  2746                           
  2747                           ;menu.c: 56:     menudef->day_month_ptr=&day_month;
  2748  0B17  30B8               	movlw	(low (Menu_Init@day_month| (0+256)))& (0+255)
  2749  0B18  00AB               	movwf	??_Menu_Init
  2750  0B19  0A2C               	incf	Menu_Init@menudef,w
  2751  0B1A  0084               	movwf	4
  2752  0B1B  082B               	movf	??_Menu_Init,w
  2753  0B1C  0080               	movwf	0
  2754                           
  2755                           ;menu.c: 57:     menudef->year_ptr=&year;
  2756  0B1D  30B0               	movlw	(low (Menu_Init@year| (0+256)))& (0+255)
  2757  0B1E  00AB               	movwf	??_Menu_Init
  2758  0B1F  082C               	movf	Menu_Init@menudef,w
  2759  0B20  3E02               	addlw	2
  2760  0B21  0084               	movwf	4
  2761  0B22  082B               	movf	??_Menu_Init,w
  2762  0B23  0080               	movwf	0
  2763                           
  2764                           ;menu.c: 59:     menudef->time_limit_free_day_1_ptr=&time_limit_free_day_1;
  2765  0B24  3098               	movlw	(low (Menu_Init@time_limit_free_day_1| (0+256)))& (0+255)
  2766  0B25  00AB               	movwf	??_Menu_Init
  2767  0B26  082C               	movf	Menu_Init@menudef,w
  2768  0B27  3E05               	addlw	5
  2769  0B28  0084               	movwf	4
  2770  0B29  082B               	movf	??_Menu_Init,w
  2771  0B2A  0080               	movwf	0
  2772                           
  2773                           ;menu.c: 60:     menudef->time_limit_free_day_2_ptr=&time_limit_free_day_2;
  2774  0B2B  3090               	movlw	(low (Menu_Init@time_limit_free_day_2| (0+256)))& (0+255)
  2775  0B2C  00AB               	movwf	??_Menu_Init
  2776  0B2D  082C               	movf	Menu_Init@menudef,w
  2777  0B2E  3E06               	addlw	6
  2778  0B2F  0084               	movwf	4
  2779  0B30  082B               	movf	??_Menu_Init,w
  2780  0B31  0080               	movwf	0
  2781                           
  2782                           ;menu.c: 61:     menudef->time_limit_work_day_1_ptr=&time_limit_work_day_1;
  2783  0B32  30A8               	movlw	(low (Menu_Init@time_limit_work_day_1| (0+256)))& (0+255)
  2784  0B33  00AB               	movwf	??_Menu_Init
  2785  0B34  082C               	movf	Menu_Init@menudef,w
  2786  0B35  3E03               	addlw	3
  2787  0B36  0084               	movwf	4
  2788  0B37  082B               	movf	??_Menu_Init,w
  2789  0B38  0080               	movwf	0
  2790                           
  2791                           ;menu.c: 62:     menudef->time_limit_work_day_2_ptr=&time_limit_work_day_2;
  2792  0B39  30A0               	movlw	(low (Menu_Init@time_limit_work_day_2| (0+256)))& (0+255)
  2793  0B3A  00AB               	movwf	??_Menu_Init
  2794  0B3B  082C               	movf	Menu_Init@menudef,w
  2795  0B3C  3E04               	addlw	4
  2796  0B3D  0084               	movwf	4
  2797  0B3E  082B               	movf	??_Menu_Init,w
  2798  0B3F  0080               	movwf	0
  2799                           
  2800                           ;menu.c: 64:     Read_Limit_From_EEprom(menudef->time_limit_free_day_1_ptr,menudef->time
      +                          _limit_free_day_2_ptr,1);
  2801  0B40  082C               	movf	Menu_Init@menudef,w
  2802  0B41  3E06               	addlw	6
  2803  0B42  0084               	movwf	4
  2804  0B43  0800               	movf	0,w
  2805  0B44  00AB               	movwf	??_Menu_Init
  2806  0B45  082B               	movf	??_Menu_Init,w
  2807  0B46  00A7               	movwf	Read_Limit_From_EEprom@limit2
  2808  0B47  01A8               	clrf	Read_Limit_From_EEprom@limit_type
  2809  0B48  0AA8               	incf	Read_Limit_From_EEprom@limit_type,f
  2810  0B49  082C               	movf	Menu_Init@menudef,w
  2811  0B4A  3E05               	addlw	5
  2812  0B4B  0084               	movwf	4
  2813  0B4C  0800               	movf	0,w
  2814  0B4D  160A  118A  20F6  120A  158A  	fcall	_Read_Limit_From_EEprom
  2815                           
  2816                           ;menu.c: 65:     Read_Limit_From_EEprom(menudef->time_limit_work_day_1_ptr,menudef->time
      +                          _limit_work_day_2_ptr,0);
  2817  0B52  082C               	movf	Menu_Init@menudef,w
  2818  0B53  3E04               	addlw	4
  2819  0B54  0084               	movwf	4
  2820  0B55  0800               	movf	0,w
  2821  0B56  00AB               	movwf	??_Menu_Init
  2822  0B57  082B               	movf	??_Menu_Init,w
  2823  0B58  00A7               	movwf	Read_Limit_From_EEprom@limit2
  2824  0B59  01A8               	clrf	Read_Limit_From_EEprom@limit_type
  2825  0B5A  082C               	movf	Menu_Init@menudef,w
  2826  0B5B  3E03               	addlw	3
  2827  0B5C  0084               	movwf	4
  2828  0B5D  0800               	movf	0,w
  2829  0B5E  160A  118A  20F6  120A  158A  	fcall	_Read_Limit_From_EEprom
  2830                           
  2831                           ;menu.c: 67:     hours_minutes.max_limit=23;
  2832  0B63  3017               	movlw	23
  2833  0B64  00AB               	movwf	??_Menu_Init
  2834  0B65  082B               	movf	??_Menu_Init,w
  2835  0B66  1683               	bsf	3,5	;RP0=1, select bank3
  2836  0B67  1703               	bsf	3,6	;RP1=1, select bank3
  2837  0B68  00C0               	movwf	Menu_Init@hours_minutes^(0+384)
  2838                           
  2839                           ;menu.c: 68:     hours_minutes.max_limit1=59;
  2840  0B69  303B               	movlw	59
  2841  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  2842  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0B6C  00AB               	movwf	??_Menu_Init
  2844  0B6D  082B               	movf	??_Menu_Init,w
  2845  0B6E  1683               	bsf	3,5	;RP0=1, select bank3
  2846  0B6F  1703               	bsf	3,6	;RP1=1, select bank3
  2847  0B70  00C1               	movwf	(Menu_Init@hours_minutes^(0+384)+1)
  2848                           
  2849                           ;menu.c: 69:     hours_minutes.min_limit=0;
  2850  0B71  01C3               	clrf	(Menu_Init@hours_minutes^(0+384)+3)
  2851                           
  2852                           ;menu.c: 70:     hours_minutes.min_limit1=0;
  2853  0B72  01C4               	clrf	(Menu_Init@hours_minutes^(0+384)+4)
  2854                           
  2855                           ;menu.c: 71:     hours_minutes.next_menu=&day_month;
  2856  0B73  30B8               	movlw	(low (Menu_Init@day_month| (0+256)))& (0+255)
  2857  0B74  1283               	bcf	3,5	;RP0=0, select bank0
  2858  0B75  1303               	bcf	3,6	;RP1=0, select bank0
  2859  0B76  00AB               	movwf	??_Menu_Init
  2860  0B77  082B               	movf	??_Menu_Init,w
  2861  0B78  1683               	bsf	3,5	;RP0=1, select bank3
  2862  0B79  1703               	bsf	3,6	;RP1=1, select bank3
  2863  0B7A  00C7               	movwf	(low ((Menu_Init@hours_minutes| (0+256)+7)))^(0+128)
  2864                           
  2865                           ;menu.c: 73:     day_month.max_limit=31;
  2866  0B7B  301F               	movlw	31
  2867  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  2868  0B7D  1303               	bcf	3,6	;RP1=0, select bank0
  2869  0B7E  00AB               	movwf	??_Menu_Init
  2870  0B7F  082B               	movf	??_Menu_Init,w
  2871  0B80  1683               	bsf	3,5	;RP0=1, select bank3
  2872  0B81  1703               	bsf	3,6	;RP1=1, select bank3
  2873  0B82  00B8               	movwf	Menu_Init@day_month^(0+384)
  2874                           
  2875                           ;menu.c: 74:     day_month.max_limit1=12;
  2876  0B83  300C               	movlw	12
  2877  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  2878  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  2879  0B86  00AB               	movwf	??_Menu_Init
  2880  0B87  082B               	movf	??_Menu_Init,w
  2881  0B88  1683               	bsf	3,5	;RP0=1, select bank3
  2882  0B89  1703               	bsf	3,6	;RP1=1, select bank3
  2883  0B8A  00B9               	movwf	(Menu_Init@day_month^(0+384)+1)
  2884                           
  2885                           ;menu.c: 75:     day_month.min_limit=1;
  2886  0B8B  01BB               	clrf	(Menu_Init@day_month^(0+384)+3)
  2887  0B8C  0ABB               	incf	(Menu_Init@day_month^(0+384)+3),f
  2888                           
  2889                           ;menu.c: 76:     day_month.min_limit1=1;
  2890  0B8D  01BC               	clrf	(Menu_Init@day_month^(0+384)+4)
  2891  0B8E  0ABC               	incf	(Menu_Init@day_month^(0+384)+4),f
  2892                           
  2893                           ;menu.c: 77:     day_month.next_menu=&year;
  2894  0B8F  30B0               	movlw	(low (Menu_Init@year| (0+256)))& (0+255)
  2895  0B90  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0B91  1303               	bcf	3,6	;RP1=0, select bank0
  2897  0B92  00AB               	movwf	??_Menu_Init
  2898  0B93  082B               	movf	??_Menu_Init,w
  2899  0B94  1683               	bsf	3,5	;RP0=1, select bank3
  2900  0B95  1703               	bsf	3,6	;RP1=1, select bank3
  2901  0B96  00BF               	movwf	(low ((Menu_Init@day_month| (0+256)+7)))^(0+128)
  2902                           
  2903                           ;menu.c: 79:     year.max_limit=21;
  2904  0B97  3015               	movlw	21
  2905  0B98  1283               	bcf	3,5	;RP0=0, select bank0
  2906  0B99  1303               	bcf	3,6	;RP1=0, select bank0
  2907  0B9A  00AB               	movwf	??_Menu_Init
  2908  0B9B  082B               	movf	??_Menu_Init,w
  2909  0B9C  1683               	bsf	3,5	;RP0=1, select bank3
  2910  0B9D  1703               	bsf	3,6	;RP1=1, select bank3
  2911  0B9E  00B0               	movwf	Menu_Init@year^(0+384)
  2912                           
  2913                           ;menu.c: 80:     year.max_limit1=99;
  2914  0B9F  3063               	movlw	99
  2915  0BA0  1283               	bcf	3,5	;RP0=0, select bank0
  2916  0BA1  1303               	bcf	3,6	;RP1=0, select bank0
  2917  0BA2  00AB               	movwf	??_Menu_Init
  2918  0BA3  082B               	movf	??_Menu_Init,w
  2919  0BA4  1683               	bsf	3,5	;RP0=1, select bank3
  2920  0BA5  1703               	bsf	3,6	;RP1=1, select bank3
  2921  0BA6  00B1               	movwf	(Menu_Init@year^(0+384)+1)
  2922                           
  2923                           ;menu.c: 81:     year.min_limit=20;
  2924  0BA7  3014               	movlw	20
  2925  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  2926  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  2927  0BAA  00AB               	movwf	??_Menu_Init
  2928  0BAB  082B               	movf	??_Menu_Init,w
  2929  0BAC  1683               	bsf	3,5	;RP0=1, select bank3
  2930  0BAD  1703               	bsf	3,6	;RP1=1, select bank3
  2931  0BAE  00B3               	movwf	(Menu_Init@year^(0+384)+3)
  2932                           
  2933                           ;menu.c: 82:     year.min_limit1=0;
  2934  0BAF  01B4               	clrf	(Menu_Init@year^(0+384)+4)
  2935                           
  2936                           ;menu.c: 83:     year.next_menu=0;
  2937  0BB0  01B7               	clrf	(low ((Menu_Init@year| (0+256)+7)))^(0+128)
  2938                           
  2939                           ;menu.c: 85:     time_limit_work_day_1.max_limit=23;
  2940  0BB1  3017               	movlw	23
  2941  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0BB4  00AB               	movwf	??_Menu_Init
  2944  0BB5  082B               	movf	??_Menu_Init,w
  2945  0BB6  1683               	bsf	3,5	;RP0=1, select bank3
  2946  0BB7  1703               	bsf	3,6	;RP1=1, select bank3
  2947  0BB8  00A8               	movwf	Menu_Init@time_limit_work_day_1^(0+384)
  2948                           
  2949                           ;menu.c: 86:     time_limit_work_day_1.max_limit1=59;
  2950  0BB9  303B               	movlw	59
  2951  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  2952  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  2953  0BBC  00AB               	movwf	??_Menu_Init
  2954  0BBD  082B               	movf	??_Menu_Init,w
  2955  0BBE  1683               	bsf	3,5	;RP0=1, select bank3
  2956  0BBF  1703               	bsf	3,6	;RP1=1, select bank3
  2957  0BC0  00A9               	movwf	(Menu_Init@time_limit_work_day_1^(0+384)+1)
  2958                           
  2959                           ;menu.c: 87:     time_limit_work_day_1.min_limit=0;
  2960  0BC1  01AB               	clrf	(Menu_Init@time_limit_work_day_1^(0+384)+3)
  2961                           
  2962                           ;menu.c: 88:     time_limit_work_day_1.min_limit1=0;
  2963  0BC2  01AC               	clrf	(Menu_Init@time_limit_work_day_1^(0+384)+4)
  2964                           
  2965                           ;menu.c: 89:     time_limit_work_day_1.next_menu=&time_limit_work_day_2;
  2966  0BC3  30A0               	movlw	(low (Menu_Init@time_limit_work_day_2| (0+256)))& (0+255)
  2967  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
  2969  0BC6  00AB               	movwf	??_Menu_Init
  2970  0BC7  082B               	movf	??_Menu_Init,w
  2971  0BC8  1683               	bsf	3,5	;RP0=1, select bank3
  2972  0BC9  1703               	bsf	3,6	;RP1=1, select bank3
  2973  0BCA  00AF               	movwf	(low ((Menu_Init@time_limit_work_day_1| (0+256)+7)))^(0+128)
  2974                           
  2975                           ;menu.c: 91:     time_limit_work_day_2.max_limit=23;
  2976  0BCB  3017               	movlw	23
  2977  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
  2978  0BCD  1303               	bcf	3,6	;RP1=0, select bank0
  2979  0BCE  00AB               	movwf	??_Menu_Init
  2980  0BCF  082B               	movf	??_Menu_Init,w
  2981  0BD0  1683               	bsf	3,5	;RP0=1, select bank3
  2982  0BD1  1703               	bsf	3,6	;RP1=1, select bank3
  2983  0BD2  00A0               	movwf	Menu_Init@time_limit_work_day_2^(0+384)
  2984                           
  2985                           ;menu.c: 92:     time_limit_work_day_2.max_limit1=59;
  2986  0BD3  303B               	movlw	59
  2987  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  2988  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  2989  0BD6  00AB               	movwf	??_Menu_Init
  2990  0BD7  082B               	movf	??_Menu_Init,w
  2991  0BD8  1683               	bsf	3,5	;RP0=1, select bank3
  2992  0BD9  1703               	bsf	3,6	;RP1=1, select bank3
  2993  0BDA  00A1               	movwf	(Menu_Init@time_limit_work_day_2^(0+384)+1)
  2994                           
  2995                           ;menu.c: 93:     time_limit_work_day_2.min_limit=0;
  2996  0BDB  01A3               	clrf	(Menu_Init@time_limit_work_day_2^(0+384)+3)
  2997                           
  2998                           ;menu.c: 94:     time_limit_work_day_2.min_limit1=0;
  2999  0BDC  01A4               	clrf	(Menu_Init@time_limit_work_day_2^(0+384)+4)
  3000                           
  3001                           ;menu.c: 95:     time_limit_work_day_2.next_menu=0;
  3002  0BDD  01A7               	clrf	(low ((Menu_Init@time_limit_work_day_2| (0+256)+7)))^(0+128)
  3003                           
  3004                           ;menu.c: 98:     time_limit_free_day_1.max_limit=23;
  3005  0BDE  3017               	movlw	23
  3006  0BDF  1283               	bcf	3,5	;RP0=0, select bank0
  3007  0BE0  1303               	bcf	3,6	;RP1=0, select bank0
  3008  0BE1  00AB               	movwf	??_Menu_Init
  3009  0BE2  082B               	movf	??_Menu_Init,w
  3010  0BE3  1683               	bsf	3,5	;RP0=1, select bank3
  3011  0BE4  1703               	bsf	3,6	;RP1=1, select bank3
  3012  0BE5  0098               	movwf	Menu_Init@time_limit_free_day_1^(0+384)
  3013                           
  3014                           ;menu.c: 99:     time_limit_free_day_1.max_limit1=59;
  3015  0BE6  303B               	movlw	59
  3016  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  3017  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  3018  0BE9  00AB               	movwf	??_Menu_Init
  3019  0BEA  082B               	movf	??_Menu_Init,w
  3020  0BEB  1683               	bsf	3,5	;RP0=1, select bank3
  3021  0BEC  1703               	bsf	3,6	;RP1=1, select bank3
  3022  0BED  0099               	movwf	(Menu_Init@time_limit_free_day_1^(0+384)+1)
  3023                           
  3024                           ;menu.c: 100:     time_limit_free_day_1.min_limit=0;
  3025  0BEE  019B               	clrf	(Menu_Init@time_limit_free_day_1^(0+384)+3)
  3026                           
  3027                           ;menu.c: 101:     time_limit_free_day_1.min_limit1=0;
  3028  0BEF  019C               	clrf	(Menu_Init@time_limit_free_day_1^(0+384)+4)
  3029                           
  3030                           ;menu.c: 102:     time_limit_free_day_1.next_menu=&time_limit_free_day_2;
  3031  0BF0  3090               	movlw	(low (Menu_Init@time_limit_free_day_2| (0+256)))& (0+255)
  3032  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  3033  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  3034  0BF3  00AB               	movwf	??_Menu_Init
  3035  0BF4  082B               	movf	??_Menu_Init,w
  3036  0BF5  1683               	bsf	3,5	;RP0=1, select bank3
  3037  0BF6  1703               	bsf	3,6	;RP1=1, select bank3
  3038  0BF7  009F               	movwf	(low ((Menu_Init@time_limit_free_day_1| (0+256)+7)))^(0+128)
  3039                           
  3040                           ;menu.c: 104:     time_limit_free_day_2.max_limit=23;
  3041  0BF8  3017               	movlw	23
  3042  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  3043  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  3044  0BFB  00AB               	movwf	??_Menu_Init
  3045  0BFC  082B               	movf	??_Menu_Init,w
  3046  0BFD  1683               	bsf	3,5	;RP0=1, select bank3
  3047  0BFE  1703               	bsf	3,6	;RP1=1, select bank3
  3048  0BFF  0090               	movwf	Menu_Init@time_limit_free_day_2^(0+384)
  3049                           
  3050                           ;menu.c: 105:     time_limit_free_day_2.max_limit1=59;
  3051  0C00  303B               	movlw	59
  3052  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  3053  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  3054  0C03  00AB               	movwf	??_Menu_Init
  3055  0C04  082B               	movf	??_Menu_Init,w
  3056  0C05  1683               	bsf	3,5	;RP0=1, select bank3
  3057  0C06  1703               	bsf	3,6	;RP1=1, select bank3
  3058  0C07  0091               	movwf	(Menu_Init@time_limit_free_day_2^(0+384)+1)
  3059                           
  3060                           ;menu.c: 106:     time_limit_free_day_2.min_limit=0;
  3061  0C08  0193               	clrf	(Menu_Init@time_limit_free_day_2^(0+384)+3)
  3062                           
  3063                           ;menu.c: 107:     time_limit_free_day_2.min_limit1=0;
  3064  0C09  0194               	clrf	(Menu_Init@time_limit_free_day_2^(0+384)+4)
  3065                           
  3066                           ;menu.c: 108:     time_limit_free_day_2.next_menu=0;
  3067  0C0A  0197               	clrf	(low ((Menu_Init@time_limit_free_day_2| (0+256)+7)))^(0+128)
  3068  0C0B  0008               	return
  3069  0C0C                     __end_of_Menu_Init:	
  3070                           
  3071                           	psect	text2
  3072  1CAF                     __ptext2:	
  3073 ;; *************** function _Menu_Handler *****************
  3074 ;; Defined at:
  3075 ;;		line 554 in file "menu.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  menudef         1    wreg     PTR struct .
  3078 ;;		 -> main@menudef(7), 
  3079 ;;  keydef          1   49[BANK0 ] PTR struct .
  3080 ;;		 -> main@keydef(6), 
  3081 ;;  time            1   50[BANK0 ] PTR struct .
  3082 ;;		 -> main@time(7), 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  menudef         1   53[BANK0 ] PTR struct .
  3085 ;;		 -> main@menudef(7), 
  3086 ;;  check_button    1   54[BANK0 ] unsigned char 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 300/800
  3093 ;;		On exit  : 200/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3096 ;;      Params:         0       2       0       0       0
  3097 ;;      Locals:         0       2       0       0       0
  3098 ;;      Temps:          0       2       0       0       0
  3099 ;;      Totals:         0       6       0       0       0
  3100 ;;Total ram usage:        6 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    9
  3103 ;; This function calls:
  3104 ;;		_Button_Handler
  3105 ;;		_Menu_Set_Time
  3106 ;;		_Show_Time
  3107 ;; This function is called by:
  3108 ;;		_main
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           
  3113                           ;psect for function _Menu_Handler
  3114  1CAF                     _Menu_Handler:	
  3115                           
  3116                           ;incstack = 0
  3117 ;; hardware stack exceeded
  3118                           ; Regs used in _Menu_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3119                           ;Menu_Handler@menudef stored from wreg
  3120  1CAF  00D5               	movwf	Menu_Handler@menudef
  3121                           
  3122                           ;menu.c: 554: void Menu_Handler(MenuParamPonterStruct *menudef, KeyPointerStruct *keydef
      +                          ,;menu.c: 555:                  TimeStruct *time);menu.c: 556: {;menu.c: 557:     unsign
      +                          ed char check_button;;menu.c: 559:     check_button=Button_Handler(keydef);
  3123  1CB0  0851               	movf	Menu_Handler@keydef,w
  3124  1CB1  160A  118A  2344  160A  158A  	fcall	_Button_Handler
  3125  1CB6  00D3               	movwf	??_Menu_Handler
  3126  1CB7  0853               	movf	??_Menu_Handler,w
  3127  1CB8  00D6               	movwf	Menu_Handler@check_button
  3128                           
  3129                           ;menu.c: 560:     if(check_button==k_set_right_short)
  3130  1CB9  3006               	movlw	6
  3131  1CBA  0656               	xorwf	Menu_Handler@check_button,w
  3132  1CBB  1D03               	btfss	3,2
  3133  1CBC  2CC6               	goto	l8360
  3134                           
  3135                           ;menu.c: 561:     {;menu.c: 562:         Show_Time(time,keydef);
  3136  1CBD  0851               	movf	Menu_Handler@keydef,w
  3137  1CBE  00D3               	movwf	??_Menu_Handler
  3138  1CBF  0853               	movf	??_Menu_Handler,w
  3139  1CC0  00C2               	movwf	Show_Time@keydef
  3140  1CC1  0852               	movf	Menu_Handler@time,w
  3141  1CC2  120A  158A  240C   	fcall	_Show_Time
  3142                           
  3143                           ;menu.c: 564:     }else if(check_button==k_set_rtc_short)
  3144  1CC5  0008               	return
  3145  1CC6                     l8360:	
  3146  1CC6  0856               	movf	Menu_Handler@check_button,w
  3147  1CC7  1D03               	btfss	3,2
  3148  1CC8  2CD6               	goto	l8364
  3149                           
  3150                           ;menu.c: 565:     {;menu.c: 566:         Menu_Set_Time(menudef,keydef,2);
  3151  1CC9  0851               	movf	Menu_Handler@keydef,w
  3152  1CCA  00D3               	movwf	??_Menu_Handler
  3153  1CCB  0853               	movf	??_Menu_Handler,w
  3154  1CCC  00CC               	movwf	Menu_Set_Time@keydef
  3155  1CCD  3002               	movlw	2
  3156  1CCE  00D4               	movwf	??_Menu_Handler+1
  3157  1CCF  0854               	movf	??_Menu_Handler+1,w
  3158  1CD0  00CD               	movwf	Menu_Set_Time@menu_type
  3159  1CD1  0855               	movf	Menu_Handler@menudef,w
  3160  1CD2  120A  158A  2586   	fcall	_Menu_Set_Time
  3161                           
  3162                           ;menu.c: 568:     }else if(check_button==k_set_time1_short)
  3163  1CD5  0008               	return
  3164  1CD6                     l8364:	
  3165  1CD6  3002               	movlw	2
  3166  1CD7  0656               	xorwf	Menu_Handler@check_button,w
  3167  1CD8  1D03               	btfss	3,2
  3168  1CD9  2CE4               	goto	l8368
  3169                           
  3170                           ;menu.c: 569:     {;menu.c: 570:         Menu_Set_Time(menudef,keydef,0);
  3171  1CDA  0851               	movf	Menu_Handler@keydef,w
  3172  1CDB  00D3               	movwf	??_Menu_Handler
  3173  1CDC  0853               	movf	??_Menu_Handler,w
  3174  1CDD  00CC               	movwf	Menu_Set_Time@keydef
  3175  1CDE  01CD               	clrf	Menu_Set_Time@menu_type
  3176  1CDF  0855               	movf	Menu_Handler@menudef,w
  3177  1CE0  120A  158A  2586   	fcall	_Menu_Set_Time
  3178                           
  3179                           ;menu.c: 572:     }else if(check_button==k_set_time2_short)
  3180  1CE3  0008               	return
  3181  1CE4                     l8368:	
  3182  1CE4  3004               	movlw	4
  3183  1CE5  0656               	xorwf	Menu_Handler@check_button,w
  3184  1CE6  1D03               	btfss	3,2
  3185  1CE7  0008               	return
  3186                           
  3187                           ;menu.c: 573:     {;menu.c: 574:         Menu_Set_Time(menudef,keydef,1);
  3188  1CE8  0851               	movf	Menu_Handler@keydef,w
  3189  1CE9  00D3               	movwf	??_Menu_Handler
  3190  1CEA  0853               	movf	??_Menu_Handler,w
  3191  1CEB  00CC               	movwf	Menu_Set_Time@keydef
  3192  1CEC  01CD               	clrf	Menu_Set_Time@menu_type
  3193  1CED  0ACD               	incf	Menu_Set_Time@menu_type,f
  3194  1CEE  0855               	movf	Menu_Handler@menudef,w
  3195  1CEF  120A  158A  2586   	fcall	_Menu_Set_Time
  3196  1CF2  0008               	return
  3197  1CF3                     __end_of_Menu_Handler:	
  3198                           
  3199                           	psect	text3
  3200  0C0C                     __ptext3:	
  3201 ;; *************** function _Show_Time *****************
  3202 ;; Defined at:
  3203 ;;		line 119 in file "menu.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  time            1    wreg     PTR struct .
  3206 ;;		 -> main@time(7), 
  3207 ;;  keydef          1   34[BANK0 ] PTR struct .
  3208 ;;		 -> main@keydef(6), 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  time            1   37[BANK0 ] PTR struct .
  3211 ;;		 -> main@time(7), 
  3212 ;;  check_button    1   36[BANK0 ] unsigned char 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3217 ;; Tracked objects:
  3218 ;;		On entry : 300/800
  3219 ;;		On exit  : 300/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3222 ;;      Params:         0       1       0       0       0
  3223 ;;      Locals:         0       2       0       0       0
  3224 ;;      Temps:          0       1       0       0       0
  3225 ;;      Totals:         0       4       0       0       0
  3226 ;;Total ram usage:        4 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    8
  3229 ;; This function calls:
  3230 ;;		_Button_Handler
  3231 ;;		_Disable_All_Digits
  3232 ;;		_Display_Weekday
  3233 ;;		_PCF8583_Read_Time_Date
  3234 ;;		___awdiv
  3235 ;;		___awmod
  3236 ;; This function is called by:
  3237 ;;		_Menu_Handler
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           
  3242                           ;psect for function _Show_Time
  3243  0C0C                     _Show_Time:	
  3244                           
  3245                           ;incstack = 0
  3246 ;; hardware stack exceeded
  3247                           ; Regs used in _Show_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3248                           ;Show_Time@time stored from wreg
  3249  0C0C  00C5               	movwf	Show_Time@time
  3250                           
  3251                           ;menu.c: 119: void Show_Time(TimeStruct *time, KeyPointerStruct *keydef);menu.c: 120: {;
      +                          menu.c: 121:     unsigned char check_button;;menu.c: 123:     PCF8583_Read_Time_Date(tim
      +                          e);
  3252  0C0D  0845               	movf	Show_Time@time,w
  3253  0C0E  00B5               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  3254  0C0F  3001               	movlw	1
  3255  0C10  00B6               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  3256  0C11  120A  118A  26CF  120A  158A  	fcall	_PCF8583_Read_Time_Date
  3257                           
  3258                           ;menu.c: 125:     g_display_controll=1;
  3259  0C16  3001               	movlw	1
  3260  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0C18  00C3               	movwf	??_Show_Time
  3262  0C19  0843               	movf	??_Show_Time,w
  3263  0C1A  1683               	bsf	3,5	;RP0=1, select bank1
  3264  0C1B  00AE               	movwf	_g_display_controll^(0+128)	;volatile
  3265                           
  3266                           ;menu.c: 127:     g_display_text[0]=time->hours/10;
  3267  0C1C  300A               	movlw	10
  3268  0C1D  1283               	bcf	3,5	;RP0=0, select bank0
  3269  0C1E  00AD               	movwf	___awdiv@divisor
  3270  0C1F  3000               	movlw	0
  3271  0C20  00AE               	movwf	___awdiv@divisor+1
  3272  0C21  0845               	movf	Show_Time@time,w
  3273  0C22  3E02               	addlw	2
  3274  0C23  0084               	movwf	4
  3275  0C24  1783               	bsf	3,7	;select IRP bank2
  3276  0C25  0800               	movf	0,w
  3277  0C26  00AF               	movwf	___awdiv@dividend
  3278  0C27  01B0               	clrf	___awdiv@dividend+1
  3279  0C28  1BAF               	btfsc	___awdiv@dividend,7
  3280  0C29  03B0               	decf	___awdiv@dividend+1,f
  3281  0C2A  160A  158A  2629  120A  158A  	fcall	___awdiv
  3282  0C2F  082D               	movf	?___awdiv,w
  3283  0C30  00C3               	movwf	??_Show_Time
  3284  0C31  0843               	movf	??_Show_Time,w
  3285  0C32  1683               	bsf	3,5	;RP0=1, select bank1
  3286  0C33  00CC               	movwf	_g_display_text^(0+128)
  3287                           
  3288                           ;menu.c: 128:     g_display_text[1]=time->hours%10;
  3289  0C34  300A               	movlw	10
  3290  0C35  1283               	bcf	3,5	;RP0=0, select bank0
  3291  0C36  00A6               	movwf	___awmod@divisor
  3292  0C37  3000               	movlw	0
  3293  0C38  00A7               	movwf	___awmod@divisor+1
  3294  0C39  0845               	movf	Show_Time@time,w
  3295  0C3A  3E02               	addlw	2
  3296  0C3B  0084               	movwf	4
  3297  0C3C  1783               	bsf	3,7	;select IRP bank2
  3298  0C3D  0800               	movf	0,w
  3299  0C3E  00A8               	movwf	___awmod@dividend
  3300  0C3F  01A9               	clrf	___awmod@dividend+1
  3301  0C40  1BA8               	btfsc	___awmod@dividend,7
  3302  0C41  03A9               	decf	___awmod@dividend+1,f
  3303  0C42  160A  158A  253D  120A  158A  	fcall	___awmod
  3304  0C47  0826               	movf	?___awmod,w
  3305  0C48  00C3               	movwf	??_Show_Time
  3306  0C49  0843               	movf	??_Show_Time,w
  3307  0C4A  1683               	bsf	3,5	;RP0=1, select bank1
  3308  0C4B  00CD               	movwf	(_g_display_text^(0+128)+1)
  3309                           
  3310                           ;menu.c: 129:     g_display_text[2]=time->minutes/10;
  3311  0C4C  300A               	movlw	10
  3312  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  3313  0C4E  00AD               	movwf	___awdiv@divisor
  3314  0C4F  3000               	movlw	0
  3315  0C50  00AE               	movwf	___awdiv@divisor+1
  3316  0C51  0A45               	incf	Show_Time@time,w
  3317  0C52  0084               	movwf	4
  3318  0C53  1783               	bsf	3,7	;select IRP bank2
  3319  0C54  0800               	movf	0,w
  3320  0C55  00AF               	movwf	___awdiv@dividend
  3321  0C56  01B0               	clrf	___awdiv@dividend+1
  3322  0C57  1BAF               	btfsc	___awdiv@dividend,7
  3323  0C58  03B0               	decf	___awdiv@dividend+1,f
  3324  0C59  160A  158A  2629  120A  158A  	fcall	___awdiv
  3325  0C5E  082D               	movf	?___awdiv,w
  3326  0C5F  00C3               	movwf	??_Show_Time
  3327  0C60  0843               	movf	??_Show_Time,w
  3328  0C61  1683               	bsf	3,5	;RP0=1, select bank1
  3329  0C62  00CE               	movwf	(_g_display_text^(0+128)+2)
  3330                           
  3331                           ;menu.c: 130:     g_display_text[3]=time->minutes%10;
  3332  0C63  300A               	movlw	10
  3333  0C64  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0C65  00A6               	movwf	___awmod@divisor
  3335  0C66  3000               	movlw	0
  3336  0C67  00A7               	movwf	___awmod@divisor+1
  3337  0C68  0A45               	incf	Show_Time@time,w
  3338  0C69  0084               	movwf	4
  3339  0C6A  1783               	bsf	3,7	;select IRP bank2
  3340  0C6B  0800               	movf	0,w
  3341  0C6C  00A8               	movwf	___awmod@dividend
  3342  0C6D  01A9               	clrf	___awmod@dividend+1
  3343  0C6E  1BA8               	btfsc	___awmod@dividend,7
  3344  0C6F  03A9               	decf	___awmod@dividend+1,f
  3345  0C70  160A  158A  253D  120A  158A  	fcall	___awmod
  3346  0C75  0826               	movf	?___awmod,w
  3347  0C76  00C3               	movwf	??_Show_Time
  3348  0C77  0843               	movf	??_Show_Time,w
  3349  0C78  1683               	bsf	3,5	;RP0=1, select bank1
  3350  0C79  00CF               	movwf	(_g_display_text^(0+128)+3)
  3351                           
  3352                           ;menu.c: 132:     g_decimal_point=0b0100;
  3353  0C7A  3004               	movlw	4
  3354  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  3355  0C7C  00C3               	movwf	??_Show_Time
  3356  0C7D  0843               	movf	??_Show_Time,w
  3357  0C7E  1683               	bsf	3,5	;RP0=1, select bank1
  3358  0C7F  00AD               	movwf	_g_decimal_point^(0+128)
  3359  0C80                     l646:	
  3360                           ;menu.c: 134:     while(1)
  3361                           
  3362                           
  3363                           ;menu.c: 135:     {;menu.c: 136:         check_button=Button_Handler(keydef);
  3364  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  3365  0C81  0842               	movf	Show_Time@keydef,w
  3366  0C82  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  3367  0C87  00C3               	movwf	??_Show_Time
  3368  0C88  0843               	movf	??_Show_Time,w
  3369  0C89  00C4               	movwf	Show_Time@check_button
  3370                           
  3371                           ;menu.c: 137:         if(check_button==k_set_right_short)
  3372  0C8A  3006               	movlw	6
  3373  0C8B  0644               	xorwf	Show_Time@check_button,w
  3374  0C8C  1D03               	btfss	3,2
  3375  0C8D  2C80               	goto	l646
  3376                           
  3377                           ;menu.c: 138:         {;menu.c: 139:             g_decimal_point=0b0100;
  3378  0C8E  3004               	movlw	4
  3379  0C8F  00C3               	movwf	??_Show_Time
  3380  0C90  0843               	movf	??_Show_Time,w
  3381  0C91  1683               	bsf	3,5	;RP0=1, select bank1
  3382  0C92  00AD               	movwf	_g_decimal_point^(0+128)
  3383                           
  3384                           ;menu.c: 140:             g_display_text[0]=time->day/10;
  3385  0C93  300A               	movlw	10
  3386  0C94  1283               	bcf	3,5	;RP0=0, select bank0
  3387  0C95  00AD               	movwf	___awdiv@divisor
  3388  0C96  3000               	movlw	0
  3389  0C97  00AE               	movwf	___awdiv@divisor+1
  3390  0C98  0845               	movf	Show_Time@time,w
  3391  0C99  3E03               	addlw	3
  3392  0C9A  0084               	movwf	4
  3393  0C9B  1783               	bsf	3,7	;select IRP bank2
  3394  0C9C  0800               	movf	0,w
  3395  0C9D  00AF               	movwf	___awdiv@dividend
  3396  0C9E  01B0               	clrf	___awdiv@dividend+1
  3397  0C9F  1BAF               	btfsc	___awdiv@dividend,7
  3398  0CA0  03B0               	decf	___awdiv@dividend+1,f
  3399  0CA1  160A  158A  2629  120A  158A  	fcall	___awdiv
  3400  0CA6  082D               	movf	?___awdiv,w
  3401  0CA7  00C3               	movwf	??_Show_Time
  3402  0CA8  0843               	movf	??_Show_Time,w
  3403  0CA9  1683               	bsf	3,5	;RP0=1, select bank1
  3404  0CAA  00CC               	movwf	_g_display_text^(0+128)
  3405                           
  3406                           ;menu.c: 141:             g_display_text[1]=time->day%10;
  3407  0CAB  300A               	movlw	10
  3408  0CAC  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0CAD  00A6               	movwf	___awmod@divisor
  3410  0CAE  3000               	movlw	0
  3411  0CAF  00A7               	movwf	___awmod@divisor+1
  3412  0CB0  0845               	movf	Show_Time@time,w
  3413  0CB1  3E03               	addlw	3
  3414  0CB2  0084               	movwf	4
  3415  0CB3  1783               	bsf	3,7	;select IRP bank2
  3416  0CB4  0800               	movf	0,w
  3417  0CB5  00A8               	movwf	___awmod@dividend
  3418  0CB6  01A9               	clrf	___awmod@dividend+1
  3419  0CB7  1BA8               	btfsc	___awmod@dividend,7
  3420  0CB8  03A9               	decf	___awmod@dividend+1,f
  3421  0CB9  160A  158A  253D  120A  158A  	fcall	___awmod
  3422  0CBE  0826               	movf	?___awmod,w
  3423  0CBF  00C3               	movwf	??_Show_Time
  3424  0CC0  0843               	movf	??_Show_Time,w
  3425  0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  3426  0CC2  00CD               	movwf	(_g_display_text^(0+128)+1)
  3427                           
  3428                           ;menu.c: 142:             g_display_text[2]=time->month/10;
  3429  0CC3  300A               	movlw	10
  3430  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  3431  0CC5  00AD               	movwf	___awdiv@divisor
  3432  0CC6  3000               	movlw	0
  3433  0CC7  00AE               	movwf	___awdiv@divisor+1
  3434  0CC8  0845               	movf	Show_Time@time,w
  3435  0CC9  3E04               	addlw	4
  3436  0CCA  0084               	movwf	4
  3437  0CCB  1783               	bsf	3,7	;select IRP bank2
  3438  0CCC  0800               	movf	0,w
  3439  0CCD  00AF               	movwf	___awdiv@dividend
  3440  0CCE  01B0               	clrf	___awdiv@dividend+1
  3441  0CCF  1BAF               	btfsc	___awdiv@dividend,7
  3442  0CD0  03B0               	decf	___awdiv@dividend+1,f
  3443  0CD1  160A  158A  2629  120A  158A  	fcall	___awdiv
  3444  0CD6  082D               	movf	?___awdiv,w
  3445  0CD7  00C3               	movwf	??_Show_Time
  3446  0CD8  0843               	movf	??_Show_Time,w
  3447  0CD9  1683               	bsf	3,5	;RP0=1, select bank1
  3448  0CDA  00CE               	movwf	(_g_display_text^(0+128)+2)
  3449                           
  3450                           ;menu.c: 143:             g_display_text[3]=time->month%10;
  3451  0CDB  300A               	movlw	10
  3452  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0CDD  00A6               	movwf	___awmod@divisor
  3454  0CDE  3000               	movlw	0
  3455  0CDF  00A7               	movwf	___awmod@divisor+1
  3456  0CE0  0845               	movf	Show_Time@time,w
  3457  0CE1  3E04               	addlw	4
  3458  0CE2  0084               	movwf	4
  3459  0CE3  1783               	bsf	3,7	;select IRP bank2
  3460  0CE4  0800               	movf	0,w
  3461  0CE5  00A8               	movwf	___awmod@dividend
  3462  0CE6  01A9               	clrf	___awmod@dividend+1
  3463  0CE7  1BA8               	btfsc	___awmod@dividend,7
  3464  0CE8  03A9               	decf	___awmod@dividend+1,f
  3465  0CE9  160A  158A  253D  120A  158A  	fcall	___awmod
  3466  0CEE  0826               	movf	?___awmod,w
  3467  0CEF  00C3               	movwf	??_Show_Time
  3468  0CF0  0843               	movf	??_Show_Time,w
  3469  0CF1  1683               	bsf	3,5	;RP0=1, select bank1
  3470  0CF2  00CF               	movwf	(_g_display_text^(0+128)+3)
  3471  0CF3                     l8198:	
  3472                           
  3473                           ;menu.c: 147:             {;menu.c: 148:                 check_button=Button_Handler(key
      +                          def);
  3474  0CF3  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0CF4  0842               	movf	Show_Time@keydef,w
  3476  0CF5  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  3477  0CFA  00C3               	movwf	??_Show_Time
  3478  0CFB  0843               	movf	??_Show_Time,w
  3479  0CFC  00C4               	movwf	Show_Time@check_button
  3480                           
  3481                           ;menu.c: 149:                 if(check_button==k_set_right_short)
  3482  0CFD  3006               	movlw	6
  3483  0CFE  0644               	xorwf	Show_Time@check_button,w
  3484  0CFF  1D03               	btfss	3,2
  3485  0D00  2CF3               	goto	l8198
  3486                           
  3487                           ;menu.c: 150:                 {;menu.c: 151:                     g_decimal_point=0b0000;
  3488  0D01  1683               	bsf	3,5	;RP0=1, select bank1
  3489  0D02  01AD               	clrf	_g_decimal_point^(0+128)
  3490                           
  3491                           ;menu.c: 152:                     g_display_text[0]=2;
  3492  0D03  3002               	movlw	2
  3493  0D04  1283               	bcf	3,5	;RP0=0, select bank0
  3494  0D05  00C3               	movwf	??_Show_Time
  3495  0D06  0843               	movf	??_Show_Time,w
  3496  0D07  1683               	bsf	3,5	;RP0=1, select bank1
  3497  0D08  00CC               	movwf	_g_display_text^(0+128)
  3498                           
  3499                           ;menu.c: 153:                     g_display_text[1]=time->year/100;
  3500  0D09  3064               	movlw	100
  3501  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  3502  0D0B  00AD               	movwf	___awdiv@divisor
  3503  0D0C  3000               	movlw	0
  3504  0D0D  00AE               	movwf	___awdiv@divisor+1
  3505  0D0E  0845               	movf	Show_Time@time,w
  3506  0D0F  3E05               	addlw	5
  3507  0D10  0084               	movwf	4
  3508  0D11  1783               	bsf	3,7	;select IRP bank2
  3509  0D12  0800               	movf	0,w
  3510  0D13  00AF               	movwf	___awdiv@dividend
  3511  0D14  01B0               	clrf	___awdiv@dividend+1
  3512  0D15  1BAF               	btfsc	___awdiv@dividend,7
  3513  0D16  03B0               	decf	___awdiv@dividend+1,f
  3514  0D17  160A  158A  2629  120A  158A  	fcall	___awdiv
  3515  0D1C  082D               	movf	?___awdiv,w
  3516  0D1D  00C3               	movwf	??_Show_Time
  3517  0D1E  0843               	movf	??_Show_Time,w
  3518  0D1F  1683               	bsf	3,5	;RP0=1, select bank1
  3519  0D20  00CD               	movwf	(_g_display_text^(0+128)+1)
  3520                           
  3521                           ;menu.c: 154:                     g_display_text[2]=time->year%100/10;
  3522  0D21  300A               	movlw	10
  3523  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  3524  0D23  00AD               	movwf	___awdiv@divisor
  3525  0D24  3000               	movlw	0
  3526  0D25  00AE               	movwf	___awdiv@divisor+1
  3527  0D26  0845               	movf	Show_Time@time,w
  3528  0D27  3E05               	addlw	5
  3529  0D28  0084               	movwf	4
  3530  0D29  1783               	bsf	3,7	;select IRP bank2
  3531  0D2A  0800               	movf	0,w
  3532  0D2B  00A8               	movwf	___awmod@dividend
  3533  0D2C  01A9               	clrf	___awmod@dividend+1
  3534  0D2D  1BA8               	btfsc	___awmod@dividend,7
  3535  0D2E  03A9               	decf	___awmod@dividend+1,f
  3536  0D2F  3064               	movlw	100
  3537  0D30  00A6               	movwf	___awmod@divisor
  3538  0D31  3000               	movlw	0
  3539  0D32  00A7               	movwf	___awmod@divisor+1
  3540  0D33  160A  158A  253D  120A  158A  	fcall	___awmod
  3541  0D38  0827               	movf	?___awmod+1,w
  3542  0D39  00B0               	movwf	___awdiv@dividend+1
  3543  0D3A  0826               	movf	?___awmod,w
  3544  0D3B  00AF               	movwf	___awdiv@dividend
  3545  0D3C  160A  158A  2629  120A  158A  	fcall	___awdiv
  3546  0D41  082D               	movf	?___awdiv,w
  3547  0D42  00C3               	movwf	??_Show_Time
  3548  0D43  0843               	movf	??_Show_Time,w
  3549  0D44  1683               	bsf	3,5	;RP0=1, select bank1
  3550  0D45  00CE               	movwf	(_g_display_text^(0+128)+2)
  3551                           
  3552                           ;menu.c: 155:                     g_display_text[3]=time->year%10;
  3553  0D46  300A               	movlw	10
  3554  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  3555  0D48  00A6               	movwf	___awmod@divisor
  3556  0D49  3000               	movlw	0
  3557  0D4A  00A7               	movwf	___awmod@divisor+1
  3558  0D4B  0845               	movf	Show_Time@time,w
  3559  0D4C  3E05               	addlw	5
  3560  0D4D  0084               	movwf	4
  3561  0D4E  1783               	bsf	3,7	;select IRP bank2
  3562  0D4F  0800               	movf	0,w
  3563  0D50  00A8               	movwf	___awmod@dividend
  3564  0D51  01A9               	clrf	___awmod@dividend+1
  3565  0D52  1BA8               	btfsc	___awmod@dividend,7
  3566  0D53  03A9               	decf	___awmod@dividend+1,f
  3567  0D54  160A  158A  253D  120A  158A  	fcall	___awmod
  3568  0D59  0826               	movf	?___awmod,w
  3569  0D5A  00C3               	movwf	??_Show_Time
  3570  0D5B  0843               	movf	??_Show_Time,w
  3571  0D5C  1683               	bsf	3,5	;RP0=1, select bank1
  3572  0D5D  00CF               	movwf	(_g_display_text^(0+128)+3)
  3573  0D5E                     l8212:	
  3574                           
  3575                           ;menu.c: 159:                     {;menu.c: 160:                        check_button=But
      +                          ton_Handler(keydef);
  3576  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  3577  0D5F  0842               	movf	Show_Time@keydef,w
  3578  0D60  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  3579  0D65  00C3               	movwf	??_Show_Time
  3580  0D66  0843               	movf	??_Show_Time,w
  3581  0D67  00C4               	movwf	Show_Time@check_button
  3582                           
  3583                           ;menu.c: 161:                        if(check_button==k_set_right_short)
  3584  0D68  3006               	movlw	6
  3585  0D69  0644               	xorwf	Show_Time@check_button,w
  3586  0D6A  1D03               	btfss	3,2
  3587  0D6B  2D5E               	goto	l8212
  3588                           
  3589                           ;menu.c: 162:                        {;menu.c: 164:                            Display_W
      +                          eekday(time->weekday);
  3590  0D6C  0845               	movf	Show_Time@time,w
  3591  0D6D  3E06               	addlw	6
  3592  0D6E  0084               	movwf	4
  3593  0D6F  1783               	bsf	3,7	;select IRP bank2
  3594  0D70  0800               	movf	0,w
  3595  0D71  160A  158A  2588  120A  158A  	fcall	_Display_Weekday
  3596  0D76                     l8218:	
  3597                           ;menu.c: 166:                            while(Button_Handler(keydef)!=k_set_right_short
      +                          );
  3598                           
  3599  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  3600  0D77  0842               	movf	Show_Time@keydef,w
  3601  0D78  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  3602  0D7D  3A06               	xorlw	6
  3603  0D7E  1D03               	skipz
  3604  0D7F  2D76               	goto	l8218
  3605                           
  3606                           ;menu.c: 168:                            g_display_controll=0;
  3607  0D80  1683               	bsf	3,5	;RP0=1, select bank1
  3608  0D81  01AE               	clrf	_g_display_controll^(0+128)	;volatile
  3609                           
  3610                           ;menu.c: 169:                            Disable_All_Digits();
  3611  0D82  160A  158A  2067   	fcall	_Disable_All_Digits
  3612  0D85  0008               	return
  3613  0D86                     __end_of_Show_Time:	
  3614                           
  3615                           	psect	text4
  3616  1D88                     __ptext4:	
  3617 ;; *************** function _Display_Weekday *****************
  3618 ;; Defined at:
  3619 ;;		line 660 in file "menu.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;  weekday         1    wreg     unsigned char 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  weekday         1   12[BANK0 ] unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      void 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : B00/800
  3630 ;;		On exit  : 200/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3633 ;;      Params:         0       0       0       0       0
  3634 ;;      Locals:         0       1       0       0       0
  3635 ;;      Temps:          0       2       0       0       0
  3636 ;;      Totals:         0       3       0       0       0
  3637 ;;Total ram usage:        3 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    5
  3640 ;; This function calls:
  3641 ;;		_Send_7Seg_Text
  3642 ;; This function is called by:
  3643 ;;		_Show_Time
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           
  3648                           ;psect for function _Display_Weekday
  3649  1D88                     _Display_Weekday:	
  3650                           
  3651                           ;incstack = 0
  3652                           ; Regs used in _Display_Weekday: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3653                           ;Display_Weekday@weekday stored from wreg
  3654  1D88  00AC               	movwf	Display_Weekday@weekday
  3655                           
  3656                           ;menu.c: 660: void Display_Weekday(unsigned char weekday);menu.c: 661: {;menu.c: 662:   
      +                            switch (weekday)
  3657  1D89  2DB4               	goto	l7158
  3658  1D8A                     l7142:	
  3659  1D8A  01A6               	clrf	Send_7Seg_Text@decimal_point
  3660  1D8B  303D               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  3661  1D8C  160A  158A  2102   	fcall	_Send_7Seg_Text
  3662  1D8F  0008               	return
  3663  1D90                     l7144:	
  3664  1D90  01A6               	clrf	Send_7Seg_Text@decimal_point
  3665  1D91  3056               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  3666  1D92  160A  158A  2102   	fcall	_Send_7Seg_Text
  3667  1D95  0008               	return
  3668  1D96                     l7146:	
  3669  1D96  01A6               	clrf	Send_7Seg_Text@decimal_point
  3670  1D97  3047               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  3671  1D98  160A  158A  2102   	fcall	_Send_7Seg_Text
  3672  1D9B  0008               	return
  3673  1D9C                     l7148:	
  3674  1D9C  01A6               	clrf	Send_7Seg_Text@decimal_point
  3675  1D9D  3051               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  3676  1D9E  160A  158A  2102   	fcall	_Send_7Seg_Text
  3677  1DA1  0008               	return
  3678  1DA2                     l7150:	
  3679  1DA2  01A6               	clrf	Send_7Seg_Text@decimal_point
  3680  1DA3  3038               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  3681  1DA4  160A  158A  2102   	fcall	_Send_7Seg_Text
  3682  1DA7  0008               	return
  3683  1DA8                     l7152:	
  3684  1DA8  01A6               	clrf	Send_7Seg_Text@decimal_point
  3685  1DA9  305B               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  3686  1DAA  160A  158A  2102   	fcall	_Send_7Seg_Text
  3687  1DAD  0008               	return
  3688  1DAE                     l7154:	
  3689  1DAE  01A6               	clrf	Send_7Seg_Text@decimal_point
  3690  1DAF  3042               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  3691  1DB0  160A  158A  2102   	fcall	_Send_7Seg_Text
  3692  1DB3  0008               	return
  3693  1DB4                     l7158:	
  3694  1DB4  082C               	movf	Display_Weekday@weekday,w
  3695  1DB5  00AA               	movwf	??_Display_Weekday
  3696  1DB6  01AB               	clrf	??_Display_Weekday+1
  3697                           
  3698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3699                           ; Switch size 1, requested type "simple"
  3700                           ; Number of cases is 1, Range of values is 0 to 0
  3701                           ; switch strategies available:
  3702                           ; Name         Instructions Cycles
  3703                           ; simple_byte            4     3 (average)
  3704                           ; direct_byte           11     8 (fixed)
  3705                           ; jumptable            260     6 (fixed)
  3706                           ;	Chosen strategy is simple_byte
  3707  1DB7  082B               	movf	??_Display_Weekday+1,w
  3708  1DB8  3A00               	xorlw	0	; case 0
  3709  1DB9  1903               	skipnz
  3710  1DBA  2DBC               	goto	l8492
  3711  1DBB  2DD3               	goto	l798
  3712  1DBC                     l8492:	
  3713                           
  3714                           ; Switch size 1, requested type "simple"
  3715                           ; Number of cases is 7, Range of values is 0 to 6
  3716                           ; switch strategies available:
  3717                           ; Name         Instructions Cycles
  3718                           ; simple_byte           22    12 (average)
  3719                           ; direct_byte           29     8 (fixed)
  3720                           ; jumptable            260     6 (fixed)
  3721                           ;	Chosen strategy is simple_byte
  3722  1DBC  082A               	movf	??_Display_Weekday,w
  3723  1DBD  3A00               	xorlw	0	; case 0
  3724  1DBE  1903               	skipnz
  3725  1DBF  2D8A               	goto	l7142
  3726  1DC0  3A01               	xorlw	1	; case 1
  3727  1DC1  1903               	skipnz
  3728  1DC2  2D90               	goto	l7144
  3729  1DC3  3A03               	xorlw	3	; case 2
  3730  1DC4  1903               	skipnz
  3731  1DC5  2D96               	goto	l7146
  3732  1DC6  3A01               	xorlw	1	; case 3
  3733  1DC7  1903               	skipnz
  3734  1DC8  2D9C               	goto	l7148
  3735  1DC9  3A07               	xorlw	7	; case 4
  3736  1DCA  1903               	skipnz
  3737  1DCB  2DA2               	goto	l7150
  3738  1DCC  3A01               	xorlw	1	; case 5
  3739  1DCD  1903               	skipnz
  3740  1DCE  2DA8               	goto	l7152
  3741  1DCF  3A03               	xorlw	3	; case 6
  3742  1DD0  1903               	skipnz
  3743  1DD1  2DAE               	goto	l7154
  3744  1DD2  2DD3               	goto	l798
  3745  1DD3                     l798:	
  3746  1DD3  0008               	return
  3747  1DD4                     __end_of_Display_Weekday:	
  3748                           
  3749                           	psect	text5
  3750  0D86                     __ptext5:	
  3751 ;; *************** function _Menu_Set_Time *****************
  3752 ;; Defined at:
  3753 ;;		line 268 in file "menu.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  menudef         1    wreg     PTR struct .
  3756 ;;		 -> main@menudef(7), 
  3757 ;;  keydef          1   44[BANK0 ] PTR struct .
  3758 ;;		 -> main@keydef(6), 
  3759 ;;  menu_type       1   45[BANK0 ] unsigned char 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  menudef         1    4[BANK1 ] PTR struct .
  3762 ;;		 -> main@menudef(7), 
  3763 ;;  current_menu    8    5[BANK1 ] struct MenuParamStruct
  3764 ;;  time            7   13[BANK1 ] struct .
  3765 ;;  current_menu    2    2[BANK1 ] PTR struct MenuParamStru
  3766 ;;		 -> Menu_Set_Time@current_menu(8), NULL(0), Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_work_day_1(8), 
  3767 ;;		 -> Menu_Init@time_limit_free_day_2(8), Menu_Init@time_limit_free_day_1(8), Menu_Init@year(8), Menu_Init@day_month(8
      +), 
  3768 ;;		 -> Menu_Init@hours_minutes(8), 
  3769 ;;  check_button    1    1[BANK1 ] unsigned char 
  3770 ;;  key             1    0[BANK1 ] unsigned char 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 300/800
  3777 ;;		On exit  : B00/100
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3780 ;;      Params:         0       2       0       0       0
  3781 ;;      Locals:         0       0      20       0       0
  3782 ;;      Temps:          0       3       0       0       0
  3783 ;;      Totals:         0       5      20       0       0
  3784 ;;Total ram usage:       25 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    8
  3787 ;; This function calls:
  3788 ;;		_Button_Handler
  3789 ;;		_Find_Weekday
  3790 ;;		_Is_Valid_Date
  3791 ;;		_Menu_Set_Param_Time_Limit
  3792 ;;		_PCF8583_Read_Time_Date
  3793 ;;		_PCF8583_Set_Date_Time
  3794 ;;		_Read_Limit_From_EEprom
  3795 ;;		_Send_7Seg_Text
  3796 ;;		_Write_Limit_To_EEprom
  3797 ;;		___awdiv
  3798 ;;		___awmod
  3799 ;;		___bmul
  3800 ;; This function is called by:
  3801 ;;		_Menu_Handler
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _Menu_Set_Time
  3807  0D86                     _Menu_Set_Time:	
  3808                           
  3809                           ;incstack = 0
  3810 ;; hardware stack exceeded
  3811                           ; Regs used in _Menu_Set_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3812                           ;Menu_Set_Time@menudef stored from wreg
  3813  0D86  1683               	bsf	3,5	;RP0=1, select bank1
  3814  0D87  00D6               	movwf	Menu_Set_Time@menudef^(0+128)
  3815                           
  3816                           ;menu.c: 268: void Menu_Set_Time(MenuParamPonterStruct *menudef, KeyPointerStruct *keyde
      +                          f,;menu.c: 269:                    unsigned char menu_type);menu.c: 270: {;menu.c: 271: 
      +                              unsigned char check_button, key;;menu.c: 272:     MenuParamStruct current_menu;;menu
      +                          .c: 273:     MenuParamStruct *current_menu_ptr=&current_menu;
  3817  0D88  30D7               	movlw	(low (Menu_Set_Time@current_menu| 0))& (0+255)
  3818  0D89  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3819  0D8A  3000               	movlw	0
  3820  0D8B  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3821                           
  3822                           ;menu.c: 274:     TimeStruct time;;menu.c: 276:     g_display_controll=1;
  3823  0D8C  3001               	movlw	1
  3824  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  3825  0D8E  00CE               	movwf	??_Menu_Set_Time
  3826  0D8F  084E               	movf	??_Menu_Set_Time,w
  3827  0D90  1683               	bsf	3,5	;RP0=1, select bank1
  3828  0D91  00AE               	movwf	_g_display_controll^(0+128)	;volatile
  3829                           
  3830                           ;menu.c: 278:     if(menu_type==1)
  3831  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  3832  0D93  034D               	decf	Menu_Set_Time@menu_type,w
  3833  0D94  1D03               	btfss	3,2
  3834  0D95  2DCC               	goto	l8242
  3835                           
  3836                           ;menu.c: 279:     {;menu.c: 280:          Send_7Seg_Text("set2", 0);
  3837  0D96  01A6               	clrf	Send_7Seg_Text@decimal_point
  3838  0D97  3029               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3839  0D98  160A  158A  2102  120A  158A  	fcall	_Send_7Seg_Text
  3840                           
  3841                           ;menu.c: 281:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  3842  0D9D  300B               	movlw	11
  3843  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  3844  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  3845  0DA0  00D0               	movwf	??_Menu_Set_Time+2
  3846  0DA1  3026               	movlw	38
  3847  0DA2  00CF               	movwf	??_Menu_Set_Time+1
  3848  0DA3  305D               	movlw	93
  3849  0DA4  00CE               	movwf	??_Menu_Set_Time
  3850  0DA5                     u8457:	
  3851  0DA5  0BCE               	decfsz	??_Menu_Set_Time,f
  3852  0DA6  2DA5               	goto	u8457
  3853  0DA7  0BCF               	decfsz	??_Menu_Set_Time+1,f
  3854  0DA8  2DA5               	goto	u8457
  3855  0DA9  0BD0               	decfsz	??_Menu_Set_Time+2,f
  3856  0DAA  2DA5               	goto	u8457
  3857                           
  3858                           ;menu.c: 283:         Read_Limit_From_EEprom(menudef->time_limit_free_day_1_ptr,
  3859  0DAB  1683               	bsf	3,5	;RP0=1, select bank1
  3860  0DAC  1303               	bcf	3,6	;RP1=0, select bank1
  3861  0DAD  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3862  0DAE  3E06               	addlw	6
  3863  0DAF  0084               	movwf	4
  3864  0DB0  1783               	bsf	3,7	;select IRP bank2
  3865  0DB1  0800               	movf	0,w
  3866  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  3867  0DB3  00CE               	movwf	??_Menu_Set_Time
  3868  0DB4  084E               	movf	??_Menu_Set_Time,w
  3869  0DB5  00A7               	movwf	Read_Limit_From_EEprom@limit2
  3870  0DB6  01A8               	clrf	Read_Limit_From_EEprom@limit_type
  3871  0DB7  0AA8               	incf	Read_Limit_From_EEprom@limit_type,f
  3872  0DB8  1683               	bsf	3,5	;RP0=1, select bank1
  3873  0DB9  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3874  0DBA  3E05               	addlw	5
  3875  0DBB  0084               	movwf	4
  3876  0DBC  0800               	movf	0,w
  3877  0DBD  160A  118A  20F6  120A  158A  	fcall	_Read_Limit_From_EEprom
  3878                           
  3879                           ;menu.c: 287:         current_menu_ptr=menudef->time_limit_free_day_1_ptr;
  3880  0DC2  1683               	bsf	3,5	;RP0=1, select bank1
  3881  0DC3  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3882  0DC4  3E05               	addlw	5
  3883  0DC5  0084               	movwf	4
  3884  0DC6  0800               	movf	0,w
  3885  0DC7  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3886  0DC8  3001               	movlw	1
  3887  0DC9  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3888                           
  3889                           ;menu.c: 288:         key=k_set_time2_short;
  3890  0DCA  3004               	movlw	4
  3891  0DCB  2E03               	goto	L1
  3892  0DCC                     l8242:	
  3893                           ;menu.c: 290:     }else if(menu_type==0)
  3894                           
  3895  0DCC  084D               	movf	Menu_Set_Time@menu_type,w
  3896  0DCD  1D03               	btfss	3,2
  3897  0DCE  2E09               	goto	l8254
  3898                           
  3899                           ;menu.c: 291:     {;menu.c: 292:         Send_7Seg_Text("set1", 0);
  3900  0DCF  01A6               	clrf	Send_7Seg_Text@decimal_point
  3901  0DD0  3024               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3902  0DD1  160A  158A  2102  120A  158A  	fcall	_Send_7Seg_Text
  3903                           
  3904                           ;menu.c: 293:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  3905  0DD6  300B               	movlw	11
  3906  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  3907  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
  3908  0DD9  00D0               	movwf	??_Menu_Set_Time+2
  3909  0DDA  3026               	movlw	38
  3910  0DDB  00CF               	movwf	??_Menu_Set_Time+1
  3911  0DDC  305D               	movlw	93
  3912  0DDD  00CE               	movwf	??_Menu_Set_Time
  3913  0DDE                     u8467:	
  3914  0DDE  0BCE               	decfsz	??_Menu_Set_Time,f
  3915  0DDF  2DDE               	goto	u8467
  3916  0DE0  0BCF               	decfsz	??_Menu_Set_Time+1,f
  3917  0DE1  2DDE               	goto	u8467
  3918  0DE2  0BD0               	decfsz	??_Menu_Set_Time+2,f
  3919  0DE3  2DDE               	goto	u8467
  3920                           
  3921                           ;menu.c: 294:         Read_Limit_From_EEprom(menudef->time_limit_work_day_1_ptr,
  3922  0DE4  1683               	bsf	3,5	;RP0=1, select bank1
  3923  0DE5  1303               	bcf	3,6	;RP1=0, select bank1
  3924  0DE6  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3925  0DE7  3E04               	addlw	4
  3926  0DE8  0084               	movwf	4
  3927  0DE9  1783               	bsf	3,7	;select IRP bank2
  3928  0DEA  0800               	movf	0,w
  3929  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  3930  0DEC  00CE               	movwf	??_Menu_Set_Time
  3931  0DED  084E               	movf	??_Menu_Set_Time,w
  3932  0DEE  00A7               	movwf	Read_Limit_From_EEprom@limit2
  3933  0DEF  01A8               	clrf	Read_Limit_From_EEprom@limit_type
  3934  0DF0  1683               	bsf	3,5	;RP0=1, select bank1
  3935  0DF1  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3936  0DF2  3E03               	addlw	3
  3937  0DF3  0084               	movwf	4
  3938  0DF4  0800               	movf	0,w
  3939  0DF5  160A  118A  20F6  120A  158A  	fcall	_Read_Limit_From_EEprom
  3940                           
  3941                           ;menu.c: 298:         current_menu_ptr=menudef->time_limit_work_day_1_ptr;
  3942  0DFA  1683               	bsf	3,5	;RP0=1, select bank1
  3943  0DFB  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  3944  0DFC  3E03               	addlw	3
  3945  0DFD  0084               	movwf	4
  3946  0DFE  0800               	movf	0,w
  3947  0DFF  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3948  0E00  3001               	movlw	1
  3949  0E01  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3950                           
  3951                           ;menu.c: 299:         key=k_set_time1_short;
  3952  0E02  3002               	movlw	2
  3953  0E03                     L1:	
  3954  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  3955  0E04  00CE               	movwf	??_Menu_Set_Time
  3956  0E05  084E               	movf	??_Menu_Set_Time,w
  3957  0E06  1683               	bsf	3,5	;RP0=1, select bank1
  3958  0E07  00D2               	movwf	Menu_Set_Time@key^(0+128)
  3959                           
  3960                           ;menu.c: 301:     }else if(menu_type==2)
  3961  0E08  2EA4               	goto	l8278
  3962  0E09                     l8254:	
  3963  0E09  3002               	movlw	2
  3964  0E0A  064D               	xorwf	Menu_Set_Time@menu_type,w
  3965  0E0B  1D03               	btfss	3,2
  3966  0E0C  2EA4               	goto	l8278
  3967                           
  3968                           ;menu.c: 302:     {;menu.c: 303:         Send_7Seg_Text("srtc", 0);
  3969  0E0D  01A6               	clrf	Send_7Seg_Text@decimal_point
  3970  0E0E  302E               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3971  0E0F  160A  158A  2102  120A  158A  	fcall	_Send_7Seg_Text
  3972                           
  3973                           ;menu.c: 304:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  3974  0E14  300B               	movlw	11
  3975  0E15  1283               	bcf	3,5	;RP0=0, select bank0
  3976  0E16  1303               	bcf	3,6	;RP1=0, select bank0
  3977  0E17  00D0               	movwf	??_Menu_Set_Time+2
  3978  0E18  3026               	movlw	38
  3979  0E19  00CF               	movwf	??_Menu_Set_Time+1
  3980  0E1A  305D               	movlw	93
  3981  0E1B  00CE               	movwf	??_Menu_Set_Time
  3982  0E1C                     u8477:	
  3983  0E1C  0BCE               	decfsz	??_Menu_Set_Time,f
  3984  0E1D  2E1C               	goto	u8477
  3985  0E1E  0BCF               	decfsz	??_Menu_Set_Time+1,f
  3986  0E1F  2E1C               	goto	u8477
  3987  0E20  0BD0               	decfsz	??_Menu_Set_Time+2,f
  3988  0E21  2E1C               	goto	u8477
  3989                           
  3990                           ;menu.c: 306:         PCF8583_Read_Time_Date(&time);
  3991  0E22  30DF               	movlw	(low (Menu_Set_Time@time| 0))& (0+255)
  3992  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  3993  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  3994  0E25  00B5               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  3995  0E26  3000               	movlw	0
  3996  0E27  00B6               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  3997  0E28  120A  118A  26CF  120A  158A  	fcall	_PCF8583_Read_Time_Date
  3998                           
  3999                           ;menu.c: 308:         menudef->hours_minutes_ptr->param1=time.minutes;
  4000  0E2D  0860               	movf	(Menu_Set_Time@time^(0+128)+1),w
  4001  0E2E  1283               	bcf	3,5	;RP0=0, select bank0
  4002  0E2F  00CE               	movwf	??_Menu_Set_Time
  4003  0E30  1683               	bsf	3,5	;RP0=1, select bank1
  4004  0E31  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4005  0E32  0084               	movwf	4
  4006  0E33  1783               	bsf	3,7	;select IRP bank2
  4007  0E34  0800               	movf	0,w
  4008  0E35  3E06               	addlw	6
  4009  0E36  0084               	movwf	4
  4010  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  4011  0E38  084E               	movf	??_Menu_Set_Time,w
  4012  0E39  0080               	movwf	0
  4013                           
  4014                           ;menu.c: 309:         menudef->hours_minutes_ptr->param=time.hours;
  4015  0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  4016  0E3B  0861               	movf	(Menu_Set_Time@time^(0+128)+2),w
  4017  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  4018  0E3D  00CE               	movwf	??_Menu_Set_Time
  4019  0E3E  1683               	bsf	3,5	;RP0=1, select bank1
  4020  0E3F  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4021  0E40  0084               	movwf	4
  4022  0E41  0800               	movf	0,w
  4023  0E42  3E05               	addlw	5
  4024  0E43  0084               	movwf	4
  4025  0E44  1283               	bcf	3,5	;RP0=0, select bank0
  4026  0E45  084E               	movf	??_Menu_Set_Time,w
  4027  0E46  0080               	movwf	0
  4028                           
  4029                           ;menu.c: 310:         menudef->day_month_ptr->param=time.day;
  4030  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  4031  0E48  0862               	movf	(Menu_Set_Time@time^(0+128)+3),w
  4032  0E49  1283               	bcf	3,5	;RP0=0, select bank0
  4033  0E4A  00CE               	movwf	??_Menu_Set_Time
  4034  0E4B  1683               	bsf	3,5	;RP0=1, select bank1
  4035  0E4C  0A56               	incf	Menu_Set_Time@menudef^(0+128),w
  4036  0E4D  0084               	movwf	4
  4037  0E4E  0800               	movf	0,w
  4038  0E4F  3E05               	addlw	5
  4039  0E50  0084               	movwf	4
  4040  0E51  1283               	bcf	3,5	;RP0=0, select bank0
  4041  0E52  084E               	movf	??_Menu_Set_Time,w
  4042  0E53  0080               	movwf	0
  4043                           
  4044                           ;menu.c: 311:         menudef->day_month_ptr->param1=time.month;
  4045  0E54  1683               	bsf	3,5	;RP0=1, select bank1
  4046  0E55  0863               	movf	(Menu_Set_Time@time^(0+128)+4),w
  4047  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0E57  00CE               	movwf	??_Menu_Set_Time
  4049  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  4050  0E59  0A56               	incf	Menu_Set_Time@menudef^(0+128),w
  4051  0E5A  0084               	movwf	4
  4052  0E5B  0800               	movf	0,w
  4053  0E5C  3E06               	addlw	6
  4054  0E5D  0084               	movwf	4
  4055  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  4056  0E5F  084E               	movf	??_Menu_Set_Time,w
  4057  0E60  0080               	movwf	0
  4058                           
  4059                           ;menu.c: 313:         menudef->year_ptr->param1=time.year%100;
  4060  0E61  3064               	movlw	100
  4061  0E62  00A6               	movwf	___awmod@divisor
  4062  0E63  3000               	movlw	0
  4063  0E64  00A7               	movwf	___awmod@divisor+1
  4064  0E65  1683               	bsf	3,5	;RP0=1, select bank1
  4065  0E66  0864               	movf	(Menu_Set_Time@time^(0+128)+5),w
  4066  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  4067  0E68  00A8               	movwf	___awmod@dividend
  4068  0E69  01A9               	clrf	___awmod@dividend+1
  4069  0E6A  1BA8               	btfsc	___awmod@dividend,7
  4070  0E6B  03A9               	decf	___awmod@dividend+1,f
  4071  0E6C  160A  158A  253D  120A  158A  	fcall	___awmod
  4072  0E71  0826               	movf	?___awmod,w
  4073  0E72  00CE               	movwf	??_Menu_Set_Time
  4074  0E73  1683               	bsf	3,5	;RP0=1, select bank1
  4075  0E74  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4076  0E75  3E02               	addlw	2
  4077  0E76  0084               	movwf	4
  4078  0E77  1783               	bsf	3,7	;select IRP bank2
  4079  0E78  0800               	movf	0,w
  4080  0E79  3E06               	addlw	6
  4081  0E7A  0084               	movwf	4
  4082  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  4083  0E7C  084E               	movf	??_Menu_Set_Time,w
  4084  0E7D  0080               	movwf	0
  4085                           
  4086                           ;menu.c: 314:         menudef->year_ptr->param=20+time.year/100;
  4087  0E7E  3064               	movlw	100
  4088  0E7F  00AD               	movwf	___awdiv@divisor
  4089  0E80  3000               	movlw	0
  4090  0E81  00AE               	movwf	___awdiv@divisor+1
  4091  0E82  1683               	bsf	3,5	;RP0=1, select bank1
  4092  0E83  0864               	movf	(Menu_Set_Time@time^(0+128)+5),w
  4093  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  4094  0E85  00AF               	movwf	___awdiv@dividend
  4095  0E86  01B0               	clrf	___awdiv@dividend+1
  4096  0E87  1BAF               	btfsc	___awdiv@dividend,7
  4097  0E88  03B0               	decf	___awdiv@dividend+1,f
  4098  0E89  160A  158A  2629  120A  158A  	fcall	___awdiv
  4099  0E8E  082D               	movf	?___awdiv,w
  4100  0E8F  3E14               	addlw	20
  4101  0E90  00CE               	movwf	??_Menu_Set_Time
  4102  0E91  1683               	bsf	3,5	;RP0=1, select bank1
  4103  0E92  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4104  0E93  3E02               	addlw	2
  4105  0E94  0084               	movwf	4
  4106  0E95  1783               	bsf	3,7	;select IRP bank2
  4107  0E96  0800               	movf	0,w
  4108  0E97  3E05               	addlw	5
  4109  0E98  0084               	movwf	4
  4110  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  4111  0E9A  084E               	movf	??_Menu_Set_Time,w
  4112  0E9B  0080               	movwf	0
  4113                           
  4114                           ;menu.c: 316:         current_menu_ptr=menudef->hours_minutes_ptr;
  4115  0E9C  1683               	bsf	3,5	;RP0=1, select bank1
  4116  0E9D  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4117  0E9E  0084               	movwf	4
  4118  0E9F  0800               	movf	0,w
  4119  0EA0  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  4120  0EA1  3001               	movlw	1
  4121  0EA2  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  4122                           
  4123                           ;menu.c: 317:         key=k_set_rtc_short;
  4124  0EA3  01D2               	clrf	Menu_Set_Time@key^(0+128)
  4125  0EA4                     l8278:	
  4126                           
  4127                           ;menu.c: 321:     g_decimal_point=0b0100;
  4128  0EA4  3004               	movlw	4
  4129  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  4130  0EA6  00CE               	movwf	??_Menu_Set_Time
  4131  0EA7  084E               	movf	??_Menu_Set_Time,w
  4132  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  4133  0EA9  00AD               	movwf	_g_decimal_point^(0+128)
  4134  0EAA                     l8280:	
  4135                           
  4136                           ;menu.c: 324:     {;menu.c: 325:         Menu_Set_Param_Time_Limit(current_menu_ptr, che
      +                          ck_button);
  4137  0EAA  0854               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  4138  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0EAC  00B6               	movwf	Menu_Set_Param_Time_Limit@menu
  4140  0EAD  1683               	bsf	3,5	;RP0=1, select bank1
  4141  0EAE  0855               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  4142  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  4143  0EB0  00B7               	movwf	Menu_Set_Param_Time_Limit@menu+1
  4144  0EB1  1683               	bsf	3,5	;RP0=1, select bank1
  4145  0EB2  0853               	movf	Menu_Set_Time@check_button^(0+128),w
  4146  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0EB4  00CE               	movwf	??_Menu_Set_Time
  4148  0EB5  084E               	movf	??_Menu_Set_Time,w
  4149  0EB6  00B8               	movwf	Menu_Set_Param_Time_Limit@check_button
  4150  0EB7  120A  118A  203A  120A  158A  	fcall	_Menu_Set_Param_Time_Limit
  4151                           
  4152                           ;menu.c: 329:         check_button=Button_Handler(keydef);
  4153  0EBC  084C               	movf	Menu_Set_Time@keydef,w
  4154  0EBD  160A  118A  2344  120A  158A  	fcall	_Button_Handler
  4155  0EC2  00CE               	movwf	??_Menu_Set_Time
  4156  0EC3  084E               	movf	??_Menu_Set_Time,w
  4157  0EC4  1683               	bsf	3,5	;RP0=1, select bank1
  4158  0EC5  00D3               	movwf	Menu_Set_Time@check_button^(0+128)
  4159                           
  4160                           ;menu.c: 331:         if(check_button==key)
  4161  0EC6  0853               	movf	Menu_Set_Time@check_button^(0+128),w
  4162  0EC7  0652               	xorwf	Menu_Set_Time@key^(0+128),w
  4163  0EC8  1D03               	skipz
  4164  0EC9  2EAA               	goto	l8280
  4165                           
  4166                           ;menu.c: 332:         {;menu.c: 333:            if(current_menu_ptr->next_menu==0)
  4167  0ECA  0854               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  4168  0ECB  3E07               	addlw	7
  4169  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  4170  0ECD  00CE               	movwf	??_Menu_Set_Time
  4171  0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  4172  0ECF  0855               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  4173  0ED0  1803               	skipnc
  4174  0ED1  3E01               	addlw	1
  4175  0ED2  3E00               	addlw	0
  4176  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  4177  0ED4  00CF               	movwf	??_Menu_Set_Time+1
  4178  0ED5  084E               	movf	??_Menu_Set_Time,w
  4179  0ED6  0084               	movwf	4
  4180  0ED7  1783               	bsf	3,7
  4181  0ED8  1C4F               	btfss	??_Menu_Set_Time+1,0
  4182  0ED9  1383               	bcf	3,7
  4183  0EDA  0800               	movf	0,w
  4184  0EDB  1D03               	btfss	3,2
  4185  0EDC  2FDC               	goto	l8324
  4186                           
  4187                           ;menu.c: 334:            {;menu.c: 335:                 if(menu_type==1)
  4188  0EDD  034D               	decf	Menu_Set_Time@menu_type,w
  4189  0EDE  1D03               	btfss	3,2
  4190  0EDF  2EF7               	goto	l8292
  4191                           
  4192                           ;menu.c: 336:                 {;menu.c: 338:                     Write_Limit_To_EEprom(m
      +                          enudef->time_limit_free_day_1_ptr,
  4193  0EE0  1683               	bsf	3,5	;RP0=1, select bank1
  4194  0EE1  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4195  0EE2  3E06               	addlw	6
  4196  0EE3  0084               	movwf	4
  4197  0EE4  1783               	bsf	3,7	;select IRP bank2
  4198  0EE5  0800               	movf	0,w
  4199  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  4200  0EE7  00CE               	movwf	??_Menu_Set_Time
  4201  0EE8  084E               	movf	??_Menu_Set_Time,w
  4202  0EE9  00A8               	movwf	Write_Limit_To_EEprom@limit2
  4203  0EEA  01A9               	clrf	Write_Limit_To_EEprom@limit_type
  4204  0EEB  0AA9               	incf	Write_Limit_To_EEprom@limit_type,f
  4205  0EEC  1683               	bsf	3,5	;RP0=1, select bank1
  4206  0EED  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4207  0EEE  3E05               	addlw	5
  4208  0EEF  0084               	movwf	4
  4209  0EF0  0800               	movf	0,w
  4210  0EF1  160A  118A  208D  120A  158A  	fcall	_Write_Limit_To_EEprom
  4211  0EF6  2FBB               	goto	L4
  4212  0EF7                     l8292:	
  4213                           ;menu.c: 344:                 }else if(menu_type==0)
  4214                           
  4215                           ;menu.c: 342:                     Send_7Seg_Text("save",0);
  4216                           
  4217  0EF7  084D               	movf	Menu_Set_Time@menu_type,w
  4218  0EF8  1D03               	btfss	3,2
  4219  0EF9  2F10               	goto	l8296
  4220                           
  4221                           ;menu.c: 345:                 {;menu.c: 346:                     Write_Limit_To_EEprom(m
      +                          enudef->time_limit_work_day_1_ptr,
  4222  0EFA  1683               	bsf	3,5	;RP0=1, select bank1
  4223  0EFB  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4224  0EFC  3E04               	addlw	4
  4225  0EFD  0084               	movwf	4
  4226  0EFE  1783               	bsf	3,7	;select IRP bank2
  4227  0EFF  0800               	movf	0,w
  4228  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  4229  0F01  00CE               	movwf	??_Menu_Set_Time
  4230  0F02  084E               	movf	??_Menu_Set_Time,w
  4231  0F03  00A8               	movwf	Write_Limit_To_EEprom@limit2
  4232  0F04  01A9               	clrf	Write_Limit_To_EEprom@limit_type
  4233  0F05  1683               	bsf	3,5	;RP0=1, select bank1
  4234  0F06  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4235  0F07  3E03               	addlw	3
  4236  0F08  0084               	movwf	4
  4237  0F09  0800               	movf	0,w
  4238  0F0A  160A  118A  208D  120A  158A  	fcall	_Write_Limit_To_EEprom
  4239  0F0F  2FBB               	goto	L4
  4240  0F10                     l8296:	
  4241                           ;menu.c: 352:                 }else if(menu_type==2)
  4242                           
  4243                           ;menu.c: 350:                     Send_7Seg_Text("save",0);
  4244                           
  4245  0F10  3002               	movlw	2
  4246  0F11  064D               	xorwf	Menu_Set_Time@menu_type,w
  4247  0F12  1D03               	btfss	3,2
  4248  0F13  2FC5               	goto	l8318
  4249                           
  4250                           ;menu.c: 353:                 {;menu.c: 354:                     time.seconds=0;
  4251  0F14  1683               	bsf	3,5	;RP0=1, select bank1
  4252  0F15  01DF               	clrf	Menu_Set_Time@time^(0+128)
  4253                           
  4254                           ;menu.c: 355:                     time.minutes=menudef->hours_minutes_ptr->param1;
  4255  0F16  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4256  0F17  0084               	movwf	4
  4257  0F18  1783               	bsf	3,7	;select IRP bank2
  4258  0F19  0800               	movf	0,w
  4259  0F1A  3E06               	addlw	6
  4260  0F1B  0084               	movwf	4
  4261  0F1C  0800               	movf	0,w
  4262  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  4263  0F1E  00CE               	movwf	??_Menu_Set_Time
  4264  0F1F  084E               	movf	??_Menu_Set_Time,w
  4265  0F20  1683               	bsf	3,5	;RP0=1, select bank1
  4266  0F21  00E0               	movwf	(Menu_Set_Time@time^(0+128)+1)
  4267                           
  4268                           ;menu.c: 356:                     time.hours=menudef->hours_minutes_ptr->param;
  4269  0F22  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4270  0F23  0084               	movwf	4
  4271  0F24  0800               	movf	0,w
  4272  0F25  3E05               	addlw	5
  4273  0F26  0084               	movwf	4
  4274  0F27  0800               	movf	0,w
  4275  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  4276  0F29  00CE               	movwf	??_Menu_Set_Time
  4277  0F2A  084E               	movf	??_Menu_Set_Time,w
  4278  0F2B  1683               	bsf	3,5	;RP0=1, select bank1
  4279  0F2C  00E1               	movwf	(Menu_Set_Time@time^(0+128)+2)
  4280                           
  4281                           ;menu.c: 357:                     time.day=menudef->day_month_ptr->param;
  4282  0F2D  0A56               	incf	Menu_Set_Time@menudef^(0+128),w
  4283  0F2E  0084               	movwf	4
  4284  0F2F  0800               	movf	0,w
  4285  0F30  3E05               	addlw	5
  4286  0F31  0084               	movwf	4
  4287  0F32  0800               	movf	0,w
  4288  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  4289  0F34  00CE               	movwf	??_Menu_Set_Time
  4290  0F35  084E               	movf	??_Menu_Set_Time,w
  4291  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  4292  0F37  00E2               	movwf	(Menu_Set_Time@time^(0+128)+3)
  4293                           
  4294                           ;menu.c: 358:                     time.month=menudef->day_month_ptr->param1;
  4295  0F38  0A56               	incf	Menu_Set_Time@menudef^(0+128),w
  4296  0F39  0084               	movwf	4
  4297  0F3A  0800               	movf	0,w
  4298  0F3B  3E06               	addlw	6
  4299  0F3C  0084               	movwf	4
  4300  0F3D  0800               	movf	0,w
  4301  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  4302  0F3F  00CE               	movwf	??_Menu_Set_Time
  4303  0F40  084E               	movf	??_Menu_Set_Time,w
  4304  0F41  1683               	bsf	3,5	;RP0=1, select bank1
  4305  0F42  00E3               	movwf	(Menu_Set_Time@time^(0+128)+4)
  4306                           
  4307                           ;menu.c: 360:                     time.year=((menudef->year_ptr->param1)+100*
  4308  0F43  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4309  0F44  3E02               	addlw	2
  4310  0F45  0084               	movwf	4
  4311  0F46  0800               	movf	0,w
  4312  0F47  3E06               	addlw	6
  4313  0F48  0084               	movwf	4
  4314  0F49  0800               	movf	0,w
  4315  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  4316  0F4B  00CE               	movwf	??_Menu_Set_Time
  4317  0F4C  3064               	movlw	100
  4318  0F4D  00CF               	movwf	??_Menu_Set_Time+1
  4319  0F4E  084F               	movf	??_Menu_Set_Time+1,w
  4320  0F4F  00AD               	movwf	___bmul@multiplicand
  4321  0F50  1683               	bsf	3,5	;RP0=1, select bank1
  4322  0F51  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4323  0F52  3E02               	addlw	2
  4324  0F53  0084               	movwf	4
  4325  0F54  0800               	movf	0,w
  4326  0F55  3E05               	addlw	5
  4327  0F56  0084               	movwf	4
  4328  0F57  0800               	movf	0,w
  4329  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  4330  0F59  00A8               	movwf	___awmod@dividend
  4331  0F5A  01A9               	clrf	___awmod@dividend+1
  4332  0F5B  1BA8               	btfsc	___awmod@dividend,7
  4333  0F5C  03A9               	decf	___awmod@dividend+1,f
  4334  0F5D  300A               	movlw	10
  4335  0F5E  00A6               	movwf	___awmod@divisor
  4336  0F5F  3000               	movlw	0
  4337  0F60  00A7               	movwf	___awmod@divisor+1
  4338  0F61  160A  158A  253D  120A  158A  	fcall	___awmod
  4339  0F66  0826               	movf	?___awmod,w
  4340  0F67  160A  158A  20B9  120A  158A  	fcall	___bmul
  4341  0F6C  074E               	addwf	??_Menu_Set_Time,w
  4342  0F6D  00D0               	movwf	??_Menu_Set_Time+2
  4343  0F6E  0850               	movf	??_Menu_Set_Time+2,w
  4344  0F6F  1683               	bsf	3,5	;RP0=1, select bank1
  4345  0F70  00E4               	movwf	(Menu_Set_Time@time^(0+128)+5)
  4346                           
  4347                           ;menu.c: 363:                     time.weekday=Find_Weekday((2000+time.year),
  4348  0F71  0864               	movf	(Menu_Set_Time@time^(0+128)+5),w
  4349  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  4350  0F73  00CE               	movwf	??_Menu_Set_Time
  4351  0F74  01CF               	clrf	??_Menu_Set_Time+1
  4352  0F75  1BCE               	btfsc	??_Menu_Set_Time,7
  4353  0F76  03CF               	decf	??_Menu_Set_Time+1,f
  4354  0F77  084E               	movf	??_Menu_Set_Time,w
  4355  0F78  3ED0               	addlw	208
  4356  0F79  00BA               	movwf	Find_Weekday@year
  4357  0F7A  084F               	movf	??_Menu_Set_Time+1,w
  4358  0F7B  1803               	skipnc
  4359  0F7C  3E01               	addlw	1
  4360  0F7D  3E07               	addlw	7
  4361  0F7E  00BB               	movwf	Find_Weekday@year+1
  4362  0F7F  1683               	bsf	3,5	;RP0=1, select bank1
  4363  0F80  0863               	movf	(Menu_Set_Time@time^(0+128)+4),w
  4364  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  4365  0F82  00BC               	movwf	Find_Weekday@month
  4366  0F83  01BD               	clrf	Find_Weekday@month+1
  4367  0F84  1BBC               	btfsc	Find_Weekday@month,7
  4368  0F85  03BD               	decf	Find_Weekday@month+1,f
  4369  0F86  1683               	bsf	3,5	;RP0=1, select bank1
  4370  0F87  0862               	movf	(Menu_Set_Time@time^(0+128)+3),w
  4371  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  4372  0F89  00BE               	movwf	Find_Weekday@day
  4373  0F8A  01BF               	clrf	Find_Weekday@day+1
  4374  0F8B  1BBE               	btfsc	Find_Weekday@day,7
  4375  0F8C  03BF               	decf	Find_Weekday@day+1,f
  4376  0F8D  160A  118A  2458  120A  158A  	fcall	_Find_Weekday
  4377  0F92  00D0               	movwf	??_Menu_Set_Time+2
  4378  0F93  0850               	movf	??_Menu_Set_Time+2,w
  4379  0F94  1683               	bsf	3,5	;RP0=1, select bank1
  4380  0F95  00E5               	movwf	(Menu_Set_Time@time^(0+128)+6)
  4381                           
  4382                           ;menu.c: 366:                     if(Is_Valid_Date(time.day,time.month,(2000+time.year))
      +                          )
  4383  0F96  0863               	movf	(Menu_Set_Time@time^(0+128)+4),w
  4384  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  4385  0F98  00CE               	movwf	??_Menu_Set_Time
  4386  0F99  084E               	movf	??_Menu_Set_Time,w
  4387  0F9A  00BD               	movwf	Is_Valid_Date@m
  4388  0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  4389  0F9C  0864               	movf	(Menu_Set_Time@time^(0+128)+5),w
  4390  0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  4391  0F9E  00CF               	movwf	??_Menu_Set_Time+1
  4392  0F9F  01D0               	clrf	??_Menu_Set_Time+2
  4393  0FA0  1BCF               	btfsc	??_Menu_Set_Time+1,7
  4394  0FA1  03D0               	decf	??_Menu_Set_Time+2,f
  4395  0FA2  084F               	movf	??_Menu_Set_Time+1,w
  4396  0FA3  3ED0               	addlw	208
  4397  0FA4  00BE               	movwf	Is_Valid_Date@y
  4398  0FA5  0850               	movf	??_Menu_Set_Time+2,w
  4399  0FA6  1803               	skipnc
  4400  0FA7  3E01               	addlw	1
  4401  0FA8  3E07               	addlw	7
  4402  0FA9  00BF               	movwf	Is_Valid_Date@y+1
  4403  0FAA  1683               	bsf	3,5	;RP0=1, select bank1
  4404  0FAB  0862               	movf	(Menu_Set_Time@time^(0+128)+3),w
  4405  0FAC  160A  158A  2682  120A  158A  	fcall	_Is_Valid_Date
  4406  0FB1  3A00               	xorlw	0
  4407  0FB2  1903               	skipnz
  4408  0FB3  2FBE               	goto	l8316
  4409                           
  4410                           ;menu.c: 367:                     {;menu.c: 368:                         PCF8583_Set_Dat
      +                          e_Time(&time);
  4411  0FB4  30DF               	movlw	(low (Menu_Set_Time@time| 0))& (0+255)
  4412  0FB5  120A  158A  2043  120A  158A  	fcall	_PCF8583_Set_Date_Time
  4413                           
  4414                           ;menu.c: 369:                          Send_7Seg_Text("save",0);
  4415  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  4416  0FBB                     L4:	
  4417  0FBB  01A6               	clrf	Send_7Seg_Text@decimal_point
  4418  0FBC  304C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  4419  0FBD  2FC0               	goto	L2
  4420  0FBE                     l8316:	
  4421                           ;menu.c: 371:                     }else
  4422                           
  4423                           
  4424                           ;menu.c: 372:                     {;menu.c: 373:                          Send_7Seg_Text
      +                          ("badd",0);
  4425  0FBE  01A6               	clrf	Send_7Seg_Text@decimal_point
  4426  0FBF  3033               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  4427  0FC0                     L2:	
  4428  0FC0  160A  158A  2102  120A  158A  	fcall	_Send_7Seg_Text
  4429  0FC5                     l8318:	
  4430                           
  4431                           ;menu.c: 377:                 _delay((unsigned long)((2000)*(8000000/4000.0)));
  4432  0FC5  3015               	movlw	21
  4433  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  4434  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  4435  0FC8  00D0               	movwf	??_Menu_Set_Time+2
  4436  0FC9  304B               	movlw	75
  4437  0FCA  00CF               	movwf	??_Menu_Set_Time+1
  4438  0FCB  30BD               	movlw	189
  4439  0FCC  00CE               	movwf	??_Menu_Set_Time
  4440  0FCD                     u8487:	
  4441  0FCD  0BCE               	decfsz	??_Menu_Set_Time,f
  4442  0FCE  2FCD               	goto	u8487
  4443  0FCF  0BCF               	decfsz	??_Menu_Set_Time+1,f
  4444  0FD0  2FCD               	goto	u8487
  4445  0FD1  0BD0               	decfsz	??_Menu_Set_Time+2,f
  4446  0FD2  2FCD               	goto	u8487
  4447  0FD3  2FD4               	nop2
  4448                           
  4449                           ;menu.c: 378:                 Send_7Seg_Text("****",0);
  4450  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  4451  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  4452  0FD6  01A6               	clrf	Send_7Seg_Text@decimal_point
  4453  0FD7  3060               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4454  0FD8  160A  158A  2102   	fcall	_Send_7Seg_Text
  4455  0FDB  0008               	return
  4456  0FDC                     l8324:	
  4457                           
  4458                           ;menu.c: 383:             current_menu_ptr=(current_menu_ptr->next_menu);
  4459  0FDC  1683               	bsf	3,5	;RP0=1, select bank1
  4460  0FDD  0854               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  4461  0FDE  3E07               	addlw	7
  4462  0FDF  1283               	bcf	3,5	;RP0=0, select bank0
  4463  0FE0  00CE               	movwf	??_Menu_Set_Time
  4464  0FE1  1683               	bsf	3,5	;RP0=1, select bank1
  4465  0FE2  0855               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  4466  0FE3  1803               	skipnc
  4467  0FE4  3E01               	addlw	1
  4468  0FE5  3E00               	addlw	0
  4469  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  4470  0FE7  00CF               	movwf	??_Menu_Set_Time+1
  4471  0FE8  084E               	movf	??_Menu_Set_Time,w
  4472  0FE9  0084               	movwf	4
  4473  0FEA  1783               	bsf	3,7
  4474  0FEB  1C4F               	btfss	??_Menu_Set_Time+1,0
  4475  0FEC  1383               	bcf	3,7
  4476  0FED  0800               	movf	0,w
  4477  0FEE  1683               	bsf	3,5	;RP0=1, select bank1
  4478  0FEF  00D4               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  4479  0FF0  3001               	movlw	1
  4480  0FF1  00D5               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  4481                           
  4482                           ;menu.c: 384:             if(current_menu_ptr==menudef->year_ptr)
  4483  0FF2  0856               	movf	Menu_Set_Time@menudef^(0+128),w
  4484  0FF3  3E02               	addlw	2
  4485  0FF4  0084               	movwf	4
  4486  0FF5  3001               	movlw	1
  4487  0FF6  0655               	xorwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  4488  0FF7  1D03               	skipz
  4489  0FF8  2FFC               	goto	u8325
  4490  0FF9  1783               	bsf	3,7	;select IRP bank2
  4491  0FFA  0800               	movf	0,w
  4492  0FFB  0654               	xorwf	Menu_Set_Time@current_menu_ptr^(0+128),w
  4493  0FFC                     u8325:	
  4494  0FFC  1D03               	skipz
  4495  0FFD  2EAA               	goto	l8280
  4496                           
  4497                           ;menu.c: 385:             {;menu.c: 386:                  g_decimal_point=0b0000;
  4498  0FFE  01AD               	clrf	_g_decimal_point^(0+128)
  4499  0FFF  2EAA               	goto	l8280
  4500  1000                     __end_of_Menu_Set_Time:	
  4501                           
  4502                           	psect	text6
  4503  108D                     __ptext6:	
  4504 ;; *************** function _Write_Limit_To_EEprom *****************
  4505 ;; Defined at:
  4506 ;;		line 586 in file "menu.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  limit1          1    wreg     PTR struct MenuParamStru
  4509 ;;		 -> Menu_Init@time_limit_work_day_1(8), Menu_Init@time_limit_free_day_1(8), 
  4510 ;;  limit2          1    8[BANK0 ] PTR struct MenuParamStru
  4511 ;;		 -> Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_free_day_2(8), 
  4512 ;;  limit_type      1    9[BANK0 ] unsigned char 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  limit1          1   11[BANK0 ] PTR struct MenuParamStru
  4515 ;;		 -> Menu_Init@time_limit_work_day_1(8), Menu_Init@time_limit_free_day_1(8), 
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4520 ;; Tracked objects:
  4521 ;;		On entry : B00/900
  4522 ;;		On exit  : B00/800
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4525 ;;      Params:         0       2       0       0       0
  4526 ;;      Locals:         0       1       0       0       0
  4527 ;;      Temps:          0       1       0       0       0
  4528 ;;      Totals:         0       4       0       0       0
  4529 ;;Total ram usage:        4 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    5
  4532 ;; This function calls:
  4533 ;;		_Write_EEprom
  4534 ;; This function is called by:
  4535 ;;		_Menu_Set_Time
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           
  4540                           ;psect for function _Write_Limit_To_EEprom
  4541  108D                     _Write_Limit_To_EEprom:	
  4542                           
  4543                           ;incstack = 0
  4544                           ; Regs used in _Write_Limit_To_EEprom: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4545                           ;Write_Limit_To_EEprom@limit1 stored from wreg
  4546  108D  1283               	bcf	3,5	;RP0=0, select bank0
  4547  108E  00AB               	movwf	Write_Limit_To_EEprom@limit1
  4548                           
  4549                           ;menu.c: 586: void Write_Limit_To_EEprom(MenuParamStruct *limit1, MenuParamStruct *limit
      +                          2,;menu.c: 587:                            unsigned char limit_type);menu.c: 588: {;menu
      +                          .c: 589:     if(limit_type==0)
  4550  108F  0829               	movf	Write_Limit_To_EEprom@limit_type,w
  4551  1090  1D03               	btfss	3,2
  4552  1091  28C0               	goto	l7356
  4553                           
  4554                           ;menu.c: 590:     {;menu.c: 591:         Write_EEprom(limit1->param, 0x00);
  4555  1092  01A6               	clrf	Write_EEprom@adress
  4556  1093  082B               	movf	Write_Limit_To_EEprom@limit1,w
  4557  1094  3E05               	addlw	5
  4558  1095  0084               	movwf	4
  4559  1096  0800               	movf	0,w
  4560  1097  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4561                           
  4562                           ;menu.c: 592:         Write_EEprom(limit1->param1,0x01);
  4563  109C  01A6               	clrf	Write_EEprom@adress
  4564  109D  0AA6               	incf	Write_EEprom@adress,f
  4565  109E  082B               	movf	Write_Limit_To_EEprom@limit1,w
  4566  109F  3E06               	addlw	6
  4567  10A0  0084               	movwf	4
  4568  10A1  0800               	movf	0,w
  4569  10A2  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4570                           
  4571                           ;menu.c: 593:         Write_EEprom(limit2->param, 0x02);
  4572  10A7  3002               	movlw	2
  4573  10A8  00AA               	movwf	??_Write_Limit_To_EEprom
  4574  10A9  082A               	movf	??_Write_Limit_To_EEprom,w
  4575  10AA  00A6               	movwf	Write_EEprom@adress
  4576  10AB  0828               	movf	Write_Limit_To_EEprom@limit2,w
  4577  10AC  3E05               	addlw	5
  4578  10AD  0084               	movwf	4
  4579  10AE  0800               	movf	0,w
  4580  10AF  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4581                           
  4582                           ;menu.c: 594:         Write_EEprom(limit2->param1, 0x03);
  4583  10B4  3003               	movlw	3
  4584  10B5  00AA               	movwf	??_Write_Limit_To_EEprom
  4585  10B6  082A               	movf	??_Write_Limit_To_EEprom,w
  4586  10B7  00A6               	movwf	Write_EEprom@adress
  4587  10B8  0828               	movf	Write_Limit_To_EEprom@limit2,w
  4588  10B9  3E06               	addlw	6
  4589  10BA  0084               	movwf	4
  4590  10BB  0800               	movf	0,w
  4591  10BC  160A  158A  20E6   	fcall	_Write_EEprom
  4592                           
  4593                           ;menu.c: 596:     }else if(limit_type==1)
  4594  10BF  0008               	return
  4595  10C0                     l7356:	
  4596  10C0  0329               	decf	Write_Limit_To_EEprom@limit_type,w
  4597  10C1  1D03               	btfss	3,2
  4598  10C2  0008               	return
  4599                           
  4600                           ;menu.c: 597:     {;menu.c: 598:         Write_EEprom(limit1->param,0x04);
  4601  10C3  3004               	movlw	4
  4602  10C4  00AA               	movwf	??_Write_Limit_To_EEprom
  4603  10C5  082A               	movf	??_Write_Limit_To_EEprom,w
  4604  10C6  00A6               	movwf	Write_EEprom@adress
  4605  10C7  082B               	movf	Write_Limit_To_EEprom@limit1,w
  4606  10C8  3E05               	addlw	5
  4607  10C9  0084               	movwf	4
  4608  10CA  0800               	movf	0,w
  4609  10CB  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4610                           
  4611                           ;menu.c: 599:         Write_EEprom(limit1->param1,0x05);
  4612  10D0  3005               	movlw	5
  4613  10D1  00AA               	movwf	??_Write_Limit_To_EEprom
  4614  10D2  082A               	movf	??_Write_Limit_To_EEprom,w
  4615  10D3  00A6               	movwf	Write_EEprom@adress
  4616  10D4  082B               	movf	Write_Limit_To_EEprom@limit1,w
  4617  10D5  3E06               	addlw	6
  4618  10D6  0084               	movwf	4
  4619  10D7  0800               	movf	0,w
  4620  10D8  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4621                           
  4622                           ;menu.c: 600:         Write_EEprom(limit2->param,0x06);
  4623  10DD  3006               	movlw	6
  4624  10DE  00AA               	movwf	??_Write_Limit_To_EEprom
  4625  10DF  082A               	movf	??_Write_Limit_To_EEprom,w
  4626  10E0  00A6               	movwf	Write_EEprom@adress
  4627  10E1  0828               	movf	Write_Limit_To_EEprom@limit2,w
  4628  10E2  3E05               	addlw	5
  4629  10E3  0084               	movwf	4
  4630  10E4  0800               	movf	0,w
  4631  10E5  160A  158A  20E6  160A  118A  	fcall	_Write_EEprom
  4632                           
  4633                           ;menu.c: 601:         Write_EEprom(limit2->param1,0x07);
  4634  10EA  3007               	movlw	7
  4635  10EB  00AA               	movwf	??_Write_Limit_To_EEprom
  4636  10EC  082A               	movf	??_Write_Limit_To_EEprom,w
  4637  10ED  00A6               	movwf	Write_EEprom@adress
  4638  10EE  0828               	movf	Write_Limit_To_EEprom@limit2,w
  4639  10EF  3E06               	addlw	6
  4640  10F0  0084               	movwf	4
  4641  10F1  0800               	movf	0,w
  4642  10F2  160A  158A  20E6   	fcall	_Write_EEprom
  4643  10F5  0008               	return
  4644  10F6                     __end_of_Write_Limit_To_EEprom:	
  4645                           
  4646                           	psect	text7
  4647  18E6                     __ptext7:	
  4648 ;; *************** function _Write_EEprom *****************
  4649 ;; Defined at:
  4650 ;;		line 11 in file "flash.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  data            1    wreg     char 
  4653 ;;  adress          1    6[BANK0 ] unsigned char 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  data            1    7[BANK0 ] char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      void 
  4658 ;; Registers used:
  4659 ;;		wreg
  4660 ;; Tracked objects:
  4661 ;;		On entry : B00/800
  4662 ;;		On exit  : B00/800
  4663 ;;		Unchanged: 800/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4665 ;;      Params:         0       1       0       0       0
  4666 ;;      Locals:         0       1       0       0       0
  4667 ;;      Temps:          0       0       0       0       0
  4668 ;;      Totals:         0       2       0       0       0
  4669 ;;Total ram usage:        2 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    4
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_Write_Limit_To_EEprom
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _Write_EEprom
  4681  18E6                     _Write_EEprom:	
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in _Write_EEprom: [wreg]
  4685                           ;Write_EEprom@data stored from wreg
  4686  18E6  00A7               	movwf	Write_EEprom@data
  4687                           
  4688                           ;flash.c: 11: void Write_EEprom(signed char data, unsigned char adress);flash.c: 12: {;f
      +                          lash.c: 13:     EEADR=adress;
  4689  18E7  0826               	movf	Write_EEprom@adress,w
  4690  18E8  1703               	bsf	3,6	;RP1=1, select bank2
  4691  18E9  008D               	movwf	13	;volatile
  4692                           
  4693                           ;flash.c: 14:     EEDAT=data;
  4694  18EA  1303               	bcf	3,6	;RP1=0, select bank0
  4695  18EB  0827               	movf	Write_EEprom@data,w
  4696  18EC  1703               	bsf	3,6	;RP1=1, select bank2
  4697  18ED  008C               	movwf	12	;volatile
  4698                           
  4699                           ;flash.c: 15:     INTCONbits.GIE=0;
  4700  18EE  138B               	bcf	11,7	;volatile
  4701                           
  4702                           ;flash.c: 16:     WREN=1;
  4703  18EF  1683               	bsf	3,5	;RP0=1, select bank3
  4704  18F0  150C               	bsf	12,2	;volsfr
  4705                           
  4706                           ;flash.c: 17:     EECON2=0x55;
  4707  18F1  3055               	movlw	85
  4708  18F2  008D               	movwf	13	;volsfr
  4709                           
  4710                           ;flash.c: 18:     EECON2=0xAA;
  4711  18F3  30AA               	movlw	170
  4712  18F4  008D               	movwf	13	;volsfr
  4713                           
  4714                           ;flash.c: 19:     WR=1;
  4715  18F5  148C               	bsf	12,1	;volsfr
  4716  18F6                     l870:	
  4717                           ;flash.c: 20:     while(!EEIF){};
  4718                           
  4719  18F6  1283               	bcf	3,5	;RP0=0, select bank0
  4720  18F7  1303               	bcf	3,6	;RP1=0, select bank0
  4721  18F8  1E0D               	btfss	13,4	;volatile
  4722  18F9  28F6               	goto	l870
  4723                           
  4724                           ;flash.c: 21:     WREN=0;
  4725  18FA  1683               	bsf	3,5	;RP0=1, select bank3
  4726  18FB  1703               	bsf	3,6	;RP1=1, select bank3
  4727  18FC  110C               	bcf	12,2	;volsfr
  4728                           
  4729                           ;flash.c: 22:     EEIF=0;
  4730  18FD  1283               	bcf	3,5	;RP0=0, select bank0
  4731  18FE  1303               	bcf	3,6	;RP1=0, select bank0
  4732  18FF  120D               	bcf	13,4	;volatile
  4733                           
  4734                           ;flash.c: 23:     INTCONbits.GIE=1;
  4735  1900  178B               	bsf	11,7	;volatile
  4736  1901  0008               	return
  4737  1902                     __end_of_Write_EEprom:	
  4738                           
  4739                           	psect	text8
  4740  10F6                     __ptext8:	
  4741 ;; *************** function _Read_Limit_From_EEprom *****************
  4742 ;; Defined at:
  4743 ;;		line 613 in file "menu.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  limit1          1    wreg     PTR struct MenuParamStru
  4746 ;;		 -> Menu_Init@time_limit_work_day_1(8), Menu_Init@time_limit_free_day_1(8), 
  4747 ;;  limit2          1    7[BANK0 ] PTR struct MenuParamStru
  4748 ;;		 -> Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_free_day_2(8), 
  4749 ;;  limit_type      1    8[BANK0 ] unsigned char 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  limit1          1   10[BANK0 ] PTR struct MenuParamStru
  4752 ;;		 -> Menu_Init@time_limit_work_day_1(8), Menu_Init@time_limit_free_day_1(8), 
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  1    wreg      void 
  4755 ;; Registers used:
  4756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4757 ;; Tracked objects:
  4758 ;;		On entry : A00/800
  4759 ;;		On exit  : B00/800
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4762 ;;      Params:         0       2       0       0       0
  4763 ;;      Locals:         0       1       0       0       0
  4764 ;;      Temps:          0       1       0       0       0
  4765 ;;      Totals:         0       4       0       0       0
  4766 ;;Total ram usage:        4 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    5
  4769 ;; This function calls:
  4770 ;;		_Read_EEprom
  4771 ;; This function is called by:
  4772 ;;		_Menu_Init
  4773 ;;		_Menu_Set_Time
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           
  4778                           ;psect for function _Read_Limit_From_EEprom
  4779  10F6                     _Read_Limit_From_EEprom:	
  4780                           
  4781                           ;incstack = 0
  4782                           ; Regs used in _Read_Limit_From_EEprom: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4783                           ;Read_Limit_From_EEprom@limit1 stored from wreg
  4784  10F6  1283               	bcf	3,5	;RP0=0, select bank0
  4785  10F7  00AA               	movwf	Read_Limit_From_EEprom@limit1
  4786                           
  4787                           ;menu.c: 613: void Read_Limit_From_EEprom(MenuParamStruct *limit1, MenuParamStruct *limi
      +                          t2,;menu.c: 614:                             unsigned char limit_type);menu.c: 615: {;me
      +                          nu.c: 616:     if(limit_type==0)
  4788  10F8  0828               	movf	Read_Limit_From_EEprom@limit_type,w
  4789  10F9  1D03               	btfss	3,2
  4790  10FA  292E               	goto	l7136
  4791                           
  4792                           ;menu.c: 617:     {;menu.c: 618:         limit1->param=Read_EEprom(0x00);
  4793  10FB  3000               	movlw	0
  4794  10FC  160A  158A  20A0  160A  118A  	fcall	_Read_EEprom
  4795  1101  1303               	bcf	3,6	;RP1=0, select bank0
  4796  1102  00A9               	movwf	??_Read_Limit_From_EEprom
  4797  1103  082A               	movf	Read_Limit_From_EEprom@limit1,w
  4798  1104  3E05               	addlw	5
  4799  1105  0084               	movwf	4
  4800  1106  0829               	movf	??_Read_Limit_From_EEprom,w
  4801  1107  0080               	movwf	0
  4802                           
  4803                           ;menu.c: 619:         limit1->param1=Read_EEprom(0x01);
  4804  1108  3001               	movlw	1
  4805  1109  160A  158A  20A0  160A  118A  	fcall	_Read_EEprom
  4806  110E  1303               	bcf	3,6	;RP1=0, select bank0
  4807  110F  00A9               	movwf	??_Read_Limit_From_EEprom
  4808  1110  082A               	movf	Read_Limit_From_EEprom@limit1,w
  4809  1111  3E06               	addlw	6
  4810  1112  0084               	movwf	4
  4811  1113  0829               	movf	??_Read_Limit_From_EEprom,w
  4812  1114  0080               	movwf	0
  4813                           
  4814                           ;menu.c: 620:         limit2->param=Read_EEprom(0x02);
  4815  1115  3002               	movlw	2
  4816  1116  160A  158A  20A0  160A  118A  	fcall	_Read_EEprom
  4817  111B  1303               	bcf	3,6	;RP1=0, select bank0
  4818  111C  00A9               	movwf	??_Read_Limit_From_EEprom
  4819  111D  0827               	movf	Read_Limit_From_EEprom@limit2,w
  4820  111E  3E05               	addlw	5
  4821  111F  0084               	movwf	4
  4822  1120  0829               	movf	??_Read_Limit_From_EEprom,w
  4823  1121  0080               	movwf	0
  4824                           
  4825                           ;menu.c: 621:         limit2->param1=Read_EEprom(0x03);
  4826  1122  3003               	movlw	3
  4827  1123  160A  158A  20A0   	fcall	_Read_EEprom
  4828  1126  1303               	bcf	3,6	;RP1=0, select bank0
  4829  1127  00A9               	movwf	??_Read_Limit_From_EEprom
  4830  1128  0827               	movf	Read_Limit_From_EEprom@limit2,w
  4831  1129  3E06               	addlw	6
  4832  112A  0084               	movwf	4
  4833  112B  0829               	movf	??_Read_Limit_From_EEprom,w
  4834  112C  0080               	movwf	0
  4835                           
  4836                           ;menu.c: 623:     }else if(limit_type==1)
  4837  112D  0008               	return
  4838  112E                     l7136:	
  4839  112E  0328               	decf	Read_Limit_From_EEprom@limit_type,w
  4840  112F  1D03               	btfss	3,2
  4841  1130  0008               	return
  4842                           
  4843                           ;menu.c: 624:     {;menu.c: 625:         limit1->param=Read_EEprom(0x04);
  4844  1131  3004               	movlw	4
  4845  1132  160A  158A  20A0  160A  118A  	fcall	_Read_EEprom
  4846  1137  1303               	bcf	3,6	;RP1=0, select bank0
  4847  1138  00A9               	movwf	??_Read_Limit_From_EEprom
  4848  1139  082A               	movf	Read_Limit_From_EEprom@limit1,w
  4849  113A  3E05               	addlw	5
  4850  113B  0084               	movwf	4
  4851  113C  0829               	movf	??_Read_Limit_From_EEprom,w
  4852  113D  0080               	movwf	0
  4853                           
  4854                           ;menu.c: 626:         limit1->param1=Read_EEprom(0x05);
  4855  113E  3005               	movlw	5
  4856  113F  160A  158A  20A0  160A  118A  	fcall	_Read_EEprom
  4857  1144  1303               	bcf	3,6	;RP1=0, select bank0
  4858  1145  00A9               	movwf	??_Read_Limit_From_EEprom
  4859  1146  082A               	movf	Read_Limit_From_EEprom@limit1,w
  4860  1147  3E06               	addlw	6
  4861  1148  0084               	movwf	4
  4862  1149  0829               	movf	??_Read_Limit_From_EEprom,w
  4863  114A  0080               	movwf	0
  4864                           
  4865                           ;menu.c: 627:         limit2->param=Read_EEprom(0x06);
  4866  114B  3006               	movlw	6
  4867  114C  160A  158A  20A0  160A  118A  	fcall	_Read_EEprom
  4868  1151  1303               	bcf	3,6	;RP1=0, select bank0
  4869  1152  00A9               	movwf	??_Read_Limit_From_EEprom
  4870  1153  0827               	movf	Read_Limit_From_EEprom@limit2,w
  4871  1154  3E05               	addlw	5
  4872  1155  0084               	movwf	4
  4873  1156  0829               	movf	??_Read_Limit_From_EEprom,w
  4874  1157  0080               	movwf	0
  4875                           
  4876                           ;menu.c: 628:         limit2->param1=Read_EEprom(0x07);
  4877  1158  3007               	movlw	7
  4878  1159  160A  158A  20A0   	fcall	_Read_EEprom
  4879  115C  1303               	bcf	3,6	;RP1=0, select bank0
  4880  115D  00A9               	movwf	??_Read_Limit_From_EEprom
  4881  115E  0827               	movf	Read_Limit_From_EEprom@limit2,w
  4882  115F  3E06               	addlw	6
  4883  1160  0084               	movwf	4
  4884  1161  0829               	movf	??_Read_Limit_From_EEprom,w
  4885  1162  0080               	movwf	0
  4886  1163  0008               	return
  4887  1164                     __end_of_Read_Limit_From_EEprom:	
  4888                           
  4889                           	psect	text9
  4890  18A0                     __ptext9:	
  4891 ;; *************** function _Read_EEprom *****************
  4892 ;; Defined at:
  4893 ;;		line 26 in file "flash.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;  adress          1    wreg     unsigned char 
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  adress          1    6[BANK0 ] unsigned char 
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      char 
  4900 ;; Registers used:
  4901 ;;		wreg
  4902 ;; Tracked objects:
  4903 ;;		On entry : B00/800
  4904 ;;		On exit  : B00/A00
  4905 ;;		Unchanged: 800/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4907 ;;      Params:         0       0       0       0       0
  4908 ;;      Locals:         0       1       0       0       0
  4909 ;;      Temps:          0       0       0       0       0
  4910 ;;      Totals:         0       1       0       0       0
  4911 ;;Total ram usage:        1 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    4
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_Read_Limit_From_EEprom
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           
  4922                           ;psect for function _Read_EEprom
  4923  18A0                     _Read_EEprom:	
  4924                           
  4925                           ;incstack = 0
  4926                           ; Regs used in _Read_EEprom: [wreg]
  4927                           ;Read_EEprom@adress stored from wreg
  4928  18A0  00A6               	movwf	Read_EEprom@adress
  4929                           
  4930                           ;flash.c: 26: signed char Read_EEprom(unsigned char adress);flash.c: 27: {;flash.c: 28: 
      +                              INTCONbits.GIE=0;
  4931  18A1  138B               	bcf	11,7	;volatile
  4932                           
  4933                           ;flash.c: 29:     EEADR=adress;
  4934  18A2  0826               	movf	Read_EEprom@adress,w
  4935  18A3  1703               	bsf	3,6	;RP1=1, select bank2
  4936  18A4  008D               	movwf	13	;volatile
  4937                           
  4938                           ;flash.c: 30:     EEPGD=0;
  4939  18A5  1683               	bsf	3,5	;RP0=1, select bank3
  4940  18A6  138C               	bcf	12,7	;volsfr
  4941                           
  4942                           ;flash.c: 31:     RD=1;
  4943  18A7  140C               	bsf	12,0	;volsfr
  4944                           
  4945                           ;flash.c: 32:     INTCONbits.GIE=1;
  4946  18A8  178B               	bsf	11,7	;volatile
  4947                           
  4948                           ;flash.c: 33:     return EEDAT;
  4949  18A9  1283               	bcf	3,5	;RP0=0, select bank2
  4950  18AA  080C               	movf	12,w	;volatile
  4951  18AB  0008               	return
  4952  18AC                     __end_of_Read_EEprom:	
  4953                           
  4954                           	psect	text10
  4955  0843                     __ptext10:	
  4956 ;; *************** function _PCF8583_Set_Date_Time *****************
  4957 ;; Defined at:
  4958 ;;		line 105 in file "pcf8583.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;  time_struct_    1    wreg     PTR struct .
  4961 ;;		 -> Menu_Set_Time@time(7), 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  time_struct_    1   24[BANK0 ] PTR struct .
  4964 ;;		 -> Menu_Set_Time@time(7), 
  4965 ;;  bcd_mon         1   23[BANK0 ] unsigned char 
  4966 ;;  bcd_day         1   22[BANK0 ] unsigned char 
  4967 ;;  bcd_hrs         1   21[BANK0 ] unsigned char 
  4968 ;;  bcd_min         1   20[BANK0 ] unsigned char 
  4969 ;;  bcd_sec         1   19[BANK0 ] unsigned char 
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      void 
  4972 ;; Registers used:
  4973 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4974 ;; Tracked objects:
  4975 ;;		On entry : 300/800
  4976 ;;		On exit  : 300/100
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4979 ;;      Params:         0       0       0       0       0
  4980 ;;      Locals:         0       6       0       0       0
  4981 ;;      Temps:          0       2       0       0       0
  4982 ;;      Totals:         0       8       0       0       0
  4983 ;;Total ram usage:        8 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    7
  4986 ;; This function calls:
  4987 ;;		_DEC_2_BCD
  4988 ;;		_I2C_Master_Start
  4989 ;;		_I2C_Master_Stop
  4990 ;;		_I2C_Master_Write
  4991 ;;		_PCF8583_Write_Byte
  4992 ;; This function is called by:
  4993 ;;		_Menu_Set_Time
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _PCF8583_Set_Date_Time
  4999  0843                     _PCF8583_Set_Date_Time:	
  5000                           
  5001                           ;incstack = 0
  5002 ;; hardware stack exceeded
  5003                           ; Regs used in _PCF8583_Set_Date_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5004                           ;PCF8583_Set_Date_Time@time_struct_ptr stored from wreg
  5005  0843  00B8               	movwf	PCF8583_Set_Date_Time@time_struct_ptr
  5006                           
  5007                           ;pcf8583.c: 105: void PCF8583_Set_Date_Time(TimeStruct *time_struct_ptr);pcf8583.c: 106:
      +                           {;pcf8583.c: 107:  unsigned char bcd_sec;;pcf8583.c: 108:  unsigned char bcd_min;;pcf85
      +                          83.c: 109:  unsigned char bcd_hrs;;pcf8583.c: 110:  unsigned char bcd_day;;pcf8583.c: 11
      +                          1:  unsigned char bcd_mon;;pcf8583.c: 113:  INTCONbits.GIE=0;
  5008  0844  138B               	bcf	11,7	;volatile
  5009                           
  5010                           ;pcf8583.c: 115:  bcd_sec = DEC_2_BCD(time_struct_ptr->seconds);
  5011  0845  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  5012  0846  0084               	movwf	4
  5013  0847  1383               	bcf	3,7	;select IRP bank0
  5014  0848  0800               	movf	0,w
  5015  0849  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  5016  084E  00B1               	movwf	??_PCF8583_Set_Date_Time
  5017  084F  0831               	movf	??_PCF8583_Set_Date_Time,w
  5018  0850  00B3               	movwf	PCF8583_Set_Date_Time@bcd_sec
  5019                           
  5020                           ;pcf8583.c: 116:  bcd_min = DEC_2_BCD(time_struct_ptr->minutes);
  5021  0851  0A38               	incf	PCF8583_Set_Date_Time@time_struct_ptr,w
  5022  0852  0084               	movwf	4
  5023  0853  1383               	bcf	3,7	;select IRP bank0
  5024  0854  0800               	movf	0,w
  5025  0855  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  5026  085A  00B1               	movwf	??_PCF8583_Set_Date_Time
  5027  085B  0831               	movf	??_PCF8583_Set_Date_Time,w
  5028  085C  00B4               	movwf	PCF8583_Set_Date_Time@bcd_min
  5029                           
  5030                           ;pcf8583.c: 117:  bcd_hrs = DEC_2_BCD(time_struct_ptr->hours);
  5031  085D  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  5032  085E  3E02               	addlw	2
  5033  085F  0084               	movwf	4
  5034  0860  1383               	bcf	3,7	;select IRP bank0
  5035  0861  0800               	movf	0,w
  5036  0862  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  5037  0867  00B1               	movwf	??_PCF8583_Set_Date_Time
  5038  0868  0831               	movf	??_PCF8583_Set_Date_Time,w
  5039  0869  00B5               	movwf	PCF8583_Set_Date_Time@bcd_hrs
  5040                           
  5041                           ;pcf8583.c: 118:  bcd_day = DEC_2_BCD(time_struct_ptr->day) | (time_struct_ptr->year<<6)
      +                          ;
  5042  086A  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  5043  086B  3E05               	addlw	5
  5044  086C  0084               	movwf	4
  5045  086D  1383               	bcf	3,7	;select IRP bank0
  5046  086E  0800               	movf	0,w
  5047  086F  00B1               	movwf	??_PCF8583_Set_Date_Time
  5048  0870  3006               	movlw	6
  5049  0871                     u7655:	
  5050  0871  1003               	clrc
  5051  0872  0DB1               	rlf	??_PCF8583_Set_Date_Time,f
  5052  0873  3EFF               	addlw	-1
  5053  0874  1D03               	skipz
  5054  0875  2871               	goto	u7655
  5055  0876  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  5056  0877  3E03               	addlw	3
  5057  0878  0084               	movwf	4
  5058  0879  0800               	movf	0,w
  5059  087A  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  5060  087F  0431               	iorwf	??_PCF8583_Set_Date_Time,w
  5061  0880  00B2               	movwf	??_PCF8583_Set_Date_Time+1
  5062  0881  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  5063  0882  00B6               	movwf	PCF8583_Set_Date_Time@bcd_day
  5064                           
  5065                           ;pcf8583.c: 119:  bcd_mon = DEC_2_BCD(time_struct_ptr->month & 0b00011111) |
  5066  0883  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  5067  0884  3E06               	addlw	6
  5068  0885  0084               	movwf	4
  5069  0886  1383               	bcf	3,7	;select IRP bank0
  5070  0887  0800               	movf	0,w
  5071  0888  00B1               	movwf	??_PCF8583_Set_Date_Time
  5072  0889  3005               	movlw	5
  5073  088A                     u7665:	
  5074  088A  1003               	clrc
  5075  088B  0DB1               	rlf	??_PCF8583_Set_Date_Time,f
  5076  088C  3EFF               	addlw	-1
  5077  088D  1D03               	skipz
  5078  088E  288A               	goto	u7665
  5079  088F  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  5080  0890  3E04               	addlw	4
  5081  0891  0084               	movwf	4
  5082  0892  0800               	movf	0,w
  5083  0893  391F               	andlw	31
  5084  0894  160A  158A  20CA  120A  158A  	fcall	_DEC_2_BCD
  5085  0899  0431               	iorwf	??_PCF8583_Set_Date_Time,w
  5086  089A  00B2               	movwf	??_PCF8583_Set_Date_Time+1
  5087  089B  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  5088  089C  00B7               	movwf	PCF8583_Set_Date_Time@bcd_mon
  5089                           
  5090                           ;pcf8583.c: 122:  PCF8583_Write_Byte(0x00, 0x80);
  5091  089D  3080               	movlw	128
  5092  089E  00B1               	movwf	??_PCF8583_Set_Date_Time
  5093  089F  0831               	movf	??_PCF8583_Set_Date_Time,w
  5094  08A0  00A8               	movwf	PCF8583_Write_Byte@data
  5095  08A1  3000               	movlw	0
  5096  08A2  160A  158A  2245  120A  158A  	fcall	_PCF8583_Write_Byte
  5097                           
  5098                           ;pcf8583.c: 124:  I2C_Master_Start();
  5099  08A7  160A  158A  205D  120A  158A  	fcall	_I2C_Master_Start
  5100                           
  5101                           ;pcf8583.c: 125:  I2C_Master_Write(0xA0);
  5102  08AC  30A0               	movlw	160
  5103  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  5104  08AE  00A6               	movwf	I2C_Master_Write@data
  5105  08AF  3000               	movlw	0
  5106  08B0  00A7               	movwf	I2C_Master_Write@data+1
  5107  08B1  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  5108                           
  5109                           ;pcf8583.c: 126:  I2C_Master_Write(0x02);
  5110  08B6  3002               	movlw	2
  5111  08B7  00A6               	movwf	I2C_Master_Write@data
  5112  08B8  3000               	movlw	0
  5113  08B9  00A7               	movwf	I2C_Master_Write@data+1
  5114  08BA  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  5115                           
  5116                           ;pcf8583.c: 127:  I2C_Master_Write(bcd_sec);
  5117  08BF  0833               	movf	PCF8583_Set_Date_Time@bcd_sec,w
  5118  08C0  00B1               	movwf	??_PCF8583_Set_Date_Time
  5119  08C1  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  5120  08C2  0831               	movf	??_PCF8583_Set_Date_Time,w
  5121  08C3  00A6               	movwf	I2C_Master_Write@data
  5122  08C4  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  5123  08C5  00A7               	movwf	I2C_Master_Write@data+1
  5124  08C6  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  5125                           
  5126                           ;pcf8583.c: 128:  I2C_Master_Write(bcd_min);
  5127  08CB  0834               	movf	PCF8583_Set_Date_Time@bcd_min,w
  5128  08CC  00B1               	movwf	??_PCF8583_Set_Date_Time
  5129  08CD  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  5130  08CE  0831               	movf	??_PCF8583_Set_Date_Time,w
  5131  08CF  00A6               	movwf	I2C_Master_Write@data
  5132  08D0  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  5133  08D1  00A7               	movwf	I2C_Master_Write@data+1
  5134  08D2  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  5135                           
  5136                           ;pcf8583.c: 129:  I2C_Master_Write(bcd_hrs);
  5137  08D7  0835               	movf	PCF8583_Set_Date_Time@bcd_hrs,w
  5138  08D8  00B1               	movwf	??_PCF8583_Set_Date_Time
  5139  08D9  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  5140  08DA  0831               	movf	??_PCF8583_Set_Date_Time,w
  5141  08DB  00A6               	movwf	I2C_Master_Write@data
  5142  08DC  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  5143  08DD  00A7               	movwf	I2C_Master_Write@data+1
  5144  08DE  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  5145                           
  5146                           ;pcf8583.c: 130:  I2C_Master_Write(bcd_day);
  5147  08E3  0836               	movf	PCF8583_Set_Date_Time@bcd_day,w
  5148  08E4  00B1               	movwf	??_PCF8583_Set_Date_Time
  5149  08E5  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  5150  08E6  0831               	movf	??_PCF8583_Set_Date_Time,w
  5151  08E7  00A6               	movwf	I2C_Master_Write@data
  5152  08E8  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  5153  08E9  00A7               	movwf	I2C_Master_Write@data+1
  5154  08EA  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  5155                           
  5156                           ;pcf8583.c: 131:  I2C_Master_Write(bcd_mon);
  5157  08EF  0837               	movf	PCF8583_Set_Date_Time@bcd_mon,w
  5158  08F0  00B1               	movwf	??_PCF8583_Set_Date_Time
  5159  08F1  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  5160  08F2  0831               	movf	??_PCF8583_Set_Date_Time,w
  5161  08F3  00A6               	movwf	I2C_Master_Write@data
  5162  08F4  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  5163  08F5  00A7               	movwf	I2C_Master_Write@data+1
  5164  08F6  160A  158A  206D  120A  158A  	fcall	_I2C_Master_Write
  5165                           
  5166                           ;pcf8583.c: 132:  I2C_Master_Stop();
  5167  08FB  160A  158A  2062  120A  158A  	fcall	_I2C_Master_Stop
  5168                           
  5169                           ;pcf8583.c: 134:  PCF8583_Write_Byte(0x10,time_struct_ptr->year);
  5170  0900  1283               	bcf	3,5	;RP0=0, select bank0
  5171  0901  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  5172  0902  3E05               	addlw	5
  5173  0903  0084               	movwf	4
  5174  0904  1383               	bcf	3,7	;select IRP bank0
  5175  0905  0800               	movf	0,w
  5176  0906  00B1               	movwf	??_PCF8583_Set_Date_Time
  5177  0907  0831               	movf	??_PCF8583_Set_Date_Time,w
  5178  0908  00A8               	movwf	PCF8583_Write_Byte@data
  5179  0909  3010               	movlw	16
  5180  090A  160A  158A  2245  120A  158A  	fcall	_PCF8583_Write_Byte
  5181                           
  5182                           ;pcf8583.c: 135:  PCF8583_Write_Byte(0x00, 0x00);
  5183  090F  1283               	bcf	3,5	;RP0=0, select bank0
  5184  0910  01A8               	clrf	PCF8583_Write_Byte@data
  5185  0911  3000               	movlw	0
  5186  0912  160A  158A  2245   	fcall	_PCF8583_Write_Byte
  5187                           
  5188                           ;pcf8583.c: 137:     INTCONbits.GIE=1;
  5189  0915  178B               	bsf	11,7	;volatile
  5190  0916  0008               	return
  5191  0917                     __end_of_PCF8583_Set_Date_Time:	
  5192                           
  5193                           	psect	text11
  5194  18CA                     __ptext11:	
  5195 ;; *************** function _DEC_2_BCD *****************
  5196 ;; Defined at:
  5197 ;;		line 30 in file "pcf8583.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  dec             1    wreg     unsigned char 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  dec             1   16[BANK0 ] unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      unsigned char 
  5204 ;; Registers used:
  5205 ;;		wreg, status,2, status,0, pclath, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : B00/0
  5208 ;;		On exit  : 300/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5211 ;;      Params:         0       0       0       0       0
  5212 ;;      Locals:         0       1       0       0       0
  5213 ;;      Temps:          0       3       0       0       0
  5214 ;;      Totals:         0       4       0       0       0
  5215 ;;Total ram usage:        4 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    5
  5218 ;; This function calls:
  5219 ;;		___lbdiv
  5220 ;;		___lbmod
  5221 ;; This function is called by:
  5222 ;;		_PCF8583_Set_Date_Time
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           
  5227                           ;psect for function _DEC_2_BCD
  5228  18CA                     _DEC_2_BCD:	
  5229                           
  5230                           ;incstack = 0
  5231 ;; hardware stack exceeded
  5232                           ; Regs used in _DEC_2_BCD: [wreg+status,2+status,0+pclath+cstack]
  5233                           ;DEC_2_BCD@dec stored from wreg
  5234  18CA  00B0               	movwf	DEC_2_BCD@dec
  5235                           
  5236                           ;pcf8583.c: 30: unsigned char DEC_2_BCD(unsigned char dec);pcf8583.c: 31: {;pcf8583.c: 3
      +                          2:     return (((dec/10)<<4)+(dec%10));
  5237  18CB  300A               	movlw	10
  5238  18CC  00AD               	movwf	??_DEC_2_BCD
  5239  18CD  082D               	movf	??_DEC_2_BCD,w
  5240  18CE  00A6               	movwf	___lbdiv@divisor
  5241  18CF  0830               	movf	DEC_2_BCD@dec,w
  5242  18D0  160A  158A  2163  160A  158A  	fcall	___lbdiv
  5243  18D5  00AE               	movwf	??_DEC_2_BCD+1
  5244  18D6  3004               	movlw	4
  5245  18D7                     u6625:	
  5246  18D7  1003               	clrc
  5247  18D8  0DAE               	rlf	??_DEC_2_BCD+1,f
  5248  18D9  3EFF               	addlw	-1
  5249  18DA  1D03               	skipz
  5250  18DB  28D7               	goto	u6625
  5251  18DC  300A               	movlw	10
  5252  18DD  00AF               	movwf	??_DEC_2_BCD+2
  5253  18DE  082F               	movf	??_DEC_2_BCD+2,w
  5254  18DF  00A6               	movwf	___lbmod@divisor
  5255  18E0  0830               	movf	DEC_2_BCD@dec,w
  5256  18E1  160A  158A  21A6   	fcall	___lbmod
  5257  18E4  072E               	addwf	??_DEC_2_BCD+1,w
  5258  18E5  0008               	return
  5259  18E6                     __end_of_DEC_2_BCD:	
  5260                           
  5261                           	psect	text12
  5262  003A                     __ptext12:	
  5263 ;; *************** function _Menu_Set_Param_Time_Limit *****************
  5264 ;; Defined at:
  5265 ;;		line 400 in file "menu.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  menu            2   22[BANK0 ] PTR struct MenuParamStru
  5268 ;;		 -> Menu_Set_Time@current_menu(8), NULL(0), Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_work_day_1(8), 
  5269 ;;		 -> Menu_Init@time_limit_free_day_2(8), Menu_Init@time_limit_free_day_1(8), Menu_Init@year(8), Menu_Init@day_month(8
      +), 
  5270 ;;		 -> Menu_Init@hours_minutes(8), 
  5271 ;;  check_button    1   24[BANK0 ] unsigned char 
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;		None
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  1    wreg      void 
  5276 ;; Registers used:
  5277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 300/800
  5280 ;;		On exit  : 300/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5283 ;;      Params:         0       3       0       0       0
  5284 ;;      Locals:         0       0       0       0       0
  5285 ;;      Temps:          0      13       0       0       0
  5286 ;;      Totals:         0      16       0       0       0
  5287 ;;Total ram usage:       16 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    5
  5290 ;; This function calls:
  5291 ;;		___awdiv
  5292 ;;		___awmod
  5293 ;;		___lbdiv
  5294 ;;		___lbmod
  5295 ;; This function is called by:
  5296 ;;		_Menu_Set_Time
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           
  5301                           ;psect for function _Menu_Set_Param_Time_Limit
  5302  003A                     _Menu_Set_Param_Time_Limit:	
  5303                           
  5304                           ;menu.c: 400: void Menu_Set_Param_Time_Limit(MenuParamStruct *menu,;menu.c: 401:        
      +                                                  unsigned char check_button);menu.c: 402: {;menu.c: 403:     stat
      +                          ic unsigned char flag=0, change_digit=0;;menu.c: 405:     if(flag==0 && g_generic_timer=
      +                          =0)
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _Menu_Set_Param_Time_Limit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5308  003A  1683               	bsf	3,5	;RP0=1, select bank1
  5309  003B  0824               	movf	Menu_Set_Param_Time_Limit@flag^(0+128),w
  5310  003C  1D03               	btfss	3,2
  5311  003D  28CF               	goto	l7248
  5312  003E  1283               	bcf	3,5	;RP0=0, select bank0
  5313  003F  0859               	movf	_g_generic_timer,w	;volatile
  5314  0040  045A               	iorwf	_g_generic_timer+1,w	;volatile
  5315  0041  1D03               	btfss	3,2
  5316  0042  28CF               	goto	l7248
  5317                           
  5318                           ;menu.c: 406:     {;menu.c: 407:         g_generic_timer=2000;
  5319  0043  30D0               	movlw	208
  5320  0044  00D9               	movwf	_g_generic_timer	;volatile
  5321  0045  3007               	movlw	7
  5322  0046  00DA               	movwf	_g_generic_timer+1	;volatile
  5323                           
  5324                           ;menu.c: 408:         flag=1;
  5325  0047  1683               	bsf	3,5	;RP0=1, select bank1
  5326  0048  01A4               	clrf	Menu_Set_Param_Time_Limit@flag^(0+128)
  5327  0049  0AA4               	incf	Menu_Set_Param_Time_Limit@flag^(0+128),f
  5328                           
  5329                           ;menu.c: 410:         g_display_text[0]=(menu->param)/10;
  5330  004A  300A               	movlw	10
  5331  004B  1283               	bcf	3,5	;RP0=0, select bank0
  5332  004C  00AD               	movwf	___awdiv@divisor
  5333  004D  3000               	movlw	0
  5334  004E  00AE               	movwf	___awdiv@divisor+1
  5335  004F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5336  0050  3E05               	addlw	5
  5337  0051  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5338  0052  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5339  0053  1803               	skipnc
  5340  0054  3E01               	addlw	1
  5341  0055  3E00               	addlw	0
  5342  0056  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5343  0057  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5344  0058  0084               	movwf	4
  5345  0059  1783               	bsf	3,7
  5346  005A  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5347  005B  1383               	bcf	3,7
  5348  005C  0800               	movf	0,w
  5349  005D  00AF               	movwf	___awdiv@dividend
  5350  005E  01B0               	clrf	___awdiv@dividend+1
  5351  005F  1BAF               	btfsc	___awdiv@dividend,7
  5352  0060  03B0               	decf	___awdiv@dividend+1,f
  5353  0061  160A  158A  2629  120A  118A  	fcall	___awdiv
  5354  0066  082D               	movf	?___awdiv,w
  5355  0067  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5356  0068  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5357  0069  1683               	bsf	3,5	;RP0=1, select bank1
  5358  006A  00CC               	movwf	_g_display_text^(0+128)
  5359                           
  5360                           ;menu.c: 411:         g_display_text[1]=(menu->param)%10;
  5361  006B  300A               	movlw	10
  5362  006C  1283               	bcf	3,5	;RP0=0, select bank0
  5363  006D  00A6               	movwf	___awmod@divisor
  5364  006E  3000               	movlw	0
  5365  006F  00A7               	movwf	___awmod@divisor+1
  5366  0070  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5367  0071  3E05               	addlw	5
  5368  0072  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5369  0073  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5370  0074  1803               	skipnc
  5371  0075  3E01               	addlw	1
  5372  0076  3E00               	addlw	0
  5373  0077  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5374  0078  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5375  0079  0084               	movwf	4
  5376  007A  1783               	bsf	3,7
  5377  007B  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5378  007C  1383               	bcf	3,7
  5379  007D  0800               	movf	0,w
  5380  007E  00A8               	movwf	___awmod@dividend
  5381  007F  01A9               	clrf	___awmod@dividend+1
  5382  0080  1BA8               	btfsc	___awmod@dividend,7
  5383  0081  03A9               	decf	___awmod@dividend+1,f
  5384  0082  160A  158A  253D  120A  118A  	fcall	___awmod
  5385  0087  0826               	movf	?___awmod,w
  5386  0088  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5387  0089  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5388  008A  1683               	bsf	3,5	;RP0=1, select bank1
  5389  008B  00CD               	movwf	(_g_display_text^(0+128)+1)
  5390                           
  5391                           ;menu.c: 412:         g_display_text[2]=(menu->param1)/10;
  5392  008C  300A               	movlw	10
  5393  008D  1283               	bcf	3,5	;RP0=0, select bank0
  5394  008E  00AD               	movwf	___awdiv@divisor
  5395  008F  3000               	movlw	0
  5396  0090  00AE               	movwf	___awdiv@divisor+1
  5397  0091  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5398  0092  3E06               	addlw	6
  5399  0093  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5400  0094  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5401  0095  1803               	skipnc
  5402  0096  3E01               	addlw	1
  5403  0097  3E00               	addlw	0
  5404  0098  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5405  0099  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5406  009A  0084               	movwf	4
  5407  009B  1783               	bsf	3,7
  5408  009C  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5409  009D  1383               	bcf	3,7
  5410  009E  0800               	movf	0,w
  5411  009F  00AF               	movwf	___awdiv@dividend
  5412  00A0  01B0               	clrf	___awdiv@dividend+1
  5413  00A1  1BAF               	btfsc	___awdiv@dividend,7
  5414  00A2  03B0               	decf	___awdiv@dividend+1,f
  5415  00A3  160A  158A  2629  120A  118A  	fcall	___awdiv
  5416  00A8  082D               	movf	?___awdiv,w
  5417  00A9  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5418  00AA  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5419  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  5420  00AC  00CE               	movwf	(_g_display_text^(0+128)+2)
  5421                           
  5422                           ;menu.c: 413:         g_display_text[3]=(menu->param1)%10;
  5423  00AD  300A               	movlw	10
  5424  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  5425  00AF  00A6               	movwf	___awmod@divisor
  5426  00B0  3000               	movlw	0
  5427  00B1  00A7               	movwf	___awmod@divisor+1
  5428  00B2  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5429  00B3  3E06               	addlw	6
  5430  00B4  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5431  00B5  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5432  00B6  1803               	skipnc
  5433  00B7  3E01               	addlw	1
  5434  00B8  3E00               	addlw	0
  5435  00B9  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5436  00BA  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5437  00BB  0084               	movwf	4
  5438  00BC  1783               	bsf	3,7
  5439  00BD  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5440  00BE  1383               	bcf	3,7
  5441  00BF  0800               	movf	0,w
  5442  00C0  00A8               	movwf	___awmod@dividend
  5443  00C1  01A9               	clrf	___awmod@dividend+1
  5444  00C2  1BA8               	btfsc	___awmod@dividend,7
  5445  00C3  03A9               	decf	___awmod@dividend+1,f
  5446  00C4  160A  158A  253D  120A  118A  	fcall	___awmod
  5447  00C9  0826               	movf	?___awmod,w
  5448  00CA  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5449  00CB  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5450  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  5451  00CD  00CF               	movwf	(_g_display_text^(0+128)+3)
  5452                           
  5453                           ;menu.c: 415:     }else if(g_generic_timer==0)
  5454  00CE  28E3               	goto	l7256
  5455  00CF                     l7248:	
  5456  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  5457  00D0  0859               	movf	_g_generic_timer,w	;volatile
  5458  00D1  045A               	iorwf	_g_generic_timer+1,w	;volatile
  5459  00D2  1D03               	btfss	3,2
  5460  00D3  28E3               	goto	l7256
  5461                           
  5462                           ;menu.c: 416:     {;menu.c: 417:         g_display_text[change_digit]='*';
  5463  00D4  302A               	movlw	42
  5464  00D5  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5465  00D6  085B               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  5466  00D7  3ECC               	addlw	(low (_g_display_text| 0))& (0+255)
  5467  00D8  0084               	movwf	4
  5468  00D9  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5469  00DA  1383               	bcf	3,7	;select IRP bank1
  5470  00DB  0080               	movwf	0
  5471                           
  5472                           ;menu.c: 418:         flag=0;
  5473  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  5474  00DD  01A4               	clrf	Menu_Set_Param_Time_Limit@flag^(0+128)
  5475                           
  5476                           ;menu.c: 419:         g_generic_timer=400;
  5477  00DE  3090               	movlw	144
  5478  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  5479  00E0  00D9               	movwf	_g_generic_timer	;volatile
  5480  00E1  3001               	movlw	1
  5481  00E2  00DA               	movwf	_g_generic_timer+1	;volatile
  5482  00E3                     l7256:	
  5483                           
  5484                           ;menu.c: 422:      if(check_button==k_set_right_short)
  5485  00E3  3006               	movlw	6
  5486  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  5487  00E5  0638               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  5488  00E6  1D03               	btfss	3,2
  5489  00E7  297E               	goto	l7278
  5490                           
  5491                           ;menu.c: 423:     {;menu.c: 424:         change_digit++;
  5492  00E8  3001               	movlw	1
  5493  00E9  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5494  00EA  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5495  00EB  07DB               	addwf	Menu_Set_Param_Time_Limit@change_digit,f
  5496                           
  5497                           ;menu.c: 426:         if(change_digit>3)
  5498  00EC  3004               	movlw	4
  5499  00ED  025B               	subwf	Menu_Set_Param_Time_Limit@change_digit,w
  5500  00EE  1C03               	skipc
  5501  00EF  2912               	goto	l7266
  5502                           
  5503                           ;menu.c: 427:         {;menu.c: 428:             change_digit=0;
  5504  00F0  01DB               	clrf	Menu_Set_Param_Time_Limit@change_digit
  5505                           
  5506                           ;menu.c: 430:             g_display_text[3]=(menu->param1)%10;
  5507  00F1  300A               	movlw	10
  5508  00F2  00A6               	movwf	___awmod@divisor
  5509  00F3  3000               	movlw	0
  5510  00F4  00A7               	movwf	___awmod@divisor+1
  5511  00F5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5512  00F6  3E06               	addlw	6
  5513  00F7  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5514  00F8  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5515  00F9  1803               	skipnc
  5516  00FA  3E01               	addlw	1
  5517  00FB  3E00               	addlw	0
  5518  00FC  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5519  00FD  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5520  00FE  0084               	movwf	4
  5521  00FF  1783               	bsf	3,7
  5522  0100  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5523  0101  1383               	bcf	3,7
  5524  0102  0800               	movf	0,w
  5525  0103  00A8               	movwf	___awmod@dividend
  5526  0104  01A9               	clrf	___awmod@dividend+1
  5527  0105  1BA8               	btfsc	___awmod@dividend,7
  5528  0106  03A9               	decf	___awmod@dividend+1,f
  5529  0107  160A  158A  253D  120A  118A  	fcall	___awmod
  5530  010C  0826               	movf	?___awmod,w
  5531  010D  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5532  010E  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5533  010F  1683               	bsf	3,5	;RP0=1, select bank1
  5534  0110  00CF               	movwf	(_g_display_text^(0+128)+3)
  5535                           
  5536                           ;menu.c: 432:         }else if(change_digit==2)
  5537  0111  297E               	goto	l7278
  5538  0112                     l7266:	
  5539  0112  3002               	movlw	2
  5540  0113  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  5541  0114  1D03               	btfss	3,2
  5542  0115  2937               	goto	l7270
  5543                           
  5544                           ;menu.c: 433:         {;menu.c: 434:             g_display_text[2]=(menu->param1)/10;
  5545  0116  300A               	movlw	10
  5546  0117  00AD               	movwf	___awdiv@divisor
  5547  0118  3000               	movlw	0
  5548  0119  00AE               	movwf	___awdiv@divisor+1
  5549  011A  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5550  011B  3E06               	addlw	6
  5551  011C  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5552  011D  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5553  011E  1803               	skipnc
  5554  011F  3E01               	addlw	1
  5555  0120  3E00               	addlw	0
  5556  0121  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5557  0122  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5558  0123  0084               	movwf	4
  5559  0124  1783               	bsf	3,7
  5560  0125  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5561  0126  1383               	bcf	3,7
  5562  0127  0800               	movf	0,w
  5563  0128  00AF               	movwf	___awdiv@dividend
  5564  0129  01B0               	clrf	___awdiv@dividend+1
  5565  012A  1BAF               	btfsc	___awdiv@dividend,7
  5566  012B  03B0               	decf	___awdiv@dividend+1,f
  5567  012C  160A  158A  2629  120A  118A  	fcall	___awdiv
  5568  0131  082D               	movf	?___awdiv,w
  5569  0132  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5570  0133  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5571  0134  1683               	bsf	3,5	;RP0=1, select bank1
  5572  0135  00CE               	movwf	(_g_display_text^(0+128)+2)
  5573                           
  5574                           ;menu.c: 436:         }else if(change_digit==1)
  5575  0136  297E               	goto	l7278
  5576  0137                     l7270:	
  5577  0137  035B               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  5578  0138  1D03               	btfss	3,2
  5579  0139  295B               	goto	l7274
  5580                           
  5581                           ;menu.c: 437:         {;menu.c: 438:             g_display_text[1]=(menu->param)%10;
  5582  013A  300A               	movlw	10
  5583  013B  00A6               	movwf	___awmod@divisor
  5584  013C  3000               	movlw	0
  5585  013D  00A7               	movwf	___awmod@divisor+1
  5586  013E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5587  013F  3E05               	addlw	5
  5588  0140  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5589  0141  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5590  0142  1803               	skipnc
  5591  0143  3E01               	addlw	1
  5592  0144  3E00               	addlw	0
  5593  0145  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5594  0146  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5595  0147  0084               	movwf	4
  5596  0148  1783               	bsf	3,7
  5597  0149  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5598  014A  1383               	bcf	3,7
  5599  014B  0800               	movf	0,w
  5600  014C  00A8               	movwf	___awmod@dividend
  5601  014D  01A9               	clrf	___awmod@dividend+1
  5602  014E  1BA8               	btfsc	___awmod@dividend,7
  5603  014F  03A9               	decf	___awmod@dividend+1,f
  5604  0150  160A  158A  253D  120A  118A  	fcall	___awmod
  5605  0155  0826               	movf	?___awmod,w
  5606  0156  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5607  0157  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5608  0158  1683               	bsf	3,5	;RP0=1, select bank1
  5609  0159  00CD               	movwf	(_g_display_text^(0+128)+1)
  5610                           
  5611                           ;menu.c: 439:         }else if(change_digit==0)
  5612  015A  297E               	goto	l7278
  5613  015B                     l7274:	
  5614  015B  085B               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  5615  015C  1D03               	btfss	3,2
  5616  015D  297E               	goto	l7278
  5617                           
  5618                           ;menu.c: 440:         {;menu.c: 441:             g_display_text[0]=(menu->param)/10;
  5619  015E  300A               	movlw	10
  5620  015F  00AD               	movwf	___awdiv@divisor
  5621  0160  3000               	movlw	0
  5622  0161  00AE               	movwf	___awdiv@divisor+1
  5623  0162  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5624  0163  3E05               	addlw	5
  5625  0164  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5626  0165  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5627  0166  1803               	skipnc
  5628  0167  3E01               	addlw	1
  5629  0168  3E00               	addlw	0
  5630  0169  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5631  016A  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5632  016B  0084               	movwf	4
  5633  016C  1783               	bsf	3,7
  5634  016D  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5635  016E  1383               	bcf	3,7
  5636  016F  0800               	movf	0,w
  5637  0170  00AF               	movwf	___awdiv@dividend
  5638  0171  01B0               	clrf	___awdiv@dividend+1
  5639  0172  1BAF               	btfsc	___awdiv@dividend,7
  5640  0173  03B0               	decf	___awdiv@dividend+1,f
  5641  0174  160A  158A  2629  120A  118A  	fcall	___awdiv
  5642  0179  082D               	movf	?___awdiv,w
  5643  017A  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5644  017B  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5645  017C  1683               	bsf	3,5	;RP0=1, select bank1
  5646  017D  00CC               	movwf	_g_display_text^(0+128)
  5647  017E                     l7278:	
  5648                           
  5649                           ;menu.c: 445:     if(check_button==k_set_up_short)
  5650  017E  3008               	movlw	8
  5651  017F  1283               	bcf	3,5	;RP0=0, select bank0
  5652  0180  0638               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  5653  0181  1D03               	btfss	3,2
  5654  0182  2C50               	goto	l7316
  5655                           
  5656                           ;menu.c: 446:     {;menu.c: 447:         if(change_digit==0)
  5657  0183  085B               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  5658  0184  1D03               	btfss	3,2
  5659  0185  2A71               	goto	l7288
  5660                           
  5661                           ;menu.c: 448:         {;menu.c: 449:             (menu->param)=(menu->param)+10;
  5662  0186  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5663  0187  3E05               	addlw	5
  5664  0188  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5665  0189  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5666  018A  1803               	skipnc
  5667  018B  3E01               	addlw	1
  5668  018C  3E00               	addlw	0
  5669  018D  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5670  018E  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5671  018F  0084               	movwf	4
  5672  0190  1783               	bsf	3,7
  5673  0191  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5674  0192  1383               	bcf	3,7
  5675  0193  0800               	movf	0,w
  5676  0194  3E0A               	addlw	10
  5677  0195  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5678  0196  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5679  0197  3E05               	addlw	5
  5680  0198  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5681  0199  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5682  019A  1803               	skipnc
  5683  019B  3E01               	addlw	1
  5684  019C  3E00               	addlw	0
  5685  019D  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5686  019E  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5687  019F  0084               	movwf	4
  5688  01A0  1783               	bsf	3,7
  5689  01A1  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5690  01A2  1383               	bcf	3,7
  5691  01A3  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5692  01A4  0080               	movwf	0
  5693                           
  5694                           ;menu.c: 451:             if(menu->param>menu->max_limit)
  5695  01A5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5696  01A6  3E05               	addlw	5
  5697  01A7  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5698  01A8  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5699  01A9  1803               	skipnc
  5700  01AA  3E01               	addlw	1
  5701  01AB  3E00               	addlw	0
  5702  01AC  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5703  01AD  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5704  01AE  0084               	movwf	4
  5705  01AF  1783               	bsf	3,7
  5706  01B0  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5707  01B1  1383               	bcf	3,7
  5708  01B2  0800               	movf	0,w
  5709  01B3  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5710  01B4  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  5711  01B5  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5712  01B6  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5713  01B7  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5714  01B8  0084               	movwf	4
  5715  01B9  1783               	bsf	3,7
  5716  01BA  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5717  01BB  1383               	bcf	3,7
  5718  01BC  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5719  01BD  3A80               	xorlw	128
  5720  01BE  3C80               	sublw	128
  5721  01BF  1D03               	skipz
  5722  01C0  29C3               	goto	u7465
  5723  01C1  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5724  01C2  0200               	subwf	0,w
  5725  01C3                     u7465:	
  5726  01C3  1803               	skipnc
  5727  01C4  29FE               	goto	l736
  5728                           
  5729                           ;menu.c: 452:             {;menu.c: 453:                 (menu->param)=(menu->param)-((m
      +                          enu->max_limit)-(menu->max_limit)%10+10);
  5730  01C5  300A               	movlw	10
  5731  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  5732  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  5733  01C8  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5734  01C9  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5735  01CA  00A6               	movwf	___lbmod@divisor
  5736  01CB  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5737  01CC  0084               	movwf	4
  5738  01CD  1783               	bsf	3,7
  5739  01CE  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5740  01CF  1383               	bcf	3,7
  5741  01D0  0800               	movf	0,w
  5742  01D1  160A  158A  21A6  120A  118A  	fcall	___lbmod
  5743  01D6  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5744  01D7  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5745  01D8  0084               	movwf	4
  5746  01D9  1783               	bsf	3,7
  5747  01DA  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5748  01DB  1383               	bcf	3,7
  5749  01DC  0800               	movf	0,w
  5750  01DD  02BA               	subwf	??_Menu_Set_Param_Time_Limit+1,f
  5751  01DE  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5752  01DF  3E05               	addlw	5
  5753  01E0  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5754  01E1  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5755  01E2  1803               	skipnc
  5756  01E3  3E01               	addlw	1
  5757  01E4  3E00               	addlw	0
  5758  01E5  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5759  01E6  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5760  01E7  0084               	movwf	4
  5761  01E8  1783               	bsf	3,7
  5762  01E9  1C3C               	btfss	??_Menu_Set_Param_Time_Limit+3,0
  5763  01EA  1383               	bcf	3,7
  5764  01EB  0800               	movf	0,w
  5765  01EC  073A               	addwf	??_Menu_Set_Param_Time_Limit+1,w
  5766  01ED  3EF6               	addlw	-10
  5767  01EE  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5768  01EF  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5769  01F0  3E05               	addlw	5
  5770  01F1  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5771  01F2  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5772  01F3  1803               	skipnc
  5773  01F4  3E01               	addlw	1
  5774  01F5  3E00               	addlw	0
  5775  01F6  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  5776  01F7  083E               	movf	??_Menu_Set_Param_Time_Limit+5,w
  5777  01F8  0084               	movwf	4
  5778  01F9  1783               	bsf	3,7
  5779  01FA  1C3F               	btfss	??_Menu_Set_Param_Time_Limit+6,0
  5780  01FB  1383               	bcf	3,7
  5781  01FC  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5782  01FD  0080               	movwf	0
  5783  01FE                     l736:	
  5784                           ;menu.c: 454:             }
  5785                           
  5786                           
  5787                           ;menu.c: 456:             if(menu->max_limit/10==menu->min_limit/10)
  5788  01FE  300A               	movlw	10
  5789  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  5790  0200  1303               	bcf	3,6	;RP1=0, select bank0
  5791  0201  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5792  0202  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5793  0203  00A6               	movwf	___lbdiv@divisor
  5794  0204  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5795  0205  3E03               	addlw	3
  5796  0206  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5797  0207  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5798  0208  1803               	skipnc
  5799  0209  3E01               	addlw	1
  5800  020A  3E00               	addlw	0
  5801  020B  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5802  020C  083A               	movf	??_Menu_Set_Param_Time_Limit+1,w
  5803  020D  0084               	movwf	4
  5804  020E  1783               	bsf	3,7
  5805  020F  1C3B               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  5806  0210  1383               	bcf	3,7
  5807  0211  0800               	movf	0,w
  5808  0212  160A  158A  2163  120A  118A  	fcall	___lbdiv
  5809  0217  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5810  0218  300A               	movlw	10
  5811  0219  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5812  021A  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5813  021B  00A6               	movwf	___lbdiv@divisor
  5814  021C  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5815  021D  0084               	movwf	4
  5816  021E  1783               	bsf	3,7
  5817  021F  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5818  0220  1383               	bcf	3,7
  5819  0221  0800               	movf	0,w
  5820  0222  160A  158A  2163  120A  118A  	fcall	___lbdiv
  5821  0227  063C               	xorwf	??_Menu_Set_Param_Time_Limit+3,w
  5822  0228  1D03               	skipz
  5823  0229  2BC6               	goto	l7306
  5824                           
  5825                           ;menu.c: 457:             {;menu.c: 458:                 (menu->param)=(menu->param%10)+
      +                          ((menu->max_limit)-(menu->max_limit)%10);
  5826  022A  300A               	movlw	10
  5827  022B  00A6               	movwf	___awmod@divisor
  5828  022C  3000               	movlw	0
  5829  022D  00A7               	movwf	___awmod@divisor+1
  5830  022E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5831  022F  3E05               	addlw	5
  5832  0230  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5833  0231  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5834  0232  1803               	skipnc
  5835  0233  3E01               	addlw	1
  5836  0234  3E00               	addlw	0
  5837  0235  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5838  0236  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5839  0237  0084               	movwf	4
  5840  0238  1783               	bsf	3,7
  5841  0239  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5842  023A  1383               	bcf	3,7
  5843  023B  0800               	movf	0,w
  5844  023C  00A8               	movwf	___awmod@dividend
  5845  023D  01A9               	clrf	___awmod@dividend+1
  5846  023E  1BA8               	btfsc	___awmod@dividend,7
  5847  023F  03A9               	decf	___awmod@dividend+1,f
  5848  0240  160A  158A  253D  120A  118A  	fcall	___awmod
  5849  0245  0826               	movf	?___awmod,w
  5850  0246  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5851  0247  0827               	movf	?___awmod+1,w
  5852  0248  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5853  0249  300A               	movlw	10
  5854  024A  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5855  024B  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5856  024C  00A6               	movwf	___lbmod@divisor
  5857  024D  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5858  024E  0084               	movwf	4
  5859  024F  1783               	bsf	3,7
  5860  0250  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5861  0251  1383               	bcf	3,7
  5862  0252  0800               	movf	0,w
  5863  0253  160A  158A  21A6  120A  118A  	fcall	___lbmod
  5864  0258  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  5865  0259  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  5866  025A  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5867  025B  0084               	movwf	4
  5868  025C  1783               	bsf	3,7
  5869  025D  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5870  025E  1383               	bcf	3,7
  5871  025F  0800               	movf	0,w
  5872  0260  073E               	addwf	??_Menu_Set_Param_Time_Limit+5,w
  5873  0261  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  5874  0262  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5875  0263  3E05               	addlw	5
  5876  0264  00C0               	movwf	??_Menu_Set_Param_Time_Limit+7
  5877  0265  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5878  0266  1803               	skipnc
  5879  0267  3E01               	addlw	1
  5880  0268  3E00               	addlw	0
  5881  0269  00C1               	movwf	??_Menu_Set_Param_Time_Limit+8
  5882  026A  0840               	movf	??_Menu_Set_Param_Time_Limit+7,w
  5883  026B  0084               	movwf	4
  5884  026C  1783               	bsf	3,7
  5885  026D  1C41               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  5886  026E  1383               	bcf	3,7
  5887  026F  083F               	movf	??_Menu_Set_Param_Time_Limit+6,w
  5888  0270  2BC5               	goto	L5
  5889  0271                     l7288:	
  5890  0271  035B               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  5891  0272  1D03               	btfss	3,2
  5892  0273  2AC7               	goto	l7294
  5893                           
  5894                           ;menu.c: 462:         {;menu.c: 463:             (menu->param)=(menu->param)+1;
  5895  0274  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5896  0275  3E05               	addlw	5
  5897  0276  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5898  0277  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5899  0278  1803               	skipnc
  5900  0279  3E01               	addlw	1
  5901  027A  3E00               	addlw	0
  5902  027B  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5903  027C  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5904  027D  0084               	movwf	4
  5905  027E  1783               	bsf	3,7
  5906  027F  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5907  0280  1383               	bcf	3,7
  5908  0281  0800               	movf	0,w
  5909  0282  3E01               	addlw	1
  5910  0283  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5911  0284  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5912  0285  3E05               	addlw	5
  5913  0286  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  5914  0287  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5915  0288  1803               	skipnc
  5916  0289  3E01               	addlw	1
  5917  028A  3E00               	addlw	0
  5918  028B  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  5919  028C  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5920  028D  0084               	movwf	4
  5921  028E  1783               	bsf	3,7
  5922  028F  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5923  0290  1383               	bcf	3,7
  5924  0291  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5925  0292  0080               	movwf	0
  5926                           
  5927                           ;menu.c: 465:             if((menu->param)>(menu->max_limit))
  5928  0293  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5929  0294  3E05               	addlw	5
  5930  0295  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5931  0296  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5932  0297  1803               	skipnc
  5933  0298  3E01               	addlw	1
  5934  0299  3E00               	addlw	0
  5935  029A  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5936  029B  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5937  029C  0084               	movwf	4
  5938  029D  1783               	bsf	3,7
  5939  029E  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5940  029F  1383               	bcf	3,7
  5941  02A0  0800               	movf	0,w
  5942  02A1  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5943  02A2  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  5944  02A3  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5945  02A4  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5946  02A5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5947  02A6  0084               	movwf	4
  5948  02A7  1783               	bsf	3,7
  5949  02A8  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5950  02A9  1383               	bcf	3,7
  5951  02AA  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5952  02AB  3A80               	xorlw	128
  5953  02AC  3C80               	sublw	128
  5954  02AD  1D03               	skipz
  5955  02AE  2AB1               	goto	u7495
  5956  02AF  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5957  02B0  0200               	subwf	0,w
  5958  02B1                     u7495:	
  5959  02B1  1803               	skipnc
  5960  02B2  2BC6               	goto	l7306
  5961                           
  5962                           ;menu.c: 466:             {;menu.c: 467:                 (menu->param)=(menu->min_limit)
      +                          ;
  5963  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  5964  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  5965  02B5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5966  02B6  3E03               	addlw	3
  5967  02B7  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5968  02B8  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5969  02B9  1803               	skipnc
  5970  02BA  3E01               	addlw	1
  5971  02BB  3E00               	addlw	0
  5972  02BC  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5973  02BD  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5974  02BE  0084               	movwf	4
  5975  02BF  1783               	bsf	3,7
  5976  02C0  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5977  02C1  1383               	bcf	3,7
  5978  02C2  0800               	movf	0,w
  5979  02C3  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  5980  02C4  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5981  02C5  3E05               	addlw	5
  5982  02C6  2BB9               	goto	L7
  5983  02C7                     l7294:	
  5984  02C7  3002               	movlw	2
  5985  02C8  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  5986  02C9  1D03               	btfss	3,2
  5987  02CA  2B5B               	goto	l7300
  5988                           
  5989                           ;menu.c: 470:         {;menu.c: 471:             (menu->param1)=(menu->param1)+10;
  5990  02CB  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  5991  02CC  3E06               	addlw	6
  5992  02CD  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  5993  02CE  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5994  02CF  1803               	skipnc
  5995  02D0  3E01               	addlw	1
  5996  02D1  3E00               	addlw	0
  5997  02D2  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  5998  02D3  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  5999  02D4  0084               	movwf	4
  6000  02D5  1783               	bsf	3,7
  6001  02D6  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6002  02D7  1383               	bcf	3,7
  6003  02D8  0800               	movf	0,w
  6004  02D9  3E0A               	addlw	10
  6005  02DA  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6006  02DB  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6007  02DC  3E06               	addlw	6
  6008  02DD  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6009  02DE  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6010  02DF  1803               	skipnc
  6011  02E0  3E01               	addlw	1
  6012  02E1  3E00               	addlw	0
  6013  02E2  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6014  02E3  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6015  02E4  0084               	movwf	4
  6016  02E5  1783               	bsf	3,7
  6017  02E6  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6018  02E7  1383               	bcf	3,7
  6019  02E8  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6020  02E9  0080               	movwf	0
  6021                           
  6022                           ;menu.c: 473:             if(menu->param1>menu->max_limit1)
  6023  02EA  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6024  02EB  3E06               	addlw	6
  6025  02EC  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6026  02ED  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6027  02EE  1803               	skipnc
  6028  02EF  3E01               	addlw	1
  6029  02F0  3E00               	addlw	0
  6030  02F1  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6031  02F2  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6032  02F3  0084               	movwf	4
  6033  02F4  1783               	bsf	3,7
  6034  02F5  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6035  02F6  1383               	bcf	3,7
  6036  02F7  0800               	movf	0,w
  6037  02F8  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6038  02F9  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  6039  02FA  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  6040  02FB  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  6041  02FC  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6042  02FD  3E01               	addlw	1
  6043  02FE  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6044  02FF  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6045  0300  1803               	skipnc
  6046  0301  3E01               	addlw	1
  6047  0302  3E00               	addlw	0
  6048  0303  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6049  0304  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6050  0305  0084               	movwf	4
  6051  0306  1783               	bsf	3,7
  6052  0307  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6053  0308  1383               	bcf	3,7
  6054  0309  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6055  030A  3A80               	xorlw	128
  6056  030B  3C80               	sublw	128
  6057  030C  1D03               	skipz
  6058  030D  2B10               	goto	u7515
  6059  030E  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6060  030F  0200               	subwf	0,w
  6061  0310                     u7515:	
  6062  0310  1803               	skipnc
  6063  0311  2BC6               	goto	l7306
  6064                           
  6065                           ;menu.c: 474:             {;menu.c: 475:                 (menu->param1)=(menu->param1)-(
      +                          (menu->max_limit1)-(menu->max_limit1)%10+10);
  6066  0312  300A               	movlw	10
  6067  0313  1283               	bcf	3,5	;RP0=0, select bank0
  6068  0314  1303               	bcf	3,6	;RP1=0, select bank0
  6069  0315  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6070  0316  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6071  0317  00A6               	movwf	___lbmod@divisor
  6072  0318  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6073  0319  3E01               	addlw	1
  6074  031A  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6075  031B  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6076  031C  1803               	skipnc
  6077  031D  3E01               	addlw	1
  6078  031E  3E00               	addlw	0
  6079  031F  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6080  0320  083A               	movf	??_Menu_Set_Param_Time_Limit+1,w
  6081  0321  0084               	movwf	4
  6082  0322  1783               	bsf	3,7
  6083  0323  1C3B               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  6084  0324  1383               	bcf	3,7
  6085  0325  0800               	movf	0,w
  6086  0326  160A  158A  21A6  120A  118A  	fcall	___lbmod
  6087  032B  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6088  032C  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6089  032D  3E01               	addlw	1
  6090  032E  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6091  032F  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6092  0330  1803               	skipnc
  6093  0331  3E01               	addlw	1
  6094  0332  3E00               	addlw	0
  6095  0333  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6096  0334  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6097  0335  0084               	movwf	4
  6098  0336  1783               	bsf	3,7
  6099  0337  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6100  0338  1383               	bcf	3,7
  6101  0339  0800               	movf	0,w
  6102  033A  02BC               	subwf	??_Menu_Set_Param_Time_Limit+3,f
  6103  033B  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6104  033C  3E06               	addlw	6
  6105  033D  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6106  033E  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6107  033F  1803               	skipnc
  6108  0340  3E01               	addlw	1
  6109  0341  3E00               	addlw	0
  6110  0342  00C0               	movwf	??_Menu_Set_Param_Time_Limit+7
  6111  0343  083F               	movf	??_Menu_Set_Param_Time_Limit+6,w
  6112  0344  0084               	movwf	4
  6113  0345  1783               	bsf	3,7
  6114  0346  1C40               	btfss	??_Menu_Set_Param_Time_Limit+7,0
  6115  0347  1383               	bcf	3,7
  6116  0348  0800               	movf	0,w
  6117  0349  073C               	addwf	??_Menu_Set_Param_Time_Limit+3,w
  6118  034A  3EF6               	addlw	-10
  6119  034B  00C1               	movwf	??_Menu_Set_Param_Time_Limit+8
  6120  034C  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6121  034D  3E06               	addlw	6
  6122  034E  00C2               	movwf	??_Menu_Set_Param_Time_Limit+9
  6123  034F  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6124  0350  1803               	skipnc
  6125  0351  3E01               	addlw	1
  6126  0352  3E00               	addlw	0
  6127  0353  00C3               	movwf	??_Menu_Set_Param_Time_Limit+10
  6128  0354  0842               	movf	??_Menu_Set_Param_Time_Limit+9,w
  6129  0355  0084               	movwf	4
  6130  0356  1783               	bsf	3,7
  6131  0357  1C43               	btfss	??_Menu_Set_Param_Time_Limit+10,0
  6132  0358  1383               	bcf	3,7
  6133  0359  0841               	movf	??_Menu_Set_Param_Time_Limit+8,w
  6134  035A  2BC5               	goto	L5
  6135  035B                     l7300:	
  6136  035B  3003               	movlw	3
  6137  035C  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  6138  035D  1D03               	btfss	3,2
  6139  035E  2BC6               	goto	l7306
  6140                           
  6141                           ;menu.c: 478:         {;menu.c: 479:             (menu->param1)=(menu->param1)+1;
  6142  035F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6143  0360  3E06               	addlw	6
  6144  0361  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6145  0362  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6146  0363  1803               	skipnc
  6147  0364  3E01               	addlw	1
  6148  0365  3E00               	addlw	0
  6149  0366  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6150  0367  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6151  0368  0084               	movwf	4
  6152  0369  1783               	bsf	3,7
  6153  036A  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6154  036B  1383               	bcf	3,7
  6155  036C  0800               	movf	0,w
  6156  036D  3E01               	addlw	1
  6157  036E  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6158  036F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6159  0370  3E06               	addlw	6
  6160  0371  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6161  0372  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6162  0373  1803               	skipnc
  6163  0374  3E01               	addlw	1
  6164  0375  3E00               	addlw	0
  6165  0376  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6166  0377  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6167  0378  0084               	movwf	4
  6168  0379  1783               	bsf	3,7
  6169  037A  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6170  037B  1383               	bcf	3,7
  6171  037C  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6172  037D  0080               	movwf	0
  6173                           
  6174                           ;menu.c: 481:             if((menu->param1)>(menu->max_limit1))
  6175  037E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6176  037F  3E06               	addlw	6
  6177  0380  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6178  0381  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6179  0382  1803               	skipnc
  6180  0383  3E01               	addlw	1
  6181  0384  3E00               	addlw	0
  6182  0385  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6183  0386  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6184  0387  0084               	movwf	4
  6185  0388  1783               	bsf	3,7
  6186  0389  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6187  038A  1383               	bcf	3,7
  6188  038B  0800               	movf	0,w
  6189  038C  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6190  038D  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  6191  038E  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  6192  038F  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  6193  0390  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6194  0391  3E01               	addlw	1
  6195  0392  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6196  0393  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6197  0394  1803               	skipnc
  6198  0395  3E01               	addlw	1
  6199  0396  3E00               	addlw	0
  6200  0397  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6201  0398  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6202  0399  0084               	movwf	4
  6203  039A  1783               	bsf	3,7
  6204  039B  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6205  039C  1383               	bcf	3,7
  6206  039D  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6207  039E  3A80               	xorlw	128
  6208  039F  3C80               	sublw	128
  6209  03A0  1D03               	skipz
  6210  03A1  2BA4               	goto	u7535
  6211  03A2  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6212  03A3  0200               	subwf	0,w
  6213  03A4                     u7535:	
  6214  03A4  1803               	skipnc
  6215  03A5  2BC6               	goto	l7306
  6216                           
  6217                           ;menu.c: 482:             {;menu.c: 483:                 (menu->param1)=(menu->min_limit
      +                          1);
  6218  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  6219  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  6220  03A8  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6221  03A9  3E04               	addlw	4
  6222  03AA  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6223  03AB  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6224  03AC  1803               	skipnc
  6225  03AD  3E01               	addlw	1
  6226  03AE  3E00               	addlw	0
  6227  03AF  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6228  03B0  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6229  03B1  0084               	movwf	4
  6230  03B2  1783               	bsf	3,7
  6231  03B3  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6232  03B4  1383               	bcf	3,7
  6233  03B5  0800               	movf	0,w
  6234  03B6  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6235  03B7  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6236  03B8  3E06               	addlw	6
  6237  03B9                     L7:	
  6238  03B9  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6239  03BA  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6240  03BB  1803               	skipnc
  6241  03BC  3E01               	addlw	1
  6242  03BD  3E00               	addlw	0
  6243  03BE  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6244  03BF  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6245  03C0  0084               	movwf	4
  6246  03C1  1783               	bsf	3,7
  6247  03C2  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6248  03C3  1383               	bcf	3,7
  6249  03C4  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6250  03C5                     L5:	
  6251  03C5  0080               	movwf	0
  6252  03C6                     l7306:	
  6253                           
  6254                           ;menu.c: 487:         g_display_text[0]=(menu->param)/10;
  6255  03C6  300A               	movlw	10
  6256  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  6257  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  6258  03C9  00AD               	movwf	___awdiv@divisor
  6259  03CA  3000               	movlw	0
  6260  03CB  00AE               	movwf	___awdiv@divisor+1
  6261  03CC  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6262  03CD  3E05               	addlw	5
  6263  03CE  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6264  03CF  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6265  03D0  1803               	skipnc
  6266  03D1  3E01               	addlw	1
  6267  03D2  3E00               	addlw	0
  6268  03D3  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6269  03D4  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6270  03D5  0084               	movwf	4
  6271  03D6  1783               	bsf	3,7
  6272  03D7  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6273  03D8  1383               	bcf	3,7
  6274  03D9  0800               	movf	0,w
  6275  03DA  00AF               	movwf	___awdiv@dividend
  6276  03DB  01B0               	clrf	___awdiv@dividend+1
  6277  03DC  1BAF               	btfsc	___awdiv@dividend,7
  6278  03DD  03B0               	decf	___awdiv@dividend+1,f
  6279  03DE  160A  158A  2629  120A  118A  	fcall	___awdiv
  6280  03E3  082D               	movf	?___awdiv,w
  6281  03E4  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6282  03E5  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6283  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  6284  03E7  00CC               	movwf	_g_display_text^(0+128)
  6285                           
  6286                           ;menu.c: 488:         g_display_text[1]=(menu->param)%10;
  6287  03E8  300A               	movlw	10
  6288  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  6289  03EA  00A6               	movwf	___awmod@divisor
  6290  03EB  3000               	movlw	0
  6291  03EC  00A7               	movwf	___awmod@divisor+1
  6292  03ED  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6293  03EE  3E05               	addlw	5
  6294  03EF  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6295  03F0  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6296  03F1  1803               	skipnc
  6297  03F2  3E01               	addlw	1
  6298  03F3  3E00               	addlw	0
  6299  03F4  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6300  03F5  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6301  03F6  0084               	movwf	4
  6302  03F7  1783               	bsf	3,7
  6303  03F8  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6304  03F9  1383               	bcf	3,7
  6305  03FA  0800               	movf	0,w
  6306  03FB  00A8               	movwf	___awmod@dividend
  6307  03FC  01A9               	clrf	___awmod@dividend+1
  6308  03FD  1BA8               	btfsc	___awmod@dividend,7
  6309  03FE  03A9               	decf	___awmod@dividend+1,f
  6310  03FF  160A  158A  253D  120A  118A  	fcall	___awmod
  6311  0404  0826               	movf	?___awmod,w
  6312  0405  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6313  0406  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6314  0407  1683               	bsf	3,5	;RP0=1, select bank1
  6315  0408  00CD               	movwf	(_g_display_text^(0+128)+1)
  6316                           
  6317                           ;menu.c: 489:         g_display_text[2]=(menu->param1)/10;
  6318  0409  300A               	movlw	10
  6319  040A  1283               	bcf	3,5	;RP0=0, select bank0
  6320  040B  00AD               	movwf	___awdiv@divisor
  6321  040C  3000               	movlw	0
  6322  040D  00AE               	movwf	___awdiv@divisor+1
  6323  040E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6324  040F  3E06               	addlw	6
  6325  0410  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6326  0411  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6327  0412  1803               	skipnc
  6328  0413  3E01               	addlw	1
  6329  0414  3E00               	addlw	0
  6330  0415  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6331  0416  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6332  0417  0084               	movwf	4
  6333  0418  1783               	bsf	3,7
  6334  0419  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6335  041A  1383               	bcf	3,7
  6336  041B  0800               	movf	0,w
  6337  041C  00AF               	movwf	___awdiv@dividend
  6338  041D  01B0               	clrf	___awdiv@dividend+1
  6339  041E  1BAF               	btfsc	___awdiv@dividend,7
  6340  041F  03B0               	decf	___awdiv@dividend+1,f
  6341  0420  160A  158A  2629  120A  118A  	fcall	___awdiv
  6342  0425  082D               	movf	?___awdiv,w
  6343  0426  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6344  0427  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6345  0428  1683               	bsf	3,5	;RP0=1, select bank1
  6346  0429  00CE               	movwf	(_g_display_text^(0+128)+2)
  6347                           
  6348                           ;menu.c: 490:         g_display_text[3]=(menu->param1)%10;
  6349  042A  300A               	movlw	10
  6350  042B  1283               	bcf	3,5	;RP0=0, select bank0
  6351  042C  00A6               	movwf	___awmod@divisor
  6352  042D  3000               	movlw	0
  6353  042E  00A7               	movwf	___awmod@divisor+1
  6354  042F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6355  0430  3E06               	addlw	6
  6356  0431  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6357  0432  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6358  0433  1803               	skipnc
  6359  0434  3E01               	addlw	1
  6360  0435  3E00               	addlw	0
  6361  0436  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6362  0437  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6363  0438  0084               	movwf	4
  6364  0439  1783               	bsf	3,7
  6365  043A  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6366  043B  1383               	bcf	3,7
  6367  043C  0800               	movf	0,w
  6368  043D  00A8               	movwf	___awmod@dividend
  6369  043E  01A9               	clrf	___awmod@dividend+1
  6370  043F  1BA8               	btfsc	___awmod@dividend,7
  6371  0440  03A9               	decf	___awmod@dividend+1,f
  6372  0441  160A  158A  253D  120A  118A  	fcall	___awmod
  6373  0446  0826               	movf	?___awmod,w
  6374  0447  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6375  0448  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6376  0449  1683               	bsf	3,5	;RP0=1, select bank1
  6377  044A  00CF               	movwf	(_g_display_text^(0+128)+3)
  6378                           
  6379                           ;menu.c: 492:         g_generic_timer=7000;
  6380  044B  3058               	movlw	88
  6381  044C  1283               	bcf	3,5	;RP0=0, select bank0
  6382  044D  00D9               	movwf	_g_generic_timer	;volatile
  6383  044E  301B               	movlw	27
  6384  044F  00DA               	movwf	_g_generic_timer+1	;volatile
  6385  0450                     l7316:	
  6386                           
  6387                           ;menu.c: 495:     if(check_button==k_set_down_short)
  6388  0450  300A               	movlw	10
  6389  0451  0638               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  6390  0452  1D03               	btfss	3,2
  6391  0453  0008               	return
  6392                           
  6393                           ;menu.c: 496:     {;menu.c: 497:         if(change_digit==0)
  6394  0454  085B               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  6395  0455  1D03               	btfss	3,2
  6396  0456  2CDC               	goto	l7324
  6397                           
  6398                           ;menu.c: 498:         {;menu.c: 499:             (menu->param)=(menu->param)-10;
  6399  0457  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6400  0458  3E05               	addlw	5
  6401  0459  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6402  045A  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6403  045B  1803               	skipnc
  6404  045C  3E01               	addlw	1
  6405  045D  3E00               	addlw	0
  6406  045E  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6407  045F  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6408  0460  0084               	movwf	4
  6409  0461  1783               	bsf	3,7
  6410  0462  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6411  0463  1383               	bcf	3,7
  6412  0464  0800               	movf	0,w
  6413  0465  3EF6               	addlw	-10
  6414  0466  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6415  0467  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6416  0468  3E05               	addlw	5
  6417  0469  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6418  046A  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6419  046B  1803               	skipnc
  6420  046C  3E01               	addlw	1
  6421  046D  3E00               	addlw	0
  6422  046E  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6423  046F  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6424  0470  0084               	movwf	4
  6425  0471  1783               	bsf	3,7
  6426  0472  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6427  0473  1383               	bcf	3,7
  6428  0474  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6429  0475  0080               	movwf	0
  6430                           
  6431                           ;menu.c: 501:             if((menu->param)<(menu->min_limit))
  6432  0476  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6433  0477  3E05               	addlw	5
  6434  0478  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6435  0479  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6436  047A  1803               	skipnc
  6437  047B  3E01               	addlw	1
  6438  047C  3E00               	addlw	0
  6439  047D  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6440  047E  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6441  047F  0084               	movwf	4
  6442  0480  1783               	bsf	3,7
  6443  0481  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6444  0482  1383               	bcf	3,7
  6445  0483  0800               	movf	0,w
  6446  0484  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6447  0485  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  6448  0486  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  6449  0487  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  6450  0488  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6451  0489  3E03               	addlw	3
  6452  048A  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6453  048B  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6454  048C  1803               	skipnc
  6455  048D  3E01               	addlw	1
  6456  048E  3E00               	addlw	0
  6457  048F  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6458  0490  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6459  0491  0084               	movwf	4
  6460  0492  1783               	bsf	3,7
  6461  0493  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6462  0494  1383               	bcf	3,7
  6463  0495  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6464  0496  3A80               	xorlw	128
  6465  0497  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6466  0498  3080               	movlw	128
  6467  0499  023F               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  6468  049A  1D03               	skipz
  6469  049B  2C9E               	goto	u7565
  6470  049C  0800               	movf	0,w
  6471  049D  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  6472  049E                     u7565:	
  6473  049E  1803               	skipnc
  6474  049F  2E46               	goto	l7342
  6475                           
  6476                           ;menu.c: 502:             {;menu.c: 503:                 (menu->param)=(menu->param)+((m
      +                          enu->max_limit)-(menu->max_limit)%10+10);
  6477  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  6478  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  6479  04A2  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6480  04A3  3E05               	addlw	5
  6481  04A4  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6482  04A5  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6483  04A6  1803               	skipnc
  6484  04A7  3E01               	addlw	1
  6485  04A8  3E00               	addlw	0
  6486  04A9  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6487  04AA  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6488  04AB  0084               	movwf	4
  6489  04AC  1783               	bsf	3,7
  6490  04AD  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6491  04AE  1383               	bcf	3,7
  6492  04AF  0800               	movf	0,w
  6493  04B0  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6494  04B1  300A               	movlw	10
  6495  04B2  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6496  04B3  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6497  04B4  00A6               	movwf	___lbmod@divisor
  6498  04B5  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6499  04B6  0084               	movwf	4
  6500  04B7  1783               	bsf	3,7
  6501  04B8  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  6502  04B9  1383               	bcf	3,7
  6503  04BA  0800               	movf	0,w
  6504  04BB  160A  158A  21A6  120A  118A  	fcall	___lbmod
  6505  04C0  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6506  04C1  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6507  04C2  0084               	movwf	4
  6508  04C3  1783               	bsf	3,7
  6509  04C4  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  6510  04C5  1383               	bcf	3,7
  6511  04C6  0800               	movf	0,w
  6512  04C7  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6513  04C8  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6514  04C9  023E               	subwf	??_Menu_Set_Param_Time_Limit+5,w
  6515  04CA  073B               	addwf	??_Menu_Set_Param_Time_Limit+2,w
  6516  04CB  3E0A               	addlw	10
  6517  04CC  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6518  04CD  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6519  04CE  3E05               	addlw	5
  6520  04CF  00C0               	movwf	??_Menu_Set_Param_Time_Limit+7
  6521  04D0  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6522  04D1  1803               	skipnc
  6523  04D2  3E01               	addlw	1
  6524  04D3  3E00               	addlw	0
  6525  04D4  00C1               	movwf	??_Menu_Set_Param_Time_Limit+8
  6526  04D5  0840               	movf	??_Menu_Set_Param_Time_Limit+7,w
  6527  04D6  0084               	movwf	4
  6528  04D7  1783               	bsf	3,7
  6529  04D8  1C41               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  6530  04D9  1383               	bcf	3,7
  6531  04DA  083F               	movf	??_Menu_Set_Param_Time_Limit+6,w
  6532  04DB  2E45               	goto	L6
  6533  04DC                     l7324:	
  6534  04DC  035B               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  6535  04DD  1D03               	btfss	3,2
  6536  04DE  2D40               	goto	l7330
  6537                           
  6538                           ;menu.c: 512:         {;menu.c: 513:             (menu->param)=(menu->param)-1;
  6539  04DF  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6540  04E0  3E05               	addlw	5
  6541  04E1  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6542  04E2  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6543  04E3  1803               	skipnc
  6544  04E4  3E01               	addlw	1
  6545  04E5  3E00               	addlw	0
  6546  04E6  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6547  04E7  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6548  04E8  0084               	movwf	4
  6549  04E9  1783               	bsf	3,7
  6550  04EA  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6551  04EB  1383               	bcf	3,7
  6552  04EC  0800               	movf	0,w
  6553  04ED  3EFF               	addlw	-1
  6554  04EE  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6555  04EF  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6556  04F0  3E05               	addlw	5
  6557  04F1  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6558  04F2  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6559  04F3  1803               	skipnc
  6560  04F4  3E01               	addlw	1
  6561  04F5  3E00               	addlw	0
  6562  04F6  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6563  04F7  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6564  04F8  0084               	movwf	4
  6565  04F9  1783               	bsf	3,7
  6566  04FA  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6567  04FB  1383               	bcf	3,7
  6568  04FC  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6569  04FD  0080               	movwf	0
  6570                           
  6571                           ;menu.c: 515:             if(menu->param<(menu->min_limit))
  6572  04FE  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6573  04FF  3E05               	addlw	5
  6574  0500  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6575  0501  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6576  0502  1803               	skipnc
  6577  0503  3E01               	addlw	1
  6578  0504  3E00               	addlw	0
  6579  0505  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6580  0506  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6581  0507  0084               	movwf	4
  6582  0508  1783               	bsf	3,7
  6583  0509  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6584  050A  1383               	bcf	3,7
  6585  050B  0800               	movf	0,w
  6586  050C  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6587  050D  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  6588  050E  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  6589  050F  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  6590  0510  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6591  0511  3E03               	addlw	3
  6592  0512  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6593  0513  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6594  0514  1803               	skipnc
  6595  0515  3E01               	addlw	1
  6596  0516  3E00               	addlw	0
  6597  0517  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6598  0518  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6599  0519  0084               	movwf	4
  6600  051A  1783               	bsf	3,7
  6601  051B  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6602  051C  1383               	bcf	3,7
  6603  051D  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6604  051E  3A80               	xorlw	128
  6605  051F  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6606  0520  3080               	movlw	128
  6607  0521  023F               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  6608  0522  1D03               	skipz
  6609  0523  2D26               	goto	u7585
  6610  0524  0800               	movf	0,w
  6611  0525  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  6612  0526                     u7585:	
  6613  0526  1803               	skipnc
  6614  0527  2E46               	goto	l7342
  6615                           
  6616                           ;menu.c: 516:             {;menu.c: 517:                 (menu->param)=(menu->max_limit)
      +                          ;
  6617  0528  1283               	bcf	3,5	;RP0=0, select bank0
  6618  0529  1303               	bcf	3,6	;RP1=0, select bank0
  6619  052A  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6620  052B  0084               	movwf	4
  6621  052C  1783               	bsf	3,7
  6622  052D  1C37               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  6623  052E  1383               	bcf	3,7
  6624  052F  0800               	movf	0,w
  6625  0530  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6626  0531  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6627  0532  3E05               	addlw	5
  6628  0533  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6629  0534  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6630  0535  1803               	skipnc
  6631  0536  3E01               	addlw	1
  6632  0537  3E00               	addlw	0
  6633  0538  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6634  0539  083A               	movf	??_Menu_Set_Param_Time_Limit+1,w
  6635  053A  0084               	movwf	4
  6636  053B  1783               	bsf	3,7
  6637  053C  1C3B               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  6638  053D  1383               	bcf	3,7
  6639  053E  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6640  053F  2E45               	goto	L6
  6641  0540                     l7330:	
  6642  0540  3002               	movlw	2
  6643  0541  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  6644  0542  1D03               	btfss	3,2
  6645  0543  2DD9               	goto	l7336
  6646                           
  6647                           ;menu.c: 520:         {;menu.c: 521:             (menu->param1)=(menu->param1)-10;
  6648  0544  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6649  0545  3E06               	addlw	6
  6650  0546  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6651  0547  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6652  0548  1803               	skipnc
  6653  0549  3E01               	addlw	1
  6654  054A  3E00               	addlw	0
  6655  054B  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6656  054C  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6657  054D  0084               	movwf	4
  6658  054E  1783               	bsf	3,7
  6659  054F  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6660  0550  1383               	bcf	3,7
  6661  0551  0800               	movf	0,w
  6662  0552  3EF6               	addlw	-10
  6663  0553  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6664  0554  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6665  0555  3E06               	addlw	6
  6666  0556  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6667  0557  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6668  0558  1803               	skipnc
  6669  0559  3E01               	addlw	1
  6670  055A  3E00               	addlw	0
  6671  055B  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6672  055C  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6673  055D  0084               	movwf	4
  6674  055E  1783               	bsf	3,7
  6675  055F  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6676  0560  1383               	bcf	3,7
  6677  0561  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6678  0562  0080               	movwf	0
  6679                           
  6680                           ;menu.c: 523:             if(menu->param1<(menu->min_limit1))
  6681  0563  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6682  0564  3E06               	addlw	6
  6683  0565  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6684  0566  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6685  0567  1803               	skipnc
  6686  0568  3E01               	addlw	1
  6687  0569  3E00               	addlw	0
  6688  056A  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6689  056B  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6690  056C  0084               	movwf	4
  6691  056D  1783               	bsf	3,7
  6692  056E  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6693  056F  1383               	bcf	3,7
  6694  0570  0800               	movf	0,w
  6695  0571  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6696  0572  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  6697  0573  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  6698  0574  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  6699  0575  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6700  0576  3E04               	addlw	4
  6701  0577  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6702  0578  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6703  0579  1803               	skipnc
  6704  057A  3E01               	addlw	1
  6705  057B  3E00               	addlw	0
  6706  057C  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6707  057D  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6708  057E  0084               	movwf	4
  6709  057F  1783               	bsf	3,7
  6710  0580  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6711  0581  1383               	bcf	3,7
  6712  0582  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6713  0583  3A80               	xorlw	128
  6714  0584  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6715  0585  3080               	movlw	128
  6716  0586  023F               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  6717  0587  1D03               	skipz
  6718  0588  2D8B               	goto	u7605
  6719  0589  0800               	movf	0,w
  6720  058A  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  6721  058B                     u7605:	
  6722  058B  1803               	skipnc
  6723  058C  2E46               	goto	l7342
  6724                           
  6725                           ;menu.c: 524:             {;menu.c: 525:                 (menu->param1)=(menu->param1)+(
      +                          (menu->max_limit1)-(menu->max_limit1)%10+10);
  6726  058D  1283               	bcf	3,5	;RP0=0, select bank0
  6727  058E  1303               	bcf	3,6	;RP1=0, select bank0
  6728  058F  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6729  0590  3E06               	addlw	6
  6730  0591  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6731  0592  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6732  0593  1803               	skipnc
  6733  0594  3E01               	addlw	1
  6734  0595  3E00               	addlw	0
  6735  0596  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6736  0597  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6737  0598  0084               	movwf	4
  6738  0599  1783               	bsf	3,7
  6739  059A  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6740  059B  1383               	bcf	3,7
  6741  059C  0800               	movf	0,w
  6742  059D  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6743  059E  300A               	movlw	10
  6744  059F  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6745  05A0  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6746  05A1  00A6               	movwf	___lbmod@divisor
  6747  05A2  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6748  05A3  3E01               	addlw	1
  6749  05A4  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6750  05A5  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6751  05A6  1803               	skipnc
  6752  05A7  3E01               	addlw	1
  6753  05A8  3E00               	addlw	0
  6754  05A9  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6755  05AA  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6756  05AB  0084               	movwf	4
  6757  05AC  1783               	bsf	3,7
  6758  05AD  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6759  05AE  1383               	bcf	3,7
  6760  05AF  0800               	movf	0,w
  6761  05B0  160A  158A  21A6  120A  118A  	fcall	___lbmod
  6762  05B5  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6763  05B6  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6764  05B7  3E01               	addlw	1
  6765  05B8  00C0               	movwf	??_Menu_Set_Param_Time_Limit+7
  6766  05B9  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6767  05BA  1803               	skipnc
  6768  05BB  3E01               	addlw	1
  6769  05BC  3E00               	addlw	0
  6770  05BD  00C1               	movwf	??_Menu_Set_Param_Time_Limit+8
  6771  05BE  0840               	movf	??_Menu_Set_Param_Time_Limit+7,w
  6772  05BF  0084               	movwf	4
  6773  05C0  1783               	bsf	3,7
  6774  05C1  1C41               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  6775  05C2  1383               	bcf	3,7
  6776  05C3  0800               	movf	0,w
  6777  05C4  00C2               	movwf	??_Menu_Set_Param_Time_Limit+9
  6778  05C5  083F               	movf	??_Menu_Set_Param_Time_Limit+6,w
  6779  05C6  0242               	subwf	??_Menu_Set_Param_Time_Limit+9,w
  6780  05C7  073B               	addwf	??_Menu_Set_Param_Time_Limit+2,w
  6781  05C8  3E0A               	addlw	10
  6782  05C9  00C3               	movwf	??_Menu_Set_Param_Time_Limit+10
  6783  05CA  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6784  05CB  3E06               	addlw	6
  6785  05CC  00C4               	movwf	??_Menu_Set_Param_Time_Limit+11
  6786  05CD  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6787  05CE  1803               	skipnc
  6788  05CF  3E01               	addlw	1
  6789  05D0  3E00               	addlw	0
  6790  05D1  00C5               	movwf	??_Menu_Set_Param_Time_Limit+12
  6791  05D2  0844               	movf	??_Menu_Set_Param_Time_Limit+11,w
  6792  05D3  0084               	movwf	4
  6793  05D4  1783               	bsf	3,7
  6794  05D5  1C45               	btfss	??_Menu_Set_Param_Time_Limit+12,0
  6795  05D6  1383               	bcf	3,7
  6796  05D7  0843               	movf	??_Menu_Set_Param_Time_Limit+10,w
  6797  05D8  2E45               	goto	L6
  6798  05D9                     l7336:	
  6799  05D9  3003               	movlw	3
  6800  05DA  065B               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  6801  05DB  1D03               	btfss	3,2
  6802  05DC  2E46               	goto	l7342
  6803                           
  6804                           ;menu.c: 528:         {;menu.c: 529:             (menu->param1)=(menu->param1)-1;
  6805  05DD  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6806  05DE  3E06               	addlw	6
  6807  05DF  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6808  05E0  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6809  05E1  1803               	skipnc
  6810  05E2  3E01               	addlw	1
  6811  05E3  3E00               	addlw	0
  6812  05E4  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6813  05E5  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6814  05E6  0084               	movwf	4
  6815  05E7  1783               	bsf	3,7
  6816  05E8  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6817  05E9  1383               	bcf	3,7
  6818  05EA  0800               	movf	0,w
  6819  05EB  3EFF               	addlw	-1
  6820  05EC  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6821  05ED  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6822  05EE  3E06               	addlw	6
  6823  05EF  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6824  05F0  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6825  05F1  1803               	skipnc
  6826  05F2  3E01               	addlw	1
  6827  05F3  3E00               	addlw	0
  6828  05F4  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6829  05F5  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6830  05F6  0084               	movwf	4
  6831  05F7  1783               	bsf	3,7
  6832  05F8  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6833  05F9  1383               	bcf	3,7
  6834  05FA  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6835  05FB  0080               	movwf	0
  6836                           
  6837                           ;menu.c: 531:             if(menu->param1<(menu->min_limit1))
  6838  05FC  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6839  05FD  3E06               	addlw	6
  6840  05FE  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6841  05FF  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6842  0600  1803               	skipnc
  6843  0601  3E01               	addlw	1
  6844  0602  3E00               	addlw	0
  6845  0603  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6846  0604  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6847  0605  0084               	movwf	4
  6848  0606  1783               	bsf	3,7
  6849  0607  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6850  0608  1383               	bcf	3,7
  6851  0609  0800               	movf	0,w
  6852  060A  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6853  060B  01BC               	clrf	??_Menu_Set_Param_Time_Limit+3
  6854  060C  1BBB               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  6855  060D  03BC               	decf	??_Menu_Set_Param_Time_Limit+3,f
  6856  060E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6857  060F  3E04               	addlw	4
  6858  0610  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6859  0611  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6860  0612  1803               	skipnc
  6861  0613  3E01               	addlw	1
  6862  0614  3E00               	addlw	0
  6863  0615  00BE               	movwf	??_Menu_Set_Param_Time_Limit+5
  6864  0616  083D               	movf	??_Menu_Set_Param_Time_Limit+4,w
  6865  0617  0084               	movwf	4
  6866  0618  1783               	bsf	3,7
  6867  0619  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  6868  061A  1383               	bcf	3,7
  6869  061B  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6870  061C  3A80               	xorlw	128
  6871  061D  00BF               	movwf	??_Menu_Set_Param_Time_Limit+6
  6872  061E  3080               	movlw	128
  6873  061F  023F               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  6874  0620  1D03               	skipz
  6875  0621  2E24               	goto	u7625
  6876  0622  0800               	movf	0,w
  6877  0623  023B               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  6878  0624                     u7625:	
  6879  0624  1803               	skipnc
  6880  0625  2E46               	goto	l7342
  6881                           
  6882                           ;menu.c: 532:             {;menu.c: 533:                 (menu->param1)=(menu->max_limit
      +                          1);
  6883  0626  1283               	bcf	3,5	;RP0=0, select bank0
  6884  0627  1303               	bcf	3,6	;RP1=0, select bank0
  6885  0628  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6886  0629  3E01               	addlw	1
  6887  062A  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6888  062B  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6889  062C  1803               	skipnc
  6890  062D  3E01               	addlw	1
  6891  062E  3E00               	addlw	0
  6892  062F  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6893  0630  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6894  0631  0084               	movwf	4
  6895  0632  1783               	bsf	3,7
  6896  0633  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6897  0634  1383               	bcf	3,7
  6898  0635  0800               	movf	0,w
  6899  0636  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6900  0637  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6901  0638  3E06               	addlw	6
  6902  0639  00BC               	movwf	??_Menu_Set_Param_Time_Limit+3
  6903  063A  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6904  063B  1803               	skipnc
  6905  063C  3E01               	addlw	1
  6906  063D  3E00               	addlw	0
  6907  063E  00BD               	movwf	??_Menu_Set_Param_Time_Limit+4
  6908  063F  083C               	movf	??_Menu_Set_Param_Time_Limit+3,w
  6909  0640  0084               	movwf	4
  6910  0641  1783               	bsf	3,7
  6911  0642  1C3D               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  6912  0643  1383               	bcf	3,7
  6913  0644  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6914  0645                     L6:	
  6915  0645  0080               	movwf	0
  6916  0646                     l7342:	
  6917                           
  6918                           ;menu.c: 537:         g_display_text[0]=(menu->param)/10;
  6919  0646  300A               	movlw	10
  6920  0647  1283               	bcf	3,5	;RP0=0, select bank0
  6921  0648  1303               	bcf	3,6	;RP1=0, select bank0
  6922  0649  00AD               	movwf	___awdiv@divisor
  6923  064A  3000               	movlw	0
  6924  064B  00AE               	movwf	___awdiv@divisor+1
  6925  064C  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6926  064D  3E05               	addlw	5
  6927  064E  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6928  064F  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6929  0650  1803               	skipnc
  6930  0651  3E01               	addlw	1
  6931  0652  3E00               	addlw	0
  6932  0653  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6933  0654  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6934  0655  0084               	movwf	4
  6935  0656  1783               	bsf	3,7
  6936  0657  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6937  0658  1383               	bcf	3,7
  6938  0659  0800               	movf	0,w
  6939  065A  00AF               	movwf	___awdiv@dividend
  6940  065B  01B0               	clrf	___awdiv@dividend+1
  6941  065C  1BAF               	btfsc	___awdiv@dividend,7
  6942  065D  03B0               	decf	___awdiv@dividend+1,f
  6943  065E  160A  158A  2629  120A  118A  	fcall	___awdiv
  6944  0663  082D               	movf	?___awdiv,w
  6945  0664  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6946  0665  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6947  0666  1683               	bsf	3,5	;RP0=1, select bank1
  6948  0667  00CC               	movwf	_g_display_text^(0+128)
  6949                           
  6950                           ;menu.c: 538:         g_display_text[1]=(menu->param)%10;
  6951  0668  300A               	movlw	10
  6952  0669  1283               	bcf	3,5	;RP0=0, select bank0
  6953  066A  00A6               	movwf	___awmod@divisor
  6954  066B  3000               	movlw	0
  6955  066C  00A7               	movwf	___awmod@divisor+1
  6956  066D  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6957  066E  3E05               	addlw	5
  6958  066F  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6959  0670  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6960  0671  1803               	skipnc
  6961  0672  3E01               	addlw	1
  6962  0673  3E00               	addlw	0
  6963  0674  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6964  0675  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6965  0676  0084               	movwf	4
  6966  0677  1783               	bsf	3,7
  6967  0678  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6968  0679  1383               	bcf	3,7
  6969  067A  0800               	movf	0,w
  6970  067B  00A8               	movwf	___awmod@dividend
  6971  067C  01A9               	clrf	___awmod@dividend+1
  6972  067D  1BA8               	btfsc	___awmod@dividend,7
  6973  067E  03A9               	decf	___awmod@dividend+1,f
  6974  067F  160A  158A  253D  120A  118A  	fcall	___awmod
  6975  0684  0826               	movf	?___awmod,w
  6976  0685  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  6977  0686  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  6978  0687  1683               	bsf	3,5	;RP0=1, select bank1
  6979  0688  00CD               	movwf	(_g_display_text^(0+128)+1)
  6980                           
  6981                           ;menu.c: 539:         g_display_text[2]=(menu->param1)/10;
  6982  0689  300A               	movlw	10
  6983  068A  1283               	bcf	3,5	;RP0=0, select bank0
  6984  068B  00AD               	movwf	___awdiv@divisor
  6985  068C  3000               	movlw	0
  6986  068D  00AE               	movwf	___awdiv@divisor+1
  6987  068E  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  6988  068F  3E06               	addlw	6
  6989  0690  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  6990  0691  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  6991  0692  1803               	skipnc
  6992  0693  3E01               	addlw	1
  6993  0694  3E00               	addlw	0
  6994  0695  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  6995  0696  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  6996  0697  0084               	movwf	4
  6997  0698  1783               	bsf	3,7
  6998  0699  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  6999  069A  1383               	bcf	3,7
  7000  069B  0800               	movf	0,w
  7001  069C  00AF               	movwf	___awdiv@dividend
  7002  069D  01B0               	clrf	___awdiv@dividend+1
  7003  069E  1BAF               	btfsc	___awdiv@dividend,7
  7004  069F  03B0               	decf	___awdiv@dividend+1,f
  7005  06A0  160A  158A  2629  120A  118A  	fcall	___awdiv
  7006  06A5  082D               	movf	?___awdiv,w
  7007  06A6  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  7008  06A7  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  7009  06A8  1683               	bsf	3,5	;RP0=1, select bank1
  7010  06A9  00CE               	movwf	(_g_display_text^(0+128)+2)
  7011                           
  7012                           ;menu.c: 540:         g_display_text[3]=(menu->param1)%10;
  7013  06AA  300A               	movlw	10
  7014  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  7015  06AC  00A6               	movwf	___awmod@divisor
  7016  06AD  3000               	movlw	0
  7017  06AE  00A7               	movwf	___awmod@divisor+1
  7018  06AF  0836               	movf	Menu_Set_Param_Time_Limit@menu,w
  7019  06B0  3E06               	addlw	6
  7020  06B1  00B9               	movwf	??_Menu_Set_Param_Time_Limit
  7021  06B2  0837               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  7022  06B3  1803               	skipnc
  7023  06B4  3E01               	addlw	1
  7024  06B5  3E00               	addlw	0
  7025  06B6  00BA               	movwf	??_Menu_Set_Param_Time_Limit+1
  7026  06B7  0839               	movf	??_Menu_Set_Param_Time_Limit,w
  7027  06B8  0084               	movwf	4
  7028  06B9  1783               	bsf	3,7
  7029  06BA  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  7030  06BB  1383               	bcf	3,7
  7031  06BC  0800               	movf	0,w
  7032  06BD  00A8               	movwf	___awmod@dividend
  7033  06BE  01A9               	clrf	___awmod@dividend+1
  7034  06BF  1BA8               	btfsc	___awmod@dividend,7
  7035  06C0  03A9               	decf	___awmod@dividend+1,f
  7036  06C1  160A  158A  253D   	fcall	___awmod
  7037  06C4  0826               	movf	?___awmod,w
  7038  06C5  00BB               	movwf	??_Menu_Set_Param_Time_Limit+2
  7039  06C6  083B               	movf	??_Menu_Set_Param_Time_Limit+2,w
  7040  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  7041  06C8  00CF               	movwf	(_g_display_text^(0+128)+3)
  7042                           
  7043                           ;menu.c: 542:         g_generic_timer=7000;
  7044  06C9  3058               	movlw	88
  7045  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  7046  06CB  00D9               	movwf	_g_generic_timer	;volatile
  7047  06CC  301B               	movlw	27
  7048  06CD  00DA               	movwf	_g_generic_timer+1	;volatile
  7049  06CE  0008               	return
  7050  06CF                     __end_of_Menu_Set_Param_Time_Limit:	
  7051                           
  7052                           	psect	text13
  7053  19A6                     __ptext13:	
  7054 ;; *************** function ___lbmod *****************
  7055 ;; Defined at:
  7056 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;  dividend        1    wreg     unsigned char 
  7059 ;;  divisor         1    6[BANK0 ] unsigned char 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  dividend        1   10[BANK0 ] unsigned char 
  7062 ;;  rem             1   12[BANK0 ] unsigned char 
  7063 ;;  counter         1   11[BANK0 ] unsigned char 
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      unsigned char 
  7066 ;; Registers used:
  7067 ;;		wreg, status,2, status,0
  7068 ;; Tracked objects:
  7069 ;;		On entry : 300/0
  7070 ;;		On exit  : 300/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7073 ;;      Params:         0       1       0       0       0
  7074 ;;      Locals:         0       3       0       0       0
  7075 ;;      Temps:          0       3       0       0       0
  7076 ;;      Totals:         0       7       0       0       0
  7077 ;;Total ram usage:        7 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    4
  7080 ;; This function calls:
  7081 ;;		Nothing
  7082 ;; This function is called by:
  7083 ;;		_Menu_Set_Param_Time_Limit
  7084 ;;		_DEC_2_BCD
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           
  7089                           ;psect for function ___lbmod
  7090  19A6                     ___lbmod:	
  7091                           
  7092                           ;incstack = 0
  7093 ;; hardware stack exceeded
  7094                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  7095                           ;___lbmod@dividend stored from wreg
  7096  19A6  00AA               	movwf	___lbmod@dividend
  7097  19A7  3008               	movlw	8
  7098  19A8  00A7               	movwf	??___lbmod
  7099  19A9  0827               	movf	??___lbmod,w
  7100  19AA  00AB               	movwf	___lbmod@counter
  7101  19AB  01AC               	clrf	___lbmod@rem
  7102  19AC                     l6564:	
  7103  19AC  082A               	movf	___lbmod@dividend,w
  7104  19AD  00A7               	movwf	??___lbmod
  7105  19AE  3007               	movlw	7
  7106  19AF                     u6225:	
  7107  19AF  1003               	clrc
  7108  19B0  0CA7               	rrf	??___lbmod,f
  7109  19B1  3EFF               	addlw	-1
  7110  19B2  1D03               	skipz
  7111  19B3  29AF               	goto	u6225
  7112  19B4  082C               	movf	___lbmod@rem,w
  7113  19B5  00A8               	movwf	??___lbmod+1
  7114  19B6  0728               	addwf	??___lbmod+1,w
  7115  19B7  0427               	iorwf	??___lbmod,w
  7116  19B8  00A9               	movwf	??___lbmod+2
  7117  19B9  0829               	movf	??___lbmod+2,w
  7118  19BA  00AC               	movwf	___lbmod@rem
  7119  19BB  1003               	clrc
  7120  19BC  0DAA               	rlf	___lbmod@dividend,f
  7121  19BD  0826               	movf	___lbmod@divisor,w
  7122  19BE  022C               	subwf	___lbmod@rem,w
  7123  19BF  1C03               	skipc
  7124  19C0  29C3               	goto	l1172
  7125  19C1  0826               	movf	___lbmod@divisor,w
  7126  19C2  02AC               	subwf	___lbmod@rem,f
  7127  19C3                     l1172:	
  7128  19C3  3001               	movlw	1
  7129  19C4  02AB               	subwf	___lbmod@counter,f
  7130  19C5  1D03               	btfss	3,2
  7131  19C6  29AC               	goto	l6564
  7132  19C7  082C               	movf	___lbmod@rem,w
  7133  19C8  0008               	return
  7134  19C9                     __end_of___lbmod:	
  7135                           
  7136                           	psect	text14
  7137  1963                     __ptext14:	
  7138 ;; *************** function ___lbdiv *****************
  7139 ;; Defined at:
  7140 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;  dividend        1    wreg     unsigned char 
  7143 ;;  divisor         1    6[BANK0 ] unsigned char 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;  dividend        1    8[BANK0 ] unsigned char 
  7146 ;;  quotient        1   10[BANK0 ] unsigned char 
  7147 ;;  counter         1    9[BANK0 ] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      unsigned char 
  7150 ;; Registers used:
  7151 ;;		wreg, status,2, status,0
  7152 ;; Tracked objects:
  7153 ;;		On entry : 300/0
  7154 ;;		On exit  : 300/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7157 ;;      Params:         0       1       0       0       0
  7158 ;;      Locals:         0       3       0       0       0
  7159 ;;      Temps:          0       1       0       0       0
  7160 ;;      Totals:         0       5       0       0       0
  7161 ;;Total ram usage:        5 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    4
  7164 ;; This function calls:
  7165 ;;		Nothing
  7166 ;; This function is called by:
  7167 ;;		_Menu_Set_Param_Time_Limit
  7168 ;;		_DEC_2_BCD
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           
  7173                           ;psect for function ___lbdiv
  7174  1963                     ___lbdiv:	
  7175                           
  7176                           ;incstack = 0
  7177 ;; hardware stack exceeded
  7178                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  7179                           ;___lbdiv@dividend stored from wreg
  7180  1963  00A8               	movwf	___lbdiv@dividend
  7181  1964  01AA               	clrf	___lbdiv@quotient
  7182  1965  0826               	movf	___lbdiv@divisor,w
  7183  1966  1903               	btfsc	3,2
  7184  1967  2982               	goto	l6556
  7185  1968  01A9               	clrf	___lbdiv@counter
  7186  1969  0AA9               	incf	___lbdiv@counter,f
  7187  196A                     l6544:	
  7188  196A  1BA6               	btfsc	___lbdiv@divisor,7
  7189  196B  2973               	goto	l6546
  7190  196C  1003               	clrc
  7191  196D  0DA6               	rlf	___lbdiv@divisor,f
  7192  196E  3001               	movlw	1
  7193  196F  00A7               	movwf	??___lbdiv
  7194  1970  0827               	movf	??___lbdiv,w
  7195  1971  07A9               	addwf	___lbdiv@counter,f
  7196  1972  296A               	goto	l6544
  7197  1973                     l6546:	
  7198  1973  1003               	clrc
  7199  1974  0DAA               	rlf	___lbdiv@quotient,f
  7200  1975  0826               	movf	___lbdiv@divisor,w
  7201  1976  0228               	subwf	___lbdiv@dividend,w
  7202  1977  1C03               	skipc
  7203  1978  297D               	goto	L8
  7204  1979  0826               	movf	___lbdiv@divisor,w
  7205  197A  02A8               	subwf	___lbdiv@dividend,f
  7206  197B  142A               	bsf	___lbdiv@quotient,0
  7207  197C  1003               	clrc
  7208  197D                     L8:	
  7209  197D  0CA6               	rrf	___lbdiv@divisor,f
  7210  197E  3001               	movlw	1
  7211  197F  02A9               	subwf	___lbdiv@counter,f
  7212  1980  1D03               	btfss	3,2
  7213  1981  2973               	goto	l6546
  7214  1982                     l6556:	
  7215  1982  082A               	movf	___lbdiv@quotient,w
  7216  1983  0008               	return
  7217  1984                     __end_of___lbdiv:	
  7218                           
  7219                           	psect	text15
  7220  1D3D                     __ptext15:	
  7221 ;; *************** function ___awmod *****************
  7222 ;; Defined at:
  7223 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  divisor         2    6[BANK0 ] int 
  7226 ;;  dividend        2    8[BANK0 ] int 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  sign            1   12[BANK0 ] unsigned char 
  7229 ;;  counter         1   11[BANK0 ] unsigned char 
  7230 ;; Return value:  Size  Location     Type
  7231 ;;                  2    6[BANK0 ] int 
  7232 ;; Registers used:
  7233 ;;		wreg, status,2, status,0
  7234 ;; Tracked objects:
  7235 ;;		On entry : 300/800
  7236 ;;		On exit  : 300/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7239 ;;      Params:         0       4       0       0       0
  7240 ;;      Locals:         0       2       0       0       0
  7241 ;;      Temps:          0       1       0       0       0
  7242 ;;      Totals:         0       7       0       0       0
  7243 ;;Total ram usage:        7 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    4
  7246 ;; This function calls:
  7247 ;;		Nothing
  7248 ;; This function is called by:
  7249 ;;		_Show_Time
  7250 ;;		_Menu_Set_Time
  7251 ;;		_Menu_Set_Param_Time_Limit
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function ___awmod
  7257  1D3D                     ___awmod:	
  7258                           
  7259                           ;incstack = 0
  7260                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7261  1D3D  01AC               	clrf	___awmod@sign
  7262  1D3E  1FA9               	btfss	___awmod@dividend+1,7
  7263  1D3F  2D47               	goto	l6882
  7264  1D40  09A8               	comf	___awmod@dividend,f
  7265  1D41  09A9               	comf	___awmod@dividend+1,f
  7266  1D42  0AA8               	incf	___awmod@dividend,f
  7267  1D43  1903               	skipnz
  7268  1D44  0AA9               	incf	___awmod@dividend+1,f
  7269  1D45  01AC               	clrf	___awmod@sign
  7270  1D46  0AAC               	incf	___awmod@sign,f
  7271  1D47                     l6882:	
  7272  1D47  1FA7               	btfss	___awmod@divisor+1,7
  7273  1D48  2D4E               	goto	l6886
  7274  1D49  09A6               	comf	___awmod@divisor,f
  7275  1D4A  09A7               	comf	___awmod@divisor+1,f
  7276  1D4B  0AA6               	incf	___awmod@divisor,f
  7277  1D4C  1903               	skipnz
  7278  1D4D  0AA7               	incf	___awmod@divisor+1,f
  7279  1D4E                     l6886:	
  7280  1D4E  0826               	movf	___awmod@divisor,w
  7281  1D4F  0427               	iorwf	___awmod@divisor+1,w
  7282  1D50  1903               	btfsc	3,2
  7283  1D51  2D7B               	goto	l6904
  7284  1D52  01AB               	clrf	___awmod@counter
  7285  1D53  0AAB               	incf	___awmod@counter,f
  7286  1D54                     l6894:	
  7287  1D54  1BA7               	btfsc	___awmod@divisor+1,7
  7288  1D55  2D62               	goto	l6896
  7289  1D56  3001               	movlw	1
  7290  1D57                     u6805:	
  7291  1D57  1003               	clrc
  7292  1D58  0DA6               	rlf	___awmod@divisor,f
  7293  1D59  0DA7               	rlf	___awmod@divisor+1,f
  7294  1D5A  3EFF               	addlw	-1
  7295  1D5B  1D03               	skipz
  7296  1D5C  2D57               	goto	u6805
  7297  1D5D  3001               	movlw	1
  7298  1D5E  00AA               	movwf	??___awmod
  7299  1D5F  082A               	movf	??___awmod,w
  7300  1D60  07AB               	addwf	___awmod@counter,f
  7301  1D61  2D54               	goto	l6894
  7302  1D62                     l6896:	
  7303  1D62  0827               	movf	___awmod@divisor+1,w
  7304  1D63  0229               	subwf	___awmod@dividend+1,w
  7305  1D64  1D03               	skipz
  7306  1D65  2D68               	goto	u6825
  7307  1D66  0826               	movf	___awmod@divisor,w
  7308  1D67  0228               	subwf	___awmod@dividend,w
  7309  1D68                     u6825:	
  7310  1D68  1C03               	skipc
  7311  1D69  2D70               	goto	l6900
  7312  1D6A  0826               	movf	___awmod@divisor,w
  7313  1D6B  02A8               	subwf	___awmod@dividend,f
  7314  1D6C  0827               	movf	___awmod@divisor+1,w
  7315  1D6D  1C03               	skipc
  7316  1D6E  03A9               	decf	___awmod@dividend+1,f
  7317  1D6F  02A9               	subwf	___awmod@dividend+1,f
  7318  1D70                     l6900:	
  7319  1D70  3001               	movlw	1
  7320  1D71                     u6835:	
  7321  1D71  1003               	clrc
  7322  1D72  0CA7               	rrf	___awmod@divisor+1,f
  7323  1D73  0CA6               	rrf	___awmod@divisor,f
  7324  1D74  3EFF               	addlw	-1
  7325  1D75  1D03               	skipz
  7326  1D76  2D71               	goto	u6835
  7327  1D77  3001               	movlw	1
  7328  1D78  02AB               	subwf	___awmod@counter,f
  7329  1D79  1D03               	btfss	3,2
  7330  1D7A  2D62               	goto	l6896
  7331  1D7B                     l6904:	
  7332  1D7B  082C               	movf	___awmod@sign,w
  7333  1D7C  1903               	btfsc	3,2
  7334  1D7D  2D83               	goto	l6908
  7335  1D7E  09A8               	comf	___awmod@dividend,f
  7336  1D7F  09A9               	comf	___awmod@dividend+1,f
  7337  1D80  0AA8               	incf	___awmod@dividend,f
  7338  1D81  1903               	skipnz
  7339  1D82  0AA9               	incf	___awmod@dividend+1,f
  7340  1D83                     l6908:	
  7341  1D83  0829               	movf	___awmod@dividend+1,w
  7342  1D84  00A7               	movwf	?___awmod+1
  7343  1D85  0828               	movf	___awmod@dividend,w
  7344  1D86  00A6               	movwf	?___awmod
  7345  1D87  0008               	return
  7346  1D88                     __end_of___awmod:	
  7347                           
  7348                           	psect	text16
  7349  1E29                     __ptext16:	
  7350 ;; *************** function ___awdiv *****************
  7351 ;; Defined at:
  7352 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  divisor         2   13[BANK0 ] int 
  7355 ;;  dividend        2   15[BANK0 ] int 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  quotient        2   20[BANK0 ] int 
  7358 ;;  sign            1   19[BANK0 ] unsigned char 
  7359 ;;  counter         1   18[BANK0 ] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  2   13[BANK0 ] int 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 300/800
  7366 ;;		On exit  : 300/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7369 ;;      Params:         0       4       0       0       0
  7370 ;;      Locals:         0       4       0       0       0
  7371 ;;      Temps:          0       1       0       0       0
  7372 ;;      Totals:         0       9       0       0       0
  7373 ;;Total ram usage:        9 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    4
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_Show_Time
  7380 ;;		_Menu_Set_Time
  7381 ;;		_Menu_Set_Param_Time_Limit
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           
  7386                           ;psect for function ___awdiv
  7387  1E29                     ___awdiv:	
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7391  1E29  01B3               	clrf	___awdiv@sign
  7392  1E2A  1FAE               	btfss	___awdiv@divisor+1,7
  7393  1E2B  2E33               	goto	l6838
  7394  1E2C  09AD               	comf	___awdiv@divisor,f
  7395  1E2D  09AE               	comf	___awdiv@divisor+1,f
  7396  1E2E  0AAD               	incf	___awdiv@divisor,f
  7397  1E2F  1903               	skipnz
  7398  1E30  0AAE               	incf	___awdiv@divisor+1,f
  7399  1E31  01B3               	clrf	___awdiv@sign
  7400  1E32  0AB3               	incf	___awdiv@sign,f
  7401  1E33                     l6838:	
  7402  1E33  1FB0               	btfss	___awdiv@dividend+1,7
  7403  1E34  2E3E               	goto	l6844
  7404  1E35  09AF               	comf	___awdiv@dividend,f
  7405  1E36  09B0               	comf	___awdiv@dividend+1,f
  7406  1E37  0AAF               	incf	___awdiv@dividend,f
  7407  1E38  1903               	skipnz
  7408  1E39  0AB0               	incf	___awdiv@dividend+1,f
  7409  1E3A  3001               	movlw	1
  7410  1E3B  00B1               	movwf	??___awdiv
  7411  1E3C  0831               	movf	??___awdiv,w
  7412  1E3D  06B3               	xorwf	___awdiv@sign,f
  7413  1E3E                     l6844:	
  7414  1E3E  01B4               	clrf	___awdiv@quotient
  7415  1E3F  01B5               	clrf	___awdiv@quotient+1
  7416  1E40  082D               	movf	___awdiv@divisor,w
  7417  1E41  042E               	iorwf	___awdiv@divisor+1,w
  7418  1E42  1903               	btfsc	3,2
  7419  1E43  2E75               	goto	l6866
  7420  1E44  01B2               	clrf	___awdiv@counter
  7421  1E45  0AB2               	incf	___awdiv@counter,f
  7422  1E46                     l6854:	
  7423  1E46  1BAE               	btfsc	___awdiv@divisor+1,7
  7424  1E47  2E54               	goto	l6856
  7425  1E48  3001               	movlw	1
  7426  1E49                     u6705:	
  7427  1E49  1003               	clrc
  7428  1E4A  0DAD               	rlf	___awdiv@divisor,f
  7429  1E4B  0DAE               	rlf	___awdiv@divisor+1,f
  7430  1E4C  3EFF               	addlw	-1
  7431  1E4D  1D03               	skipz
  7432  1E4E  2E49               	goto	u6705
  7433  1E4F  3001               	movlw	1
  7434  1E50  00B1               	movwf	??___awdiv
  7435  1E51  0831               	movf	??___awdiv,w
  7436  1E52  07B2               	addwf	___awdiv@counter,f
  7437  1E53  2E46               	goto	l6854
  7438  1E54                     l6856:	
  7439  1E54  3001               	movlw	1
  7440  1E55                     u6725:	
  7441  1E55  1003               	clrc
  7442  1E56  0DB4               	rlf	___awdiv@quotient,f
  7443  1E57  0DB5               	rlf	___awdiv@quotient+1,f
  7444  1E58  3EFF               	addlw	-1
  7445  1E59  1D03               	skipz
  7446  1E5A  2E55               	goto	u6725
  7447  1E5B  082E               	movf	___awdiv@divisor+1,w
  7448  1E5C  0230               	subwf	___awdiv@dividend+1,w
  7449  1E5D  1D03               	skipz
  7450  1E5E  2E61               	goto	u6735
  7451  1E5F  082D               	movf	___awdiv@divisor,w
  7452  1E60  022F               	subwf	___awdiv@dividend,w
  7453  1E61                     u6735:	
  7454  1E61  1C03               	skipc
  7455  1E62  2E6A               	goto	l6862
  7456  1E63  082D               	movf	___awdiv@divisor,w
  7457  1E64  02AF               	subwf	___awdiv@dividend,f
  7458  1E65  082E               	movf	___awdiv@divisor+1,w
  7459  1E66  1C03               	skipc
  7460  1E67  03B0               	decf	___awdiv@dividend+1,f
  7461  1E68  02B0               	subwf	___awdiv@dividend+1,f
  7462  1E69  1434               	bsf	___awdiv@quotient,0
  7463  1E6A                     l6862:	
  7464  1E6A  3001               	movlw	1
  7465  1E6B                     u6745:	
  7466  1E6B  1003               	clrc
  7467  1E6C  0CAE               	rrf	___awdiv@divisor+1,f
  7468  1E6D  0CAD               	rrf	___awdiv@divisor,f
  7469  1E6E  3EFF               	addlw	-1
  7470  1E6F  1D03               	skipz
  7471  1E70  2E6B               	goto	u6745
  7472  1E71  3001               	movlw	1
  7473  1E72  02B2               	subwf	___awdiv@counter,f
  7474  1E73  1D03               	btfss	3,2
  7475  1E74  2E54               	goto	l6856
  7476  1E75                     l6866:	
  7477  1E75  0833               	movf	___awdiv@sign,w
  7478  1E76  1903               	btfsc	3,2
  7479  1E77  2E7D               	goto	l6870
  7480  1E78  09B4               	comf	___awdiv@quotient,f
  7481  1E79  09B5               	comf	___awdiv@quotient+1,f
  7482  1E7A  0AB4               	incf	___awdiv@quotient,f
  7483  1E7B  1903               	skipnz
  7484  1E7C  0AB5               	incf	___awdiv@quotient+1,f
  7485  1E7D                     l6870:	
  7486  1E7D  0835               	movf	___awdiv@quotient+1,w
  7487  1E7E  00AE               	movwf	?___awdiv+1
  7488  1E7F  0834               	movf	___awdiv@quotient,w
  7489  1E80  00AD               	movwf	?___awdiv
  7490  1E81  0008               	return
  7491  1E82                     __end_of___awdiv:	
  7492                           
  7493                           	psect	text17
  7494  1E82                     __ptext17:	
  7495 ;; *************** function _Is_Valid_Date *****************
  7496 ;; Defined at:
  7497 ;;		line 201 in file "menu.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  d               1    wreg     unsigned char 
  7500 ;;  m               1   29[BANK0 ] unsigned char 
  7501 ;;  y               2   30[BANK0 ] unsigned int 
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  d               1   32[BANK0 ] unsigned char 
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      unsigned char 
  7506 ;; Registers used:
  7507 ;;		wreg, status,2, status,0, pclath, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 300/900
  7510 ;;		On exit  : 300/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7513 ;;      Params:         0       3       0       0       0
  7514 ;;      Locals:         0       1       0       0       0
  7515 ;;      Temps:          0       0       0       0       0
  7516 ;;      Totals:         0       4       0       0       0
  7517 ;;Total ram usage:        4 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    6
  7520 ;; This function calls:
  7521 ;;		_Is_Leap
  7522 ;; This function is called by:
  7523 ;;		_Menu_Set_Time
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           
  7528                           ;psect for function _Is_Valid_Date
  7529  1E82                     _Is_Valid_Date:	
  7530                           
  7531                           ;incstack = 0
  7532 ;; hardware stack exceeded
  7533                           ; Regs used in _Is_Valid_Date: [wreg+status,2+status,0+pclath+cstack]
  7534                           ;Is_Valid_Date@d stored from wreg
  7535  1E82  1283               	bcf	3,5	;RP0=0, select bank0
  7536  1E83  00C0               	movwf	Is_Valid_Date@d
  7537                           
  7538                           ;menu.c: 201: unsigned char Is_Valid_Date(unsigned char d, unsigned char m, unsigned int
      +                           y);menu.c: 202: {;menu.c: 204:     const unsigned int k_max_valid_year = 2999;;menu.c: 
      +                          205:     const unsigned int k_min_valid_year = 2000;;menu.c: 208:     if (y>k_max_valid_
      +                          year || y<k_min_valid_year)
  7539  1E84  300B               	movlw	11
  7540  1E85  023F               	subwf	Is_Valid_Date@y+1,w
  7541  1E86  30B8               	movlw	184
  7542  1E87  1903               	skipnz
  7543  1E88  023E               	subwf	Is_Valid_Date@y,w
  7544  1E89  1803               	skipnc
  7545  1E8A  2E92               	goto	l7168
  7546  1E8B  3007               	movlw	7
  7547  1E8C  023F               	subwf	Is_Valid_Date@y+1,w
  7548  1E8D  30D0               	movlw	208
  7549  1E8E  1903               	skipnz
  7550  1E8F  023E               	subwf	Is_Valid_Date@y,w
  7551  1E90  1803               	skipnc
  7552  1E91  2E94               	goto	l7172
  7553  1E92                     l7168:	
  7554                           
  7555                           ;menu.c: 209:     {;menu.c: 210:         return 0;
  7556  1E92  3000               	movlw	0
  7557  1E93  0008               	return
  7558  1E94                     l7172:	
  7559                           
  7560                           ;menu.c: 212:     if (m<1 || m>12)
  7561  1E94  083D               	movf	Is_Valid_Date@m,w
  7562  1E95  1903               	btfsc	3,2
  7563  1E96  2E92               	goto	l7168
  7564  1E97  300D               	movlw	13
  7565  1E98  023D               	subwf	Is_Valid_Date@m,w
  7566  1E99  1803               	btfsc	3,0
  7567  1E9A  2E92               	goto	l7168
  7568                           
  7569                           ;menu.c: 216:     if (d<1 || d>31)
  7570  1E9B  0840               	movf	Is_Valid_Date@d,w
  7571  1E9C  1903               	btfsc	3,2
  7572  1E9D  2E92               	goto	l7168
  7573  1E9E  3020               	movlw	32
  7574  1E9F  0240               	subwf	Is_Valid_Date@d,w
  7575  1EA0  1803               	btfsc	3,0
  7576  1EA1  2E92               	goto	l7168
  7577                           
  7578                           ;menu.c: 222:     if (m==2)
  7579  1EA2  3002               	movlw	2
  7580  1EA3  063D               	xorwf	Is_Valid_Date@m,w
  7581  1EA4  1D03               	btfss	3,2
  7582  1EA5  2EC2               	goto	l7202
  7583                           
  7584                           ;menu.c: 223:     {;menu.c: 224:         if (Is_Leap(y))
  7585  1EA6  083F               	movf	Is_Valid_Date@y+1,w
  7586  1EA7  00BB               	movwf	Is_Leap@year+1
  7587  1EA8  083E               	movf	Is_Valid_Date@y,w
  7588  1EA9  00BA               	movwf	Is_Leap@year
  7589  1EAA  160A  158A  21F1  160A  158A  	fcall	_Is_Leap
  7590  1EAF  3A00               	xorlw	0
  7591  1EB0  1903               	skipnz
  7592  1EB1  2EBA               	goto	l7198
  7593                           
  7594                           ;menu.c: 225:         {;menu.c: 226:             return (d<=29);
  7595  1EB2  301E               	movlw	30
  7596  1EB3  0240               	subwf	Is_Valid_Date@d,w
  7597  1EB4  1803               	btfsc	3,0
  7598  1EB5  2EB8               	goto	u7250
  7599  1EB6  3001               	movlw	1
  7600  1EB7  0008               	return
  7601  1EB8                     u7250:	
  7602  1EB8  3000               	movlw	0
  7603  1EB9  0008               	return
  7604  1EBA                     l7198:	
  7605                           
  7606                           ;menu.c: 228:         {;menu.c: 229:             return (d<=28);
  7607  1EBA  301D               	movlw	29
  7608  1EBB  0240               	subwf	Is_Valid_Date@d,w
  7609  1EBC  1803               	btfsc	3,0
  7610  1EBD  2EC0               	goto	u7270
  7611  1EBE  3001               	movlw	1
  7612  1EBF  0008               	return
  7613  1EC0                     u7270:	
  7614  1EC0  3000               	movlw	0
  7615  1EC1  0008               	return
  7616  1EC2                     l7202:	
  7617                           
  7618                           ;menu.c: 235:     if (m==4 || m==6 || m==9 || m==11)
  7619  1EC2  3004               	movlw	4
  7620  1EC3  063D               	xorwf	Is_Valid_Date@m,w
  7621  1EC4  1903               	btfsc	3,2
  7622  1EC5  2ED2               	goto	l7210
  7623  1EC6  3006               	movlw	6
  7624  1EC7  063D               	xorwf	Is_Valid_Date@m,w
  7625  1EC8  1903               	btfsc	3,2
  7626  1EC9  2ED2               	goto	l7210
  7627  1ECA  3009               	movlw	9
  7628  1ECB  063D               	xorwf	Is_Valid_Date@m,w
  7629  1ECC  1903               	btfsc	3,2
  7630  1ECD  2ED2               	goto	l7210
  7631  1ECE  300B               	movlw	11
  7632  1ECF  063D               	xorwf	Is_Valid_Date@m,w
  7633  1ED0  1D03               	btfss	3,2
  7634  1ED1  2EDA               	goto	l7214
  7635  1ED2                     l7210:	
  7636                           
  7637                           ;menu.c: 236:     {;menu.c: 237:         return (d<=30);
  7638  1ED2  301F               	movlw	31
  7639  1ED3  0240               	subwf	Is_Valid_Date@d,w
  7640  1ED4  1803               	btfsc	3,0
  7641  1ED5  2ED8               	goto	u7330
  7642  1ED6  3001               	movlw	1
  7643  1ED7  0008               	return
  7644  1ED8                     u7330:	
  7645  1ED8  3000               	movlw	0
  7646  1ED9  0008               	return
  7647  1EDA                     l7214:	
  7648                           
  7649                           ;menu.c: 240:     return 1;
  7650  1EDA  3001               	movlw	1
  7651  1EDB  0008               	return
  7652  1EDC                     __end_of_Is_Valid_Date:	
  7653                           
  7654                           	psect	text18
  7655  19F1                     __ptext18:	
  7656 ;; *************** function _Is_Leap *****************
  7657 ;; Defined at:
  7658 ;;		line 188 in file "menu.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  year            2   26[BANK0 ] unsigned int 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;		None
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      unsigned char 
  7665 ;; Registers used:
  7666 ;;		wreg, status,2, status,0, pclath, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 300/800
  7669 ;;		On exit  : 300/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7672 ;;      Params:         0       2       0       0       0
  7673 ;;      Locals:         0       1       0       0       0
  7674 ;;      Temps:          0       0       0       0       0
  7675 ;;      Totals:         0       3       0       0       0
  7676 ;;Total ram usage:        3 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    5
  7679 ;; This function calls:
  7680 ;;		___lwmod
  7681 ;; This function is called by:
  7682 ;;		_Is_Valid_Date
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           
  7687                           ;psect for function _Is_Leap
  7688  19F1                     _Is_Leap:	
  7689                           
  7690                           ;menu.c: 188: unsigned char Is_Leap(unsigned int year);menu.c: 189: {;menu.c: 190:     r
      +                          eturn (((year%4==0) && (year%100!=0)) || (year%400==0));
  7691                           
  7692                           ;incstack = 0
  7693 ;; hardware stack exceeded
  7694                           ; Regs used in _Is_Leap: [wreg+status,2+status,0+pclath+cstack]
  7695  19F1  01BC               	clrf	_Is_Leap$1446
  7696  19F2  0ABC               	incf	_Is_Leap$1446,f
  7697  19F3  083A               	movf	Is_Leap@year,w
  7698  19F4  3903               	andlw	3
  7699  19F5  1D03               	btfss	3,2
  7700  19F6  2A08               	goto	l6756
  7701  19F7  3064               	movlw	100
  7702  19F8  00B4               	movwf	___lwmod@divisor
  7703  19F9  3000               	movlw	0
  7704  19FA  00B5               	movwf	___lwmod@divisor+1
  7705  19FB  083B               	movf	Is_Leap@year+1,w
  7706  19FC  00B7               	movwf	___lwmod@dividend+1
  7707  19FD  083A               	movf	Is_Leap@year,w
  7708  19FE  00B6               	movwf	___lwmod@dividend
  7709  19FF  160A  158A  229E  160A  158A  	fcall	___lwmod
  7710  1A04  0834               	movf	?___lwmod,w
  7711  1A05  0435               	iorwf	?___lwmod+1,w
  7712  1A06  1D03               	btfss	3,2
  7713  1A07  2A17               	goto	l6760
  7714  1A08                     l6756:	
  7715  1A08  3090               	movlw	144
  7716  1A09  00B4               	movwf	___lwmod@divisor
  7717  1A0A  3001               	movlw	1
  7718  1A0B  00B5               	movwf	___lwmod@divisor+1
  7719  1A0C  083B               	movf	Is_Leap@year+1,w
  7720  1A0D  00B7               	movwf	___lwmod@dividend+1
  7721  1A0E  083A               	movf	Is_Leap@year,w
  7722  1A0F  00B6               	movwf	___lwmod@dividend
  7723  1A10  160A  158A  229E   	fcall	___lwmod
  7724  1A13  0834               	movf	?___lwmod,w
  7725  1A14  0435               	iorwf	?___lwmod+1,w
  7726  1A15  1D03               	btfss	3,2
  7727  1A16  01BC               	clrf	_Is_Leap$1446
  7728  1A17                     l6760:	
  7729  1A17  083C               	movf	_Is_Leap$1446,w
  7730  1A18  0008               	return
  7731  1A19                     __end_of_Is_Leap:	
  7732                           
  7733                           	psect	text19
  7734  1458                     __ptext19:	
  7735 ;; *************** function _Find_Weekday *****************
  7736 ;; Defined at:
  7737 ;;		line 251 in file "menu.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;  year            2   26[BANK0 ] unsigned int 
  7740 ;;  month           2   28[BANK0 ] unsigned int 
  7741 ;;  day             2   30[BANK0 ] unsigned int 
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  wday            1   43[BANK0 ] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      unsigned char 
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0, pclath, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 300/800
  7750 ;;		On exit  : 300/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7753 ;;      Params:         0       6       0       0       0
  7754 ;;      Locals:         0       1       0       0       0
  7755 ;;      Temps:          0      11       0       0       0
  7756 ;;      Totals:         0      18       0       0       0
  7757 ;;Total ram usage:       18 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    5
  7760 ;; This function calls:
  7761 ;;		___lwdiv
  7762 ;;		___lwmod
  7763 ;;		___wmul
  7764 ;; This function is called by:
  7765 ;;		_Menu_Set_Time
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           
  7770                           ;psect for function _Find_Weekday
  7771  1458                     _Find_Weekday:	
  7772                           
  7773                           ;menu.c: 254:     wday=(day += month < 3 ? year-- : year - 2, 23*month/9 + day + 4 +
  7774                           
  7775                           ;incstack = 0
  7776                           ; Regs used in _Find_Weekday: [wreg+status,2+status,0+pclath+cstack]
  7777  1458  3000               	movlw	0
  7778  1459  023D               	subwf	Find_Weekday@month+1,w
  7779  145A  3003               	movlw	3
  7780  145B  1903               	skipnz
  7781  145C  023C               	subwf	Find_Weekday@month,w
  7782  145D  1C03               	skipc
  7783  145E  2C6E               	goto	l7224
  7784  145F  083A               	movf	Find_Weekday@year,w
  7785  1460  3EFE               	addlw	254
  7786  1461  00C0               	movwf	??_Find_Weekday
  7787  1462  083B               	movf	Find_Weekday@year+1,w
  7788  1463  1803               	skipnc
  7789  1464  3E01               	addlw	1
  7790  1465  3EFF               	addlw	255
  7791  1466  00C1               	movwf	??_Find_Weekday+1
  7792  1467  0840               	movf	??_Find_Weekday,w
  7793  1468  07BE               	addwf	Find_Weekday@day,f
  7794  1469  1803               	skipnc
  7795  146A  0ABF               	incf	Find_Weekday@day+1,f
  7796  146B  0841               	movf	??_Find_Weekday+1,w
  7797  146C  07BF               	addwf	Find_Weekday@day+1,f
  7798  146D  2C7A               	goto	l7226
  7799  146E                     l7224:	
  7800  146E  083A               	movf	Find_Weekday@year,w
  7801  146F  07BE               	addwf	Find_Weekday@day,f
  7802  1470  1803               	skipnc
  7803  1471  0ABF               	incf	Find_Weekday@day+1,f
  7804  1472  083B               	movf	Find_Weekday@year+1,w
  7805  1473  07BF               	addwf	Find_Weekday@day+1,f
  7806  1474  3001               	movlw	1
  7807  1475  02BA               	subwf	Find_Weekday@year,f
  7808  1476  3000               	movlw	0
  7809  1477  1C03               	skipc
  7810  1478  03BB               	decf	Find_Weekday@year+1,f
  7811  1479  02BB               	subwf	Find_Weekday@year+1,f
  7812  147A                     l7226:	
  7813  147A  3007               	movlw	7
  7814  147B  00B4               	movwf	___lwmod@divisor
  7815  147C  3000               	movlw	0
  7816  147D  00B5               	movwf	___lwmod@divisor+1
  7817  147E  083B               	movf	Find_Weekday@year+1,w
  7818  147F  00C1               	movwf	??_Find_Weekday+1
  7819  1480  083A               	movf	Find_Weekday@year,w
  7820  1481  00C0               	movwf	??_Find_Weekday
  7821  1482  1003               	clrc
  7822  1483  0CC1               	rrf	??_Find_Weekday+1,f
  7823  1484  0CC0               	rrf	??_Find_Weekday,f
  7824  1485  1003               	clrc
  7825  1486  0CC1               	rrf	??_Find_Weekday+1,f
  7826  1487  0CC0               	rrf	??_Find_Weekday,f
  7827  1488  3009               	movlw	9
  7828  1489  00AC               	movwf	___lwdiv@divisor
  7829  148A  3000               	movlw	0
  7830  148B  00AD               	movwf	___lwdiv@divisor+1
  7831  148C  083D               	movf	Find_Weekday@month+1,w
  7832  148D  00A7               	movwf	___wmul@multiplier+1
  7833  148E  083C               	movf	Find_Weekday@month,w
  7834  148F  00A6               	movwf	___wmul@multiplier
  7835  1490  3017               	movlw	23
  7836  1491  00A8               	movwf	___wmul@multiplicand
  7837  1492  3000               	movlw	0
  7838  1493  00A9               	movwf	___wmul@multiplicand+1
  7839  1494  160A  158A  2142  160A  118A  	fcall	___wmul
  7840  1499  0827               	movf	?___wmul+1,w
  7841  149A  00AF               	movwf	___lwdiv@dividend+1
  7842  149B  0826               	movf	?___wmul,w
  7843  149C  00AE               	movwf	___lwdiv@dividend
  7844  149D  160A  158A  23AF  160A  118A  	fcall	___lwdiv
  7845  14A2  0840               	movf	??_Find_Weekday,w
  7846  14A3  072C               	addwf	?___lwdiv,w
  7847  14A4  00C2               	movwf	??_Find_Weekday+2
  7848  14A5  0841               	movf	??_Find_Weekday+1,w
  7849  14A6  1803               	skipnc
  7850  14A7  0A41               	incf	??_Find_Weekday+1,w
  7851  14A8  072D               	addwf	?___lwdiv+1,w
  7852  14A9  00C3               	movwf	??_Find_Weekday+3
  7853  14AA  3090               	movlw	144
  7854  14AB  00AC               	movwf	___lwdiv@divisor
  7855  14AC  3001               	movlw	1
  7856  14AD  00AD               	movwf	___lwdiv@divisor+1
  7857  14AE  083B               	movf	Find_Weekday@year+1,w
  7858  14AF  00AF               	movwf	___lwdiv@dividend+1
  7859  14B0  083A               	movf	Find_Weekday@year,w
  7860  14B1  00AE               	movwf	___lwdiv@dividend
  7861  14B2  160A  158A  23AF  160A  118A  	fcall	___lwdiv
  7862  14B7  082C               	movf	?___lwdiv,w
  7863  14B8  0742               	addwf	??_Find_Weekday+2,w
  7864  14B9  00C4               	movwf	??_Find_Weekday+4
  7865  14BA  082D               	movf	?___lwdiv+1,w
  7866  14BB  1803               	skipnc
  7867  14BC  0A2D               	incf	?___lwdiv+1,w
  7868  14BD  0743               	addwf	??_Find_Weekday+3,w
  7869  14BE  00C5               	movwf	??_Find_Weekday+5
  7870  14BF  3064               	movlw	100
  7871  14C0  00AC               	movwf	___lwdiv@divisor
  7872  14C1  3000               	movlw	0
  7873  14C2  00AD               	movwf	___lwdiv@divisor+1
  7874  14C3  083B               	movf	Find_Weekday@year+1,w
  7875  14C4  00AF               	movwf	___lwdiv@dividend+1
  7876  14C5  083A               	movf	Find_Weekday@year,w
  7877  14C6  00AE               	movwf	___lwdiv@dividend
  7878  14C7  160A  158A  23AF  160A  118A  	fcall	___lwdiv
  7879  14CC  082C               	movf	?___lwdiv,w
  7880  14CD  0244               	subwf	??_Find_Weekday+4,w
  7881  14CE  00C6               	movwf	??_Find_Weekday+6
  7882  14CF  082D               	movf	?___lwdiv+1,w
  7883  14D0  1C03               	skipc
  7884  14D1  0A2D               	incf	?___lwdiv+1,w
  7885  14D2  0245               	subwf	??_Find_Weekday+5,w
  7886  14D3  00C7               	movwf	??_Find_Weekday+7
  7887  14D4  083E               	movf	Find_Weekday@day,w
  7888  14D5  0746               	addwf	??_Find_Weekday+6,w
  7889  14D6  00C8               	movwf	??_Find_Weekday+8
  7890  14D7  083F               	movf	Find_Weekday@day+1,w
  7891  14D8  1803               	skipnc
  7892  14D9  0A3F               	incf	Find_Weekday@day+1,w
  7893  14DA  0747               	addwf	??_Find_Weekday+7,w
  7894  14DB  00C9               	movwf	??_Find_Weekday+9
  7895  14DC  0848               	movf	??_Find_Weekday+8,w
  7896  14DD  3E04               	addlw	4
  7897  14DE  00B6               	movwf	___lwmod@dividend
  7898  14DF  0849               	movf	??_Find_Weekday+9,w
  7899  14E0  1803               	skipnc
  7900  14E1  3E01               	addlw	1
  7901  14E2  3E00               	addlw	0
  7902  14E3  00B7               	movwf	___lwmod@dividend+1
  7903  14E4  160A  158A  229E   	fcall	___lwmod
  7904  14E7  0834               	movf	?___lwmod,w
  7905  14E8  3EFF               	addlw	255
  7906  14E9  00CA               	movwf	??_Find_Weekday+10
  7907  14EA  084A               	movf	??_Find_Weekday+10,w
  7908  14EB  00CB               	movwf	Find_Weekday@wday
  7909                           
  7910                           ;menu.c: 257:     return wday;
  7911  14EC  084B               	movf	Find_Weekday@wday,w
  7912  14ED  0008               	return
  7913  14EE                     __end_of_Find_Weekday:	
  7914                           
  7915                           	psect	text20
  7916  1A9E                     __ptext20:	
  7917 ;; *************** function ___lwmod *****************
  7918 ;; Defined at:
  7919 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  divisor         2   20[BANK0 ] unsigned int 
  7922 ;;  dividend        2   22[BANK0 ] unsigned int 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  counter         1   25[BANK0 ] unsigned char 
  7925 ;; Return value:  Size  Location     Type
  7926 ;;                  2   20[BANK0 ] unsigned int 
  7927 ;; Registers used:
  7928 ;;		wreg, status,2, status,0
  7929 ;; Tracked objects:
  7930 ;;		On entry : 300/800
  7931 ;;		On exit  : 300/0
  7932 ;;		Unchanged: 0/0
  7933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7934 ;;      Params:         0       4       0       0       0
  7935 ;;      Locals:         0       1       0       0       0
  7936 ;;      Temps:          0       1       0       0       0
  7937 ;;      Totals:         0       6       0       0       0
  7938 ;;Total ram usage:        6 bytes
  7939 ;; Hardware stack levels used:    1
  7940 ;; Hardware stack levels required when called:    4
  7941 ;; This function calls:
  7942 ;;		Nothing
  7943 ;; This function is called by:
  7944 ;;		_Is_Leap
  7945 ;;		_Find_Weekday
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           
  7950                           ;psect for function ___lwmod
  7951  1A9E                     ___lwmod:	
  7952                           
  7953                           ;incstack = 0
  7954 ;; hardware stack exceeded
  7955                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7956  1A9E  0834               	movf	___lwmod@divisor,w
  7957  1A9F  0435               	iorwf	___lwmod@divisor+1,w
  7958  1AA0  1903               	btfsc	3,2
  7959  1AA1  2ACB               	goto	l6594
  7960  1AA2  01B9               	clrf	___lwmod@counter
  7961  1AA3  0AB9               	incf	___lwmod@counter,f
  7962  1AA4                     l6584:	
  7963  1AA4  1BB5               	btfsc	___lwmod@divisor+1,7
  7964  1AA5  2AB2               	goto	l6586
  7965  1AA6  3001               	movlw	1
  7966  1AA7                     u6265:	
  7967  1AA7  1003               	clrc
  7968  1AA8  0DB4               	rlf	___lwmod@divisor,f
  7969  1AA9  0DB5               	rlf	___lwmod@divisor+1,f
  7970  1AAA  3EFF               	addlw	-1
  7971  1AAB  1D03               	skipz
  7972  1AAC  2AA7               	goto	u6265
  7973  1AAD  3001               	movlw	1
  7974  1AAE  00B8               	movwf	??___lwmod
  7975  1AAF  0838               	movf	??___lwmod,w
  7976  1AB0  07B9               	addwf	___lwmod@counter,f
  7977  1AB1  2AA4               	goto	l6584
  7978  1AB2                     l6586:	
  7979  1AB2  0835               	movf	___lwmod@divisor+1,w
  7980  1AB3  0237               	subwf	___lwmod@dividend+1,w
  7981  1AB4  1D03               	skipz
  7982  1AB5  2AB8               	goto	u6285
  7983  1AB6  0834               	movf	___lwmod@divisor,w
  7984  1AB7  0236               	subwf	___lwmod@dividend,w
  7985  1AB8                     u6285:	
  7986  1AB8  1C03               	skipc
  7987  1AB9  2AC0               	goto	l6590
  7988  1ABA  0834               	movf	___lwmod@divisor,w
  7989  1ABB  02B6               	subwf	___lwmod@dividend,f
  7990  1ABC  0835               	movf	___lwmod@divisor+1,w
  7991  1ABD  1C03               	skipc
  7992  1ABE  03B7               	decf	___lwmod@dividend+1,f
  7993  1ABF  02B7               	subwf	___lwmod@dividend+1,f
  7994  1AC0                     l6590:	
  7995  1AC0  3001               	movlw	1
  7996  1AC1                     u6295:	
  7997  1AC1  1003               	clrc
  7998  1AC2  0CB5               	rrf	___lwmod@divisor+1,f
  7999  1AC3  0CB4               	rrf	___lwmod@divisor,f
  8000  1AC4  3EFF               	addlw	-1
  8001  1AC5  1D03               	skipz
  8002  1AC6  2AC1               	goto	u6295
  8003  1AC7  3001               	movlw	1
  8004  1AC8  02B9               	subwf	___lwmod@counter,f
  8005  1AC9  1D03               	btfss	3,2
  8006  1ACA  2AB2               	goto	l6586
  8007  1ACB                     l6594:	
  8008  1ACB  0837               	movf	___lwmod@dividend+1,w
  8009  1ACC  00B5               	movwf	?___lwmod+1
  8010  1ACD  0836               	movf	___lwmod@dividend,w
  8011  1ACE  00B4               	movwf	?___lwmod
  8012  1ACF  0008               	return
  8013  1AD0                     __end_of___lwmod:	
  8014                           
  8015                           	psect	text21
  8016  1344                     __ptext21:	
  8017 ;; *************** function _Button_Handler *****************
  8018 ;; Defined at:
  8019 ;;		line 97 in file "key-handler.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;  keydef          1    wreg     PTR struct .
  8022 ;;		 -> main@keydef(6), 
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;  keydef          1   17[BANK0 ] PTR struct .
  8025 ;;		 -> main@keydef(6), 
  8026 ;;  button          1   18[BANK0 ] unsigned char 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      unsigned char 
  8029 ;; Registers used:
  8030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 300/800
  8033 ;;		On exit  : 300/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8036 ;;      Params:         0       0       0       0       0
  8037 ;;      Locals:         0       2       0       0       0
  8038 ;;      Temps:          0       1       0       0       0
  8039 ;;      Totals:         0       3       0       0       0
  8040 ;;Total ram usage:        3 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    5
  8043 ;; This function calls:
  8044 ;;		_Key_Press
  8045 ;; This function is called by:
  8046 ;;		_Show_Time
  8047 ;;		_Menu_Set_Time
  8048 ;;		_Menu_Handler
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           
  8053                           ;psect for function _Button_Handler
  8054  1344                     _Button_Handler:	
  8055                           
  8056                           ;incstack = 0
  8057                           ; Regs used in _Button_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8058                           ;Button_Handler@keydef stored from wreg
  8059  1344  00B1               	movwf	Button_Handler@keydef
  8060                           
  8061                           ;key-handler.c: 97: unsigned char Button_Handler(KeyPointerStruct *keydef);key-handler.c
      +                          : 98: {;key-handler.c: 99:     unsigned char button;;key-handler.c: 101:     button=Key_
      +                          Press(keydef->set_rtc);
  8062  1345  0831               	movf	Button_Handler@keydef,w
  8063  1346  0084               	movwf	4
  8064  1347  1783               	bsf	3,7	;select IRP bank2
  8065  1348  0800               	movf	0,w
  8066  1349  00A6               	movwf	Key_Press@button
  8067  134A  3000               	movlw	0
  8068  134B  00A7               	movwf	Key_Press@button+1
  8069  134C  120A  158A  2117  160A  118A  	fcall	_Key_Press
  8070  1351  1283               	bcf	3,5	;RP0=0, select bank0
  8071  1352  00B0               	movwf	??_Button_Handler
  8072  1353  0830               	movf	??_Button_Handler,w
  8073  1354  00B2               	movwf	Button_Handler@button
  8074                           
  8075                           ;key-handler.c: 102:     if(button!=k_no_key_press)
  8076  1355  300C               	movlw	12
  8077  1356  0632               	xorwf	Button_Handler@button,w
  8078  1357  1903               	btfsc	3,2
  8079  1358  2B5B               	goto	l6972
  8080  1359                     l6968:	
  8081                           
  8082                           ;key-handler.c: 103:     {;key-handler.c: 104:         return button;
  8083  1359  0832               	movf	Button_Handler@button,w
  8084  135A  0008               	return
  8085  135B                     l6972:	
  8086                           
  8087                           ;key-handler.c: 106:     button=Key_Press(keydef->set_down);
  8088  135B  0831               	movf	Button_Handler@keydef,w
  8089  135C  3E05               	addlw	5
  8090  135D  0084               	movwf	4
  8091  135E  1783               	bsf	3,7	;select IRP bank2
  8092  135F  0800               	movf	0,w
  8093  1360  00A6               	movwf	Key_Press@button
  8094  1361  3001               	movlw	1
  8095  1362  00A7               	movwf	Key_Press@button+1
  8096  1363  120A  158A  2117  160A  118A  	fcall	_Key_Press
  8097  1368  1283               	bcf	3,5	;RP0=0, select bank0
  8098  1369  00B0               	movwf	??_Button_Handler
  8099  136A  0830               	movf	??_Button_Handler,w
  8100  136B  00B2               	movwf	Button_Handler@button
  8101                           
  8102                           ;key-handler.c: 107:     if(button!=k_no_key_press)
  8103  136C  300C               	movlw	12
  8104  136D  0632               	xorwf	Button_Handler@button,w
  8105  136E  1D03               	btfss	3,2
  8106  136F  2B59               	goto	l6968
  8107                           
  8108                           ;key-handler.c: 111:     button=Key_Press(keydef->set_right);
  8109  1370  0831               	movf	Button_Handler@keydef,w
  8110  1371  3E03               	addlw	3
  8111  1372  0084               	movwf	4
  8112  1373  1783               	bsf	3,7	;select IRP bank2
  8113  1374  0800               	movf	0,w
  8114  1375  00A6               	movwf	Key_Press@button
  8115  1376  3000               	movlw	0
  8116  1377  00A7               	movwf	Key_Press@button+1
  8117  1378  120A  158A  2117  160A  118A  	fcall	_Key_Press
  8118  137D  1283               	bcf	3,5	;RP0=0, select bank0
  8119  137E  00B0               	movwf	??_Button_Handler
  8120  137F  0830               	movf	??_Button_Handler,w
  8121  1380  00B2               	movwf	Button_Handler@button
  8122                           
  8123                           ;key-handler.c: 112:     if(button!=k_no_key_press)
  8124  1381  300C               	movlw	12
  8125  1382  0632               	xorwf	Button_Handler@button,w
  8126  1383  1D03               	btfss	3,2
  8127  1384  2B59               	goto	l6968
  8128                           
  8129                           ;key-handler.c: 116:     button=Key_Press(keydef->set_time1);
  8130  1385  0A31               	incf	Button_Handler@keydef,w
  8131  1386  0084               	movwf	4
  8132  1387  1783               	bsf	3,7	;select IRP bank2
  8133  1388  0800               	movf	0,w
  8134  1389  00A6               	movwf	Key_Press@button
  8135  138A  3000               	movlw	0
  8136  138B  00A7               	movwf	Key_Press@button+1
  8137  138C  120A  158A  2117  160A  118A  	fcall	_Key_Press
  8138  1391  1283               	bcf	3,5	;RP0=0, select bank0
  8139  1392  00B0               	movwf	??_Button_Handler
  8140  1393  0830               	movf	??_Button_Handler,w
  8141  1394  00B2               	movwf	Button_Handler@button
  8142                           
  8143                           ;key-handler.c: 117:     if(button!=k_no_key_press)
  8144  1395  300C               	movlw	12
  8145  1396  0632               	xorwf	Button_Handler@button,w
  8146  1397  1D03               	btfss	3,2
  8147  1398  2B59               	goto	l6968
  8148                           
  8149                           ;key-handler.c: 121:     button=Key_Press(keydef->set_time2);
  8150  1399  0831               	movf	Button_Handler@keydef,w
  8151  139A  3E02               	addlw	2
  8152  139B  0084               	movwf	4
  8153  139C  1783               	bsf	3,7	;select IRP bank2
  8154  139D  0800               	movf	0,w
  8155  139E  00A6               	movwf	Key_Press@button
  8156  139F  3000               	movlw	0
  8157  13A0  00A7               	movwf	Key_Press@button+1
  8158  13A1  120A  158A  2117  160A  118A  	fcall	_Key_Press
  8159  13A6  1283               	bcf	3,5	;RP0=0, select bank0
  8160  13A7  00B0               	movwf	??_Button_Handler
  8161  13A8  0830               	movf	??_Button_Handler,w
  8162  13A9  00B2               	movwf	Button_Handler@button
  8163                           
  8164                           ;key-handler.c: 122:     if(button!=k_no_key_press)
  8165  13AA  300C               	movlw	12
  8166  13AB  0632               	xorwf	Button_Handler@button,w
  8167  13AC  1D03               	btfss	3,2
  8168  13AD  2B59               	goto	l6968
  8169                           
  8170                           ;key-handler.c: 126:     button=Key_Press(keydef->set_up);
  8171  13AE  0831               	movf	Button_Handler@keydef,w
  8172  13AF  3E04               	addlw	4
  8173  13B0  0084               	movwf	4
  8174  13B1  1783               	bsf	3,7	;select IRP bank2
  8175  13B2  0800               	movf	0,w
  8176  13B3  00A6               	movwf	Key_Press@button
  8177  13B4  3001               	movlw	1
  8178  13B5  00A7               	movwf	Key_Press@button+1
  8179  13B6  120A  158A  2117  160A  118A  	fcall	_Key_Press
  8180  13BB  1283               	bcf	3,5	;RP0=0, select bank0
  8181  13BC  00B0               	movwf	??_Button_Handler
  8182  13BD  0830               	movf	??_Button_Handler,w
  8183  13BE  00B2               	movwf	Button_Handler@button
  8184                           
  8185                           ;key-handler.c: 127:     if(button!=k_no_key_press)
  8186  13BF  300C               	movlw	12
  8187  13C0  0632               	xorwf	Button_Handler@button,w
  8188  13C1  1D03               	btfss	3,2
  8189  13C2  2B59               	goto	l6968
  8190                           
  8191                           ;key-handler.c: 132:     return k_no_key_press;
  8192  13C3  300C               	movlw	12
  8193  13C4  0008               	return
  8194  13C5                     __end_of_Button_Handler:	
  8195                           
  8196                           	psect	text22
  8197  0917                     __ptext22:	
  8198 ;; *************** function _Key_Press *****************
  8199 ;; Defined at:
  8200 ;;		line 10 in file "key-handler.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;  button          2    6[BANK0 ] PTR struct .
  8203 ;;		 -> Button_Init@set_down(7), Button_Init@set_up(7), Button_Init@set_right(7), Button_Init@set_time2(7), 
  8204 ;;		 -> Button_Init@set_time1(7), Button_Init@set_rtc(7), 
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;		None
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  1    wreg      enum E1204
  8209 ;; Registers used:
  8210 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8211 ;; Tracked objects:
  8212 ;;		On entry : B00/800
  8213 ;;		On exit  : 200/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8216 ;;      Params:         0       2       0       0       0
  8217 ;;      Locals:         0       0       0       0       0
  8218 ;;      Temps:          0       8       0       0       0
  8219 ;;      Totals:         0      10       0       0       0
  8220 ;;Total ram usage:       10 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    4
  8223 ;; This function calls:
  8224 ;;		Nothing
  8225 ;; This function is called by:
  8226 ;;		_Button_Handler
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           
  8231                           ;psect for function _Key_Press
  8232  0917                     _Key_Press:	
  8233                           
  8234                           ;key-handler.c: 10: enum button_press Key_Press(KeyStruct *button);key-handler.c: 11: {;
      +                          key-handler.c: 12:  if(button->klock==0 && (*button->port & 1<<button->pin)==0)
  8235                           
  8236                           ;incstack = 0
  8237                           ; Regs used in _Key_Press: [wreg-fsr0h+status,2+status,0]
  8238  0917  0826               	movf	Key_Press@button,w
  8239  0918  0084               	movwf	4
  8240  0919  1783               	bsf	3,7
  8241  091A  1C27               	btfss	Key_Press@button+1,0
  8242  091B  1383               	bcf	3,7
  8243  091C  0800               	movf	0,w
  8244  091D  1D03               	btfss	3,2
  8245  091E  297D               	goto	l6696
  8246  091F  0826               	movf	Key_Press@button,w
  8247  0920  3E03               	addlw	3
  8248  0921  00A8               	movwf	??_Key_Press
  8249  0922  0827               	movf	Key_Press@button+1,w
  8250  0923  1803               	skipnc
  8251  0924  3E01               	addlw	1
  8252  0925  3E00               	addlw	0
  8253  0926  00A9               	movwf	??_Key_Press+1
  8254  0927  0828               	movf	??_Key_Press,w
  8255  0928  0084               	movwf	4
  8256  0929  1783               	bsf	3,7
  8257  092A  1C29               	btfss	??_Key_Press+1,0
  8258  092B  1383               	bcf	3,7
  8259  092C  0800               	movf	0,w
  8260  092D  00AA               	movwf	??_Key_Press+2
  8261  092E  0A84               	incf	4,f
  8262  092F  0800               	movf	0,w
  8263  0930  00AB               	movwf	??_Key_Press+3
  8264  0931  082A               	movf	??_Key_Press+2,w
  8265  0932  0084               	movwf	4
  8266  0933  1783               	bsf	3,7
  8267  0934  1C2B               	btfss	??_Key_Press+3,0
  8268  0935  1383               	bcf	3,7
  8269  0936  0800               	movf	0,w
  8270  0937  00AC               	movwf	??_Key_Press+4
  8271  0938  3001               	movlw	1
  8272  0939  00AD               	movwf	??_Key_Press+5
  8273  093A  0826               	movf	Key_Press@button,w
  8274  093B  3E01               	addlw	1
  8275  093C  00AE               	movwf	??_Key_Press+6
  8276  093D  0827               	movf	Key_Press@button+1,w
  8277  093E  1803               	skipnc
  8278  093F  3E01               	addlw	1
  8279  0940  3E00               	addlw	0
  8280  0941  00AF               	movwf	??_Key_Press+7
  8281  0942  082E               	movf	??_Key_Press+6,w
  8282  0943  0084               	movwf	4
  8283  0944  1783               	bsf	3,7
  8284  0945  1C2F               	btfss	??_Key_Press+7,0
  8285  0946  1383               	bcf	3,7
  8286  0947  0A00               	incf	0,w
  8287  0948  294B               	goto	u6454
  8288  0949                     u6455:	
  8289  0949  1003               	clrc
  8290  094A  0DAD               	rlf	??_Key_Press+5,f
  8291  094B                     u6454:	
  8292  094B  3EFF               	addlw	-1
  8293  094C  1D03               	skipz
  8294  094D  2949               	goto	u6455
  8295  094E  082D               	movf	??_Key_Press+5,w
  8296  094F  052C               	andwf	??_Key_Press+4,w
  8297  0950  1D03               	btfss	3,2
  8298  0951  297D               	goto	l6696
  8299                           
  8300                           ;key-handler.c: 13:  {;key-handler.c: 14:         button->klock=1;
  8301  0952  0826               	movf	Key_Press@button,w
  8302  0953  0084               	movwf	4
  8303  0954  1783               	bsf	3,7
  8304  0955  1C27               	btfss	Key_Press@button+1,0
  8305  0956  1383               	bcf	3,7
  8306  0957  0180               	clrf	0
  8307  0958  0A80               	incf	0,f
  8308                           
  8309                           ;key-handler.c: 15:         button->lock_long_press=1;
  8310  0959  0826               	movf	Key_Press@button,w
  8311  095A  3E02               	addlw	2
  8312  095B  00A8               	movwf	??_Key_Press
  8313  095C  0827               	movf	Key_Press@button+1,w
  8314  095D  1803               	skipnc
  8315  095E  3E01               	addlw	1
  8316  095F  3E00               	addlw	0
  8317  0960  00A9               	movwf	??_Key_Press+1
  8318  0961  0828               	movf	??_Key_Press,w
  8319  0962  0084               	movwf	4
  8320  0963  1783               	bsf	3,7
  8321  0964  1C29               	btfss	??_Key_Press+1,0
  8322  0965  1383               	bcf	3,7
  8323  0966  0180               	clrf	0
  8324  0967  0A80               	incf	0,f
  8325                           
  8326                           ;key-handler.c: 16:         g_button_timer=7800;
  8327  0968  3078               	movlw	120
  8328  0969  1683               	bsf	3,5	;RP0=1, select bank1
  8329  096A  00A0               	movwf	_g_button_timer^(0+128)	;volatile
  8330  096B  301E               	movlw	30
  8331  096C  00A1               	movwf	(_g_button_timer^(0+128)+1)	;volatile
  8332                           
  8333                           ;key-handler.c: 18:         return button->button_short_function;
  8334  096D  1283               	bcf	3,5	;RP0=0, select bank0
  8335  096E  0826               	movf	Key_Press@button,w
  8336  096F  3E05               	addlw	5
  8337  0970  00A8               	movwf	??_Key_Press
  8338  0971  0827               	movf	Key_Press@button+1,w
  8339  0972  1803               	skipnc
  8340  0973  3E01               	addlw	1
  8341  0974  3E00               	addlw	0
  8342  0975  00A9               	movwf	??_Key_Press+1
  8343  0976  0828               	movf	??_Key_Press,w
  8344  0977  0084               	movwf	4
  8345  0978  1783               	bsf	3,7
  8346  0979  1C29               	btfss	??_Key_Press+1,0
  8347  097A  1383               	bcf	3,7
  8348  097B  0800               	movf	0,w
  8349  097C  0008               	return
  8350  097D                     l6696:	
  8351  097D  0826               	movf	Key_Press@button,w
  8352  097E  3E03               	addlw	3
  8353  097F  00A8               	movwf	??_Key_Press
  8354  0980  0827               	movf	Key_Press@button+1,w
  8355  0981  1803               	skipnc
  8356  0982  3E01               	addlw	1
  8357  0983  3E00               	addlw	0
  8358  0984  00A9               	movwf	??_Key_Press+1
  8359  0985  0828               	movf	??_Key_Press,w
  8360  0986  0084               	movwf	4
  8361  0987  1783               	bsf	3,7
  8362  0988  1C29               	btfss	??_Key_Press+1,0
  8363  0989  1383               	bcf	3,7
  8364  098A  0800               	movf	0,w
  8365  098B  00AA               	movwf	??_Key_Press+2
  8366  098C  0A84               	incf	4,f
  8367  098D  0800               	movf	0,w
  8368  098E  00AB               	movwf	??_Key_Press+3
  8369  098F  082A               	movf	??_Key_Press+2,w
  8370  0990  0084               	movwf	4
  8371  0991  1783               	bsf	3,7
  8372  0992  1C2B               	btfss	??_Key_Press+3,0
  8373  0993  1383               	bcf	3,7
  8374  0994  0800               	movf	0,w
  8375  0995  00AC               	movwf	??_Key_Press+4
  8376  0996  3001               	movlw	1
  8377  0997  00AD               	movwf	??_Key_Press+5
  8378  0998  0826               	movf	Key_Press@button,w
  8379  0999  3E01               	addlw	1
  8380  099A  00AE               	movwf	??_Key_Press+6
  8381  099B  0827               	movf	Key_Press@button+1,w
  8382  099C  1803               	skipnc
  8383  099D  3E01               	addlw	1
  8384  099E  3E00               	addlw	0
  8385  099F  00AF               	movwf	??_Key_Press+7
  8386  09A0  082E               	movf	??_Key_Press+6,w
  8387  09A1  0084               	movwf	4
  8388  09A2  1783               	bsf	3,7
  8389  09A3  1C2F               	btfss	??_Key_Press+7,0
  8390  09A4  1383               	bcf	3,7
  8391  09A5  0A00               	incf	0,w
  8392  09A6  29A9               	goto	u6474
  8393  09A7                     u6475:	
  8394  09A7  1003               	clrc
  8395  09A8  0DAD               	rlf	??_Key_Press+5,f
  8396  09A9                     u6474:	
  8397  09A9  3EFF               	addlw	-1
  8398  09AA  1D03               	skipz
  8399  09AB  29A7               	goto	u6475
  8400  09AC  082D               	movf	??_Key_Press+5,w
  8401  09AD  052C               	andwf	??_Key_Press+4,w
  8402  09AE  1903               	btfsc	3,2
  8403  09AF  29D6               	goto	l6706
  8404  09B0  0826               	movf	Key_Press@button,w
  8405  09B1  0084               	movwf	4
  8406  09B2  1783               	bsf	3,7
  8407  09B3  1C27               	btfss	Key_Press@button+1,0
  8408  09B4  1383               	bcf	3,7
  8409  09B5  0300               	decf	0,w
  8410  09B6  1D03               	btfss	3,2
  8411  09B7  29D6               	goto	l6706
  8412                           
  8413                           ;key-handler.c: 21:  {;key-handler.c: 22:         if(g_button_timer<(7800 -800))
  8414  09B8  301B               	movlw	27
  8415  09B9  1683               	bsf	3,5	;RP0=1, select bank1
  8416  09BA  0221               	subwf	(_g_button_timer+1)^(0+128),w	;volatile
  8417  09BB  3058               	movlw	88
  8418  09BC  1903               	skipnz
  8419  09BD  0220               	subwf	_g_button_timer^(0+128),w	;volatile
  8420  09BE  1803               	skipnc
  8421  09BF  2A09               	goto	l6714
  8422                           
  8423                           ;key-handler.c: 23:         {;key-handler.c: 24:             button->klock=0;
  8424  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  8425  09C1  0826               	movf	Key_Press@button,w
  8426  09C2  0084               	movwf	4
  8427  09C3  1783               	bsf	3,7
  8428  09C4  1C27               	btfss	Key_Press@button+1,0
  8429  09C5  1383               	bcf	3,7
  8430  09C6  0180               	clrf	0
  8431                           
  8432                           ;key-handler.c: 25:             button->lock_long_press=0;
  8433  09C7  0826               	movf	Key_Press@button,w
  8434  09C8  3E02               	addlw	2
  8435  09C9  00A8               	movwf	??_Key_Press
  8436  09CA  0827               	movf	Key_Press@button+1,w
  8437  09CB  1803               	skipnc
  8438  09CC  3E01               	addlw	1
  8439  09CD  3E00               	addlw	0
  8440  09CE  00A9               	movwf	??_Key_Press+1
  8441  09CF  0828               	movf	??_Key_Press,w
  8442  09D0  0084               	movwf	4
  8443  09D1  1783               	bsf	3,7
  8444  09D2  1C29               	btfss	??_Key_Press+1,0
  8445  09D3  1383               	bcf	3,7
  8446  09D4  0180               	clrf	0
  8447  09D5  2A09               	goto	l6714
  8448  09D6                     l6706:	
  8449  09D6  0826               	movf	Key_Press@button,w
  8450  09D7  3E02               	addlw	2
  8451  09D8  00A8               	movwf	??_Key_Press
  8452  09D9  0827               	movf	Key_Press@button+1,w
  8453  09DA  1803               	skipnc
  8454  09DB  3E01               	addlw	1
  8455  09DC  3E00               	addlw	0
  8456  09DD  00A9               	movwf	??_Key_Press+1
  8457  09DE  0828               	movf	??_Key_Press,w
  8458  09DF  0084               	movwf	4
  8459  09E0  1783               	bsf	3,7
  8460  09E1  1C29               	btfss	??_Key_Press+1,0
  8461  09E2  1383               	bcf	3,7
  8462  09E3  0300               	decf	0,w
  8463  09E4  1D03               	btfss	3,2
  8464  09E5  2A09               	goto	l6714
  8465  09E6  1683               	bsf	3,5	;RP0=1, select bank1
  8466  09E7  0820               	movf	_g_button_timer^(0+128),w	;volatile
  8467  09E8  0421               	iorwf	(_g_button_timer+1)^(0+128),w	;volatile
  8468  09E9  1D03               	btfss	3,2
  8469  09EA  2A09               	goto	l6714
  8470                           
  8471                           ;key-handler.c: 29:     {;key-handler.c: 30:         button->lock_long_press=0;
  8472  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  8473  09EC  0826               	movf	Key_Press@button,w
  8474  09ED  3E02               	addlw	2
  8475  09EE  00A8               	movwf	??_Key_Press
  8476  09EF  0827               	movf	Key_Press@button+1,w
  8477  09F0  1803               	skipnc
  8478  09F1  3E01               	addlw	1
  8479  09F2  3E00               	addlw	0
  8480  09F3  00A9               	movwf	??_Key_Press+1
  8481  09F4  0828               	movf	??_Key_Press,w
  8482  09F5  0084               	movwf	4
  8483  09F6  1783               	bsf	3,7
  8484  09F7  1C29               	btfss	??_Key_Press+1,0
  8485  09F8  1383               	bcf	3,7
  8486  09F9  0180               	clrf	0
  8487                           
  8488                           ;key-handler.c: 31:         return button->button_long_function;
  8489  09FA  0826               	movf	Key_Press@button,w
  8490  09FB  3E06               	addlw	6
  8491  09FC  00A8               	movwf	??_Key_Press
  8492  09FD  0827               	movf	Key_Press@button+1,w
  8493  09FE  1803               	skipnc
  8494  09FF  3E01               	addlw	1
  8495  0A00  3E00               	addlw	0
  8496  0A01  00A9               	movwf	??_Key_Press+1
  8497  0A02  0828               	movf	??_Key_Press,w
  8498  0A03  0084               	movwf	4
  8499  0A04  1783               	bsf	3,7
  8500  0A05  1C29               	btfss	??_Key_Press+1,0
  8501  0A06  1383               	bcf	3,7
  8502  0A07  0800               	movf	0,w
  8503  0A08  0008               	return
  8504  0A09                     l6714:	
  8505                           
  8506                           ;key-handler.c: 34:     return k_no_key_press;
  8507  0A09  300C               	movlw	12
  8508  0A0A  0008               	return
  8509  0A0B                     __end_of_Key_Press:	
  8510                           
  8511                           	psect	text23
  8512  107A                     __ptext23:	
  8513 ;; *************** function _Interrupt_Init *****************
  8514 ;; Defined at:
  8515 ;;		line 9 in file "interrupts.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;		None
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;		None
  8520 ;; Return value:  Size  Location     Type
  8521 ;;                  1    wreg      void 
  8522 ;; Registers used:
  8523 ;;		wreg, status,2, status,0
  8524 ;; Tracked objects:
  8525 ;;		On entry : B00/100
  8526 ;;		On exit  : B00/100
  8527 ;;		Unchanged: 800/0
  8528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8529 ;;      Params:         0       0       0       0       0
  8530 ;;      Locals:         0       0       0       0       0
  8531 ;;      Temps:          0       0       0       0       0
  8532 ;;      Totals:         0       0       0       0       0
  8533 ;;Total ram usage:        0 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; Hardware stack levels required when called:    4
  8536 ;; This function calls:
  8537 ;;		Nothing
  8538 ;; This function is called by:
  8539 ;;		_main
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           
  8544                           ;psect for function _Interrupt_Init
  8545  107A                     _Interrupt_Init:	
  8546                           
  8547                           ;interrupts.c: 12:     OPTION_REGbits.T0CS=0;
  8548                           
  8549                           ;incstack = 0
  8550                           ; Regs used in _Interrupt_Init: [wreg+status,2+status,0]
  8551  107A  1281               	bcf	1,5	;volatile
  8552                           
  8553                           ;interrupts.c: 13:     OPTION_REGbits.PSA=0;
  8554  107B  1181               	bcf	1,3	;volatile
  8555                           
  8556                           ;interrupts.c: 14:     OPTION_REGbits.PS=0b000;
  8557  107C  30F8               	movlw	-8
  8558  107D  0581               	andwf	1,f	;volatile
  8559                           
  8560                           ;interrupts.c: 15:     INTCONbits.T0IE=1;
  8561  107E  168B               	bsf	11,5	;volatile
  8562                           
  8563                           ;interrupts.c: 18:     T1CONbits.TMR1ON=1;
  8564  107F  1283               	bcf	3,5	;RP0=0, select bank0
  8565  1080  1410               	bsf	16,0	;volatile
  8566                           
  8567                           ;interrupts.c: 19:     T1CONbits.TMR1CS=0;
  8568  1081  1090               	bcf	16,1	;volatile
  8569                           
  8570                           ;interrupts.c: 20:     T1CONbits.T1CKPS=0b00;
  8571  1082  30CF               	movlw	-49
  8572  1083  0590               	andwf	16,f	;volatile
  8573                           
  8574                           ;interrupts.c: 23:     INTCONbits.GIE=1;
  8575  1084  178B               	bsf	11,7	;volatile
  8576                           
  8577                           ;interrupts.c: 24:     INTCONbits.PEIE=1;
  8578  1085  170B               	bsf	11,6	;volatile
  8579                           
  8580                           ;interrupts.c: 27:     CCP2CONbits.CCP2M=0b0100;
  8581  1086  081D               	movf	29,w	;volatile
  8582  1087  39F0               	andlw	-16
  8583  1088  3804               	iorlw	4
  8584  1089  009D               	movwf	29	;volatile
  8585                           
  8586                           ;interrupts.c: 28:     PIE2bits.CCP2IE=1;
  8587  108A  1683               	bsf	3,5	;RP0=1, select bank1
  8588  108B  140D               	bsf	13,0	;volatile
  8589  108C  0008               	return
  8590  108D                     __end_of_Interrupt_Init:	
  8591                           
  8592                           	psect	text24
  8593  1894                     __ptext24:	
  8594 ;; *************** function _I2C_Init *****************
  8595 ;; Defined at:
  8596 ;;		line 18 in file "hw_i2c.c"
  8597 ;; Parameters:    Size  Location     Type
  8598 ;;		None
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;		None
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  1    wreg      void 
  8603 ;; Registers used:
  8604 ;;		wreg, status,2, status,0
  8605 ;; Tracked objects:
  8606 ;;		On entry : B00/100
  8607 ;;		On exit  : B00/100
  8608 ;;		Unchanged: 800/0
  8609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8610 ;;      Params:         0       0       0       0       0
  8611 ;;      Locals:         0       0       0       0       0
  8612 ;;      Temps:          0       0       0       0       0
  8613 ;;      Totals:         0       0       0       0       0
  8614 ;;Total ram usage:        0 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    4
  8617 ;; This function calls:
  8618 ;;		Nothing
  8619 ;; This function is called by:
  8620 ;;		_main
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           
  8625                           ;psect for function _I2C_Init
  8626  1894                     _I2C_Init:	
  8627                           
  8628                           ;hw_i2c.c: 21:     SSPCONbits.SSPEN=1;
  8629                           
  8630                           ;incstack = 0
  8631                           ; Regs used in _I2C_Init: [wreg+status,2+status,0]
  8632  1894  1283               	bcf	3,5	;RP0=0, select bank0
  8633  1895  1694               	bsf	20,5	;volatile
  8634                           
  8635                           ;hw_i2c.c: 22:     SSPCONbits.SSPM=0b1000;
  8636  1896  0814               	movf	20,w	;volatile
  8637  1897  39F0               	andlw	-16
  8638  1898  3808               	iorlw	8
  8639  1899  0094               	movwf	20	;volatile
  8640                           
  8641                           ;hw_i2c.c: 23:     SSPADD=19;
  8642  189A  3013               	movlw	19
  8643  189B  1683               	bsf	3,5	;RP0=1, select bank1
  8644  189C  0093               	movwf	19	;volatile
  8645                           
  8646                           ;hw_i2c.c: 24:     SSPCON2=0;
  8647  189D  0191               	clrf	17	;volatile
  8648                           
  8649                           ;hw_i2c.c: 25:     SSPSTAT=0;
  8650  189E  0194               	clrf	20	;volatile
  8651  189F  0008               	return
  8652  18A0                     __end_of_I2C_Init:	
  8653                           
  8654                           	psect	text25
  8655  1984                     __ptext25:	
  8656 ;; *************** function _Global_Init *****************
  8657 ;; Defined at:
  8658 ;;		line 4 in file "inits.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;		None
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;		None
  8663 ;; Return value:  Size  Location     Type
  8664 ;;                  1    wreg      void 
  8665 ;; Registers used:
  8666 ;;		wreg, status,2, status,0
  8667 ;; Tracked objects:
  8668 ;;		On entry : B00/0
  8669 ;;		On exit  : B00/100
  8670 ;;		Unchanged: 800/0
  8671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8672 ;;      Params:         0       0       0       0       0
  8673 ;;      Locals:         0       0       0       0       0
  8674 ;;      Temps:          0       0       0       0       0
  8675 ;;      Totals:         0       0       0       0       0
  8676 ;;Total ram usage:        0 bytes
  8677 ;; Hardware stack levels used:    1
  8678 ;; Hardware stack levels required when called:    4
  8679 ;; This function calls:
  8680 ;;		Nothing
  8681 ;; This function is called by:
  8682 ;;		_main
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           
  8687                           ;psect for function _Global_Init
  8688  1984                     _Global_Init:	
  8689                           
  8690                           ;inits.c: 7:     OSCCONbits.IRCF=0b111;
  8691                           
  8692                           ;incstack = 0
  8693                           ; Regs used in _Global_Init: [wreg+status,2+status,0]
  8694  1984  3070               	movlw	112
  8695  1985  1683               	bsf	3,5	;RP0=1, select bank1
  8696  1986  048F               	iorwf	15,f	;volatile
  8697                           
  8698                           ;inits.c: 8:     OSCCONbits.OSTS=0;
  8699  1987  118F               	bcf	15,3	;volatile
  8700                           
  8701                           ;inits.c: 9:     OSCCONbits.SCS=1;
  8702  1988  140F               	bsf	15,0	;volatile
  8703                           
  8704                           ;inits.c: 12:     ANSEL=0x00;
  8705  1989  1703               	bsf	3,6	;RP1=1, select bank3
  8706  198A  0188               	clrf	8	;volatile
  8707                           
  8708                           ;inits.c: 13:     ANSELH=0x00;
  8709  198B  0189               	clrf	9	;volatile
  8710                           
  8711                           ;inits.c: 15:     TRISC0=0;
  8712  198C  1303               	bcf	3,6	;RP1=0, select bank1
  8713  198D  1007               	bcf	7,0	;volatile
  8714                           
  8715                           ;inits.c: 16:     TRISC1=1;
  8716  198E  1487               	bsf	7,1	;volatile
  8717                           
  8718                           ;inits.c: 17:     TRISC2=0;
  8719  198F  1107               	bcf	7,2	;volatile
  8720                           
  8721                           ;inits.c: 18:     TRISC3=1;
  8722  1990  1587               	bsf	7,3	;volatile
  8723                           
  8724                           ;inits.c: 19:     TRISC4=1;
  8725  1991  1607               	bsf	7,4	;volatile
  8726                           
  8727                           ;inits.c: 20:     TRISC5=1;
  8728  1992  1687               	bsf	7,5	;volatile
  8729                           
  8730                           ;inits.c: 21:     TRISC6=0;
  8731  1993  1307               	bcf	7,6	;volatile
  8732                           
  8733                           ;inits.c: 22:     TRISC7=1;
  8734  1994  1787               	bsf	7,7	;volatile
  8735                           
  8736                           ;inits.c: 24:     TRISA0=0;
  8737  1995  1005               	bcf	5,0	;volatile
  8738                           
  8739                           ;inits.c: 25:     TRISA1=0;
  8740  1996  1085               	bcf	5,1	;volatile
  8741                           
  8742                           ;inits.c: 26:     TRISA2=0;
  8743  1997  1105               	bcf	5,2	;volatile
  8744                           
  8745                           ;inits.c: 27:     TRISA3=0;
  8746  1998  1185               	bcf	5,3	;volatile
  8747                           
  8748                           ;inits.c: 28:     TRISA4=0;
  8749  1999  1205               	bcf	5,4	;volatile
  8750                           
  8751                           ;inits.c: 29:     TRISA5=0;
  8752  199A  1285               	bcf	5,5	;volatile
  8753                           
  8754                           ;inits.c: 30:     TRISA6=0;
  8755  199B  1305               	bcf	5,6	;volatile
  8756                           
  8757                           ;inits.c: 31:     TRISA7=0;
  8758  199C  1385               	bcf	5,7	;volatile
  8759                           
  8760                           ;inits.c: 33:     TRISB0=1;
  8761  199D  1406               	bsf	6,0	;volatile
  8762                           
  8763                           ;inits.c: 34:     TRISB1=1;
  8764  199E  1486               	bsf	6,1	;volatile
  8765                           
  8766                           ;inits.c: 35:     TRISB2=1;
  8767  199F  1506               	bsf	6,2	;volatile
  8768                           
  8769                           ;inits.c: 36:     TRISB3=1;
  8770  19A0  1586               	bsf	6,3	;volatile
  8771                           
  8772                           ;inits.c: 37:     TRISB4=0;
  8773  19A1  1206               	bcf	6,4	;volatile
  8774                           
  8775                           ;inits.c: 38:     TRISB5=0;
  8776  19A2  1286               	bcf	6,5	;volatile
  8777                           
  8778                           ;inits.c: 39:     TRISB6=0;
  8779  19A3  1306               	bcf	6,6	;volatile
  8780                           
  8781                           ;inits.c: 40:     TRISB7=0;
  8782  19A4  1386               	bcf	6,7	;volatile
  8783  19A5  0008               	return
  8784  19A6                     __end_of_Global_Init:	
  8785                           
  8786                           	psect	text26
  8787  1CF3                     __ptext26:	
  8788 ;; *************** function _Check_RCV_Data *****************
  8789 ;; Defined at:
  8790 ;;		line 281 in file "manchester_decode.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  DataRCV         1    wreg     PTR struct .
  8793 ;;		 -> main@data_rcv(5), 
  8794 ;;  time            1   42[BANK0 ] PTR struct .
  8795 ;;		 -> main@time(7), 
  8796 ;;  time_limit      1   43[BANK0 ] PTR struct .
  8797 ;;		 -> main@menudef(7), 
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;  DataRCV         1   45[BANK0 ] PTR struct .
  8800 ;;		 -> main@data_rcv(5), 
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  1    wreg      void 
  8803 ;; Registers used:
  8804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 300/800
  8807 ;;		On exit  : 200/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8810 ;;      Params:         0       2       0       0       0
  8811 ;;      Locals:         0       1       0       0       0
  8812 ;;      Temps:          0       1       0       0       0
  8813 ;;      Totals:         0       4       0       0       0
  8814 ;;Total ram usage:        4 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:    9
  8817 ;; This function calls:
  8818 ;;		_CRC_check
  8819 ;;		_Check_Event
  8820 ;;		_Check_Time_Date
  8821 ;;		_Frame_Decode
  8822 ;; This function is called by:
  8823 ;;		_main
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           
  8828                           ;psect for function _Check_RCV_Data
  8829  1CF3                     _Check_RCV_Data:	
  8830                           
  8831                           ;incstack = 0
  8832 ;; hardware stack exceeded
  8833                           ; Regs used in _Check_RCV_Data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8834                           ;Check_RCV_Data@DataRCV stored from wreg
  8835  1CF3  00CD               	movwf	Check_RCV_Data@DataRCV
  8836                           
  8837                           ;manchester_decode.c: 281: void Check_RCV_Data(DataStruct *DataRCV, TimeStruct *time,;ma
      +                          nchester_decode.c: 282:                     MenuParamPonterStruct *time_limit);mancheste
      +                          r_decode.c: 283: {;manchester_decode.c: 284:     if(g_reciver_ccp2_isr_fire_flag==1)
  8838  1CF4  1683               	bsf	3,5	;RP0=1, select bank1
  8839  1CF5  032F               	decf	_g_reciver_ccp2_isr_fire_flag^(0+128),w	;volatile
  8840  1CF6  1D03               	btfss	3,2
  8841  1CF7  0008               	return
  8842                           
  8843                           ;manchester_decode.c: 285:     {;manchester_decode.c: 293:         if(PORTCbits.RC1 == 0
      +                          )
  8844  1CF8  1283               	bcf	3,5	;RP0=0, select bank0
  8845  1CF9  1887               	btfsc	7,1	;volatile
  8846  1CFA  2CFF               	goto	l8334
  8847                           
  8848                           ;manchester_decode.c: 294:         {;manchester_decode.c: 295:             g_generic_tim
      +                          er=80;
  8849  1CFB  3050               	movlw	80
  8850  1CFC  00D9               	movwf	_g_generic_timer	;volatile
  8851  1CFD  3000               	movlw	0
  8852  1CFE  00DA               	movwf	_g_generic_timer+1	;volatile
  8853  1CFF                     l8334:	
  8854                           
  8855                           ;manchester_decode.c: 299:         if(g_generic_timer==0)
  8856  1CFF  0859               	movf	_g_generic_timer,w	;volatile
  8857  1D00  045A               	iorwf	_g_generic_timer+1,w	;volatile
  8858  1D01  1D03               	btfss	3,2
  8859  1D02  0008               	return
  8860  1D03                     l8350:	
  8861                           
  8862                           ;manchester_decode.c: 301:             while(Frame_Decode(DataRCV)!=0xFF)
  8863  1D03  084D               	movf	Check_RCV_Data@DataRCV,w
  8864  1D04  160A  158A  25D4  160A  158A  	fcall	_Frame_Decode
  8865  1D09  0A29               	incf	?_Frame_Decode,w
  8866  1D0A  042A               	iorwf	?_Frame_Decode+1,w
  8867  1D0B  1903               	btfsc	3,2
  8868  1D0C  2D3A               	goto	l8352
  8869                           
  8870                           ;manchester_decode.c: 302:             {;manchester_decode.c: 303:                 if(Da
      +                          taRCV->RCV_Frame)
  8871  1D0D  084D               	movf	Check_RCV_Data@DataRCV,w
  8872  1D0E  3E04               	addlw	4
  8873  1D0F  0084               	movwf	4
  8874  1D10  1783               	bsf	3,7	;select IRP bank2
  8875  1D11  0800               	movf	0,w
  8876  1D12  1903               	btfsc	3,2
  8877  1D13  2D03               	goto	l8350
  8878                           
  8879                           ;manchester_decode.c: 304:                 {;manchester_decode.c: 305:                  
      +                             if(CRC_check(DataRCV) && Check_Time_Date(time, time_limit))
  8880  1D14  084D               	movf	Check_RCV_Data@DataRCV,w
  8881  1D15  160A  158A  2121  160A  158A  	fcall	_CRC_check
  8882  1D1A  3A00               	xorlw	0
  8883  1D1B  1903               	skipnz
  8884  1D1C  2D33               	goto	l8348
  8885  1D1D  084B               	movf	Check_RCV_Data@time_limit,w
  8886  1D1E  00CC               	movwf	??_Check_RCV_Data
  8887  1D1F  084C               	movf	??_Check_RCV_Data,w
  8888  1D20  00C2               	movwf	Check_Time_Date@time_limit
  8889  1D21  084A               	movf	Check_RCV_Data@time,w
  8890  1D22  160A  118A  25A4  160A  158A  	fcall	_Check_Time_Date
  8891  1D27  3A00               	xorlw	0
  8892  1D28  1903               	skipnz
  8893  1D29  2D33               	goto	l8348
  8894                           
  8895                           ;manchester_decode.c: 306:                     {;manchester_decode.c: 307:              
      +                                     if(Check_Event(DataRCV))
  8896  1D2A  084D               	movf	Check_RCV_Data@DataRCV,w
  8897  1D2B  160A  118A  22C9  160A  158A  	fcall	_Check_Event
  8898  1D30  3A00               	xorlw	0
  8899  1D31  1D03               	btfss	3,2
  8900  1D32  0008               	return
  8901  1D33                     l8348:	
  8902                           
  8903                           ;manchester_decode.c: 316:                     DataRCV->RCV_Frame=0;
  8904  1D33  1283               	bcf	3,5	;RP0=0, select bank0
  8905  1D34  084D               	movf	Check_RCV_Data@DataRCV,w
  8906  1D35  3E04               	addlw	4
  8907  1D36  0084               	movwf	4
  8908  1D37  1783               	bsf	3,7	;select IRP bank2
  8909  1D38  0180               	clrf	0
  8910  1D39  2D03               	goto	l8350
  8911  1D3A                     l8352:	
  8912                           
  8913                           ;manchester_decode.c: 320:             g_reciver_ccp2_isr_fire_flag=0;
  8914  1D3A  1683               	bsf	3,5	;RP0=1, select bank1
  8915  1D3B  01AF               	clrf	_g_reciver_ccp2_isr_fire_flag^(0+128)	;volatile
  8916  1D3C  0008               	return
  8917  1D3D                     __end_of_Check_RCV_Data:	
  8918                           
  8919                           	psect	text27
  8920  15A4                     __ptext27:	
  8921 ;; *************** function _Check_Time_Date *****************
  8922 ;; Defined at:
  8923 ;;		line 325 in file "manchester_decode.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;  time            1    wreg     PTR struct .
  8926 ;;		 -> main@time(7), 
  8927 ;;  time_limit      1   34[BANK0 ] PTR struct .
  8928 ;;		 -> main@menudef(7), 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  time            1   41[BANK0 ] PTR struct .
  8931 ;;		 -> main@time(7), 
  8932 ;;  time_limit_m    2   39[BANK0 ] unsigned int 
  8933 ;;  current_time    2   37[BANK0 ] unsigned int 
  8934 ;;  time_limit_m    2   35[BANK0 ] unsigned int 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      unsigned char 
  8937 ;; Registers used:
  8938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : B00/800
  8941 ;;		On exit  : B00/800
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8944 ;;      Params:         0       1       0       0       0
  8945 ;;      Locals:         0       7       0       0       0
  8946 ;;      Temps:          0       0       0       0       0
  8947 ;;      Totals:         0       8       0       0       0
  8948 ;;Total ram usage:        8 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    8
  8951 ;; This function calls:
  8952 ;;		_PCF8583_Read_Time_Date
  8953 ;;		___wmul
  8954 ;; This function is called by:
  8955 ;;		_Check_RCV_Data
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           
  8960                           ;psect for function _Check_Time_Date
  8961  15A4                     _Check_Time_Date:	
  8962                           
  8963                           ;incstack = 0
  8964 ;; hardware stack exceeded
  8965                           ; Regs used in _Check_Time_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8966                           ;Check_Time_Date@time stored from wreg
  8967  15A4  00C9               	movwf	Check_Time_Date@time
  8968                           
  8969                           ;manchester_decode.c: 325: unsigned char Check_Time_Date(TimeStruct *time, MenuParamPont
      +                          erStruct *time_limit);manchester_decode.c: 326: {;manchester_decode.c: 327:     unsigned
      +                           int time_limit_min_1, time_limit_min_2, current_time_min;;manchester_decode.c: 329:    
      +                           PCF8583_Read_Time_Date(time);
  8970  15A5  0849               	movf	Check_Time_Date@time,w
  8971  15A6  00B5               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  8972  15A7  3001               	movlw	1
  8973  15A8  00B6               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  8974  15A9  120A  118A  26CF  160A  118A  	fcall	_PCF8583_Read_Time_Date
  8975                           
  8976                           ;manchester_decode.c: 331:     if(time->weekday==saturday || time->weekday==sunday)
  8977  15AE  1283               	bcf	3,5	;RP0=0, select bank0
  8978  15AF  0849               	movf	Check_Time_Date@time,w
  8979  15B0  3E06               	addlw	6
  8980  15B1  0084               	movwf	4
  8981  15B2  3005               	movlw	5
  8982  15B3  1783               	bsf	3,7	;select IRP bank2
  8983  15B4  0600               	xorwf	0,w
  8984  15B5  1903               	btfsc	3,2
  8985  15B6  2DBE               	goto	l8140
  8986  15B7  0849               	movf	Check_Time_Date@time,w
  8987  15B8  3E06               	addlw	6
  8988  15B9  0084               	movwf	4
  8989  15BA  3006               	movlw	6
  8990  15BB  0600               	xorwf	0,w
  8991  15BC  1D03               	btfss	3,2
  8992  15BD  2E3A               	goto	l8156
  8993  15BE                     l8140:	
  8994                           
  8995                           ;manchester_decode.c: 332:     {;manchester_decode.c: 333:         time_limit_min_1=time
      +                          _limit->time_limit_free_day_1_ptr->param*60+
  8996  15BE  0842               	movf	Check_Time_Date@time_limit,w
  8997  15BF  3E05               	addlw	5
  8998  15C0  0084               	movwf	4
  8999  15C1  0800               	movf	0,w
  9000  15C2  3E05               	addlw	5
  9001  15C3  0084               	movwf	4
  9002  15C4  0800               	movf	0,w
  9003  15C5  00A6               	movwf	___wmul@multiplier
  9004  15C6  01A7               	clrf	___wmul@multiplier+1
  9005  15C7  1BA6               	btfsc	___wmul@multiplier,7
  9006  15C8  03A7               	decf	___wmul@multiplier+1,f
  9007  15C9  303C               	movlw	60
  9008  15CA  00A8               	movwf	___wmul@multiplicand
  9009  15CB  3000               	movlw	0
  9010  15CC  00A9               	movwf	___wmul@multiplicand+1
  9011  15CD  160A  158A  2142  160A  118A  	fcall	___wmul
  9012  15D2  0842               	movf	Check_Time_Date@time_limit,w
  9013  15D3  3E05               	addlw	5
  9014  15D4  0084               	movwf	4
  9015  15D5  1783               	bsf	3,7	;select IRP bank2
  9016  15D6  0800               	movf	0,w
  9017  15D7  3E06               	addlw	6
  9018  15D8  0084               	movwf	4
  9019  15D9  0800               	movf	0,w
  9020  15DA  0726               	addwf	?___wmul,w
  9021  15DB  00C7               	movwf	Check_Time_Date@time_limit_min_1
  9022  15DC  3000               	movlw	0
  9023  15DD  1B80               	btfsc	0,7
  9024  15DE  30FF               	movlw	255
  9025  15DF  1803               	skipnc
  9026  15E0  3E01               	addlw	1
  9027  15E1  0727               	addwf	?___wmul+1,w
  9028  15E2  00C8               	movwf	Check_Time_Date@time_limit_min_1+1
  9029                           
  9030                           ;manchester_decode.c: 335:         time_limit_min_2=time_limit->time_limit_free_day_2_pt
      +                          r->param*60+
  9031  15E3  0842               	movf	Check_Time_Date@time_limit,w
  9032  15E4  3E06               	addlw	6
  9033  15E5                     L9:	
  9034  15E5  0084               	movwf	4
  9035  15E6  0800               	movf	0,w
  9036  15E7  3E05               	addlw	5
  9037  15E8  0084               	movwf	4
  9038  15E9  0800               	movf	0,w
  9039  15EA  00A6               	movwf	___wmul@multiplier
  9040  15EB  01A7               	clrf	___wmul@multiplier+1
  9041  15EC  1BA6               	btfsc	___wmul@multiplier,7
  9042  15ED  03A7               	decf	___wmul@multiplier+1,f
  9043  15EE  303C               	movlw	60
  9044  15EF  00A8               	movwf	___wmul@multiplicand
  9045  15F0  3000               	movlw	0
  9046  15F1  00A9               	movwf	___wmul@multiplicand+1
  9047  15F2  160A  158A  2142  160A  118A  	fcall	___wmul
  9048  15F7  0842               	movf	Check_Time_Date@time_limit,w
  9049  15F8  3E06               	addlw	6
  9050  15F9  0084               	movwf	4
  9051  15FA  1783               	bsf	3,7	;select IRP bank2
  9052  15FB  0800               	movf	0,w
  9053  15FC  3E06               	addlw	6
  9054  15FD  0084               	movwf	4
  9055  15FE  0800               	movf	0,w
  9056  15FF  0726               	addwf	?___wmul,w
  9057  1600  00C3               	movwf	Check_Time_Date@time_limit_min_2
  9058  1601  3000               	movlw	0
  9059  1602  1B80               	btfsc	0,7
  9060  1603  30FF               	movlw	255
  9061  1604  1803               	skipnc
  9062  1605  3E01               	addlw	1
  9063  1606  0727               	addwf	?___wmul+1,w
  9064  1607  00C4               	movwf	Check_Time_Date@time_limit_min_2+1
  9065                           
  9066                           ;manchester_decode.c: 337:         current_time_min=time->hours*60+time->minutes;
  9067  1608  0849               	movf	Check_Time_Date@time,w
  9068  1609  3E02               	addlw	2
  9069  160A  0084               	movwf	4
  9070  160B  0800               	movf	0,w
  9071  160C  00A6               	movwf	___wmul@multiplier
  9072  160D  01A7               	clrf	___wmul@multiplier+1
  9073  160E  1BA6               	btfsc	___wmul@multiplier,7
  9074  160F  03A7               	decf	___wmul@multiplier+1,f
  9075  1610  303C               	movlw	60
  9076  1611  00A8               	movwf	___wmul@multiplicand
  9077  1612  3000               	movlw	0
  9078  1613  00A9               	movwf	___wmul@multiplicand+1
  9079  1614  160A  158A  2142  160A  118A  	fcall	___wmul
  9080  1619  0A49               	incf	Check_Time_Date@time,w
  9081  161A  0084               	movwf	4
  9082  161B  1783               	bsf	3,7	;select IRP bank2
  9083  161C  0800               	movf	0,w
  9084  161D  0726               	addwf	?___wmul,w
  9085  161E  00C5               	movwf	Check_Time_Date@current_time_min
  9086  161F  3000               	movlw	0
  9087  1620  1B80               	btfsc	0,7
  9088  1621  30FF               	movlw	255
  9089  1622  1803               	skipnc
  9090  1623  3E01               	addlw	1
  9091  1624  0727               	addwf	?___wmul+1,w
  9092  1625  00C6               	movwf	Check_Time_Date@current_time_min+1
  9093                           
  9094                           ;manchester_decode.c: 340:         if(time_limit_min_1>current_time_min &&
  9095  1626  0848               	movf	Check_Time_Date@time_limit_min_1+1,w
  9096  1627  0246               	subwf	Check_Time_Date@current_time_min+1,w
  9097  1628  1D03               	skipz
  9098  1629  2E2C               	goto	u8155
  9099  162A  0847               	movf	Check_Time_Date@time_limit_min_1,w
  9100  162B  0245               	subwf	Check_Time_Date@current_time_min,w
  9101  162C                     u8155:	
  9102  162C  1803               	skipnc
  9103  162D  2E38               	goto	l8152
  9104  162E  0844               	movf	Check_Time_Date@time_limit_min_2+1,w
  9105  162F  0248               	subwf	Check_Time_Date@time_limit_min_1+1,w
  9106  1630  1D03               	skipz
  9107  1631  2E34               	goto	u8165
  9108  1632  0843               	movf	Check_Time_Date@time_limit_min_2,w
  9109  1633  0247               	subwf	Check_Time_Date@time_limit_min_1,w
  9110  1634                     u8165:	
  9111  1634  1803               	skipnc
  9112  1635  2E38               	goto	l8152
  9113                           
  9114                           ;manchester_decode.c: 342:         {;manchester_decode.c: 343:             return 1;
  9115  1636  3001               	movlw	1
  9116  1637  0008               	return
  9117  1638                     l8152:	
  9118                           
  9119                           ;manchester_decode.c: 345:         {;manchester_decode.c: 346:             return 0;
  9120  1638  3000               	movlw	0
  9121  1639  0008               	return
  9122  163A                     l8156:	
  9123                           
  9124                           ;manchester_decode.c: 350:     {;manchester_decode.c: 351:         time_limit_min_1=time
      +                          _limit->time_limit_work_day_1_ptr->param*60+
  9125  163A  0842               	movf	Check_Time_Date@time_limit,w
  9126  163B  3E03               	addlw	3
  9127  163C  0084               	movwf	4
  9128  163D  0800               	movf	0,w
  9129  163E  3E05               	addlw	5
  9130  163F  0084               	movwf	4
  9131  1640  0800               	movf	0,w
  9132  1641  00A6               	movwf	___wmul@multiplier
  9133  1642  01A7               	clrf	___wmul@multiplier+1
  9134  1643  1BA6               	btfsc	___wmul@multiplier,7
  9135  1644  03A7               	decf	___wmul@multiplier+1,f
  9136  1645  303C               	movlw	60
  9137  1646  00A8               	movwf	___wmul@multiplicand
  9138  1647  3000               	movlw	0
  9139  1648  00A9               	movwf	___wmul@multiplicand+1
  9140  1649  160A  158A  2142  160A  118A  	fcall	___wmul
  9141  164E  0842               	movf	Check_Time_Date@time_limit,w
  9142  164F  3E05               	addlw	5
  9143  1650  0084               	movwf	4
  9144  1651  1783               	bsf	3,7	;select IRP bank2
  9145  1652  0800               	movf	0,w
  9146  1653  3E06               	addlw	6
  9147  1654  0084               	movwf	4
  9148  1655  0800               	movf	0,w
  9149  1656  0726               	addwf	?___wmul,w
  9150  1657  00C7               	movwf	Check_Time_Date@time_limit_min_1
  9151  1658  3000               	movlw	0
  9152  1659  1B80               	btfsc	0,7
  9153  165A  30FF               	movlw	255
  9154  165B  1803               	skipnc
  9155  165C  3E01               	addlw	1
  9156  165D  0727               	addwf	?___wmul+1,w
  9157  165E  00C8               	movwf	Check_Time_Date@time_limit_min_1+1
  9158                           
  9159                           ;manchester_decode.c: 354:         time_limit_min_2=time_limit->time_limit_work_day_2_pt
      +                          r->param*60+
  9160  165F  0842               	movf	Check_Time_Date@time_limit,w
  9161  1660  3E04               	addlw	4
  9162  1661  2DE5               	goto	L9
  9163  1662                     __end_of_Check_Time_Date:	
  9164                           ;manchester_decode.c: 359:         if(time_limit_min_1>current_time_min &&
  9165                           
  9166                           ;manchester_decode.c: 357:         current_time_min=time->hours*60+time->minutes;
  9167                           
  9168                           
  9169                           	psect	text28
  9170  1942                     __ptext28:	
  9171 ;; *************** function ___wmul *****************
  9172 ;; Defined at:
  9173 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;  multiplier      2    6[BANK0 ] unsigned int 
  9176 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;  product         2   10[BANK0 ] unsigned int 
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  2    6[BANK0 ] unsigned int 
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0
  9183 ;; Tracked objects:
  9184 ;;		On entry : 300/800
  9185 ;;		On exit  : 300/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9188 ;;      Params:         0       4       0       0       0
  9189 ;;      Locals:         0       2       0       0       0
  9190 ;;      Temps:          0       0       0       0       0
  9191 ;;      Totals:         0       6       0       0       0
  9192 ;;Total ram usage:        6 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    4
  9195 ;; This function calls:
  9196 ;;		Nothing
  9197 ;; This function is called by:
  9198 ;;		_Check_Time_Date
  9199 ;;		_Find_Weekday
  9200 ;; This function uses a non-reentrant model
  9201 ;;
  9202                           
  9203                           
  9204                           ;psect for function ___wmul
  9205  1942                     ___wmul:	
  9206                           
  9207                           ;incstack = 0
  9208                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9209  1942  01AA               	clrf	___wmul@product
  9210  1943  01AB               	clrf	___wmul@product+1
  9211  1944                     l6818:	
  9212  1944  1C26               	btfss	___wmul@multiplier,0
  9213  1945  294C               	goto	l962
  9214  1946  0828               	movf	___wmul@multiplicand,w
  9215  1947  07AA               	addwf	___wmul@product,f
  9216  1948  1803               	skipnc
  9217  1949  0AAB               	incf	___wmul@product+1,f
  9218  194A  0829               	movf	___wmul@multiplicand+1,w
  9219  194B  07AB               	addwf	___wmul@product+1,f
  9220  194C                     l962:	
  9221  194C  3001               	movlw	1
  9222  194D                     u6645:	
  9223  194D  1003               	clrc
  9224  194E  0DA8               	rlf	___wmul@multiplicand,f
  9225  194F  0DA9               	rlf	___wmul@multiplicand+1,f
  9226  1950  3EFF               	addlw	-1
  9227  1951  1D03               	skipz
  9228  1952  294D               	goto	u6645
  9229  1953  3001               	movlw	1
  9230  1954                     u6655:	
  9231  1954  1003               	clrc
  9232  1955  0CA7               	rrf	___wmul@multiplier+1,f
  9233  1956  0CA6               	rrf	___wmul@multiplier,f
  9234  1957  3EFF               	addlw	-1
  9235  1958  1D03               	skipz
  9236  1959  2954               	goto	u6655
  9237  195A  0826               	movf	___wmul@multiplier,w
  9238  195B  0427               	iorwf	___wmul@multiplier+1,w
  9239  195C  1D03               	btfss	3,2
  9240  195D  2944               	goto	l6818
  9241  195E  082B               	movf	___wmul@product+1,w
  9242  195F  00A7               	movwf	?___wmul+1
  9243  1960  082A               	movf	___wmul@product,w
  9244  1961  00A6               	movwf	?___wmul
  9245  1962  0008               	return
  9246  1963                     __end_of___wmul:	
  9247                           
  9248                           	psect	text29
  9249  06CF                     __ptext29:	
  9250 ;; *************** function _PCF8583_Read_Time_Date *****************
  9251 ;; Defined at:
  9252 ;;		line 59 in file "pcf8583.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;  time_struct_    2   21[BANK0 ] PTR struct .
  9255 ;;		 -> Menu_Set_Time@time(7), main@time(7), 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  year            1   33[BANK0 ] unsigned char 
  9258 ;;  bcd_mon         1   32[BANK0 ] unsigned char 
  9259 ;;  bcd_day         1   31[BANK0 ] unsigned char 
  9260 ;;  bcd_hrs         1   30[BANK0 ] unsigned char 
  9261 ;;  bcd_min         1   29[BANK0 ] unsigned char 
  9262 ;;  bcd_sec         1   28[BANK0 ] unsigned char 
  9263 ;;  year_bits       1   27[BANK0 ] unsigned char 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      void 
  9266 ;; Registers used:
  9267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 300/800
  9270 ;;		On exit  : 300/100
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9273 ;;      Params:         0       2       0       0       0
  9274 ;;      Locals:         0       7       0       0       0
  9275 ;;      Temps:          0       4       0       0       0
  9276 ;;      Totals:         0      13       0       0       0
  9277 ;;Total ram usage:       13 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    7
  9280 ;; This function calls:
  9281 ;;		_BCD_2_DEC
  9282 ;;		_I2C_Master_Read
  9283 ;;		_I2C_Master_Start
  9284 ;;		_I2C_Master_Stop
  9285 ;;		_I2C_Master_Write
  9286 ;;		_PCF8583_Read_Byte
  9287 ;;		_PCF8583_Write_Byte
  9288 ;; This function is called by:
  9289 ;;		_Check_Time_Date
  9290 ;;		_Show_Time
  9291 ;;		_Menu_Set_Time
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           
  9296                           ;psect for function _PCF8583_Read_Time_Date
  9297  06CF                     _PCF8583_Read_Time_Date:	
  9298                           
  9299                           ;pcf8583.c: 59: void PCF8583_Read_Time_Date(TimeStruct *time_struct_ptr);pcf8583.c: 60: 
      +                          {;pcf8583.c: 61:  unsigned char year_bits;;pcf8583.c: 62:  unsigned char year;;pcf8583.c
      +                          : 63:  unsigned char bcd_sec;;pcf8583.c: 64:  unsigned char bcd_min;;pcf8583.c: 65:  uns
      +                          igned char bcd_hrs;;pcf8583.c: 66:  unsigned char bcd_day;;pcf8583.c: 67:  unsigned char
      +                           bcd_mon;;pcf8583.c: 69:     INTCONbits.GIE=0;
  9300                           
  9301                           ;incstack = 0
  9302 ;; hardware stack exceeded
  9303                           ; Regs used in _PCF8583_Read_Time_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9304  06CF  138B               	bcf	11,7	;volatile
  9305                           
  9306                           ;pcf8583.c: 71:  I2C_Master_Start();
  9307  06D0  160A  158A  205D  120A  118A  	fcall	_I2C_Master_Start
  9308                           
  9309                           ;pcf8583.c: 72:  I2C_Master_Write(0xA0);
  9310  06D5  30A0               	movlw	160
  9311  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  9312  06D7  00A6               	movwf	I2C_Master_Write@data
  9313  06D8  3000               	movlw	0
  9314  06D9  00A7               	movwf	I2C_Master_Write@data+1
  9315  06DA  160A  158A  206D  120A  118A  	fcall	_I2C_Master_Write
  9316                           
  9317                           ;pcf8583.c: 73:  I2C_Master_Write(0x02);
  9318  06DF  3002               	movlw	2
  9319  06E0  00A6               	movwf	I2C_Master_Write@data
  9320  06E1  3000               	movlw	0
  9321  06E2  00A7               	movwf	I2C_Master_Write@data+1
  9322  06E3  160A  158A  206D  120A  118A  	fcall	_I2C_Master_Write
  9323                           
  9324                           ;pcf8583.c: 74:  I2C_Master_Start();
  9325  06E8  160A  158A  205D  120A  118A  	fcall	_I2C_Master_Start
  9326                           
  9327                           ;pcf8583.c: 75:  I2C_Master_Write(0xA1);
  9328  06ED  30A1               	movlw	161
  9329  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  9330  06EF  00A6               	movwf	I2C_Master_Write@data
  9331  06F0  3000               	movlw	0
  9332  06F1  00A7               	movwf	I2C_Master_Write@data+1
  9333  06F2  160A  158A  206D  120A  118A  	fcall	_I2C_Master_Write
  9334                           
  9335                           ;pcf8583.c: 76:  bcd_sec = I2C_Master_Read(1);
  9336  06F7  3001               	movlw	1
  9337  06F8  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  9338  06FD  00B7               	movwf	??_PCF8583_Read_Time_Date
  9339  06FE  0837               	movf	??_PCF8583_Read_Time_Date,w
  9340  06FF  00BC               	movwf	PCF8583_Read_Time_Date@bcd_sec
  9341                           
  9342                           ;pcf8583.c: 77:  bcd_min = I2C_Master_Read(1);
  9343  0700  3001               	movlw	1
  9344  0701  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  9345  0706  00B7               	movwf	??_PCF8583_Read_Time_Date
  9346  0707  0837               	movf	??_PCF8583_Read_Time_Date,w
  9347  0708  00BD               	movwf	PCF8583_Read_Time_Date@bcd_min
  9348                           
  9349                           ;pcf8583.c: 78:  bcd_hrs = I2C_Master_Read(1);
  9350  0709  3001               	movlw	1
  9351  070A  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  9352  070F  00B7               	movwf	??_PCF8583_Read_Time_Date
  9353  0710  0837               	movf	??_PCF8583_Read_Time_Date,w
  9354  0711  00BE               	movwf	PCF8583_Read_Time_Date@bcd_hrs
  9355                           
  9356                           ;pcf8583.c: 79:  bcd_day = I2C_Master_Read(1);
  9357  0712  3001               	movlw	1
  9358  0713  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  9359  0718  00B7               	movwf	??_PCF8583_Read_Time_Date
  9360  0719  0837               	movf	??_PCF8583_Read_Time_Date,w
  9361  071A  00BF               	movwf	PCF8583_Read_Time_Date@bcd_day
  9362                           
  9363                           ;pcf8583.c: 80:  bcd_mon = I2C_Master_Read(0);
  9364  071B  3000               	movlw	0
  9365  071C  160A  158A  21C9  120A  118A  	fcall	_I2C_Master_Read
  9366  0721  00B7               	movwf	??_PCF8583_Read_Time_Date
  9367  0722  0837               	movf	??_PCF8583_Read_Time_Date,w
  9368  0723  00C0               	movwf	PCF8583_Read_Time_Date@bcd_mon
  9369                           
  9370                           ;pcf8583.c: 81:     I2C_Master_Stop();
  9371  0724  160A  158A  2062  120A  118A  	fcall	_I2C_Master_Stop
  9372                           
  9373                           ;pcf8583.c: 83:  time_struct_ptr->seconds = BCD_2_DEC(bcd_sec);
  9374  0729  1283               	bcf	3,5	;RP0=0, select bank0
  9375  072A  083C               	movf	PCF8583_Read_Time_Date@bcd_sec,w
  9376  072B  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  9377  0730  00B7               	movwf	??_PCF8583_Read_Time_Date
  9378  0731  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  9379  0732  0084               	movwf	4
  9380  0733  1783               	bsf	3,7
  9381  0734  1C36               	btfss	PCF8583_Read_Time_Date@time_struct_ptr+1,0
  9382  0735  1383               	bcf	3,7
  9383  0736  0837               	movf	??_PCF8583_Read_Time_Date,w
  9384  0737  0080               	movwf	0
  9385                           
  9386                           ;pcf8583.c: 84:  time_struct_ptr->minutes = BCD_2_DEC(bcd_min);
  9387  0738  083D               	movf	PCF8583_Read_Time_Date@bcd_min,w
  9388  0739  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  9389  073E  00B7               	movwf	??_PCF8583_Read_Time_Date
  9390  073F  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  9391  0740  3E01               	addlw	1
  9392  0741  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  9393  0742  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  9394  0743  1803               	skipnc
  9395  0744  3E01               	addlw	1
  9396  0745  3E00               	addlw	0
  9397  0746  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  9398  0747  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  9399  0748  0084               	movwf	4
  9400  0749  1783               	bsf	3,7
  9401  074A  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  9402  074B  1383               	bcf	3,7
  9403  074C  0837               	movf	??_PCF8583_Read_Time_Date,w
  9404  074D  0080               	movwf	0
  9405                           
  9406                           ;pcf8583.c: 85:  time_struct_ptr->hours = BCD_2_DEC(bcd_hrs & 0x3F);
  9407  074E  083E               	movf	PCF8583_Read_Time_Date@bcd_hrs,w
  9408  074F  393F               	andlw	63
  9409  0750  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  9410  0755  00B7               	movwf	??_PCF8583_Read_Time_Date
  9411  0756  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  9412  0757  3E02               	addlw	2
  9413  0758  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  9414  0759  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  9415  075A  1803               	skipnc
  9416  075B  3E01               	addlw	1
  9417  075C  3E00               	addlw	0
  9418  075D  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  9419  075E  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  9420  075F  0084               	movwf	4
  9421  0760  1783               	bsf	3,7
  9422  0761  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  9423  0762  1383               	bcf	3,7
  9424  0763  0837               	movf	??_PCF8583_Read_Time_Date,w
  9425  0764  0080               	movwf	0
  9426                           
  9427                           ;pcf8583.c: 86:  time_struct_ptr->day = BCD_2_DEC(bcd_day & 0x3F);
  9428  0765  083F               	movf	PCF8583_Read_Time_Date@bcd_day,w
  9429  0766  393F               	andlw	63
  9430  0767  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  9431  076C  00B7               	movwf	??_PCF8583_Read_Time_Date
  9432  076D  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  9433  076E  3E03               	addlw	3
  9434  076F  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  9435  0770  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  9436  0771  1803               	skipnc
  9437  0772  3E01               	addlw	1
  9438  0773  3E00               	addlw	0
  9439  0774  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  9440  0775  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  9441  0776  0084               	movwf	4
  9442  0777  1783               	bsf	3,7
  9443  0778  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  9444  0779  1383               	bcf	3,7
  9445  077A  0837               	movf	??_PCF8583_Read_Time_Date,w
  9446  077B  0080               	movwf	0
  9447                           
  9448                           ;pcf8583.c: 87:  time_struct_ptr->month = BCD_2_DEC(bcd_mon & 0x1F);
  9449  077C  0840               	movf	PCF8583_Read_Time_Date@bcd_mon,w
  9450  077D  391F               	andlw	31
  9451  077E  120A  118A  27E6  120A  118A  	fcall	_BCD_2_DEC
  9452  0783  00B7               	movwf	??_PCF8583_Read_Time_Date
  9453  0784  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  9454  0785  3E04               	addlw	4
  9455  0786  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  9456  0787  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  9457  0788  1803               	skipnc
  9458  0789  3E01               	addlw	1
  9459  078A  3E00               	addlw	0
  9460  078B  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  9461  078C  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  9462  078D  0084               	movwf	4
  9463  078E  1783               	bsf	3,7
  9464  078F  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  9465  0790  1383               	bcf	3,7
  9466  0791  0837               	movf	??_PCF8583_Read_Time_Date,w
  9467  0792  0080               	movwf	0
  9468                           
  9469                           ;pcf8583.c: 88:     time_struct_ptr->weekday = bcd_mon>>5;
  9470  0793  0840               	movf	PCF8583_Read_Time_Date@bcd_mon,w
  9471  0794  00B7               	movwf	??_PCF8583_Read_Time_Date
  9472  0795  3005               	movlw	5
  9473  0796                     u8105:	
  9474  0796  1003               	clrc
  9475  0797  0CB7               	rrf	??_PCF8583_Read_Time_Date,f
  9476  0798  3EFF               	addlw	-1
  9477  0799  1D03               	skipz
  9478  079A  2F96               	goto	u8105
  9479  079B  0837               	movf	??_PCF8583_Read_Time_Date,w
  9480  079C  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  9481  079D  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  9482  079E  3E06               	addlw	6
  9483  079F  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  9484  07A0  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  9485  07A1  1803               	skipnc
  9486  07A2  3E01               	addlw	1
  9487  07A3  3E00               	addlw	0
  9488  07A4  00BA               	movwf	??_PCF8583_Read_Time_Date+3
  9489  07A5  0839               	movf	??_PCF8583_Read_Time_Date+2,w
  9490  07A6  0084               	movwf	4
  9491  07A7  1783               	bsf	3,7
  9492  07A8  1C3A               	btfss	??_PCF8583_Read_Time_Date+3,0
  9493  07A9  1383               	bcf	3,7
  9494  07AA  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  9495  07AB  0080               	movwf	0
  9496                           
  9497                           ;pcf8583.c: 90:  year_bits = bcd_day >> 6;
  9498  07AC  083F               	movf	PCF8583_Read_Time_Date@bcd_day,w
  9499  07AD  00B7               	movwf	??_PCF8583_Read_Time_Date
  9500  07AE  3006               	movlw	6
  9501  07AF                     u8115:	
  9502  07AF  1003               	clrc
  9503  07B0  0CB7               	rrf	??_PCF8583_Read_Time_Date,f
  9504  07B1  3EFF               	addlw	-1
  9505  07B2  1D03               	skipz
  9506  07B3  2FAF               	goto	u8115
  9507  07B4  0837               	movf	??_PCF8583_Read_Time_Date,w
  9508  07B5  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  9509  07B6  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  9510  07B7  00BB               	movwf	PCF8583_Read_Time_Date@year_bits
  9511                           
  9512                           ;pcf8583.c: 93:  year = PCF8583_Read_Byte(0x10);
  9513  07B8  3010               	movlw	16
  9514  07B9  160A  158A  233A  120A  118A  	fcall	_PCF8583_Read_Byte
  9515  07BE  00B7               	movwf	??_PCF8583_Read_Time_Date
  9516  07BF  0837               	movf	??_PCF8583_Read_Time_Date,w
  9517  07C0  00C1               	movwf	PCF8583_Read_Time_Date@year
  9518  07C1                     l8126:	
  9519                           ;pcf8583.c: 94:  while(year_bits != (year & 3))
  9520                           
  9521                           
  9522                           ;pcf8583.c: 94:  while(year_bits != (year & 3))
  9523  07C1  0841               	movf	PCF8583_Read_Time_Date@year,w
  9524  07C2  3903               	andlw	3
  9525  07C3  063B               	xorwf	PCF8583_Read_Time_Date@year_bits,w
  9526  07C4  1903               	btfsc	3,2
  9527  07C5  2FCB               	goto	l8128
  9528                           
  9529                           ;pcf8583.c: 95:  {;pcf8583.c: 96:   year++;
  9530  07C6  3001               	movlw	1
  9531  07C7  00B7               	movwf	??_PCF8583_Read_Time_Date
  9532  07C8  0837               	movf	??_PCF8583_Read_Time_Date,w
  9533  07C9  07C1               	addwf	PCF8583_Read_Time_Date@year,f
  9534  07CA  2FC1               	goto	l8126
  9535  07CB                     l8128:	
  9536                           
  9537                           ;pcf8583.c: 98:  time_struct_ptr->year = year;
  9538  07CB  0841               	movf	PCF8583_Read_Time_Date@year,w
  9539  07CC  00B7               	movwf	??_PCF8583_Read_Time_Date
  9540  07CD  0835               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  9541  07CE  3E05               	addlw	5
  9542  07CF  00B8               	movwf	??_PCF8583_Read_Time_Date+1
  9543  07D0  0836               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  9544  07D1  1803               	skipnc
  9545  07D2  3E01               	addlw	1
  9546  07D3  3E00               	addlw	0
  9547  07D4  00B9               	movwf	??_PCF8583_Read_Time_Date+2
  9548  07D5  0838               	movf	??_PCF8583_Read_Time_Date+1,w
  9549  07D6  0084               	movwf	4
  9550  07D7  1783               	bsf	3,7
  9551  07D8  1C39               	btfss	??_PCF8583_Read_Time_Date+2,0
  9552  07D9  1383               	bcf	3,7
  9553  07DA  0837               	movf	??_PCF8583_Read_Time_Date,w
  9554  07DB  0080               	movwf	0
  9555                           
  9556                           ;pcf8583.c: 99:  PCF8583_Write_Byte(0x10, year);
  9557  07DC  0841               	movf	PCF8583_Read_Time_Date@year,w
  9558  07DD  00B7               	movwf	??_PCF8583_Read_Time_Date
  9559  07DE  0837               	movf	??_PCF8583_Read_Time_Date,w
  9560  07DF  00A8               	movwf	PCF8583_Write_Byte@data
  9561  07E0  3010               	movlw	16
  9562  07E1  160A  158A  2245   	fcall	_PCF8583_Write_Byte
  9563                           
  9564                           ;pcf8583.c: 101:     INTCONbits.GIE=1;
  9565  07E4  178B               	bsf	11,7	;volatile
  9566  07E5  0008               	return
  9567  07E6                     __end_of_PCF8583_Read_Time_Date:	
  9568                           
  9569                           	psect	text30
  9570  1A45                     __ptext30:	
  9571 ;; *************** function _PCF8583_Write_Byte *****************
  9572 ;; Defined at:
  9573 ;;		line 35 in file "pcf8583.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;  address         1    wreg     unsigned char 
  9576 ;;  data            1    8[BANK0 ] unsigned char 
  9577 ;; Auto vars:     Size  Location     Type
  9578 ;;  address         1   11[BANK0 ] unsigned char 
  9579 ;; Return value:  Size  Location     Type
  9580 ;;                  1    wreg      void 
  9581 ;; Registers used:
  9582 ;;		wreg, status,2, status,0, pclath, cstack
  9583 ;; Tracked objects:
  9584 ;;		On entry : 300/800
  9585 ;;		On exit  : 300/100
  9586 ;;		Unchanged: 0/0
  9587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9588 ;;      Params:         0       1       0       0       0
  9589 ;;      Locals:         0       1       0       0       0
  9590 ;;      Temps:          0       2       0       0       0
  9591 ;;      Totals:         0       4       0       0       0
  9592 ;;Total ram usage:        4 bytes
  9593 ;; Hardware stack levels used:    1
  9594 ;; Hardware stack levels required when called:    6
  9595 ;; This function calls:
  9596 ;;		_I2C_Master_Start
  9597 ;;		_I2C_Master_Stop
  9598 ;;		_I2C_Master_Write
  9599 ;; This function is called by:
  9600 ;;		_PCF8583_Read_Time_Date
  9601 ;;		_PCF8583_Set_Date_Time
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           
  9606                           ;psect for function _PCF8583_Write_Byte
  9607  1A45                     _PCF8583_Write_Byte:	
  9608                           
  9609                           ;incstack = 0
  9610 ;; hardware stack exceeded
  9611                           ; Regs used in _PCF8583_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
  9612                           ;PCF8583_Write_Byte@address stored from wreg
  9613  1A45  00AB               	movwf	PCF8583_Write_Byte@address
  9614                           
  9615                           ;pcf8583.c: 35: void PCF8583_Write_Byte(unsigned char address, unsigned char data);pcf85
      +                          83.c: 36: {;pcf8583.c: 37:  I2C_Master_Start();
  9616  1A46  160A  158A  205D  160A  158A  	fcall	_I2C_Master_Start
  9617                           
  9618                           ;pcf8583.c: 38:  I2C_Master_Write(0xA0);
  9619  1A4B  30A0               	movlw	160
  9620  1A4C  1283               	bcf	3,5	;RP0=0, select bank0
  9621  1A4D  00A6               	movwf	I2C_Master_Write@data
  9622  1A4E  3000               	movlw	0
  9623  1A4F  00A7               	movwf	I2C_Master_Write@data+1
  9624  1A50  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  9625                           
  9626                           ;pcf8583.c: 39:  I2C_Master_Write(address);
  9627  1A55  082B               	movf	PCF8583_Write_Byte@address,w
  9628  1A56  00A9               	movwf	??_PCF8583_Write_Byte
  9629  1A57  01AA               	clrf	??_PCF8583_Write_Byte+1
  9630  1A58  0829               	movf	??_PCF8583_Write_Byte,w
  9631  1A59  00A6               	movwf	I2C_Master_Write@data
  9632  1A5A  082A               	movf	??_PCF8583_Write_Byte+1,w
  9633  1A5B  00A7               	movwf	I2C_Master_Write@data+1
  9634  1A5C  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  9635                           
  9636                           ;pcf8583.c: 40:  I2C_Master_Write(data);
  9637  1A61  0828               	movf	PCF8583_Write_Byte@data,w
  9638  1A62  00A9               	movwf	??_PCF8583_Write_Byte
  9639  1A63  01AA               	clrf	??_PCF8583_Write_Byte+1
  9640  1A64  0829               	movf	??_PCF8583_Write_Byte,w
  9641  1A65  00A6               	movwf	I2C_Master_Write@data
  9642  1A66  082A               	movf	??_PCF8583_Write_Byte+1,w
  9643  1A67  00A7               	movwf	I2C_Master_Write@data+1
  9644  1A68  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  9645                           
  9646                           ;pcf8583.c: 41:  I2C_Master_Stop();
  9647  1A6D  160A  158A  2062   	fcall	_I2C_Master_Stop
  9648  1A70  0008               	return
  9649  1A71                     __end_of_PCF8583_Write_Byte:	
  9650                           
  9651                           	psect	text31
  9652  1B3A                     __ptext31:	
  9653 ;; *************** function _PCF8583_Read_Byte *****************
  9654 ;; Defined at:
  9655 ;;		line 45 in file "pcf8583.c"
  9656 ;; Parameters:    Size  Location     Type
  9657 ;;  address         1    wreg     unsigned char 
  9658 ;; Auto vars:     Size  Location     Type
  9659 ;;  address         1   13[BANK0 ] unsigned char 
  9660 ;;  retval          1   14[BANK0 ] unsigned char 
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      unsigned char 
  9663 ;; Registers used:
  9664 ;;		wreg, status,2, status,0, pclath, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 300/800
  9667 ;;		On exit  : 300/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9670 ;;      Params:         0       0       0       0       0
  9671 ;;      Locals:         0       2       0       0       0
  9672 ;;      Temps:          0       2       0       0       0
  9673 ;;      Totals:         0       4       0       0       0
  9674 ;;Total ram usage:        4 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    6
  9677 ;; This function calls:
  9678 ;;		_I2C_Master_Read
  9679 ;;		_I2C_Master_Start
  9680 ;;		_I2C_Master_Stop
  9681 ;;		_I2C_Master_Write
  9682 ;; This function is called by:
  9683 ;;		_PCF8583_Read_Time_Date
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           
  9688                           ;psect for function _PCF8583_Read_Byte
  9689  1B3A                     _PCF8583_Read_Byte:	
  9690                           
  9691                           ;incstack = 0
  9692 ;; hardware stack exceeded
  9693                           ; Regs used in _PCF8583_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
  9694                           ;PCF8583_Read_Byte@address stored from wreg
  9695  1B3A  00AD               	movwf	PCF8583_Read_Byte@address
  9696                           
  9697                           ;pcf8583.c: 45: unsigned char PCF8583_Read_Byte(unsigned char address);pcf8583.c: 46: {;
      +                          pcf8583.c: 47:  unsigned char retval;;pcf8583.c: 48:  I2C_Master_Start();
  9698  1B3B  160A  158A  205D  160A  158A  	fcall	_I2C_Master_Start
  9699                           
  9700                           ;pcf8583.c: 49:  I2C_Master_Write(0xA0);
  9701  1B40  30A0               	movlw	160
  9702  1B41  1283               	bcf	3,5	;RP0=0, select bank0
  9703  1B42  00A6               	movwf	I2C_Master_Write@data
  9704  1B43  3000               	movlw	0
  9705  1B44  00A7               	movwf	I2C_Master_Write@data+1
  9706  1B45  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  9707                           
  9708                           ;pcf8583.c: 50:  I2C_Master_Write(address);
  9709  1B4A  082D               	movf	PCF8583_Read_Byte@address,w
  9710  1B4B  00AB               	movwf	??_PCF8583_Read_Byte
  9711  1B4C  01AC               	clrf	??_PCF8583_Read_Byte+1
  9712  1B4D  082B               	movf	??_PCF8583_Read_Byte,w
  9713  1B4E  00A6               	movwf	I2C_Master_Write@data
  9714  1B4F  082C               	movf	??_PCF8583_Read_Byte+1,w
  9715  1B50  00A7               	movwf	I2C_Master_Write@data+1
  9716  1B51  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  9717                           
  9718                           ;pcf8583.c: 51:  I2C_Master_Start();
  9719  1B56  160A  158A  205D  160A  158A  	fcall	_I2C_Master_Start
  9720                           
  9721                           ;pcf8583.c: 52:  I2C_Master_Write(0xA1);
  9722  1B5B  30A1               	movlw	161
  9723  1B5C  1283               	bcf	3,5	;RP0=0, select bank0
  9724  1B5D  00A6               	movwf	I2C_Master_Write@data
  9725  1B5E  3000               	movlw	0
  9726  1B5F  00A7               	movwf	I2C_Master_Write@data+1
  9727  1B60  160A  158A  206D  160A  158A  	fcall	_I2C_Master_Write
  9728                           
  9729                           ;pcf8583.c: 53:  retval = I2C_Master_Read(0);
  9730  1B65  3000               	movlw	0
  9731  1B66  160A  158A  21C9  160A  158A  	fcall	_I2C_Master_Read
  9732  1B6B  00AB               	movwf	??_PCF8583_Read_Byte
  9733  1B6C  082B               	movf	??_PCF8583_Read_Byte,w
  9734  1B6D  00AE               	movwf	PCF8583_Read_Byte@retval
  9735                           
  9736                           ;pcf8583.c: 54:  I2C_Master_Stop();
  9737  1B6E  160A  158A  2062   	fcall	_I2C_Master_Stop
  9738                           
  9739                           ;pcf8583.c: 55:  return(retval);
  9740  1B71  1283               	bcf	3,5	;RP0=0, select bank0
  9741  1B72  082E               	movf	PCF8583_Read_Byte@retval,w
  9742  1B73  0008               	return
  9743  1B74                     __end_of_PCF8583_Read_Byte:	
  9744                           
  9745                           	psect	text32
  9746  186D                     __ptext32:	
  9747 ;; *************** function _I2C_Master_Write *****************
  9748 ;; Defined at:
  9749 ;;		line 79 in file "hw_i2c.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;  data            2    6[BANK0 ] unsigned int 
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      void 
  9756 ;; Registers used:
  9757 ;;		wreg, status,2, status,0, pclath, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 300/800
  9760 ;;		On exit  : 300/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9763 ;;      Params:         0       2       0       0       0
  9764 ;;      Locals:         0       0       0       0       0
  9765 ;;      Temps:          0       0       0       0       0
  9766 ;;      Totals:         0       2       0       0       0
  9767 ;;Total ram usage:        2 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    5
  9770 ;; This function calls:
  9771 ;;		_I2C_Master_Wait
  9772 ;; This function is called by:
  9773 ;;		_PCF8583_Write_Byte
  9774 ;;		_PCF8583_Read_Byte
  9775 ;;		_PCF8583_Read_Time_Date
  9776 ;;		_PCF8583_Set_Date_Time
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           
  9781                           ;psect for function _I2C_Master_Write
  9782  186D                     _I2C_Master_Write:	
  9783                           
  9784                           ;hw_i2c.c: 79: void I2C_Master_Write(unsigned data);hw_i2c.c: 80: {;hw_i2c.c: 81:     I2
      +                          C_Master_Wait();
  9785                           
  9786                           ;incstack = 0
  9787 ;; hardware stack exceeded
  9788                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  9789  186D  160A  158A  2088   	fcall	_I2C_Master_Wait
  9790                           
  9791                           ;hw_i2c.c: 82:     SSPBUF=data;
  9792  1870  1283               	bcf	3,5	;RP0=0, select bank0
  9793  1871  0826               	movf	I2C_Master_Write@data,w
  9794  1872  0093               	movwf	19	;volatile
  9795  1873  0008               	return
  9796  1874                     __end_of_I2C_Master_Write:	
  9797                           
  9798                           	psect	text33
  9799  1862                     __ptext33:	
  9800 ;; *************** function _I2C_Master_Stop *****************
  9801 ;; Defined at:
  9802 ;;		line 65 in file "hw_i2c.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;		None
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;		None
  9807 ;; Return value:  Size  Location     Type
  9808 ;;                  1    wreg      void 
  9809 ;; Registers used:
  9810 ;;		status,2, status,0, pclath, cstack
  9811 ;; Tracked objects:
  9812 ;;		On entry : 300/800
  9813 ;;		On exit  : 300/100
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9816 ;;      Params:         0       0       0       0       0
  9817 ;;      Locals:         0       0       0       0       0
  9818 ;;      Temps:          0       0       0       0       0
  9819 ;;      Totals:         0       0       0       0       0
  9820 ;;Total ram usage:        0 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; Hardware stack levels required when called:    5
  9823 ;; This function calls:
  9824 ;;		_I2C_Master_Wait
  9825 ;; This function is called by:
  9826 ;;		_PCF8583_Write_Byte
  9827 ;;		_PCF8583_Read_Byte
  9828 ;;		_PCF8583_Read_Time_Date
  9829 ;;		_PCF8583_Set_Date_Time
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           
  9834                           ;psect for function _I2C_Master_Stop
  9835  1862                     _I2C_Master_Stop:	
  9836                           
  9837                           ;hw_i2c.c: 67:     I2C_Master_Wait();
  9838                           
  9839                           ;incstack = 0
  9840 ;; hardware stack exceeded
  9841                           ; Regs used in _I2C_Master_Stop: [status,2+status,0+pclath+cstack]
  9842  1862  160A  158A  2088   	fcall	_I2C_Master_Wait
  9843                           
  9844                           ;hw_i2c.c: 68:     SSPCON2bits.PEN=1;
  9845  1865  1511               	bsf	17,2	;volatile
  9846  1866  0008               	return
  9847  1867                     __end_of_I2C_Master_Stop:	
  9848                           
  9849                           	psect	text34
  9850  185D                     __ptext34:	
  9851 ;; *************** function _I2C_Master_Start *****************
  9852 ;; Defined at:
  9853 ;;		line 51 in file "hw_i2c.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;		None
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;		None
  9858 ;; Return value:  Size  Location     Type
  9859 ;;                  1    wreg      void 
  9860 ;; Registers used:
  9861 ;;		status,2, status,0, pclath, cstack
  9862 ;; Tracked objects:
  9863 ;;		On entry : 200/900
  9864 ;;		On exit  : 300/100
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9867 ;;      Params:         0       0       0       0       0
  9868 ;;      Locals:         0       0       0       0       0
  9869 ;;      Temps:          0       0       0       0       0
  9870 ;;      Totals:         0       0       0       0       0
  9871 ;;Total ram usage:        0 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; Hardware stack levels required when called:    5
  9874 ;; This function calls:
  9875 ;;		_I2C_Master_Wait
  9876 ;; This function is called by:
  9877 ;;		_PCF8583_Write_Byte
  9878 ;;		_PCF8583_Read_Byte
  9879 ;;		_PCF8583_Read_Time_Date
  9880 ;;		_PCF8583_Set_Date_Time
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           
  9885                           ;psect for function _I2C_Master_Start
  9886  185D                     _I2C_Master_Start:	
  9887                           
  9888                           ;hw_i2c.c: 53:     I2C_Master_Wait();
  9889                           
  9890                           ;incstack = 0
  9891 ;; hardware stack exceeded
  9892                           ; Regs used in _I2C_Master_Start: [status,2+status,0+pclath+cstack]
  9893  185D  160A  158A  2088   	fcall	_I2C_Master_Wait
  9894                           
  9895                           ;hw_i2c.c: 54:     SSPCON2bits.SEN=1;
  9896  1860  1411               	bsf	17,0	;volatile
  9897  1861  0008               	return
  9898  1862                     __end_of_I2C_Master_Start:	
  9899                           
  9900                           	psect	text35
  9901  19C9                     __ptext35:	
  9902 ;; *************** function _I2C_Master_Read *****************
  9903 ;; Defined at:
  9904 ;;		line 93 in file "hw_i2c.c"
  9905 ;; Parameters:    Size  Location     Type
  9906 ;;  ack             1    wreg     unsigned char 
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;  ack             1    8[BANK0 ] unsigned char 
  9909 ;;  data            2    9[BANK0 ] unsigned short 
  9910 ;; Return value:  Size  Location     Type
  9911 ;;                  1    wreg      unsigned char 
  9912 ;; Registers used:
  9913 ;;		wreg, status,2, status,0, pclath, cstack
  9914 ;; Tracked objects:
  9915 ;;		On entry : 300/800
  9916 ;;		On exit  : 300/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9919 ;;      Params:         0       0       0       0       0
  9920 ;;      Locals:         0       3       0       0       0
  9921 ;;      Temps:          0       2       0       0       0
  9922 ;;      Totals:         0       5       0       0       0
  9923 ;;Total ram usage:        5 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    5
  9926 ;; This function calls:
  9927 ;;		_I2C_Master_Wait
  9928 ;; This function is called by:
  9929 ;;		_PCF8583_Read_Byte
  9930 ;;		_PCF8583_Read_Time_Date
  9931 ;; This function uses a non-reentrant model
  9932 ;;
  9933                           
  9934                           
  9935                           ;psect for function _I2C_Master_Read
  9936  19C9                     _I2C_Master_Read:	
  9937                           
  9938                           ;incstack = 0
  9939 ;; hardware stack exceeded
  9940                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  9941                           ;I2C_Master_Read@ack stored from wreg
  9942  19C9  00A8               	movwf	I2C_Master_Read@ack
  9943                           
  9944                           ;hw_i2c.c: 93: unsigned char I2C_Master_Read(unsigned char ack);hw_i2c.c: 94: {;hw_i2c.c
      +                          : 95:     unsigned short data;;hw_i2c.c: 96:     I2C_Master_Wait();
  9945  19CA  160A  158A  2088  160A  158A  	fcall	_I2C_Master_Wait
  9946                           
  9947                           ;hw_i2c.c: 97:     RCEN=1;
  9948  19CF  1591               	bsf	17,3	;volatile
  9949                           
  9950                           ;hw_i2c.c: 98:     I2C_Master_Wait();
  9951  19D0  160A  158A  2088  160A  158A  	fcall	_I2C_Master_Wait
  9952                           
  9953                           ;hw_i2c.c: 99:     data=SSPBUF;
  9954  19D5  1283               	bcf	3,5	;RP0=0, select bank0
  9955  19D6  0813               	movf	19,w	;volatile
  9956  19D7  00A6               	movwf	??_I2C_Master_Read
  9957  19D8  01A7               	clrf	??_I2C_Master_Read+1
  9958  19D9  0826               	movf	??_I2C_Master_Read,w
  9959  19DA  00A9               	movwf	I2C_Master_Read@data
  9960  19DB  0827               	movf	??_I2C_Master_Read+1,w
  9961  19DC  00AA               	movwf	I2C_Master_Read@data+1
  9962                           
  9963                           ;hw_i2c.c: 100:     I2C_Master_Wait();
  9964  19DD  160A  158A  2088  160A  158A  	fcall	_I2C_Master_Wait
  9965                           
  9966                           ;hw_i2c.c: 101:     ACKDT=(ack)?0:1;
  9967  19E2  1283               	bcf	3,5	;RP0=0, select bank0
  9968  19E3  0828               	movf	I2C_Master_Read@ack,w
  9969  19E4  1D03               	btfss	3,2
  9970  19E5  29EA               	goto	u6020
  9971  19E6  1683               	bsf	3,5	;RP0=1, select bank1
  9972  19E7  1303               	bcf	3,6	;RP1=0, select bank1
  9973  19E8  1691               	bsf	17,5	;volatile
  9974  19E9  29ED               	goto	l6476
  9975  19EA                     u6020:	
  9976  19EA  1683               	bsf	3,5	;RP0=1, select bank1
  9977  19EB  1303               	bcf	3,6	;RP1=0, select bank1
  9978  19EC  1291               	bcf	17,5	;volatile
  9979  19ED                     l6476:	
  9980                           
  9981                           ;hw_i2c.c: 102:     ACKEN=1;
  9982  19ED  1611               	bsf	17,4	;volatile
  9983                           
  9984                           ;hw_i2c.c: 103:     return data;
  9985  19EE  1283               	bcf	3,5	;RP0=0, select bank0
  9986  19EF  0829               	movf	I2C_Master_Read@data,w
  9987  19F0  0008               	return
  9988  19F1                     __end_of_I2C_Master_Read:	
  9989                           
  9990                           	psect	text36
  9991  1888                     __ptext36:	
  9992 ;; *************** function _I2C_Master_Wait *****************
  9993 ;; Defined at:
  9994 ;;		line 35 in file "hw_i2c.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;		None
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;                  1    wreg      void 
 10001 ;; Registers used:
 10002 ;;		None
 10003 ;; Tracked objects:
 10004 ;;		On entry : 200/800
 10005 ;;		On exit  : 300/100
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10008 ;;      Params:         0       0       0       0       0
 10009 ;;      Locals:         0       0       0       0       0
 10010 ;;      Temps:          0       0       0       0       0
 10011 ;;      Totals:         0       0       0       0       0
 10012 ;;Total ram usage:        0 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    4
 10015 ;; This function calls:
 10016 ;;		Nothing
 10017 ;; This function is called by:
 10018 ;;		_I2C_Master_Start
 10019 ;;		_I2C_Master_Stop
 10020 ;;		_I2C_Master_Write
 10021 ;;		_I2C_Master_Read
 10022 ;; This function uses a non-reentrant model
 10023 ;;
 10024                           
 10025                           
 10026                           ;psect for function _I2C_Master_Wait
 10027  1888                     _I2C_Master_Wait:	
 10028  1888                     l202:	
 10029                           ;hw_i2c.c: 39:     {;hw_i2c.c: 40:     };
 10030                           
 10031                           ;incstack = 0
 10032 ;; hardware stack exceeded
 10033                           ; Regs used in _I2C_Master_Wait: []
 10034                           
 10035                           
 10036                           ;hw_i2c.c: 37:     while (SSPCON2bits.RCEN || SSPCON2bits.PEN || SSPCON2bits.RSEN ||
 10037  1888  1683               	bsf	3,5	;RP0=1, select bank1
 10038  1889  1D91               	btfss	17,3	;volatile
 10039  188A  1911               	btfsc	17,2	;volatile
 10040  188B  2888               	goto	l202
 10041  188C  1C91               	btfss	17,1	;volatile
 10042  188D  1811               	btfsc	17,0	;volatile
 10043  188E  2888               	goto	l202
 10044  188F  1A11               	btfsc	17,4	;volatile
 10045  1890  2888               	goto	l202
 10046  1891  1D14               	btfss	20,2	;volatile
 10047  1892  0008               	return
 10048  1893  2888               	goto	l202
 10049  1894                     __end_of_I2C_Master_Wait:	
 10050                           
 10051                           	psect	text37
 10052  07E6                     __ptext37:	
 10053 ;; *************** function _BCD_2_DEC *****************
 10054 ;; Defined at:
 10055 ;;		line 25 in file "pcf8583.c"
 10056 ;; Parameters:    Size  Location     Type
 10057 ;;  bcd             1    wreg     unsigned char 
 10058 ;; Auto vars:     Size  Location     Type
 10059 ;;  bcd             1   20[BANK0 ] unsigned char 
 10060 ;; Return value:  Size  Location     Type
 10061 ;;                  1    wreg      unsigned char 
 10062 ;; Registers used:
 10063 ;;		wreg, status,2, status,0, pclath, cstack
 10064 ;; Tracked objects:
 10065 ;;		On entry : 300/800
 10066 ;;		On exit  : 300/0
 10067 ;;		Unchanged: 0/0
 10068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10069 ;;      Params:         0       0       0       0       0
 10070 ;;      Locals:         0       1       0       0       0
 10071 ;;      Temps:          0       3       0       0       0
 10072 ;;      Totals:         0       4       0       0       0
 10073 ;;Total ram usage:        4 bytes
 10074 ;; Hardware stack levels used:    1
 10075 ;; Hardware stack levels required when called:    5
 10076 ;; This function calls:
 10077 ;;		___bmul
 10078 ;; This function is called by:
 10079 ;;		_PCF8583_Read_Time_Date
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           
 10084                           ;psect for function _BCD_2_DEC
 10085  07E6                     _BCD_2_DEC:	
 10086                           
 10087                           ;incstack = 0
 10088 ;; hardware stack exceeded
 10089                           ; Regs used in _BCD_2_DEC: [wreg+status,2+status,0+pclath+cstack]
 10090                           ;BCD_2_DEC@bcd stored from wreg
 10091  07E6  00B4               	movwf	BCD_2_DEC@bcd
 10092                           
 10093                           ;pcf8583.c: 25: unsigned char BCD_2_DEC(unsigned char bcd);pcf8583.c: 26: {;pcf8583.c: 2
      +                          7:     return (((bcd>>4)*10) + (bcd&0x0F));
 10094  07E7  300F               	movlw	15
 10095  07E8  0534               	andwf	BCD_2_DEC@bcd,w
 10096  07E9  00B1               	movwf	??_BCD_2_DEC
 10097  07EA  300A               	movlw	10
 10098  07EB  00B2               	movwf	??_BCD_2_DEC+1
 10099  07EC  0832               	movf	??_BCD_2_DEC+1,w
 10100  07ED  00AD               	movwf	___bmul@multiplicand
 10101  07EE  0834               	movf	BCD_2_DEC@bcd,w
 10102  07EF  00B3               	movwf	??_BCD_2_DEC+2
 10103  07F0  3004               	movlw	4
 10104  07F1                     u6615:	
 10105  07F1  1003               	clrc
 10106  07F2  0CB3               	rrf	??_BCD_2_DEC+2,f
 10107  07F3  3EFF               	addlw	-1
 10108  07F4  1D03               	skipz
 10109  07F5  2FF1               	goto	u6615
 10110  07F6  0833               	movf	??_BCD_2_DEC+2,w
 10111  07F7  160A  158A  20B9   	fcall	___bmul
 10112  07FA  0731               	addwf	??_BCD_2_DEC,w
 10113  07FB  0008               	return
 10114  07FC                     __end_of_BCD_2_DEC:	
 10115                           
 10116                           	psect	text38
 10117  18B9                     __ptext38:	
 10118 ;; *************** function ___bmul *****************
 10119 ;; Defined at:
 10120 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
 10121 ;; Parameters:    Size  Location     Type
 10122 ;;  multiplier      1    wreg     unsigned char 
 10123 ;;  multiplicand    1   13[BANK0 ] unsigned char 
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;  multiplier      1   16[BANK0 ] unsigned char 
 10126 ;;  product         1   15[BANK0 ] unsigned char 
 10127 ;; Return value:  Size  Location     Type
 10128 ;;                  1    wreg      unsigned char 
 10129 ;; Registers used:
 10130 ;;		wreg, status,2, status,0
 10131 ;; Tracked objects:
 10132 ;;		On entry : 300/800
 10133 ;;		On exit  : 300/0
 10134 ;;		Unchanged: 0/0
 10135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10136 ;;      Params:         0       1       0       0       0
 10137 ;;      Locals:         0       2       0       0       0
 10138 ;;      Temps:          0       1       0       0       0
 10139 ;;      Totals:         0       4       0       0       0
 10140 ;;Total ram usage:        4 bytes
 10141 ;; Hardware stack levels used:    1
 10142 ;; Hardware stack levels required when called:    4
 10143 ;; This function calls:
 10144 ;;		Nothing
 10145 ;; This function is called by:
 10146 ;;		_Menu_Set_Time
 10147 ;;		_BCD_2_DEC
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           
 10152                           ;psect for function ___bmul
 10153  18B9                     ___bmul:	
 10154                           
 10155                           ;incstack = 0
 10156 ;; hardware stack exceeded
 10157                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10158                           ;___bmul@multiplier stored from wreg
 10159  18B9  00B0               	movwf	___bmul@multiplier
 10160  18BA  01AF               	clrf	___bmul@product
 10161  18BB                     l6498:	
 10162  18BB  1C30               	btfss	___bmul@multiplier,0
 10163  18BC  28C1               	goto	l6502
 10164  18BD  082D               	movf	___bmul@multiplicand,w
 10165  18BE  00AE               	movwf	??___bmul
 10166  18BF  082E               	movf	??___bmul,w
 10167  18C0  07AF               	addwf	___bmul@product,f
 10168  18C1                     l6502:	
 10169  18C1  1003               	clrc
 10170  18C2  0DAD               	rlf	___bmul@multiplicand,f
 10171  18C3  1003               	clrc
 10172  18C4  0CB0               	rrf	___bmul@multiplier,f
 10173  18C5  0830               	movf	___bmul@multiplier,w
 10174  18C6  1D03               	btfss	3,2
 10175  18C7  28BB               	goto	l6498
 10176  18C8  082F               	movf	___bmul@product,w
 10177  18C9  0008               	return
 10178  18CA                     __end_of___bmul:	
 10179                           
 10180                           	psect	text39
 10181  12C9                     __ptext39:	
 10182 ;; *************** function _Check_Event *****************
 10183 ;; Defined at:
 10184 ;;		line 230 in file "manchester_decode.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;  DataRCV         1    wreg     PTR struct .
 10187 ;;		 -> main@data_rcv(5), 
 10188 ;; Auto vars:     Size  Location     Type
 10189 ;;  DataRCV         1   37[BANK0 ] PTR struct .
 10190 ;;		 -> main@data_rcv(5), 
 10191 ;; Return value:  Size  Location     Type
 10192 ;;                  1    wreg      unsigned char 
 10193 ;; Registers used:
 10194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10195 ;; Tracked objects:
 10196 ;;		On entry : B00/800
 10197 ;;		On exit  : 200/0
 10198 ;;		Unchanged: 0/0
 10199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10200 ;;      Params:         0       0       0       0       0
 10201 ;;      Locals:         0       1       0       0       0
 10202 ;;      Temps:          0       1       0       0       0
 10203 ;;      Totals:         0       2       0       0       0
 10204 ;;Total ram usage:        2 bytes
 10205 ;; Hardware stack levels used:    1
 10206 ;; Hardware stack levels required when called:    8
 10207 ;; This function calls:
 10208 ;;		_Frame_Decode
 10209 ;;		_Play_Ring
 10210 ;;		_Send_7Seg_Text
 10211 ;; This function is called by:
 10212 ;;		_Check_RCV_Data
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           
 10217                           ;psect for function _Check_Event
 10218  12C9                     _Check_Event:	
 10219                           
 10220                           ;incstack = 0
 10221 ;; hardware stack exceeded
 10222                           ; Regs used in _Check_Event: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10223                           ;Check_Event@DataRCV stored from wreg
 10224  12C9  00C5               	movwf	Check_Event@DataRCV
 10225                           
 10226                           ;manchester_decode.c: 230: unsigned char Check_Event(DataStruct *DataRCV);manchester_dec
      +                          ode.c: 231: {;manchester_decode.c: 232:     if(DataRCV->frame[0]=='G' && DataRCV->frame[
      +                          1]=='0')
 10227  12CA  0845               	movf	Check_Event@DataRCV,w
 10228  12CB  0084               	movwf	4
 10229  12CC  3047               	movlw	71
 10230  12CD  0600               	xorwf	0,w
 10231  12CE  1D03               	btfss	3,2
 10232  12CF  2B36               	goto	l7426
 10233  12D0  0A45               	incf	Check_Event@DataRCV,w
 10234  12D1  0084               	movwf	4
 10235  12D2  3030               	movlw	48
 10236  12D3  0600               	xorwf	0,w
 10237  12D4  1D03               	btfss	3,2
 10238  12D5  2B36               	goto	l7426
 10239                           
 10240                           ;manchester_decode.c: 233:     {;manchester_decode.c: 235:         Send_7Seg_Text("bram"
      +                          ,0);
 10241  12D6  01A6               	clrf	Send_7Seg_Text@decimal_point
 10242  12D7  3065               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
 10243  12D8  160A  158A  2102  160A  118A  	fcall	_Send_7Seg_Text
 10244                           
 10245                           ;manchester_decode.c: 236:         g_display_controll=0;
 10246  12DD  01AE               	clrf	_g_display_controll^(0+128)	;volatile
 10247                           
 10248                           ;manchester_decode.c: 237:         Play_Ring();
 10249  12DE  160A  118A  224E  160A  118A  	fcall	_Play_Ring
 10250  12E3                     l7414:	
 10251                           ;manchester_decode.c: 238:         while(Frame_Decode(DataRCV)!=0xFF);
 10252                           
 10253  12E3  0845               	movf	Check_Event@DataRCV,w
 10254  12E4  160A  158A  25D4  160A  118A  	fcall	_Frame_Decode
 10255  12E9  0A29               	incf	?_Frame_Decode,w
 10256  12EA  042A               	iorwf	?_Frame_Decode+1,w
 10257  12EB  1D03               	btfss	3,2
 10258  12EC  2AE3               	goto	l7414
 10259  12ED  2B29               	goto	L10
 10260  12EE                     l7428:	
 10261                           ;manchester_decode.c: 240:         Send_7Seg_Text("****",0);
 10262                           
 10263                           ;manchester_decode.c: 239:         g_display_controll=1;
 10264                           
 10265  12EE  0A45               	incf	Check_Event@DataRCV,w
 10266  12EF  0084               	movwf	4
 10267  12F0  3030               	movlw	48
 10268  12F1  0600               	xorwf	0,w
 10269  12F2  1D03               	btfss	3,2
 10270  12F3  2B3C               	goto	l7448
 10271                           
 10272                           ;manchester_decode.c: 245:     {;manchester_decode.c: 247:         Send_7Seg_Text("furt"
      +                          ,0);
 10273  12F4  01A6               	clrf	Send_7Seg_Text@decimal_point
 10274  12F5  306F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
 10275  12F6  160A  158A  2102  160A  118A  	fcall	_Send_7Seg_Text
 10276                           
 10277                           ;manchester_decode.c: 248:         g_display_controll=0;
 10278  12FB  01AE               	clrf	_g_display_controll^(0+128)	;volatile
 10279                           
 10280                           ;manchester_decode.c: 249:         Play_Ring();
 10281  12FC  160A  118A  224E  160A  118A  	fcall	_Play_Ring
 10282  1301                     l7436:	
 10283                           ;manchester_decode.c: 250:         while(Frame_Decode(DataRCV)!=0xFF);
 10284                           
 10285  1301  0845               	movf	Check_Event@DataRCV,w
 10286  1302  160A  158A  25D4  160A  118A  	fcall	_Frame_Decode
 10287  1307  0A29               	incf	?_Frame_Decode,w
 10288  1308  042A               	iorwf	?_Frame_Decode+1,w
 10289  1309  1D03               	btfss	3,2
 10290  130A  2B01               	goto	l7436
 10291  130B  2B29               	goto	L10
 10292  130C                     l7450:	
 10293                           ;manchester_decode.c: 252:         Send_7Seg_Text("****",0);
 10294                           
 10295                           ;manchester_decode.c: 251:         g_display_controll=1;
 10296                           
 10297  130C  0A45               	incf	Check_Event@DataRCV,w
 10298  130D  0084               	movwf	4
 10299  130E  3042               	movlw	66
 10300  130F  0600               	xorwf	0,w
 10301  1310  1D03               	btfss	3,2
 10302  1311  2B42               	goto	l7468
 10303                           
 10304                           ;manchester_decode.c: 257:     {;manchester_decode.c: 259:         Send_7Seg_Text("dzwo"
      +                          ,0);
 10305  1312  01A6               	clrf	Send_7Seg_Text@decimal_point
 10306  1313  306A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
 10307  1314  160A  158A  2102  160A  118A  	fcall	_Send_7Seg_Text
 10308                           
 10309                           ;manchester_decode.c: 260:         g_display_controll=0;
 10310  1319  01AE               	clrf	_g_display_controll^(0+128)	;volatile
 10311                           
 10312                           ;manchester_decode.c: 261:         Play_Ring();
 10313  131A  160A  118A  224E  160A  118A  	fcall	_Play_Ring
 10314  131F                     l7458:	
 10315                           ;manchester_decode.c: 262:         while(Frame_Decode(DataRCV)!=0xFF);
 10316                           
 10317  131F  0845               	movf	Check_Event@DataRCV,w
 10318  1320  160A  158A  25D4  160A  118A  	fcall	_Frame_Decode
 10319  1325  0A29               	incf	?_Frame_Decode,w
 10320  1326  042A               	iorwf	?_Frame_Decode+1,w
 10321  1327  1D03               	btfss	3,2
 10322  1328  2B1F               	goto	l7458
 10323  1329                     L10:	
 10324                           
 10325                           ;manchester_decode.c: 263:         g_display_controll=1;
 10326  1329  3001               	movlw	1
 10327  132A  00C4               	movwf	??_Check_Event
 10328  132B  0844               	movf	??_Check_Event,w
 10329  132C  1683               	bsf	3,5	;RP0=1, select bank1
 10330  132D  00AE               	movwf	_g_display_controll^(0+128)	;volatile
 10331                           
 10332                           ;manchester_decode.c: 264:         Send_7Seg_Text("****",0);
 10333  132E  1283               	bcf	3,5	;RP0=0, select bank0
 10334  132F  01A6               	clrf	Send_7Seg_Text@decimal_point
 10335  1330  3060               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10336  1331  160A  158A  2102   	fcall	_Send_7Seg_Text
 10337                           
 10338                           ;manchester_decode.c: 242:         return 1;
 10339  1334  3001               	movlw	1
 10340  1335  0008               	return
 10341  1336                     l7426:	
 10342  1336  0845               	movf	Check_Event@DataRCV,w
 10343  1337  0084               	movwf	4
 10344  1338  3057               	movlw	87
 10345  1339  0600               	xorwf	0,w
 10346  133A  1903               	btfsc	3,2
 10347  133B  2AEE               	goto	l7428
 10348  133C                     l7448:	
 10349  133C  0845               	movf	Check_Event@DataRCV,w
 10350  133D  0084               	movwf	4
 10351  133E  3057               	movlw	87
 10352  133F  0600               	xorwf	0,w
 10353  1340  1903               	btfsc	3,2
 10354  1341  2B0C               	goto	l7450
 10355  1342                     l7468:	
 10356                           
 10357                           ;manchester_decode.c: 269:     return 0;
 10358  1342  3000               	movlw	0
 10359  1343  0008               	return
 10360  1344                     __end_of_Check_Event:	
 10361                           
 10362                           	psect	text40
 10363  1902                     __ptext40:	
 10364 ;; *************** function _Send_7Seg_Text *****************
 10365 ;; Defined at:
 10366 ;;		line 640 in file "menu.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  text            1    wreg     PTR unsigned char 
 10369 ;;		 -> STR_21(5), STR_20(5), STR_19(5), STR_18(5), 
 10370 ;;		 -> STR_17(5), STR_16(5), STR_15(5), STR_14(5), 
 10371 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(5), 
 10372 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(5), 
 10373 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
 10374 ;;		 -> STR_1(5), 
 10375 ;;  decimal_poin    1    6[BANK0 ] unsigned char 
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  text            1    9[BANK0 ] PTR unsigned char 
 10378 ;;		 -> STR_21(5), STR_20(5), STR_19(5), STR_18(5), 
 10379 ;;		 -> STR_17(5), STR_16(5), STR_15(5), STR_14(5), 
 10380 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(5), 
 10381 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(5), 
 10382 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
 10383 ;;		 -> STR_1(5), 
 10384 ;;  i               1    8[BANK0 ] unsigned char 
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10389 ;; Tracked objects:
 10390 ;;		On entry : 300/800
 10391 ;;		On exit  : B00/100
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10394 ;;      Params:         0       1       0       0       0
 10395 ;;      Locals:         0       2       0       0       0
 10396 ;;      Temps:          0       1       0       0       0
 10397 ;;      Totals:         0       4       0       0       0
 10398 ;;Total ram usage:        4 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    4
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_Check_Event
 10405 ;;		_Menu_Set_Time
 10406 ;;		_Display_Weekday
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           
 10411                           ;psect for function _Send_7Seg_Text
 10412  1902                     _Send_7Seg_Text:	
 10413                           
 10414                           ;incstack = 0
 10415 ;; using string table level
 10416                           ; Regs used in _Send_7Seg_Text: [wreg-fsr0h+status,2+status,0+pclath]
 10417                           ;Send_7Seg_Text@text stored from wreg
 10418  1902  00A9               	movwf	Send_7Seg_Text@text
 10419                           
 10420                           ;menu.c: 640: void Send_7Seg_Text(char *text, unsigned char decimal_point);menu.c: 641: 
      +                          {;menu.c: 642:     unsigned char i;;menu.c: 644:     for(i=0;i<4;i++)
 10421  1903  01A8               	clrf	Send_7Seg_Text@i
 10422  1904                     l6724:	
 10423                           
 10424                           ;menu.c: 645:     {;menu.c: 646:         g_display_text[i]=*(text+i);
 10425  1904  0828               	movf	Send_7Seg_Text@i,w
 10426  1905  0729               	addwf	Send_7Seg_Text@text,w
 10427  1906  0084               	movwf	4
 10428  1907  160A  118A  2000  160A  158A  	fcall	stringdir
 10429  190C  00A7               	movwf	??_Send_7Seg_Text
 10430  190D  0828               	movf	Send_7Seg_Text@i,w
 10431  190E  3ECC               	addlw	(low (_g_display_text| 0))& (0+255)
 10432  190F  0084               	movwf	4
 10433  1910  0827               	movf	??_Send_7Seg_Text,w
 10434  1911  1383               	bcf	3,7	;select IRP bank1
 10435  1912  0080               	movwf	0
 10436                           
 10437                           ;menu.c: 647:     }
 10438  1913  3001               	movlw	1
 10439  1914  00A7               	movwf	??_Send_7Seg_Text
 10440  1915  0827               	movf	??_Send_7Seg_Text,w
 10441  1916  07A8               	addwf	Send_7Seg_Text@i,f
 10442  1917  3004               	movlw	4
 10443  1918  0228               	subwf	Send_7Seg_Text@i,w
 10444  1919  1C03               	skipc
 10445  191A  2904               	goto	l6724
 10446                           
 10447                           ;menu.c: 649:     g_decimal_point=decimal_point;
 10448  191B  0826               	movf	Send_7Seg_Text@decimal_point,w
 10449  191C  00A7               	movwf	??_Send_7Seg_Text
 10450  191D  0827               	movf	??_Send_7Seg_Text,w
 10451  191E  1683               	bsf	3,5	;RP0=1, select bank1
 10452  191F  00AD               	movwf	_g_decimal_point^(0+128)
 10453  1920  0008               	return
 10454  1921                     __end_of_Send_7Seg_Text:	
 10455                           
 10456                           	psect	text41
 10457  124E                     __ptext41:	
 10458 ;; *************** function _Play_Ring *****************
 10459 ;; Defined at:
 10460 ;;		line 43 in file "melody.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;		None
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;  j               2   33[BANK0 ] unsigned int 
 10465 ;;  i               1   35[BANK0 ] unsigned char 
 10466 ;;  MELODY_LENGT    1   32[BANK0 ] unsigned char 
 10467 ;; Return value:  Size  Location     Type
 10468 ;;                  1    wreg      void 
 10469 ;; Registers used:
 10470 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10471 ;; Tracked objects:
 10472 ;;		On entry : B00/100
 10473 ;;		On exit  : 300/0
 10474 ;;		Unchanged: 0/0
 10475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10476 ;;      Params:         0       0       0       0       0
 10477 ;;      Locals:         0       4       0       0       0
 10478 ;;      Temps:          0       4       0       0       0
 10479 ;;      Totals:         0       8       0       0       0
 10480 ;;Total ram usage:        8 bytes
 10481 ;; Hardware stack levels used:    1
 10482 ;; Hardware stack levels required when called:    7
 10483 ;; This function calls:
 10484 ;;		_Display_7Seg
 10485 ;;		_Generate_PWM
 10486 ;;		_Init_CaptureMode
 10487 ;;		_Init_CompareMode
 10488 ;;		_Wait_ms
 10489 ;;		___lwdiv
 10490 ;; This function is called by:
 10491 ;;		_Check_Event
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _Play_Ring
 10497  124E                     _Play_Ring:	
 10498                           
 10499                           ;melody.c: 45:     Init_CompareMode();
 10500                           
 10501                           ;incstack = 0
 10502 ;; hardware stack exceeded
 10503                           ; Regs used in _Play_Ring: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10504  124E  160A  158A  207C  160A  118A  	fcall	_Init_CompareMode
 10505                           
 10506                           ;melody.c: 47:     unsigned int const melody[] = {659, 523, 587, 392, 1, 392, 587, 659, 
      +                          523};;melody.c: 48:     unsigned char const beats[] = {4, 4, 4, 2, 64, 4, 4, 4, 2};;melo
      +                          dy.c: 49:     const unsigned int tempo=1800;;melody.c: 51:     unsigned char MELODY_LENG
      +                          TH = sizeof(melody) / sizeof(melody[0]);
 10507  1253  3009               	movlw	9
 10508  1254  00BC               	movwf	??_Play_Ring
 10509  1255  083C               	movf	??_Play_Ring,w
 10510  1256  00C0               	movwf	Play_Ring@MELODY_LENGTH
 10511                           
 10512                           ;melody.c: 53:     for (unsigned char i=0; i<MELODY_LENGTH; i++)
 10513  1257  01C3               	clrf	Play_Ring@i
 10514  1258                     l7082:	
 10515  1258  0840               	movf	Play_Ring@MELODY_LENGTH,w
 10516  1259  0243               	subwf	Play_Ring@i,w
 10517  125A  1803               	btfsc	3,0
 10518  125B  2AC5               	goto	l7084
 10519                           
 10520                           ;melody.c: 54:     {;melody.c: 55:         Generate_PWM(melody[i]);
 10521  125C  0843               	movf	Play_Ring@i,w
 10522  125D  00BC               	movwf	??_Play_Ring
 10523  125E  073C               	addwf	??_Play_Ring,w
 10524  125F  3E01               	addlw	low ((Play_Ring@melody-__stringbase)| (0+32768))
 10525  1260  0084               	movwf	4
 10526  1261  160A  118A  2000  160A  118A  	fcall	stringdir
 10527  1266  00BD               	movwf	??_Play_Ring+1
 10528  1267  160A  118A  2000  160A  118A  	fcall	stringdir
 10529  126C  00BE               	movwf	??_Play_Ring+2
 10530  126D  083D               	movf	??_Play_Ring+1,w
 10531  126E  00B4               	movwf	Generate_PWM@freq
 10532  126F  083E               	movf	??_Play_Ring+2,w
 10533  1270  00B5               	movwf	Generate_PWM@freq+1
 10534  1271  01B6               	clrf	Generate_PWM@freq+2
 10535  1272  01B7               	clrf	Generate_PWM@freq+3
 10536  1273  160A  158A  2219  160A  118A  	fcall	_Generate_PWM
 10537                           
 10538                           ;melody.c: 57:         for(unsigned int j=0;j<(tempo/beats[i])/4;j++)
 10539  1278  1283               	bcf	3,5	;RP0=0, select bank0
 10540  1279  01C1               	clrf	Play_Ring@j
 10541  127A  01C2               	clrf	Play_Ring@j+1
 10542  127B                     l7078:	
 10543  127B  0843               	movf	Play_Ring@i,w
 10544  127C  3E13               	addlw	low ((Play_Ring@beats-__stringbase)| (0+32768))
 10545  127D  0084               	movwf	4
 10546  127E  160A  118A  2000  160A  118A  	fcall	stringdir
 10547  1283  00BC               	movwf	??_Play_Ring
 10548  1284  01BD               	clrf	??_Play_Ring+1
 10549  1285  083C               	movf	??_Play_Ring,w
 10550  1286  00AC               	movwf	___lwdiv@divisor
 10551  1287  083D               	movf	??_Play_Ring+1,w
 10552  1288  00AD               	movwf	___lwdiv@divisor+1
 10553  1289  3008               	movlw	8
 10554  128A  00AE               	movwf	___lwdiv@dividend
 10555  128B  3007               	movlw	7
 10556  128C  00AF               	movwf	___lwdiv@dividend+1
 10557  128D  160A  158A  23AF  160A  118A  	fcall	___lwdiv
 10558  1292  082C               	movf	?___lwdiv,w
 10559  1293  00BE               	movwf	??_Play_Ring+2
 10560  1294  082D               	movf	?___lwdiv+1,w
 10561  1295  00BF               	movwf	??_Play_Ring+3
 10562  1296  1003               	clrc
 10563  1297  0CBF               	rrf	??_Play_Ring+3,f
 10564  1298  0CBE               	rrf	??_Play_Ring+2,f
 10565  1299  1003               	clrc
 10566  129A  0CBF               	rrf	??_Play_Ring+3,f
 10567  129B  0CBE               	rrf	??_Play_Ring+2,f
 10568  129C  083F               	movf	??_Play_Ring+3,w
 10569  129D  0242               	subwf	Play_Ring@j+1,w
 10570  129E  1D03               	skipz
 10571  129F  2AA2               	goto	u7105
 10572  12A0  083E               	movf	??_Play_Ring+2,w
 10573  12A1  0241               	subwf	Play_Ring@j,w
 10574  12A2                     u7105:	
 10575  12A2  1803               	btfsc	3,0
 10576  12A3  2AC0               	goto	l7080
 10577                           
 10578                           ;melody.c: 58:         {;melody.c: 59:             Display_7Seg(&g_display_text[0],g_dec
      +                          imal_point);
 10579  12A4  1683               	bsf	3,5	;RP0=1, select bank1
 10580  12A5  082D               	movf	_g_decimal_point^(0+128),w
 10581  12A6  1283               	bcf	3,5	;RP0=0, select bank0
 10582  12A7  00BC               	movwf	??_Play_Ring
 10583  12A8  083C               	movf	??_Play_Ring,w
 10584  12A9  00B1               	movwf	Display_7Seg@decimal_point
 10585  12AA  30CC               	movlw	(low (_g_display_text| 0))& (0+255)
 10586  12AB  160A  118A  21D9  160A  118A  	fcall	_Display_7Seg
 10587                           
 10588                           ;melody.c: 60:             Wait_ms(4);
 10589  12B0  3004               	movlw	4
 10590  12B1  00B3               	movwf	Wait_ms@time
 10591  12B2  3000               	movlw	0
 10592  12B3  00B4               	movwf	Wait_ms@time+1
 10593  12B4  160A  158A  2271  160A  118A  	fcall	_Wait_ms
 10594                           
 10595                           ;melody.c: 61:         }
 10596  12B9  3001               	movlw	1
 10597  12BA  07C1               	addwf	Play_Ring@j,f
 10598  12BB  1803               	skipnc
 10599  12BC  0AC2               	incf	Play_Ring@j+1,f
 10600  12BD  3000               	movlw	0
 10601  12BE  07C2               	addwf	Play_Ring@j+1,f
 10602  12BF  2A7B               	goto	l7078
 10603  12C0                     l7080:	
 10604                           
 10605                           ;melody.c: 62:     }
 10606  12C0  3001               	movlw	1
 10607  12C1  00BC               	movwf	??_Play_Ring
 10608  12C2  083C               	movf	??_Play_Ring,w
 10609  12C3  07C3               	addwf	Play_Ring@i,f
 10610  12C4  2A58               	goto	l7082
 10611  12C5                     l7084:	
 10612                           
 10613                           ;melody.c: 63:     Init_CaptureMode();
 10614  12C5  160A  158A  20AC   	fcall	_Init_CaptureMode
 10615  12C8  0008               	return
 10616  12C9                     __end_of_Play_Ring:	
 10617                           
 10618                           	psect	text42
 10619  1BAF                     __ptext42:	
 10620 ;; *************** function ___lwdiv *****************
 10621 ;; Defined at:
 10622 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
 10623 ;; Parameters:    Size  Location     Type
 10624 ;;  divisor         2   12[BANK0 ] unsigned int 
 10625 ;;  dividend        2   14[BANK0 ] unsigned int 
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;  quotient        2   18[BANK0 ] unsigned int 
 10628 ;;  counter         1   17[BANK0 ] unsigned char 
 10629 ;; Return value:  Size  Location     Type
 10630 ;;                  2   12[BANK0 ] unsigned int 
 10631 ;; Registers used:
 10632 ;;		wreg, status,2, status,0
 10633 ;; Tracked objects:
 10634 ;;		On entry : 300/800
 10635 ;;		On exit  : 300/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10638 ;;      Params:         0       4       0       0       0
 10639 ;;      Locals:         0       3       0       0       0
 10640 ;;      Temps:          0       1       0       0       0
 10641 ;;      Totals:         0       8       0       0       0
 10642 ;;Total ram usage:        8 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; Hardware stack levels required when called:    4
 10645 ;; This function calls:
 10646 ;;		Nothing
 10647 ;; This function is called by:
 10648 ;;		_Play_Ring
 10649 ;;		_Find_Weekday
 10650 ;; This function uses a non-reentrant model
 10651 ;;
 10652                           
 10653                           
 10654                           ;psect for function ___lwdiv
 10655  1BAF                     ___lwdiv:	
 10656                           
 10657                           ;incstack = 0
 10658                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10659  1BAF  01B2               	clrf	___lwdiv@quotient
 10660  1BB0  01B3               	clrf	___lwdiv@quotient+1
 10661  1BB1  082C               	movf	___lwdiv@divisor,w
 10662  1BB2  042D               	iorwf	___lwdiv@divisor+1,w
 10663  1BB3  1903               	btfsc	3,2
 10664  1BB4  2BE6               	goto	l6934
 10665  1BB5  01B1               	clrf	___lwdiv@counter
 10666  1BB6  0AB1               	incf	___lwdiv@counter,f
 10667  1BB7                     l6922:	
 10668  1BB7  1BAD               	btfsc	___lwdiv@divisor+1,7
 10669  1BB8  2BC5               	goto	l6924
 10670  1BB9  3001               	movlw	1
 10671  1BBA                     u6875:	
 10672  1BBA  1003               	clrc
 10673  1BBB  0DAC               	rlf	___lwdiv@divisor,f
 10674  1BBC  0DAD               	rlf	___lwdiv@divisor+1,f
 10675  1BBD  3EFF               	addlw	-1
 10676  1BBE  1D03               	skipz
 10677  1BBF  2BBA               	goto	u6875
 10678  1BC0  3001               	movlw	1
 10679  1BC1  00B0               	movwf	??___lwdiv
 10680  1BC2  0830               	movf	??___lwdiv,w
 10681  1BC3  07B1               	addwf	___lwdiv@counter,f
 10682  1BC4  2BB7               	goto	l6922
 10683  1BC5                     l6924:	
 10684  1BC5  3001               	movlw	1
 10685  1BC6                     u6895:	
 10686  1BC6  1003               	clrc
 10687  1BC7  0DB2               	rlf	___lwdiv@quotient,f
 10688  1BC8  0DB3               	rlf	___lwdiv@quotient+1,f
 10689  1BC9  3EFF               	addlw	-1
 10690  1BCA  1D03               	skipz
 10691  1BCB  2BC6               	goto	u6895
 10692  1BCC  082D               	movf	___lwdiv@divisor+1,w
 10693  1BCD  022F               	subwf	___lwdiv@dividend+1,w
 10694  1BCE  1D03               	skipz
 10695  1BCF  2BD2               	goto	u6905
 10696  1BD0  082C               	movf	___lwdiv@divisor,w
 10697  1BD1  022E               	subwf	___lwdiv@dividend,w
 10698  1BD2                     u6905:	
 10699  1BD2  1C03               	skipc
 10700  1BD3  2BDB               	goto	l6930
 10701  1BD4  082C               	movf	___lwdiv@divisor,w
 10702  1BD5  02AE               	subwf	___lwdiv@dividend,f
 10703  1BD6  082D               	movf	___lwdiv@divisor+1,w
 10704  1BD7  1C03               	skipc
 10705  1BD8  03AF               	decf	___lwdiv@dividend+1,f
 10706  1BD9  02AF               	subwf	___lwdiv@dividend+1,f
 10707  1BDA  1432               	bsf	___lwdiv@quotient,0
 10708  1BDB                     l6930:	
 10709  1BDB  3001               	movlw	1
 10710  1BDC                     u6915:	
 10711  1BDC  1003               	clrc
 10712  1BDD  0CAD               	rrf	___lwdiv@divisor+1,f
 10713  1BDE  0CAC               	rrf	___lwdiv@divisor,f
 10714  1BDF  3EFF               	addlw	-1
 10715  1BE0  1D03               	skipz
 10716  1BE1  2BDC               	goto	u6915
 10717  1BE2  3001               	movlw	1
 10718  1BE3  02B1               	subwf	___lwdiv@counter,f
 10719  1BE4  1D03               	btfss	3,2
 10720  1BE5  2BC5               	goto	l6924
 10721  1BE6                     l6934:	
 10722  1BE6  0833               	movf	___lwdiv@quotient+1,w
 10723  1BE7  00AD               	movwf	?___lwdiv+1
 10724  1BE8  0832               	movf	___lwdiv@quotient,w
 10725  1BE9  00AC               	movwf	?___lwdiv
 10726  1BEA  0008               	return
 10727  1BEB                     __end_of___lwdiv:	
 10728                           
 10729                           	psect	text43
 10730  1A71                     __ptext43:	
 10731 ;; *************** function _Wait_ms *****************
 10732 ;; Defined at:
 10733 ;;		line 7 in file "utils.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;  time            2   19[BANK0 ] unsigned int 
 10736 ;; Auto vars:     Size  Location     Type
 10737 ;;		None
 10738 ;; Return value:  Size  Location     Type
 10739 ;;                  1    wreg      void 
 10740 ;; Registers used:
 10741 ;;		wreg, status,2, status,0, pclath, cstack
 10742 ;; Tracked objects:
 10743 ;;		On entry : 300/0
 10744 ;;		On exit  : 300/0
 10745 ;;		Unchanged: 0/0
 10746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10747 ;;      Params:         0       2       0       0       0
 10748 ;;      Locals:         0       0       0       0       0
 10749 ;;      Temps:          0       4       0       0       0
 10750 ;;      Totals:         0       6       0       0       0
 10751 ;;Total ram usage:        6 bytes
 10752 ;; Hardware stack levels used:    1
 10753 ;; Hardware stack levels required when called:    5
 10754 ;; This function calls:
 10755 ;;		___lmul
 10756 ;; This function is called by:
 10757 ;;		_Play_Ring
 10758 ;; This function uses a non-reentrant model
 10759 ;;
 10760                           
 10761                           
 10762                           ;psect for function _Wait_ms
 10763  1A71                     _Wait_ms:	
 10764                           
 10765                           ;utils.c: 7: void Wait_ms(unsigned int time);utils.c: 8: {;utils.c: 9:     g_generic_tim
      +                          er=(125*(unsigned long int)time)/32;
 10766                           
 10767                           ;incstack = 0
 10768 ;; hardware stack exceeded
 10769                           ; Regs used in _Wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10770  1A71  0833               	movf	Wait_ms@time,w
 10771  1A72  00A6               	movwf	___lmul@multiplier
 10772  1A73  0834               	movf	Wait_ms@time+1,w
 10773  1A74  00A7               	movwf	___lmul@multiplier+1
 10774  1A75  01A8               	clrf	___lmul@multiplier+2
 10775  1A76  01A9               	clrf	___lmul@multiplier+3
 10776  1A77  3000               	movlw	0
 10777  1A78  00AD               	movwf	___lmul@multiplicand+3
 10778  1A79  3000               	movlw	0
 10779  1A7A  00AC               	movwf	___lmul@multiplicand+2
 10780  1A7B  3000               	movlw	0
 10781  1A7C  00AB               	movwf	___lmul@multiplicand+1
 10782  1A7D  307D               	movlw	125
 10783  1A7E  00AA               	movwf	___lmul@multiplicand
 10784  1A7F  160A  158A  23EB  160A  158A  	fcall	___lmul
 10785  1A84  0826               	movf	?___lmul,w
 10786  1A85  00B5               	movwf	??_Wait_ms
 10787  1A86  0827               	movf	?___lmul+1,w
 10788  1A87  00B6               	movwf	??_Wait_ms+1
 10789  1A88  0828               	movf	?___lmul+2,w
 10790  1A89  00B7               	movwf	??_Wait_ms+2
 10791  1A8A  0829               	movf	?___lmul+3,w
 10792  1A8B  00B8               	movwf	??_Wait_ms+3
 10793  1A8C  3005               	movlw	5
 10794  1A8D                     u6555:	
 10795  1A8D  1003               	clrc
 10796  1A8E  0CB8               	rrf	??_Wait_ms+3,f
 10797  1A8F  0CB7               	rrf	??_Wait_ms+2,f
 10798  1A90  0CB6               	rrf	??_Wait_ms+1,f
 10799  1A91  0CB5               	rrf	??_Wait_ms,f
 10800  1A92  3EFF               	addlw	-1
 10801  1A93  1D03               	skipz
 10802  1A94  2A8D               	goto	u6555
 10803  1A95  0836               	movf	??_Wait_ms+1,w
 10804  1A96  00DA               	movwf	_g_generic_timer+1	;volatile
 10805  1A97  0835               	movf	??_Wait_ms,w
 10806  1A98  00D9               	movwf	_g_generic_timer	;volatile
 10807  1A99                     l6748:	
 10808                           ;utils.c: 10:     while(g_generic_timer);
 10809                           
 10810  1A99  0859               	movf	_g_generic_timer,w	;volatile
 10811  1A9A  045A               	iorwf	_g_generic_timer+1,w	;volatile
 10812  1A9B  1903               	btfsc	3,2
 10813  1A9C  0008               	return
 10814  1A9D  2A99               	goto	l6748
 10815  1A9E                     __end_of_Wait_ms:	
 10816                           
 10817                           	psect	text44
 10818  1BEB                     __ptext44:	
 10819 ;; *************** function ___lmul *****************
 10820 ;; Defined at:
 10821 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;  multiplier      4    6[BANK0 ] unsigned long 
 10824 ;;  multiplicand    4   10[BANK0 ] unsigned long 
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;  product         4   15[BANK0 ] unsigned long 
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  4    6[BANK0 ] unsigned long 
 10829 ;; Registers used:
 10830 ;;		wreg, status,2, status,0
 10831 ;; Tracked objects:
 10832 ;;		On entry : 300/0
 10833 ;;		On exit  : 300/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10836 ;;      Params:         0       8       0       0       0
 10837 ;;      Locals:         0       4       0       0       0
 10838 ;;      Temps:          0       1       0       0       0
 10839 ;;      Totals:         0      13       0       0       0
 10840 ;;Total ram usage:       13 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    4
 10843 ;; This function calls:
 10844 ;;		Nothing
 10845 ;; This function is called by:
 10846 ;;		_Wait_ms
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850                           
 10851                           ;psect for function ___lmul
 10852  1BEB                     ___lmul:	
 10853                           
 10854                           ;incstack = 0
 10855 ;; hardware stack exceeded
 10856                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10857  1BEB  3000               	movlw	0
 10858  1BEC  00B2               	movwf	___lmul@product+3
 10859  1BED  3000               	movlw	0
 10860  1BEE  00B1               	movwf	___lmul@product+2
 10861  1BEF  3000               	movlw	0
 10862  1BF0  00B0               	movwf	___lmul@product+1
 10863  1BF1  3000               	movlw	0
 10864  1BF2  00AF               	movwf	___lmul@product
 10865  1BF3                     l6484:	
 10866  1BF3  1C26               	btfss	___lmul@multiplier,0
 10867  1BF4  2C09               	goto	l6488
 10868  1BF5  082A               	movf	___lmul@multiplicand,w
 10869  1BF6  07AF               	addwf	___lmul@product,f
 10870  1BF7  082B               	movf	___lmul@multiplicand+1,w
 10871  1BF8  1103               	clrz
 10872  1BF9  1803               	skipnc
 10873  1BFA  3E01               	addlw	1
 10874  1BFB  1D03               	btfss	3,2
 10875  1BFC  07B0               	addwf	___lmul@product+1,f
 10876  1BFD  082C               	movf	___lmul@multiplicand+2,w
 10877  1BFE  1103               	clrz
 10878  1BFF  1803               	skipnc
 10879  1C00  3E01               	addlw	1
 10880  1C01  1D03               	btfss	3,2
 10881  1C02  07B1               	addwf	___lmul@product+2,f
 10882  1C03  082D               	movf	___lmul@multiplicand+3,w
 10883  1C04  1103               	clrz
 10884  1C05  1803               	skipnc
 10885  1C06  3E01               	addlw	1
 10886  1C07  1D03               	btfss	3,2
 10887  1C08  07B2               	addwf	___lmul@product+3,f
 10888  1C09                     l6488:	
 10889  1C09  3001               	movlw	1
 10890  1C0A  00AE               	movwf	??___lmul
 10891  1C0B                     u6065:	
 10892  1C0B  1003               	clrc
 10893  1C0C  0DAA               	rlf	___lmul@multiplicand,f
 10894  1C0D  0DAB               	rlf	___lmul@multiplicand+1,f
 10895  1C0E  0DAC               	rlf	___lmul@multiplicand+2,f
 10896  1C0F  0DAD               	rlf	___lmul@multiplicand+3,f
 10897  1C10  0BAE               	decfsz	??___lmul,f
 10898  1C11  2C0B               	goto	u6065
 10899  1C12  3001               	movlw	1
 10900  1C13                     u6075:	
 10901  1C13  1003               	clrc
 10902  1C14  0CA9               	rrf	___lmul@multiplier+3,f
 10903  1C15  0CA8               	rrf	___lmul@multiplier+2,f
 10904  1C16  0CA7               	rrf	___lmul@multiplier+1,f
 10905  1C17  0CA6               	rrf	___lmul@multiplier,f
 10906  1C18  3EFF               	addlw	-1
 10907  1C19  1D03               	skipz
 10908  1C1A  2C13               	goto	u6075
 10909  1C1B  0829               	movf	___lmul@multiplier+3,w
 10910  1C1C  0428               	iorwf	___lmul@multiplier+2,w
 10911  1C1D  0427               	iorwf	___lmul@multiplier+1,w
 10912  1C1E  0426               	iorwf	___lmul@multiplier,w
 10913  1C1F  1D03               	skipz
 10914  1C20  2BF3               	goto	l6484
 10915  1C21  0832               	movf	___lmul@product+3,w
 10916  1C22  00A9               	movwf	?___lmul+3
 10917  1C23  0831               	movf	___lmul@product+2,w
 10918  1C24  00A8               	movwf	?___lmul+2
 10919  1C25  0830               	movf	___lmul@product+1,w
 10920  1C26  00A7               	movwf	?___lmul+1
 10921  1C27  082F               	movf	___lmul@product,w
 10922  1C28  00A6               	movwf	?___lmul
 10923  1C29  0008               	return
 10924  1C2A                     __end_of___lmul:	
 10925                           
 10926                           	psect	text45
 10927  187C                     __ptext45:	
 10928 ;; *************** function _Init_CompareMode *****************
 10929 ;; Defined at:
 10930 ;;		line 27 in file "melody.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;		None
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;		None
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  1    wreg      void 
 10937 ;; Registers used:
 10938 ;;		wreg, status,2, status,0
 10939 ;; Tracked objects:
 10940 ;;		On entry : B00/100
 10941 ;;		On exit  : B00/0
 10942 ;;		Unchanged: 800/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10944 ;;      Params:         0       0       0       0       0
 10945 ;;      Locals:         0       0       0       0       0
 10946 ;;      Temps:          0       0       0       0       0
 10947 ;;      Totals:         0       0       0       0       0
 10948 ;;Total ram usage:        0 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    4
 10951 ;; This function calls:
 10952 ;;		Nothing
 10953 ;; This function is called by:
 10954 ;;		_Play_Ring
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           
 10959                           ;psect for function _Init_CompareMode
 10960  187C                     _Init_CompareMode:	
 10961                           
 10962                           ;melody.c: 29:     CCP2IE=0;
 10963                           
 10964                           ;incstack = 0
 10965                           ; Regs used in _Init_CompareMode: [wreg+status,2+status,0]
 10966  187C  100D               	bcf	13,0	;volatile
 10967                           
 10968                           ;melody.c: 30:     T1CONbits.T1CKPS=0b11;
 10969  187D  3030               	movlw	48
 10970  187E  1283               	bcf	3,5	;RP0=0, select bank0
 10971  187F  0490               	iorwf	16,f	;volatile
 10972                           
 10973                           ;melody.c: 31:     CCP1IE=1;
 10974  1880  1683               	bsf	3,5	;RP0=1, select bank1
 10975  1881  150C               	bsf	12,2	;volatile
 10976                           
 10977                           ;melody.c: 32:     CCP1CONbits.CCP1M=0b1000;
 10978  1882  1283               	bcf	3,5	;RP0=0, select bank0
 10979  1883  0817               	movf	23,w	;volatile
 10980  1884  39F0               	andlw	-16
 10981  1885  3808               	iorlw	8
 10982  1886  0097               	movwf	23	;volatile
 10983  1887  0008               	return
 10984  1888                     __end_of_Init_CompareMode:	
 10985                           
 10986                           	psect	text46
 10987  18AC                     __ptext46:	
 10988 ;; *************** function _Init_CaptureMode *****************
 10989 ;; Defined at:
 10990 ;;		line 35 in file "melody.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;		None
 10993 ;; Auto vars:     Size  Location     Type
 10994 ;;		None
 10995 ;; Return value:  Size  Location     Type
 10996 ;;                  1    wreg      void 
 10997 ;; Registers used:
 10998 ;;		wreg, status,2, status,0
 10999 ;; Tracked objects:
 11000 ;;		On entry : 300/0
 11001 ;;		On exit  : 300/0
 11002 ;;		Unchanged: 0/0
 11003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11004 ;;      Params:         0       0       0       0       0
 11005 ;;      Locals:         0       0       0       0       0
 11006 ;;      Temps:          0       0       0       0       0
 11007 ;;      Totals:         0       0       0       0       0
 11008 ;;Total ram usage:        0 bytes
 11009 ;; Hardware stack levels used:    1
 11010 ;; Hardware stack levels required when called:    4
 11011 ;; This function calls:
 11012 ;;		Nothing
 11013 ;; This function is called by:
 11014 ;;		_Play_Ring
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           
 11019                           ;psect for function _Init_CaptureMode
 11020  18AC                     _Init_CaptureMode:	
 11021                           
 11022                           ;melody.c: 37:     CCP1IE=0;
 11023                           
 11024                           ;incstack = 0
 11025                           ; Regs used in _Init_CaptureMode: [wreg+status,2+status,0]
 11026  18AC  1683               	bsf	3,5	;RP0=1, select bank1
 11027  18AD  110C               	bcf	12,2	;volatile
 11028                           
 11029                           ;melody.c: 38:     T1CONbits.T1CKPS=0b00;
 11030  18AE  30CF               	movlw	-49
 11031  18AF  1283               	bcf	3,5	;RP0=0, select bank0
 11032  18B0  0590               	andwf	16,f	;volatile
 11033                           
 11034                           ;melody.c: 39:     CCP2IE=1;
 11035  18B1  1683               	bsf	3,5	;RP0=1, select bank1
 11036  18B2  140D               	bsf	13,0	;volatile
 11037                           
 11038                           ;melody.c: 40:     CCP2CONbits.CCP2M=0b0100;
 11039  18B3  1283               	bcf	3,5	;RP0=0, select bank0
 11040  18B4  081D               	movf	29,w	;volatile
 11041  18B5  39F0               	andlw	-16
 11042  18B6  3804               	iorlw	4
 11043  18B7  009D               	movwf	29	;volatile
 11044  18B8  0008               	return
 11045  18B9                     __end_of_Init_CaptureMode:	
 11046                           
 11047                           	psect	text47
 11048  1A19                     __ptext47:	
 11049 ;; *************** function _Generate_PWM *****************
 11050 ;; Defined at:
 11051 ;;		line 22 in file "melody.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  freq            4   20[BANK0 ] unsigned long 
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;		None
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  1    wreg      void 
 11058 ;; Registers used:
 11059 ;;		wreg, status,2, status,0, pclath, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 300/0
 11062 ;;		On exit  : 300/100
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11065 ;;      Params:         0       4       0       0       0
 11066 ;;      Locals:         0       0       0       0       0
 11067 ;;      Temps:          0       4       0       0       0
 11068 ;;      Totals:         0       8       0       0       0
 11069 ;;Total ram usage:        8 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    5
 11072 ;; This function calls:
 11073 ;;		___lldiv
 11074 ;; This function is called by:
 11075 ;;		_Play_Ring
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function _Generate_PWM
 11081  1A19                     _Generate_PWM:	
 11082                           
 11083                           ;melody.c: 22: void Generate_PWM(unsigned long int freq);melody.c: 23: {;melody.c: 24:  
      +                             g_pwm_freq=8000000/(4*8*2*freq);
 11084                           
 11085                           ;incstack = 0
 11086 ;; hardware stack exceeded
 11087                           ; Regs used in _Generate_PWM: [wreg+status,2+status,0+pclath+cstack]
 11088  1A19  0834               	movf	Generate_PWM@freq,w
 11089  1A1A  00B8               	movwf	??_Generate_PWM
 11090  1A1B  0835               	movf	Generate_PWM@freq+1,w
 11091  1A1C  00B9               	movwf	??_Generate_PWM+1
 11092  1A1D  0836               	movf	Generate_PWM@freq+2,w
 11093  1A1E  00BA               	movwf	??_Generate_PWM+2
 11094  1A1F  0837               	movf	Generate_PWM@freq+3,w
 11095  1A20  00BB               	movwf	??_Generate_PWM+3
 11096  1A21  3006               	movlw	6
 11097  1A22                     u6545:	
 11098  1A22  1003               	clrc
 11099  1A23  0DB8               	rlf	??_Generate_PWM,f
 11100  1A24  0DB9               	rlf	??_Generate_PWM+1,f
 11101  1A25  0DBA               	rlf	??_Generate_PWM+2,f
 11102  1A26  0DBB               	rlf	??_Generate_PWM+3,f
 11103  1A27  3EFF               	addlw	-1
 11104  1A28  1D03               	skipz
 11105  1A29  2A22               	goto	u6545
 11106  1A2A  083B               	movf	??_Generate_PWM+3,w
 11107  1A2B  00A9               	movwf	___lldiv@divisor+3
 11108  1A2C  083A               	movf	??_Generate_PWM+2,w
 11109  1A2D  00A8               	movwf	___lldiv@divisor+2
 11110  1A2E  0839               	movf	??_Generate_PWM+1,w
 11111  1A2F  00A7               	movwf	___lldiv@divisor+1
 11112  1A30  0838               	movf	??_Generate_PWM,w
 11113  1A31  00A6               	movwf	___lldiv@divisor
 11114  1A32  3000               	movlw	0
 11115  1A33  00AD               	movwf	___lldiv@dividend+3
 11116  1A34  307A               	movlw	122
 11117  1A35  00AC               	movwf	___lldiv@dividend+2
 11118  1A36  3012               	movlw	18
 11119  1A37  00AB               	movwf	___lldiv@dividend+1
 11120  1A38  3000               	movlw	0
 11121  1A39  00AA               	movwf	___lldiv@dividend
 11122  1A3A  160A  158A  26DC   	fcall	___lldiv
 11123  1A3D  0827               	movf	?___lldiv+1,w
 11124  1A3E  1683               	bsf	3,5	;RP0=1, select bank1
 11125  1A3F  00A3               	movwf	(_g_pwm_freq+1)^(0+128)	;volatile
 11126  1A40  1283               	bcf	3,5	;RP0=0, select bank0
 11127  1A41  0826               	movf	?___lldiv,w
 11128  1A42  1683               	bsf	3,5	;RP0=1, select bank1
 11129  1A43  00A2               	movwf	_g_pwm_freq^(0+128)	;volatile
 11130  1A44  0008               	return
 11131  1A45                     __end_of_Generate_PWM:	
 11132                           
 11133                           	psect	text48
 11134  1EDC                     __ptext48:	
 11135 ;; *************** function ___lldiv *****************
 11136 ;; Defined at:
 11137 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\__lldiv.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;  divisor         4    6[BANK0 ] unsigned long 
 11140 ;;  dividend        4   10[BANK0 ] unsigned long 
 11141 ;; Auto vars:     Size  Location     Type
 11142 ;;  quotient        4   15[BANK0 ] unsigned long 
 11143 ;;  counter         1   19[BANK0 ] unsigned char 
 11144 ;; Return value:  Size  Location     Type
 11145 ;;                  4    6[BANK0 ] unsigned long 
 11146 ;; Registers used:
 11147 ;;		wreg, status,2, status,0
 11148 ;; Tracked objects:
 11149 ;;		On entry : 300/0
 11150 ;;		On exit  : 300/0
 11151 ;;		Unchanged: 0/0
 11152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11153 ;;      Params:         0       8       0       0       0
 11154 ;;      Locals:         0       5       0       0       0
 11155 ;;      Temps:          0       1       0       0       0
 11156 ;;      Totals:         0      14       0       0       0
 11157 ;;Total ram usage:       14 bytes
 11158 ;; Hardware stack levels used:    1
 11159 ;; Hardware stack levels required when called:    4
 11160 ;; This function calls:
 11161 ;;		Nothing
 11162 ;; This function is called by:
 11163 ;;		_Generate_PWM
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           
 11168                           ;psect for function ___lldiv
 11169  1EDC                     ___lldiv:	
 11170                           
 11171                           ;incstack = 0
 11172 ;; hardware stack exceeded
 11173                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 11174  1EDC  3000               	movlw	0
 11175  1EDD  00B2               	movwf	___lldiv@quotient+3
 11176  1EDE  3000               	movlw	0
 11177  1EDF  00B1               	movwf	___lldiv@quotient+2
 11178  1EE0  3000               	movlw	0
 11179  1EE1  00B0               	movwf	___lldiv@quotient+1
 11180  1EE2  3000               	movlw	0
 11181  1EE3  00AF               	movwf	___lldiv@quotient
 11182  1EE4  0829               	movf	___lldiv@divisor+3,w
 11183  1EE5  0428               	iorwf	___lldiv@divisor+2,w
 11184  1EE6  0427               	iorwf	___lldiv@divisor+1,w
 11185  1EE7  0426               	iorwf	___lldiv@divisor,w
 11186  1EE8  1903               	skipnz
 11187  1EE9  2F31               	goto	l6530
 11188  1EEA  01B3               	clrf	___lldiv@counter
 11189  1EEB  0AB3               	incf	___lldiv@counter,f
 11190  1EEC                     l6516:	
 11191  1EEC  1BA9               	btfsc	___lldiv@divisor+3,7
 11192  1EED  2EFC               	goto	l6518
 11193  1EEE  3001               	movlw	1
 11194  1EEF  00AE               	movwf	??___lldiv
 11195  1EF0                     u6125:	
 11196  1EF0  1003               	clrc
 11197  1EF1  0DA6               	rlf	___lldiv@divisor,f
 11198  1EF2  0DA7               	rlf	___lldiv@divisor+1,f
 11199  1EF3  0DA8               	rlf	___lldiv@divisor+2,f
 11200  1EF4  0DA9               	rlf	___lldiv@divisor+3,f
 11201  1EF5  0BAE               	decfsz	??___lldiv,f
 11202  1EF6  2EF0               	goto	u6125
 11203  1EF7  3001               	movlw	1
 11204  1EF8  00AE               	movwf	??___lldiv
 11205  1EF9  082E               	movf	??___lldiv,w
 11206  1EFA  07B3               	addwf	___lldiv@counter,f
 11207  1EFB  2EEC               	goto	l6516
 11208  1EFC                     l6518:	
 11209  1EFC  3001               	movlw	1
 11210  1EFD  00AE               	movwf	??___lldiv
 11211  1EFE                     u6145:	
 11212  1EFE  1003               	clrc
 11213  1EFF  0DAF               	rlf	___lldiv@quotient,f
 11214  1F00  0DB0               	rlf	___lldiv@quotient+1,f
 11215  1F01  0DB1               	rlf	___lldiv@quotient+2,f
 11216  1F02  0DB2               	rlf	___lldiv@quotient+3,f
 11217  1F03  0BAE               	decfsz	??___lldiv,f
 11218  1F04  2EFE               	goto	u6145
 11219  1F05  0829               	movf	___lldiv@divisor+3,w
 11220  1F06  022D               	subwf	___lldiv@dividend+3,w
 11221  1F07  1D03               	skipz
 11222  1F08  2F13               	goto	u6155
 11223  1F09  0828               	movf	___lldiv@divisor+2,w
 11224  1F0A  022C               	subwf	___lldiv@dividend+2,w
 11225  1F0B  1D03               	skipz
 11226  1F0C  2F13               	goto	u6155
 11227  1F0D  0827               	movf	___lldiv@divisor+1,w
 11228  1F0E  022B               	subwf	___lldiv@dividend+1,w
 11229  1F0F  1D03               	skipz
 11230  1F10  2F13               	goto	u6155
 11231  1F11  0826               	movf	___lldiv@divisor,w
 11232  1F12  022A               	subwf	___lldiv@dividend,w
 11233  1F13                     u6155:	
 11234  1F13  1C03               	skipc
 11235  1F14  2F24               	goto	l6526
 11236  1F15  0826               	movf	___lldiv@divisor,w
 11237  1F16  02AA               	subwf	___lldiv@dividend,f
 11238  1F17  0827               	movf	___lldiv@divisor+1,w
 11239  1F18  1C03               	skipc
 11240  1F19  0F27               	incfsz	___lldiv@divisor+1,w
 11241  1F1A  02AB               	subwf	___lldiv@dividend+1,f
 11242  1F1B  0828               	movf	___lldiv@divisor+2,w
 11243  1F1C  1C03               	skipc
 11244  1F1D  0F28               	incfsz	___lldiv@divisor+2,w
 11245  1F1E  02AC               	subwf	___lldiv@dividend+2,f
 11246  1F1F  0829               	movf	___lldiv@divisor+3,w
 11247  1F20  1C03               	skipc
 11248  1F21  0F29               	incfsz	___lldiv@divisor+3,w
 11249  1F22  02AD               	subwf	___lldiv@dividend+3,f
 11250  1F23  142F               	bsf	___lldiv@quotient,0
 11251  1F24                     l6526:	
 11252  1F24  3001               	movlw	1
 11253  1F25                     u6165:	
 11254  1F25  1003               	clrc
 11255  1F26  0CA9               	rrf	___lldiv@divisor+3,f
 11256  1F27  0CA8               	rrf	___lldiv@divisor+2,f
 11257  1F28  0CA7               	rrf	___lldiv@divisor+1,f
 11258  1F29  0CA6               	rrf	___lldiv@divisor,f
 11259  1F2A  3EFF               	addlw	-1
 11260  1F2B  1D03               	skipz
 11261  1F2C  2F25               	goto	u6165
 11262  1F2D  3001               	movlw	1
 11263  1F2E  02B3               	subwf	___lldiv@counter,f
 11264  1F2F  1D03               	btfss	3,2
 11265  1F30  2EFC               	goto	l6518
 11266  1F31                     l6530:	
 11267  1F31  0832               	movf	___lldiv@quotient+3,w
 11268  1F32  00A9               	movwf	?___lldiv+3
 11269  1F33  0831               	movf	___lldiv@quotient+2,w
 11270  1F34  00A8               	movwf	?___lldiv+2
 11271  1F35  0830               	movf	___lldiv@quotient+1,w
 11272  1F36  00A7               	movwf	?___lldiv+1
 11273  1F37  082F               	movf	___lldiv@quotient,w
 11274  1F38  00A6               	movwf	?___lldiv
 11275  1F39  0008               	return
 11276  1F3A                     __end_of___lldiv:	
 11277                           
 11278                           	psect	text49
 11279  11D9                     __ptext49:	
 11280 ;; *************** function _Display_7Seg *****************
 11281 ;; Defined at:
 11282 ;;		line 96 in file "display-7-segment.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  text            1    wreg     PTR unsigned char 
 11285 ;;		 -> g_display_text(4), 
 11286 ;;  decimal_poin    1   17[BANK0 ] unsigned char 
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;  text            1   19[BANK0 ] PTR unsigned char 
 11289 ;;		 -> g_display_text(4), 
 11290 ;; Return value:  Size  Location     Type
 11291 ;;                  1    wreg      void 
 11292 ;; Registers used:
 11293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11294 ;; Tracked objects:
 11295 ;;		On entry : 300/0
 11296 ;;		On exit  : 300/0
 11297 ;;		Unchanged: 0/0
 11298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11299 ;;      Params:         0       1       0       0       0
 11300 ;;      Locals:         0       1       0       0       0
 11301 ;;      Temps:          0       1       0       0       0
 11302 ;;      Totals:         0       3       0       0       0
 11303 ;;Total ram usage:        3 bytes
 11304 ;; Hardware stack levels used:    1
 11305 ;; Hardware stack levels required when called:    6
 11306 ;; This function calls:
 11307 ;;		_One_Digit_Handler
 11308 ;; This function is called by:
 11309 ;;		_Play_Ring
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           
 11314                           ;psect for function _Display_7Seg
 11315  11D9                     _Display_7Seg:	
 11316                           
 11317                           ;incstack = 0
 11318 ;; hardware stack exceeded
 11319                           ; Regs used in _Display_7Seg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11320                           ;Display_7Seg@text stored from wreg
 11321  11D9  00B3               	movwf	Display_7Seg@text
 11322                           
 11323                           ;display-7-segment.c: 96: void Display_7Seg(unsigned char *text, unsigned char decimal_p
      +                          oint);display-7-segment.c: 97: {;display-7-segment.c: 98:     static unsigned char enabl
      +                          e_digit=1;;display-7-segment.c: 100:     if(enable_digit<=1)
 11324  11DA  3002               	movlw	2
 11325  11DB  025E               	subwf	Display_7Seg@enable_digit,w
 11326  11DC  1803               	skipnc
 11327  11DD  29F4               	goto	l6650
 11328                           
 11329                           ;display-7-segment.c: 101:     {;display-7-segment.c: 102:         if(decimal_point & 0b
      +                          1000)
 11330  11DE  1DB1               	btfss	Display_7Seg@decimal_point,3
 11331  11DF  29E5               	goto	l6646
 11332                           
 11333                           ;display-7-segment.c: 103:         {;display-7-segment.c: 104:             One_Digit_Han
      +                          dler(*text,1,1);
 11334  11E0  01AC               	clrf	One_Digit_Handler@digit_number
 11335  11E1  0AAC               	incf	One_Digit_Handler@digit_number,f
 11336  11E2  01AD               	clrf	One_Digit_Handler@decimal_point
 11337  11E3  0AAD               	incf	One_Digit_Handler@decimal_point,f
 11338  11E4  29E8               	goto	L11
 11339  11E5                     l6646:	
 11340                           ;display-7-segment.c: 105:         }else
 11341                           
 11342                           
 11343                           ;display-7-segment.c: 106:         {;display-7-segment.c: 107:             One_Digit_Han
      +                          dler(*text,1,0);
 11344  11E5  01AC               	clrf	One_Digit_Handler@digit_number
 11345  11E6  0AAC               	incf	One_Digit_Handler@digit_number,f
 11346  11E7  01AD               	clrf	One_Digit_Handler@decimal_point
 11347  11E8                     L11:	
 11348  11E8  0833               	movf	Display_7Seg@text,w
 11349  11E9  0084               	movwf	4
 11350  11EA  1383               	bcf	3,7	;select IRP bank0
 11351  11EB  0800               	movf	0,w
 11352  11EC  160A  158A  2305   	fcall	_One_Digit_Handler
 11353                           
 11354                           ;display-7-segment.c: 109:         enable_digit=2;
 11355  11EF  3002               	movlw	2
 11356  11F0  00B2               	movwf	??_Display_7Seg
 11357  11F1  0832               	movf	??_Display_7Seg,w
 11358  11F2  00DE               	movwf	Display_7Seg@enable_digit
 11359                           
 11360                           ;display-7-segment.c: 111:     }else if(enable_digit==2)
 11361  11F3  0008               	return
 11362  11F4                     l6650:	
 11363  11F4  3002               	movlw	2
 11364  11F5  065E               	xorwf	Display_7Seg@enable_digit,w
 11365  11F6  1D03               	btfss	3,2
 11366  11F7  2A12               	goto	l6660
 11367                           
 11368                           ;display-7-segment.c: 112:     {;display-7-segment.c: 113:         if(decimal_point & 0b
      +                          0100)
 11369  11F8  1D31               	btfss	Display_7Seg@decimal_point,2
 11370  11F9  2A01               	goto	l6656
 11371                           
 11372                           ;display-7-segment.c: 114:         {;display-7-segment.c: 115:             One_Digit_Han
      +                          dler(*(text+1),2,1);
 11373  11FA  3002               	movlw	2
 11374  11FB  00B2               	movwf	??_Display_7Seg
 11375  11FC  0832               	movf	??_Display_7Seg,w
 11376  11FD  00AC               	movwf	One_Digit_Handler@digit_number
 11377  11FE  01AD               	clrf	One_Digit_Handler@decimal_point
 11378  11FF  0AAD               	incf	One_Digit_Handler@decimal_point,f
 11379  1200  2A06               	goto	L12
 11380  1201                     l6656:	
 11381                           ;display-7-segment.c: 116:         }else
 11382                           
 11383                           
 11384                           ;display-7-segment.c: 117:         {;display-7-segment.c: 118:             One_Digit_Han
      +                          dler(*(text+1),2,0);
 11385  1201  3002               	movlw	2
 11386  1202  00B2               	movwf	??_Display_7Seg
 11387  1203  0832               	movf	??_Display_7Seg,w
 11388  1204  00AC               	movwf	One_Digit_Handler@digit_number
 11389  1205  01AD               	clrf	One_Digit_Handler@decimal_point
 11390  1206                     L12:	
 11391  1206  0A33               	incf	Display_7Seg@text,w
 11392  1207  0084               	movwf	4
 11393  1208  1383               	bcf	3,7	;select IRP bank0
 11394  1209  0800               	movf	0,w
 11395  120A  160A  158A  2305   	fcall	_One_Digit_Handler
 11396                           
 11397                           ;display-7-segment.c: 120:         enable_digit=3;
 11398  120D  3003               	movlw	3
 11399  120E  00B2               	movwf	??_Display_7Seg
 11400  120F  0832               	movf	??_Display_7Seg,w
 11401  1210  00DE               	movwf	Display_7Seg@enable_digit
 11402                           
 11403                           ;display-7-segment.c: 122:     }else if(enable_digit==3)
 11404  1211  0008               	return
 11405  1212                     l6660:	
 11406  1212  3003               	movlw	3
 11407  1213  065E               	xorwf	Display_7Seg@enable_digit,w
 11408  1214  1D03               	btfss	3,2
 11409  1215  2A31               	goto	l6670
 11410                           
 11411                           ;display-7-segment.c: 123:     {;display-7-segment.c: 124:         if(decimal_point & 0b
      +                          0010)
 11412  1216  1CB1               	btfss	Display_7Seg@decimal_point,1
 11413  1217  2A1F               	goto	l6666
 11414                           
 11415                           ;display-7-segment.c: 125:         {;display-7-segment.c: 126:            One_Digit_Hand
      +                          ler(*(text+2),3,1);
 11416  1218  3003               	movlw	3
 11417  1219  00B2               	movwf	??_Display_7Seg
 11418  121A  0832               	movf	??_Display_7Seg,w
 11419  121B  00AC               	movwf	One_Digit_Handler@digit_number
 11420  121C  01AD               	clrf	One_Digit_Handler@decimal_point
 11421  121D  0AAD               	incf	One_Digit_Handler@decimal_point,f
 11422  121E  2A24               	goto	L13
 11423  121F                     l6666:	
 11424                           ;display-7-segment.c: 127:         }else
 11425                           
 11426                           
 11427                           ;display-7-segment.c: 128:         {;display-7-segment.c: 129:            One_Digit_Hand
      +                          ler(*(text+2),3,0);
 11428  121F  3003               	movlw	3
 11429  1220  00B2               	movwf	??_Display_7Seg
 11430  1221  0832               	movf	??_Display_7Seg,w
 11431  1222  00AC               	movwf	One_Digit_Handler@digit_number
 11432  1223  01AD               	clrf	One_Digit_Handler@decimal_point
 11433  1224                     L13:	
 11434  1224  0833               	movf	Display_7Seg@text,w
 11435  1225  3E02               	addlw	2
 11436  1226  0084               	movwf	4
 11437  1227  1383               	bcf	3,7	;select IRP bank0
 11438  1228  0800               	movf	0,w
 11439  1229  160A  158A  2305   	fcall	_One_Digit_Handler
 11440                           
 11441                           ;display-7-segment.c: 131:         enable_digit=4;
 11442  122C  3004               	movlw	4
 11443  122D  00B2               	movwf	??_Display_7Seg
 11444  122E  0832               	movf	??_Display_7Seg,w
 11445  122F  00DE               	movwf	Display_7Seg@enable_digit
 11446                           
 11447                           ;display-7-segment.c: 133:     }else if(enable_digit>=4)
 11448  1230  0008               	return
 11449  1231                     l6670:	
 11450  1231  3004               	movlw	4
 11451  1232  025E               	subwf	Display_7Seg@enable_digit,w
 11452  1233  1C03               	skipc
 11453  1234  0008               	return
 11454                           
 11455                           ;display-7-segment.c: 134:     {;display-7-segment.c: 135:         if(decimal_point & 0b
      +                          0001)
 11456  1235  1C31               	btfss	Display_7Seg@decimal_point,0
 11457  1236  2A3E               	goto	l6676
 11458                           
 11459                           ;display-7-segment.c: 136:         {;display-7-segment.c: 137:             One_Digit_Han
      +                          dler(*(text+3),4,1);
 11460  1237  3004               	movlw	4
 11461  1238  00B2               	movwf	??_Display_7Seg
 11462  1239  0832               	movf	??_Display_7Seg,w
 11463  123A  00AC               	movwf	One_Digit_Handler@digit_number
 11464  123B  01AD               	clrf	One_Digit_Handler@decimal_point
 11465  123C  0AAD               	incf	One_Digit_Handler@decimal_point,f
 11466  123D  2A43               	goto	L14
 11467  123E                     l6676:	
 11468                           ;display-7-segment.c: 138:         }else
 11469                           
 11470                           
 11471                           ;display-7-segment.c: 139:         {;display-7-segment.c: 140:             One_Digit_Han
      +                          dler(*(text+3),4,0);
 11472  123E  3004               	movlw	4
 11473  123F  00B2               	movwf	??_Display_7Seg
 11474  1240  0832               	movf	??_Display_7Seg,w
 11475  1241  00AC               	movwf	One_Digit_Handler@digit_number
 11476  1242  01AD               	clrf	One_Digit_Handler@decimal_point
 11477  1243                     L14:	
 11478  1243  0833               	movf	Display_7Seg@text,w
 11479  1244  3E03               	addlw	3
 11480  1245  0084               	movwf	4
 11481  1246  1383               	bcf	3,7	;select IRP bank0
 11482  1247  0800               	movf	0,w
 11483  1248  160A  158A  2305   	fcall	_One_Digit_Handler
 11484                           
 11485                           ;display-7-segment.c: 142:         enable_digit=1;
 11486  124B  01DE               	clrf	Display_7Seg@enable_digit
 11487  124C  0ADE               	incf	Display_7Seg@enable_digit,f
 11488  124D  0008               	return
 11489  124E                     __end_of_Display_7Seg:	
 11490                           
 11491                           	psect	text50
 11492  1B05                     __ptext50:	
 11493 ;; *************** function _One_Digit_Handler *****************
 11494 ;; Defined at:
 11495 ;;		line 147 in file "display-7-segment.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;  sign            1    wreg     unsigned char 
 11498 ;;  digit_number    1   12[BANK0 ] unsigned char 
 11499 ;;  decimal_poin    1   13[BANK0 ] unsigned char 
 11500 ;; Auto vars:     Size  Location     Type
 11501 ;;  sign            1   16[BANK0 ] unsigned char 
 11502 ;; Return value:  Size  Location     Type
 11503 ;;                  1    wreg      void 
 11504 ;; Registers used:
 11505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11506 ;; Tracked objects:
 11507 ;;		On entry : B00/0
 11508 ;;		On exit  : 300/0
 11509 ;;		Unchanged: 0/0
 11510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11511 ;;      Params:         0       2       0       0       0
 11512 ;;      Locals:         0       1       0       0       0
 11513 ;;      Temps:          0       2       0       0       0
 11514 ;;      Totals:         0       5       0       0       0
 11515 ;;Total ram usage:        5 bytes
 11516 ;; Hardware stack levels used:    1
 11517 ;; Hardware stack levels required when called:    5
 11518 ;; This function calls:
 11519 ;;		_Disable_All_Digits
 11520 ;;		_Set_Anode_Outputs
 11521 ;;		_Sign_Anode_Data
 11522 ;; This function is called by:
 11523 ;;		_Display_7Seg
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           
 11528                           ;psect for function _One_Digit_Handler
 11529  1B05                     _One_Digit_Handler:	
 11530                           
 11531                           ;incstack = 0
 11532 ;; hardware stack exceeded
 11533                           ; Regs used in _One_Digit_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11534                           ;One_Digit_Handler@sign stored from wreg
 11535  1B05  00B0               	movwf	One_Digit_Handler@sign
 11536                           
 11537                           ;display-7-segment.c: 147: void One_Digit_Handler(unsigned char sign, unsigned char digi
      +                          t_number, unsigned char decimal_point);display-7-segment.c: 148: {;display-7-segment.c: 
      +                          150:     Disable_All_Digits();
 11538  1B06  160A  158A  2067  160A  158A  	fcall	_Disable_All_Digits
 11539                           
 11540                           ;display-7-segment.c: 151:     Set_Anode_Outputs(Sign_Anode_Data(sign),decimal_point);
 11541  1B0B  082D               	movf	One_Digit_Handler@decimal_point,w
 11542  1B0C  00AE               	movwf	??_One_Digit_Handler
 11543  1B0D  082E               	movf	??_One_Digit_Handler,w
 11544  1B0E  00A9               	movwf	Set_Anode_Outputs@decimal_point
 11545  1B0F  0830               	movf	One_Digit_Handler@sign,w
 11546  1B10  160A  118A  2731  160A  158A  	fcall	_Sign_Anode_Data
 11547  1B15  160A  158A  279D  160A  158A  	fcall	_Set_Anode_Outputs
 11548                           
 11549                           ;display-7-segment.c: 152:     switch (digit_number)
 11550  1B1A  2B23               	goto	l6446
 11551  1B1B                     l152:	
 11552                           ;display-7-segment.c: 153:     {;display-7-segment.c: 154:         case 1 : PORTBbits.RB
      +                          7=0; break;
 11553                           
 11554  1B1B  1386               	bcf	6,7	;volatile
 11555  1B1C  0008               	return
 11556  1B1D                     l154:	
 11557                           ;display-7-segment.c: 155:         case 2 : PORTBbits.RB6=0; break;
 11558                           
 11559  1B1D  1306               	bcf	6,6	;volatile
 11560  1B1E  0008               	return
 11561  1B1F                     l155:	
 11562                           ;display-7-segment.c: 156:         case 3 : PORTBbits.RB5=0; break;
 11563                           
 11564  1B1F  1286               	bcf	6,5	;volatile
 11565  1B20  0008               	return
 11566  1B21                     l156:	
 11567                           ;display-7-segment.c: 157:         case 4 : PORTBbits.RB4=0; break;
 11568                           
 11569  1B21  1206               	bcf	6,4	;volatile
 11570  1B22  0008               	return
 11571  1B23                     l6446:	
 11572  1B23  082C               	movf	One_Digit_Handler@digit_number,w
 11573  1B24  00AE               	movwf	??_One_Digit_Handler
 11574  1B25  01AF               	clrf	??_One_Digit_Handler+1
 11575                           
 11576                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11577                           ; Switch size 1, requested type "simple"
 11578                           ; Number of cases is 1, Range of values is 0 to 0
 11579                           ; switch strategies available:
 11580                           ; Name         Instructions Cycles
 11581                           ; simple_byte            4     3 (average)
 11582                           ; direct_byte           11     8 (fixed)
 11583                           ; jumptable            260     6 (fixed)
 11584                           ;	Chosen strategy is simple_byte
 11585  1B26  082F               	movf	??_One_Digit_Handler+1,w
 11586  1B27  3A00               	xorlw	0	; case 0
 11587  1B28  1903               	skipnz
 11588  1B29  2B2B               	goto	l8494
 11589  1B2A  2B39               	goto	l157
 11590  1B2B                     l8494:	
 11591                           
 11592                           ; Switch size 1, requested type "simple"
 11593                           ; Number of cases is 4, Range of values is 1 to 4
 11594                           ; switch strategies available:
 11595                           ; Name         Instructions Cycles
 11596                           ; simple_byte           13     7 (average)
 11597                           ; direct_byte           23    11 (fixed)
 11598                           ; jumptable            263     9 (fixed)
 11599                           ;	Chosen strategy is simple_byte
 11600  1B2B  082E               	movf	??_One_Digit_Handler,w
 11601  1B2C  3A01               	xorlw	1	; case 1
 11602  1B2D  1903               	skipnz
 11603  1B2E  2B1B               	goto	l152
 11604  1B2F  3A03               	xorlw	3	; case 2
 11605  1B30  1903               	skipnz
 11606  1B31  2B1D               	goto	l154
 11607  1B32  3A01               	xorlw	1	; case 3
 11608  1B33  1903               	skipnz
 11609  1B34  2B1F               	goto	l155
 11610  1B35  3A07               	xorlw	7	; case 4
 11611  1B36  1903               	skipnz
 11612  1B37  2B21               	goto	l156
 11613  1B38  2B39               	goto	l157
 11614  1B39                     l157:	
 11615  1B39  0008               	return
 11616  1B3A                     __end_of_One_Digit_Handler:	
 11617                           
 11618                           	psect	text51
 11619  1731                     __ptext51:	
 11620 ;; *************** function _Sign_Anode_Data *****************
 11621 ;; Defined at:
 11622 ;;		line 27 in file "display-7-segment.c"
 11623 ;; Parameters:    Size  Location     Type
 11624 ;;  sign            1    wreg     unsigned char 
 11625 ;; Auto vars:     Size  Location     Type
 11626 ;;  sign            1    8[BANK0 ] unsigned char 
 11627 ;; Return value:  Size  Location     Type
 11628 ;;                  1    wreg      unsigned char 
 11629 ;; Registers used:
 11630 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11631 ;; Tracked objects:
 11632 ;;		On entry : 300/0
 11633 ;;		On exit  : 300/0
 11634 ;;		Unchanged: 0/0
 11635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11636 ;;      Params:         0       0       0       0       0
 11637 ;;      Locals:         0       1       0       0       0
 11638 ;;      Temps:          0       2       0       0       0
 11639 ;;      Totals:         0       3       0       0       0
 11640 ;;Total ram usage:        3 bytes
 11641 ;; Hardware stack levels used:    1
 11642 ;; Hardware stack levels required when called:    4
 11643 ;; This function calls:
 11644 ;;		Nothing
 11645 ;; This function is called by:
 11646 ;;		_One_Digit_Handler
 11647 ;; This function uses a non-reentrant model
 11648 ;;
 11649                           
 11650                           
 11651                           ;psect for function _Sign_Anode_Data
 11652  1731                     _Sign_Anode_Data:	
 11653                           
 11654                           ;incstack = 0
 11655 ;; hardware stack exceeded
 11656                           ; Regs used in _Sign_Anode_Data: [wreg-fsr0h+status,2+status,0]
 11657                           ;Sign_Anode_Data@sign stored from wreg
 11658  1731  00A8               	movwf	Sign_Anode_Data@sign
 11659                           
 11660                           ;display-7-segment.c: 27: unsigned char Sign_Anode_Data(unsigned char sign);display-7-se
      +                          gment.c: 28: {;display-7-segment.c: 29:     switch (sign)
 11661  1732  2F6B               	goto	l6384
 11662  1733                     l6198:	
 11663  1733  30FC               	movlw	252
 11664  1734  0008               	return
 11665  1735                     l6202:	
 11666  1735  3060               	movlw	96
 11667  1736  0008               	return
 11668  1737                     l6206:	
 11669  1737  30DA               	movlw	218
 11670  1738  0008               	return
 11671  1739                     l6210:	
 11672  1739  30F2               	movlw	242
 11673  173A  0008               	return
 11674  173B                     l6214:	
 11675  173B  3066               	movlw	102
 11676  173C  0008               	return
 11677  173D                     l6218:	
 11678  173D  30B6               	movlw	182
 11679  173E  0008               	return
 11680  173F                     l6222:	
 11681  173F  30BE               	movlw	190
 11682  1740  0008               	return
 11683  1741                     l6226:	
 11684  1741  30E4               	movlw	228
 11685  1742  0008               	return
 11686  1743                     l6230:	
 11687  1743  30FE               	movlw	254
 11688  1744  0008               	return
 11689  1745                     l6234:	
 11690  1745  30F6               	movlw	246
 11691  1746  0008               	return
 11692  1747                     l6278:	
 11693  1747  30EE               	movlw	238
 11694  1748  0008               	return
 11695  1749                     l6282:	
 11696  1749  303E               	movlw	62
 11697  174A  0008               	return
 11698  174B                     l6286:	
 11699  174B  309C               	movlw	156
 11700  174C  0008               	return
 11701  174D                     l6290:	
 11702  174D  307A               	movlw	122
 11703  174E  0008               	return
 11704  174F                     l6294:	
 11705  174F  309E               	movlw	158
 11706  1750  0008               	return
 11707  1751                     l6298:	
 11708  1751  308E               	movlw	142
 11709  1752  0008               	return
 11710  1753                     l6302:	
 11711  1753  30BC               	movlw	188
 11712  1754  0008               	return
 11713  1755                     l6306:	
 11714  1755  306E               	movlw	110
 11715  1756  0008               	return
 11716  1757                     l6314:	
 11717  1757  3070               	movlw	112
 11718  1758  0008               	return
 11719  1759                     l6322:	
 11720  1759  301C               	movlw	28
 11721  175A  0008               	return
 11722  175B                     l6326:	
 11723  175B  30EC               	movlw	236
 11724  175C  0008               	return
 11725  175D                     l6330:	
 11726  175D  302A               	movlw	42
 11727  175E  0008               	return
 11728  175F                     l6338:	
 11729  175F  3073               	movlw	115
 11730  1760  0008               	return
 11731  1761                     l6342:	
 11732  1761  300A               	movlw	10
 11733  1762  0008               	return
 11734  1763                     l6350:	
 11735  1763  301E               	movlw	30
 11736  1764  0008               	return
 11737  1765                     l6354:	
 11738  1765  307C               	movlw	124
 11739  1766  0008               	return
 11740  1767                     l6370:	
 11741  1767  3076               	movlw	118
 11742  1768  0008               	return
 11743  1769                     l6378:	
 11744  1769  3000               	movlw	0
 11745  176A  0008               	return
 11746  176B                     l6384:	
 11747  176B  0828               	movf	Sign_Anode_Data@sign,w
 11748  176C  00A6               	movwf	??_Sign_Anode_Data
 11749  176D  01A7               	clrf	??_Sign_Anode_Data+1
 11750                           
 11751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11752                           ; Switch size 1, requested type "simple"
 11753                           ; Number of cases is 1, Range of values is 0 to 0
 11754                           ; switch strategies available:
 11755                           ; Name         Instructions Cycles
 11756                           ; simple_byte            4     3 (average)
 11757                           ; direct_byte           11     8 (fixed)
 11758                           ; jumptable            260     6 (fixed)
 11759                           ;	Chosen strategy is simple_byte
 11760  176E  0827               	movf	??_Sign_Anode_Data+1,w
 11761  176F  3A00               	xorlw	0	; case 0
 11762  1770  1903               	skipnz
 11763  1771  2F73               	goto	l8496
 11764  1772  2F69               	goto	l6378
 11765  1773                     l8496:	
 11766                           
 11767                           ; Switch size 1, requested type "simple"
 11768                           ; Number of cases is 46, Range of values is 0 to 122
 11769                           ; switch strategies available:
 11770                           ; Name         Instructions Cycles
 11771                           ; simple_byte          139    70 (average)
 11772                           ; jumptable            260     6 (fixed)
 11773                           ;	Chosen strategy is simple_byte
 11774  1773  0826               	movf	??_Sign_Anode_Data,w
 11775  1774  3A00               	xorlw	0	; case 0
 11776  1775  1903               	skipnz
 11777  1776  2F33               	goto	l6198
 11778  1777  3A01               	xorlw	1	; case 1
 11779  1778  1903               	skipnz
 11780  1779  2F35               	goto	l6202
 11781  177A  3A03               	xorlw	3	; case 2
 11782  177B  1903               	skipnz
 11783  177C  2F37               	goto	l6206
 11784  177D  3A01               	xorlw	1	; case 3
 11785  177E  1903               	skipnz
 11786  177F  2F39               	goto	l6210
 11787  1780  3A07               	xorlw	7	; case 4
 11788  1781  1903               	skipnz
 11789  1782  2F3B               	goto	l6214
 11790  1783  3A01               	xorlw	1	; case 5
 11791  1784  1903               	skipnz
 11792  1785  2F3D               	goto	l6218
 11793  1786  3A03               	xorlw	3	; case 6
 11794  1787  1903               	skipnz
 11795  1788  2F3F               	goto	l6222
 11796  1789  3A01               	xorlw	1	; case 7
 11797  178A  1903               	skipnz
 11798  178B  2F41               	goto	l6226
 11799  178C  3A0F               	xorlw	15	; case 8
 11800  178D  1903               	skipnz
 11801  178E  2F43               	goto	l6230
 11802  178F  3A01               	xorlw	1	; case 9
 11803  1790  1903               	skipnz
 11804  1791  2F45               	goto	l6234
 11805  1792  3A23               	xorlw	35	; case 42
 11806  1793  1903               	skipnz
 11807  1794  2F69               	goto	l6378
 11808  1795  3A1A               	xorlw	26	; case 48
 11809  1796  1903               	skipnz
 11810  1797  2F33               	goto	l6198
 11811  1798  3A01               	xorlw	1	; case 49
 11812  1799  1903               	skipnz
 11813  179A  2F35               	goto	l6202
 11814  179B  3A03               	xorlw	3	; case 50
 11815  179C  1903               	skipnz
 11816  179D  2F37               	goto	l6206
 11817  179E  3A01               	xorlw	1	; case 51
 11818  179F  1903               	skipnz
 11819  17A0  2F39               	goto	l6210
 11820  17A1  3A07               	xorlw	7	; case 52
 11821  17A2  1903               	skipnz
 11822  17A3  2F3B               	goto	l6214
 11823  17A4  3A01               	xorlw	1	; case 53
 11824  17A5  1903               	skipnz
 11825  17A6  2F3D               	goto	l6218
 11826  17A7  3A03               	xorlw	3	; case 54
 11827  17A8  1903               	skipnz
 11828  17A9  2F3F               	goto	l6222
 11829  17AA  3A01               	xorlw	1	; case 55
 11830  17AB  1903               	skipnz
 11831  17AC  2F41               	goto	l6226
 11832  17AD  3A0F               	xorlw	15	; case 56
 11833  17AE  1903               	skipnz
 11834  17AF  2F43               	goto	l6230
 11835  17B0  3A01               	xorlw	1	; case 57
 11836  17B1  1903               	skipnz
 11837  17B2  2F45               	goto	l6234
 11838  17B3  3A58               	xorlw	88	; case 97
 11839  17B4  1903               	skipnz
 11840  17B5  2F47               	goto	l6278
 11841  17B6  3A03               	xorlw	3	; case 98
 11842  17B7  1903               	skipnz
 11843  17B8  2F49               	goto	l6282
 11844  17B9  3A01               	xorlw	1	; case 99
 11845  17BA  1903               	skipnz
 11846  17BB  2F4B               	goto	l6286
 11847  17BC  3A07               	xorlw	7	; case 100
 11848  17BD  1903               	skipnz
 11849  17BE  2F4D               	goto	l6290
 11850  17BF  3A01               	xorlw	1	; case 101
 11851  17C0  1903               	skipnz
 11852  17C1  2F4F               	goto	l6294
 11853  17C2  3A03               	xorlw	3	; case 102
 11854  17C3  1903               	skipnz
 11855  17C4  2F51               	goto	l6298
 11856  17C5  3A01               	xorlw	1	; case 103
 11857  17C6  1903               	skipnz
 11858  17C7  2F53               	goto	l6302
 11859  17C8  3A0F               	xorlw	15	; case 104
 11860  17C9  1903               	skipnz
 11861  17CA  2F55               	goto	l6306
 11862  17CB  3A01               	xorlw	1	; case 105
 11863  17CC  1903               	skipnz
 11864  17CD  2F35               	goto	l6202
 11865  17CE  3A03               	xorlw	3	; case 106
 11866  17CF  1903               	skipnz
 11867  17D0  2F57               	goto	l6314
 11868  17D1  3A01               	xorlw	1	; case 107
 11869  17D2  1903               	skipnz
 11870  17D3  2F55               	goto	l6306
 11871  17D4  3A07               	xorlw	7	; case 108
 11872  17D5  1903               	skipnz
 11873  17D6  2F59               	goto	l6322
 11874  17D7  3A01               	xorlw	1	; case 109
 11875  17D8  1903               	skipnz
 11876  17D9  2F5B               	goto	l6326
 11877  17DA  3A03               	xorlw	3	; case 110
 11878  17DB  1903               	skipnz
 11879  17DC  2F5D               	goto	l6330
 11880  17DD  3A01               	xorlw	1	; case 111
 11881  17DE  1903               	skipnz
 11882  17DF  2F33               	goto	l6198
 11883  17E0  3A1F               	xorlw	31	; case 112
 11884  17E1  1903               	skipnz
 11885  17E2  2F5F               	goto	l6338
 11886  17E3  3A02               	xorlw	2	; case 114
 11887  17E4  1903               	skipnz
 11888  17E5  2F61               	goto	l6342
 11889  17E6  3A01               	xorlw	1	; case 115
 11890  17E7  1903               	skipnz
 11891  17E8  2F3D               	goto	l6218
 11892  17E9  3A07               	xorlw	7	; case 116
 11893  17EA  1903               	skipnz
 11894  17EB  2F63               	goto	l6350
 11895  17EC  3A01               	xorlw	1	; case 117
 11896  17ED  1903               	skipnz
 11897  17EE  2F65               	goto	l6354
 11898  17EF  3A03               	xorlw	3	; case 118
 11899  17F0  1903               	skipnz
 11900  17F1  2F65               	goto	l6354
 11901  17F2  3A01               	xorlw	1	; case 119
 11902  17F3  1903               	skipnz
 11903  17F4  2F65               	goto	l6354
 11904  17F5  3A0F               	xorlw	15	; case 120
 11905  17F6  1903               	skipnz
 11906  17F7  2F55               	goto	l6306
 11907  17F8  3A01               	xorlw	1	; case 121
 11908  17F9  1903               	skipnz
 11909  17FA  2F67               	goto	l6370
 11910  17FB  3A03               	xorlw	3	; case 122
 11911  17FC  1903               	skipnz
 11912  17FD  2F37               	goto	l6206
 11913  17FE  2F69               	goto	l6378
 11914  17FF  0008               	return
 11915  1800                     __end_of_Sign_Anode_Data:	
 11916                           
 11917                           	psect	text52
 11918  1F9D                     __ptext52:	
 11919 ;; *************** function _Set_Anode_Outputs *****************
 11920 ;; Defined at:
 11921 ;;		line 161 in file "display-7-segment.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;  sign            1    wreg     unsigned char 
 11924 ;;  decimal_poin    1    9[BANK0 ] unsigned char 
 11925 ;; Auto vars:     Size  Location     Type
 11926 ;;  sign            1   11[BANK0 ] unsigned char 
 11927 ;; Return value:  Size  Location     Type
 11928 ;;                  1    wreg      void 
 11929 ;; Registers used:
 11930 ;;		wreg, status,2, status,0
 11931 ;; Tracked objects:
 11932 ;;		On entry : 300/0
 11933 ;;		On exit  : 300/0
 11934 ;;		Unchanged: 0/0
 11935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11936 ;;      Params:         0       1       0       0       0
 11937 ;;      Locals:         0       1       0       0       0
 11938 ;;      Temps:          0       1       0       0       0
 11939 ;;      Totals:         0       3       0       0       0
 11940 ;;Total ram usage:        3 bytes
 11941 ;; Hardware stack levels used:    1
 11942 ;; Hardware stack levels required when called:    4
 11943 ;; This function calls:
 11944 ;;		Nothing
 11945 ;; This function is called by:
 11946 ;;		_One_Digit_Handler
 11947 ;; This function uses a non-reentrant model
 11948 ;;
 11949                           
 11950                           
 11951                           ;psect for function _Set_Anode_Outputs
 11952  1F9D                     _Set_Anode_Outputs:	
 11953                           
 11954                           ;incstack = 0
 11955 ;; hardware stack exceeded
 11956                           ; Regs used in _Set_Anode_Outputs: [wreg+status,2+status,0]
 11957                           ;Set_Anode_Outputs@sign stored from wreg
 11958  1F9D  00AB               	movwf	Set_Anode_Outputs@sign
 11959                           
 11960                           ;display-7-segment.c: 161: void Set_Anode_Outputs(unsigned char sign, unsigned char deci
      +                          mal_point);display-7-segment.c: 162: {;display-7-segment.c: 164:     if(sign>>7 & 1)
 11961  1F9E  082B               	movf	Set_Anode_Outputs@sign,w
 11962  1F9F  00AA               	movwf	??_Set_Anode_Outputs
 11963  1FA0  3007               	movlw	7
 11964  1FA1                     u5815:	
 11965  1FA1  1003               	clrc
 11966  1FA2  0CAA               	rrf	??_Set_Anode_Outputs,f
 11967  1FA3  3EFF               	addlw	-1
 11968  1FA4  1D03               	skipz
 11969  1FA5  2FA1               	goto	u5815
 11970  1FA6  1C2A               	btfss	??_Set_Anode_Outputs,0
 11971  1FA7  2FAA               	goto	l160
 11972                           
 11973                           ;display-7-segment.c: 165:     {;display-7-segment.c: 166:         PORTAbits.RA6=1;
 11974  1FA8  1705               	bsf	5,6	;volatile
 11975                           
 11976                           ;display-7-segment.c: 167:     }else
 11977  1FA9  2FAB               	goto	l6400
 11978  1FAA                     l160:	
 11979                           
 11980                           ;display-7-segment.c: 168:     {;display-7-segment.c: 169:         PORTAbits.RA6=0;
 11981  1FAA  1305               	bcf	5,6	;volatile
 11982  1FAB                     l6400:	
 11983                           
 11984                           ;display-7-segment.c: 172:     if(sign>>6 & 1)
 11985  1FAB  082B               	movf	Set_Anode_Outputs@sign,w
 11986  1FAC  00AA               	movwf	??_Set_Anode_Outputs
 11987  1FAD  3006               	movlw	6
 11988  1FAE                     u5835:	
 11989  1FAE  1003               	clrc
 11990  1FAF  0CAA               	rrf	??_Set_Anode_Outputs,f
 11991  1FB0  3EFF               	addlw	-1
 11992  1FB1  1D03               	skipz
 11993  1FB2  2FAE               	goto	u5835
 11994  1FB3  1C2A               	btfss	??_Set_Anode_Outputs,0
 11995  1FB4  2FB7               	goto	l162
 11996                           
 11997                           ;display-7-segment.c: 173:     {;display-7-segment.c: 174:         PORTAbits.RA7=1;
 11998  1FB5  1785               	bsf	5,7	;volatile
 11999                           
 12000                           ;display-7-segment.c: 175:     }else
 12001  1FB6  2FB8               	goto	l6404
 12002  1FB7                     l162:	
 12003                           
 12004                           ;display-7-segment.c: 176:     {;display-7-segment.c: 177:         PORTAbits.RA7=0;
 12005  1FB7  1385               	bcf	5,7	;volatile
 12006  1FB8                     l6404:	
 12007                           
 12008                           ;display-7-segment.c: 180:     if(sign>>5 & 1)
 12009  1FB8  082B               	movf	Set_Anode_Outputs@sign,w
 12010  1FB9  00AA               	movwf	??_Set_Anode_Outputs
 12011  1FBA  3005               	movlw	5
 12012  1FBB                     u5855:	
 12013  1FBB  1003               	clrc
 12014  1FBC  0CAA               	rrf	??_Set_Anode_Outputs,f
 12015  1FBD  3EFF               	addlw	-1
 12016  1FBE  1D03               	skipz
 12017  1FBF  2FBB               	goto	u5855
 12018  1FC0  1C2A               	btfss	??_Set_Anode_Outputs,0
 12019  1FC1  2FC4               	goto	l164
 12020                           
 12021                           ;display-7-segment.c: 181:     {;display-7-segment.c: 182:         PORTAbits.RA5=1;
 12022  1FC2  1685               	bsf	5,5	;volatile
 12023                           
 12024                           ;display-7-segment.c: 183:     }else
 12025  1FC3  2FC5               	goto	l6408
 12026  1FC4                     l164:	
 12027                           
 12028                           ;display-7-segment.c: 184:     {;display-7-segment.c: 185:         PORTAbits.RA5=0;
 12029  1FC4  1285               	bcf	5,5	;volatile
 12030  1FC5                     l6408:	
 12031                           
 12032                           ;display-7-segment.c: 188:     if(sign>>4 & 1)
 12033  1FC5  082B               	movf	Set_Anode_Outputs@sign,w
 12034  1FC6  00AA               	movwf	??_Set_Anode_Outputs
 12035  1FC7  3004               	movlw	4
 12036  1FC8                     u5875:	
 12037  1FC8  1003               	clrc
 12038  1FC9  0CAA               	rrf	??_Set_Anode_Outputs,f
 12039  1FCA  3EFF               	addlw	-1
 12040  1FCB  1D03               	skipz
 12041  1FCC  2FC8               	goto	u5875
 12042  1FCD  1C2A               	btfss	??_Set_Anode_Outputs,0
 12043  1FCE  2FD1               	goto	l166
 12044                           
 12045                           ;display-7-segment.c: 189:     {;display-7-segment.c: 190:         PORTAbits.RA4=1;
 12046  1FCF  1605               	bsf	5,4	;volatile
 12047                           
 12048                           ;display-7-segment.c: 191:     }else
 12049  1FD0  2FD2               	goto	l6412
 12050  1FD1                     l166:	
 12051                           
 12052                           ;display-7-segment.c: 192:     {;display-7-segment.c: 193:         PORTAbits.RA4=0;
 12053  1FD1  1205               	bcf	5,4	;volatile
 12054  1FD2                     l6412:	
 12055                           
 12056                           ;display-7-segment.c: 196:     if(sign>>3 & 1)
 12057  1FD2  082B               	movf	Set_Anode_Outputs@sign,w
 12058  1FD3  00AA               	movwf	??_Set_Anode_Outputs
 12059  1FD4  3003               	movlw	3
 12060  1FD5                     u5895:	
 12061  1FD5  1003               	clrc
 12062  1FD6  0CAA               	rrf	??_Set_Anode_Outputs,f
 12063  1FD7  3EFF               	addlw	-1
 12064  1FD8  1D03               	skipz
 12065  1FD9  2FD5               	goto	u5895
 12066  1FDA  1C2A               	btfss	??_Set_Anode_Outputs,0
 12067  1FDB  2FDE               	goto	l168
 12068                           
 12069                           ;display-7-segment.c: 197:     {;display-7-segment.c: 198:         PORTAbits.RA3=1;
 12070  1FDC  1585               	bsf	5,3	;volatile
 12071                           
 12072                           ;display-7-segment.c: 199:     }else
 12073  1FDD  2FDF               	goto	l6416
 12074  1FDE                     l168:	
 12075                           
 12076                           ;display-7-segment.c: 200:     {;display-7-segment.c: 201:         PORTAbits.RA3=0;
 12077  1FDE  1185               	bcf	5,3	;volatile
 12078  1FDF                     l6416:	
 12079                           
 12080                           ;display-7-segment.c: 204:     if(sign>>2 & 1)
 12081  1FDF  082B               	movf	Set_Anode_Outputs@sign,w
 12082  1FE0  00AA               	movwf	??_Set_Anode_Outputs
 12083  1FE1  3002               	movlw	2
 12084  1FE2                     u5915:	
 12085  1FE2  1003               	clrc
 12086  1FE3  0CAA               	rrf	??_Set_Anode_Outputs,f
 12087  1FE4  3EFF               	addlw	-1
 12088  1FE5  1D03               	skipz
 12089  1FE6  2FE2               	goto	u5915
 12090  1FE7  1C2A               	btfss	??_Set_Anode_Outputs,0
 12091  1FE8  2FEB               	goto	l170
 12092                           
 12093                           ;display-7-segment.c: 205:     {;display-7-segment.c: 206:         PORTAbits.RA2=1;
 12094  1FE9  1505               	bsf	5,2	;volatile
 12095                           
 12096                           ;display-7-segment.c: 207:     }else
 12097  1FEA  2FEC               	goto	l6420
 12098  1FEB                     l170:	
 12099                           
 12100                           ;display-7-segment.c: 208:     {;display-7-segment.c: 209:         PORTAbits.RA2=0;
 12101  1FEB  1105               	bcf	5,2	;volatile
 12102  1FEC                     l6420:	
 12103                           
 12104                           ;display-7-segment.c: 212:     if(sign>>1 & 1)
 12105  1FEC  082B               	movf	Set_Anode_Outputs@sign,w
 12106  1FED  00AA               	movwf	??_Set_Anode_Outputs
 12107  1FEE  3001               	movlw	1
 12108  1FEF                     u5935:	
 12109  1FEF  1003               	clrc
 12110  1FF0  0CAA               	rrf	??_Set_Anode_Outputs,f
 12111  1FF1  3EFF               	addlw	-1
 12112  1FF2  1D03               	skipz
 12113  1FF3  2FEF               	goto	u5935
 12114  1FF4  1C2A               	btfss	??_Set_Anode_Outputs,0
 12115  1FF5  2FF8               	goto	l172
 12116                           
 12117                           ;display-7-segment.c: 213:     {;display-7-segment.c: 214:         PORTAbits.RA1=1;
 12118  1FF6  1485               	bsf	5,1	;volatile
 12119                           
 12120                           ;display-7-segment.c: 215:     }else
 12121  1FF7  2FF9               	goto	l6424
 12122  1FF8                     l172:	
 12123                           
 12124                           ;display-7-segment.c: 216:     {;display-7-segment.c: 217:         PORTAbits.RA1=0;
 12125  1FF8  1085               	bcf	5,1	;volatile
 12126  1FF9                     l6424:	
 12127                           
 12128                           ;display-7-segment.c: 220:     if(decimal_point==1)
 12129  1FF9  0329               	decf	Set_Anode_Outputs@decimal_point,w
 12130  1FFA  1D03               	btfss	3,2
 12131  1FFB  2FFE               	goto	l174
 12132                           
 12133                           ;display-7-segment.c: 221:     {;display-7-segment.c: 222:         PORTAbits.RA0=1;
 12134  1FFC  1405               	bsf	5,0	;volatile
 12135                           
 12136                           ;display-7-segment.c: 223:     }else
 12137  1FFD  0008               	return
 12138  1FFE                     l174:	
 12139                           
 12140                           ;display-7-segment.c: 224:     {;display-7-segment.c: 225:         PORTAbits.RA0=0;
 12141  1FFE  1005               	bcf	5,0	;volatile
 12142  1FFF  0008               	return
 12143  2000                     __end_of_Set_Anode_Outputs:	
 12144                           
 12145                           	psect	text53
 12146  1867                     __ptext53:	
 12147 ;; *************** function _Disable_All_Digits *****************
 12148 ;; Defined at:
 12149 ;;		line 86 in file "display-7-segment.c"
 12150 ;; Parameters:    Size  Location     Type
 12151 ;;		None
 12152 ;; Auto vars:     Size  Location     Type
 12153 ;;		None
 12154 ;; Return value:  Size  Location     Type
 12155 ;;                  1    wreg      void 
 12156 ;; Registers used:
 12157 ;;		None
 12158 ;; Tracked objects:
 12159 ;;		On entry : 200/900
 12160 ;;		On exit  : 300/0
 12161 ;;		Unchanged: 0/0
 12162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12163 ;;      Params:         0       0       0       0       0
 12164 ;;      Locals:         0       0       0       0       0
 12165 ;;      Temps:          0       0       0       0       0
 12166 ;;      Totals:         0       0       0       0       0
 12167 ;;Total ram usage:        0 bytes
 12168 ;; Hardware stack levels used:    1
 12169 ;; Hardware stack levels required when called:    4
 12170 ;; This function calls:
 12171 ;;		Nothing
 12172 ;; This function is called by:
 12173 ;;		_One_Digit_Handler
 12174 ;;		_Menu_Init
 12175 ;;		_Show_Time
 12176 ;; This function uses a non-reentrant model
 12177 ;;
 12178                           
 12179                           
 12180                           ;psect for function _Disable_All_Digits
 12181  1867                     _Disable_All_Digits:	
 12182                           
 12183                           ;display-7-segment.c: 88:     PORTBbits.RB7=1;
 12184                           
 12185                           ;incstack = 0
 12186                           ; Regs used in _Disable_All_Digits: []
 12187  1867  1283               	bcf	3,5	;RP0=0, select bank0
 12188  1868  1786               	bsf	6,7	;volatile
 12189                           
 12190                           ;display-7-segment.c: 89:     PORTBbits.RB6=1;
 12191  1869  1706               	bsf	6,6	;volatile
 12192                           
 12193                           ;display-7-segment.c: 90:     PORTBbits.RB5=1;
 12194  186A  1686               	bsf	6,5	;volatile
 12195                           
 12196                           ;display-7-segment.c: 91:     PORTBbits.RB4=1;
 12197  186B  1606               	bsf	6,4	;volatile
 12198  186C  0008               	return
 12199  186D                     __end_of_Disable_All_Digits:	
 12200                           
 12201                           	psect	text54
 12202  1DD4                     __ptext54:	
 12203 ;; *************** function _Frame_Decode *****************
 12204 ;; Defined at:
 12205 ;;		line 156 in file "manchester_decode.c"
 12206 ;; Parameters:    Size  Location     Type
 12207 ;;  DataRCV         1    wreg     PTR struct .
 12208 ;;		 -> main@data_rcv(5), 
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;  DataRCV         1   13[BANK0 ] PTR struct .
 12211 ;;		 -> main@data_rcv(5), 
 12212 ;;  i               1   15[BANK0 ] unsigned char 
 12213 ;;  data            1   14[BANK0 ] unsigned char 
 12214 ;; Return value:  Size  Location     Type
 12215 ;;                  2    9[BANK0 ] unsigned int 
 12216 ;; Registers used:
 12217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12218 ;; Tracked objects:
 12219 ;;		On entry : 300/800
 12220 ;;		On exit  : 300/0
 12221 ;;		Unchanged: 0/0
 12222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12223 ;;      Params:         0       2       0       0       0
 12224 ;;      Locals:         0       3       0       0       0
 12225 ;;      Temps:          0       2       0       0       0
 12226 ;;      Totals:         0       7       0       0       0
 12227 ;;Total ram usage:        7 bytes
 12228 ;; Hardware stack levels used:    1
 12229 ;; Hardware stack levels required when called:    5
 12230 ;; This function calls:
 12231 ;;		_Frame_Buffer
 12232 ;; This function is called by:
 12233 ;;		_Check_Event
 12234 ;;		_Check_RCV_Data
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           
 12239                           ;psect for function _Frame_Decode
 12240  1DD4                     _Frame_Decode:	
 12241                           
 12242                           ;incstack = 0
 12243                           ; Regs used in _Frame_Decode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12244                           ;Frame_Decode@DataRCV stored from wreg
 12245  1DD4  00AD               	movwf	Frame_Decode@DataRCV
 12246  1DD5                     l477:	
 12247                           ;manchester_decode.c: 156: unsigned int Frame_Decode(DataStruct *DataRCV);manchester_dec
      +                          ode.c: 157: {;manchester_decode.c: 158:     unsigned char data, i;;manchester_decode.c: 
      +                          160:     while(1)
 12248                           
 12249                           
 12250                           ;manchester_decode.c: 161:     {;manchester_decode.c: 162:         if(Frame_Buffer(&data
      +                          ,0)==0xFF)
 12251  1DD5  01A6               	clrf	Frame_Buffer@mode
 12252  1DD6  302E               	movlw	(low (Frame_Decode@data| 0))& (0+255)
 12253  1DD7  160A  158A  246B  160A  158A  	fcall	_Frame_Buffer
 12254  1DDC  3AFF               	xorlw	255
 12255  1DDD  1D03               	skipz
 12256  1DDE  2DE4               	goto	l7022
 12257  1DDF                     l7018:	
 12258                           
 12259                           ;manchester_decode.c: 163:         {;manchester_decode.c: 164:             return 0xFF;
 12260  1DDF  30FF               	movlw	255
 12261  1DE0  00A9               	movwf	?_Frame_Decode
 12262  1DE1  3000               	movlw	0
 12263  1DE2  00AA               	movwf	?_Frame_Decode+1
 12264  1DE3  0008               	return
 12265  1DE4                     l7022:	
 12266                           
 12267                           ;manchester_decode.c: 167:         if(data=='$')
 12268  1DE4  3024               	movlw	36
 12269  1DE5  062E               	xorwf	Frame_Decode@data,w
 12270  1DE6  1D03               	btfss	3,2
 12271  1DE7  2DD5               	goto	l477
 12272                           
 12273                           ;manchester_decode.c: 168:         {;manchester_decode.c: 169:             for(i=0;i<(6 
      +                          -2);i++)
 12274  1DE8  01AF               	clrf	Frame_Decode@i
 12275  1DE9                     l7030:	
 12276                           
 12277                           ;manchester_decode.c: 170:    {;manchester_decode.c: 171:     DataRCV->frame[i]=0;
 12278  1DE9  082F               	movf	Frame_Decode@i,w
 12279  1DEA  072D               	addwf	Frame_Decode@DataRCV,w
 12280  1DEB  00AB               	movwf	??_Frame_Decode
 12281  1DEC  082B               	movf	??_Frame_Decode,w
 12282  1DED  0084               	movwf	4
 12283  1DEE  1783               	bsf	3,7	;select IRP bank2
 12284  1DEF  0180               	clrf	0
 12285                           
 12286                           ;manchester_decode.c: 172:    }
 12287  1DF0  3001               	movlw	1
 12288  1DF1  00AB               	movwf	??_Frame_Decode
 12289  1DF2  082B               	movf	??_Frame_Decode,w
 12290  1DF3  07AF               	addwf	Frame_Decode@i,f
 12291  1DF4  3004               	movlw	4
 12292  1DF5  022F               	subwf	Frame_Decode@i,w
 12293  1DF6  1C03               	skipc
 12294  1DF7  2DE9               	goto	l7030
 12295                           
 12296                           ;manchester_decode.c: 173:             i=0;
 12297  1DF8  01AF               	clrf	Frame_Decode@i
 12298  1DF9                     l7038:	
 12299                           
 12300                           ;manchester_decode.c: 176:             {;manchester_decode.c: 177:                 if(Fr
      +                          ame_Buffer(&data,0)==0xFF)
 12301  1DF9  01A6               	clrf	Frame_Buffer@mode
 12302  1DFA  302E               	movlw	(low (Frame_Decode@data| 0))& (0+255)
 12303  1DFB  160A  158A  246B  160A  158A  	fcall	_Frame_Buffer
 12304  1E00  3AFF               	xorlw	255
 12305  1E01  1903               	btfsc	3,2
 12306  1E02  2DDF               	goto	l7018
 12307                           
 12308                           ;manchester_decode.c: 181:                 if(data=='&' && i==(6 -2))
 12309  1E03  3026               	movlw	38
 12310  1E04  062E               	xorwf	Frame_Decode@data,w
 12311  1E05  1D03               	btfss	3,2
 12312  1E06  2E16               	goto	l7054
 12313  1E07  3004               	movlw	4
 12314  1E08  062F               	xorwf	Frame_Decode@i,w
 12315  1E09  1D03               	btfss	3,2
 12316  1E0A  2E16               	goto	l7054
 12317                           
 12318                           ;manchester_decode.c: 182:                 {;manchester_decode.c: 183:                  
      +                             DataRCV->RCV_Frame=1;
 12319  1E0B  082D               	movf	Frame_Decode@DataRCV,w
 12320  1E0C  3E04               	addlw	4
 12321  1E0D  0084               	movwf	4
 12322  1E0E  1783               	bsf	3,7	;select IRP bank2
 12323  1E0F  0180               	clrf	0
 12324  1E10  0A80               	incf	0,f
 12325                           
 12326                           ;manchester_decode.c: 184:                     return 10;
 12327  1E11  300A               	movlw	10
 12328  1E12  00A9               	movwf	?_Frame_Decode
 12329  1E13  3000               	movlw	0
 12330  1E14  00AA               	movwf	?_Frame_Decode+1
 12331  1E15  0008               	return
 12332  1E16                     l7054:	
 12333                           
 12334                           ;manchester_decode.c: 186:                 DataRCV->frame[i]=data;
 12335  1E16  082E               	movf	Frame_Decode@data,w
 12336  1E17  00AB               	movwf	??_Frame_Decode
 12337  1E18  082F               	movf	Frame_Decode@i,w
 12338  1E19  072D               	addwf	Frame_Decode@DataRCV,w
 12339  1E1A  00AC               	movwf	??_Frame_Decode+1
 12340  1E1B  082C               	movf	??_Frame_Decode+1,w
 12341  1E1C  0084               	movwf	4
 12342  1E1D  082B               	movf	??_Frame_Decode,w
 12343  1E1E  1783               	bsf	3,7	;select IRP bank2
 12344  1E1F  0080               	movwf	0
 12345                           
 12346                           ;manchester_decode.c: 187:                 i++;
 12347  1E20  3001               	movlw	1
 12348  1E21  00AB               	movwf	??_Frame_Decode
 12349  1E22  082B               	movf	??_Frame_Decode,w
 12350  1E23  07AF               	addwf	Frame_Decode@i,f
 12351                           
 12352                           ;manchester_decode.c: 188:                 if(i>(6 -2))
 12353  1E24  3005               	movlw	5
 12354  1E25  022F               	subwf	Frame_Decode@i,w
 12355  1E26  1803               	btfsc	3,0
 12356  1E27  2DD5               	goto	l477
 12357  1E28  2DF9               	goto	l7038
 12358  1E29                     __end_of_Frame_Decode:	
 12359                           
 12360                           	psect	text55
 12361  1C6B                     __ptext55:	
 12362 ;; *************** function _Frame_Buffer *****************
 12363 ;; Defined at:
 12364 ;;		line 13 in file "circular_buffer.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;  data            1    wreg     PTR unsigned char 
 12367 ;;		 -> Frame_Decode@data(1), Manchester_Decode@decoded_byte(1), 
 12368 ;;  mode            1    6[BANK0 ] unsigned char 
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;  data            1    8[BANK0 ] PTR unsigned char 
 12371 ;;		 -> Frame_Decode@data(1), Manchester_Decode@decoded_byte(1), 
 12372 ;; Return value:  Size  Location     Type
 12373 ;;                  1    wreg      unsigned char 
 12374 ;; Registers used:
 12375 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12376 ;; Tracked objects:
 12377 ;;		On entry : 300/800
 12378 ;;		On exit  : 300/0
 12379 ;;		Unchanged: 0/0
 12380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12381 ;;      Params:         0       1       0       0       0
 12382 ;;      Locals:         0       1       0       0       0
 12383 ;;      Temps:          0       1       0       0       0
 12384 ;;      Totals:         0       3       0       0       0
 12385 ;;Total ram usage:        3 bytes
 12386 ;; Hardware stack levels used:    1
 12387 ;; Hardware stack levels required when called:    4
 12388 ;; This function calls:
 12389 ;;		Nothing
 12390 ;; This function is called by:
 12391 ;;		_Frame_Decode
 12392 ;; This function uses a non-reentrant model
 12393 ;;
 12394                           
 12395                           
 12396                           ;psect for function _Frame_Buffer
 12397  1C6B                     _Frame_Buffer:	
 12398                           
 12399                           ;incstack = 0
 12400                           ; Regs used in _Frame_Buffer: [wreg-fsr0h+status,2+status,0]
 12401                           ;Frame_Buffer@data stored from wreg
 12402  1C6B  00A8               	movwf	Frame_Buffer@data
 12403                           
 12404                           ;circular_buffer.c: 13: unsigned char Frame_Buffer(unsigned char *data,unsigned char mod
      +                          e);circular_buffer.c: 14: {;circular_buffer.c: 15:  static unsigned char buffer[30];;cir
      +                          cular_buffer.c: 16:  static unsigned char read_pointer, write_pointer, write_pointer_mem
      +                          ;;circular_buffer.c: 18:  if(mode==1)
 12405  1C6C  0326               	decf	Frame_Buffer@mode,w
 12406  1C6D  1D03               	btfss	3,2
 12407  1C6E  2CA9               	goto	l6622
 12408                           
 12409                           ;circular_buffer.c: 19:  {;circular_buffer.c: 20:   write_pointer_mem=write_pointer;
 12410  1C6F  085C               	movf	Frame_Buffer@write_pointer,w
 12411  1C70  00A7               	movwf	??_Frame_Buffer
 12412  1C71  0827               	movf	??_Frame_Buffer,w
 12413  1C72  1683               	bsf	3,5	;RP0=1, select bank1
 12414  1C73  00AC               	movwf	Frame_Buffer@write_pointer_mem^(0+128)
 12415                           
 12416                           ;circular_buffer.c: 21:   write_pointer++;
 12417  1C74  3001               	movlw	1
 12418  1C75  1283               	bcf	3,5	;RP0=0, select bank0
 12419  1C76  00A7               	movwf	??_Frame_Buffer
 12420  1C77  0827               	movf	??_Frame_Buffer,w
 12421  1C78  07DC               	addwf	Frame_Buffer@write_pointer,f
 12422                           
 12423                           ;circular_buffer.c: 23:   if(write_pointer==30)
 12424  1C79  301E               	movlw	30
 12425  1C7A  065C               	xorwf	Frame_Buffer@write_pointer,w
 12426  1C7B  1903               	btfsc	3,2
 12427                           
 12428                           ;circular_buffer.c: 24:   {;circular_buffer.c: 25:    write_pointer=0;
 12429  1C7C  01DC               	clrf	Frame_Buffer@write_pointer
 12430                           
 12431                           ;circular_buffer.c: 27:   if(write_pointer==read_pointer)
 12432  1C7D  085C               	movf	Frame_Buffer@write_pointer,w
 12433  1C7E  065D               	xorwf	Frame_Buffer@read_pointer,w
 12434  1C7F  1D03               	skipz
 12435  1C80  2C89               	goto	l6614
 12436                           
 12437                           ;circular_buffer.c: 28:   {;circular_buffer.c: 29:    write_pointer=write_pointer_mem;
 12438  1C81  1683               	bsf	3,5	;RP0=1, select bank1
 12439  1C82  082C               	movf	Frame_Buffer@write_pointer_mem^(0+128),w
 12440  1C83  1283               	bcf	3,5	;RP0=0, select bank0
 12441  1C84  00A7               	movwf	??_Frame_Buffer
 12442  1C85  0827               	movf	??_Frame_Buffer,w
 12443  1C86  00DC               	movwf	Frame_Buffer@write_pointer
 12444                           
 12445                           ;circular_buffer.c: 30:    return 0xFE;
 12446  1C87  30FE               	movlw	254
 12447  1C88  0008               	return
 12448  1C89                     l6614:	
 12449                           
 12450                           ;circular_buffer.c: 33:   buffer[write_pointer]=*data;
 12451  1C89  0828               	movf	Frame_Buffer@data,w
 12452  1C8A  0084               	movwf	4
 12453  1C8B  1383               	bcf	3,7	;select IRP bank0
 12454  1C8C  0800               	movf	0,w
 12455  1C8D  00A7               	movwf	??_Frame_Buffer
 12456  1C8E  085C               	movf	Frame_Buffer@write_pointer,w
 12457  1C8F  3E10               	addlw	(low (Frame_Buffer@buffer| (0+256)))& (0+255)
 12458  1C90  0084               	movwf	4
 12459  1C91  0827               	movf	??_Frame_Buffer,w
 12460  1C92  1783               	bsf	3,7	;select IRP bank2
 12461  1C93  2CA6               	goto	L15
 12462  1C94                     l6624:	
 12463                           
 12464                           ;circular_buffer.c: 40:   {;circular_buffer.c: 41:    read_pointer++;
 12465  1C94  3001               	movlw	1
 12466  1C95  00A7               	movwf	??_Frame_Buffer
 12467  1C96  0827               	movf	??_Frame_Buffer,w
 12468  1C97  07DD               	addwf	Frame_Buffer@read_pointer,f
 12469                           
 12470                           ;circular_buffer.c: 42:    if(read_pointer==30)
 12471  1C98  301E               	movlw	30
 12472  1C99  065D               	xorwf	Frame_Buffer@read_pointer,w
 12473  1C9A  1903               	btfsc	3,2
 12474                           
 12475                           ;circular_buffer.c: 43:    {;circular_buffer.c: 44:     read_pointer=0;
 12476  1C9B  01DD               	clrf	Frame_Buffer@read_pointer
 12477                           
 12478                           ;circular_buffer.c: 46:    *data=buffer[read_pointer];
 12479  1C9C  085D               	movf	Frame_Buffer@read_pointer,w
 12480  1C9D  3E10               	addlw	(low (Frame_Buffer@buffer| (0+256)))& (0+255)
 12481  1C9E  0084               	movwf	4
 12482  1C9F  1783               	bsf	3,7	;select IRP bank2
 12483  1CA0  0800               	movf	0,w
 12484  1CA1  00A7               	movwf	??_Frame_Buffer
 12485  1CA2  0828               	movf	Frame_Buffer@data,w
 12486  1CA3  0084               	movwf	4
 12487  1CA4  0827               	movf	??_Frame_Buffer,w
 12488  1CA5  1383               	bcf	3,7	;select IRP bank0
 12489  1CA6                     L15:	
 12490  1CA6  0080               	movwf	0
 12491                           
 12492                           ;circular_buffer.c: 35:   return 1;
 12493  1CA7  3001               	movlw	1
 12494  1CA8  0008               	return
 12495  1CA9                     l6622:	
 12496                           
 12497                           ;circular_buffer.c: 38:  {;circular_buffer.c: 39:   if(write_pointer!=read_pointer)
 12498  1CA9  085C               	movf	Frame_Buffer@write_pointer,w
 12499  1CAA  065D               	xorwf	Frame_Buffer@read_pointer,w
 12500  1CAB  1D03               	btfss	3,2
 12501  1CAC  2C94               	goto	l6624
 12502                           
 12503                           ;circular_buffer.c: 50:   {;circular_buffer.c: 51:    return 0xFF;
 12504  1CAD  30FF               	movlw	255
 12505  1CAE  0008               	return
 12506  1CAF                     __end_of_Frame_Buffer:	
 12507                           
 12508                           	psect	text56
 12509  1921                     __ptext56:	
 12510 ;; *************** function _CRC_check *****************
 12511 ;; Defined at:
 12512 ;;		line 206 in file "manchester_decode.c"
 12513 ;; Parameters:    Size  Location     Type
 12514 ;;  DataRCV         1    wreg     PTR struct .
 12515 ;;		 -> main@data_rcv(5), 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;  DataRCV         1   19[BANK0 ] PTR struct .
 12518 ;;		 -> main@data_rcv(5), 
 12519 ;;  crc_val         2   17[BANK0 ] unsigned int 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      unsigned char 
 12522 ;; Registers used:
 12523 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 12524 ;; Tracked objects:
 12525 ;;		On entry : B00/800
 12526 ;;		On exit  : B00/800
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12529 ;;      Params:         0       0       0       0       0
 12530 ;;      Locals:         0       3       0       0       0
 12531 ;;      Temps:          0       1       0       0       0
 12532 ;;      Totals:         0       4       0       0       0
 12533 ;;Total ram usage:        4 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    5
 12536 ;; This function calls:
 12537 ;;		_CRC16
 12538 ;; This function is called by:
 12539 ;;		_Check_RCV_Data
 12540 ;; This function uses a non-reentrant model
 12541 ;;
 12542                           
 12543                           
 12544                           ;psect for function _CRC_check
 12545  1921                     _CRC_check:	
 12546                           
 12547                           ;incstack = 0
 12548                           ; Regs used in _CRC_check: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 12549                           ;CRC_check@DataRCV stored from wreg
 12550  1921  00B3               	movwf	CRC_check@DataRCV
 12551                           
 12552                           ;manchester_decode.c: 206: unsigned char CRC_check(DataStruct *DataRCV);manchester_decod
      +                          e.c: 207: {;manchester_decode.c: 208:  unsigned int crc_val;;manchester_decode.c: 210:  
      +                          crc_val=CRC16(&DataRCV->frame[0],6 -4);
 12553  1922  3002               	movlw	2
 12554  1923  00B0               	movwf	??_CRC_check
 12555  1924  0830               	movf	??_CRC_check,w
 12556  1925  00A6               	movwf	CRC16@size
 12557  1926  0833               	movf	CRC_check@DataRCV,w
 12558  1927  160A  158A  242A  160A  158A  	fcall	_CRC16
 12559  192C  0827               	movf	?_CRC16+1,w
 12560  192D  00B2               	movwf	CRC_check@crc_val+1
 12561  192E  0826               	movf	?_CRC16,w
 12562  192F  00B1               	movwf	CRC_check@crc_val
 12563                           
 12564                           ;manchester_decode.c: 212:  if((DataRCV->frame[6 -4]==crc_val>>8) &&
 12565  1930  0833               	movf	CRC_check@DataRCV,w
 12566  1931  3E02               	addlw	2
 12567  1932  0084               	movwf	4
 12568  1933  0800               	movf	0,w
 12569  1934  0632               	xorwf	CRC_check@crc_val+1,w
 12570  1935  1D03               	skipz
 12571  1936  2940               	goto	l7400
 12572  1937  0833               	movf	CRC_check@DataRCV,w
 12573  1938  3E03               	addlw	3
 12574  1939  0084               	movwf	4
 12575  193A  0800               	movf	0,w
 12576  193B  0631               	xorwf	CRC_check@crc_val,w
 12577  193C  1D03               	skipz
 12578  193D  2940               	goto	l7400
 12579                           
 12580                           ;manchester_decode.c: 214:     {;manchester_decode.c: 215:   return 1;
 12581  193E  3001               	movlw	1
 12582  193F  0008               	return
 12583  1940                     l7400:	
 12584                           
 12585                           ;manchester_decode.c: 217:  {;manchester_decode.c: 218:   return 0;
 12586  1940  3000               	movlw	0
 12587  1941  0008               	return
 12588  1942                     __end_of_CRC_check:	
 12589                           
 12590                           	psect	text57
 12591  1C2A                     __ptext57:	
 12592 ;; *************** function _CRC16 *****************
 12593 ;; Defined at:
 12594 ;;		line 7 in file "crc16.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;  data_tab_ptr    1    wreg     PTR unsigned char 
 12597 ;;		 -> main@data_rcv(5), 
 12598 ;;  size            1    6[BANK0 ] unsigned char 
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;  data_tab_ptr    1   11[BANK0 ] PTR unsigned char 
 12601 ;;		 -> main@data_rcv(5), 
 12602 ;;  crc             2   14[BANK0 ] unsigned int 
 12603 ;;  i               1   13[BANK0 ] unsigned char 
 12604 ;;  k               1   12[BANK0 ] unsigned char 
 12605 ;; Return value:  Size  Location     Type
 12606 ;;                  2    6[BANK0 ] unsigned int 
 12607 ;; Registers used:
 12608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
 12609 ;; Tracked objects:
 12610 ;;		On entry : B00/800
 12611 ;;		On exit  : B00/800
 12612 ;;		Unchanged: 0/0
 12613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12614 ;;      Params:         0       2       0       0       0
 12615 ;;      Locals:         0       5       0       0       0
 12616 ;;      Temps:          0       3       0       0       0
 12617 ;;      Totals:         0      10       0       0       0
 12618 ;;Total ram usage:       10 bytes
 12619 ;; Hardware stack levels used:    1
 12620 ;; Hardware stack levels required when called:    4
 12621 ;; This function calls:
 12622 ;;		Nothing
 12623 ;; This function is called by:
 12624 ;;		_CRC_check
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           
 12629                           ;psect for function _CRC16
 12630  1C2A                     _CRC16:	
 12631                           
 12632                           ;incstack = 0
 12633                           ; Regs used in _CRC16: [wreg-fsr0h+status,2+status,0+btemp+1]
 12634                           ;CRC16@data_tab_ptr stored from wreg
 12635  1C2A  00AB               	movwf	CRC16@data_tab_ptr
 12636                           
 12637                           ;crc16.c: 7: unsigned int CRC16(unsigned char *data_tab_ptr, unsigned char size);crc16.c
      +                          : 8: {;crc16.c: 9:     const unsigned int generator = 0x1021;;crc16.c: 10:     unsigned 
      +                          int crc = 0;
 12638  1C2B  01AE               	clrf	CRC16@crc
 12639  1C2C  01AF               	clrf	CRC16@crc+1
 12640                           
 12641                           ;crc16.c: 11:     unsigned char k,i;;crc16.c: 13:     for(k=0;k<size;k++)
 12642  1C2D  01AC               	clrf	CRC16@k
 12643  1C2E                     l6958:	
 12644  1C2E  0826               	movf	CRC16@size,w
 12645  1C2F  022C               	subwf	CRC16@k,w
 12646  1C30  1803               	btfsc	3,0
 12647  1C31  2C66               	goto	l6960
 12648                           
 12649                           ;crc16.c: 14:     {;crc16.c: 15:         crc ^= (*(data_tab_ptr+k) << 8);
 12650  1C32  082C               	movf	CRC16@k,w
 12651  1C33  072B               	addwf	CRC16@data_tab_ptr,w
 12652  1C34  00A8               	movwf	??_CRC16
 12653  1C35  0828               	movf	??_CRC16,w
 12654  1C36  0084               	movwf	4
 12655  1C37  0800               	movf	0,w
 12656  1C38  00A9               	movwf	??_CRC16+1
 12657  1C39  01AA               	clrf	??_CRC16+2
 12658  1C3A  0829               	movf	??_CRC16+1,w
 12659  1C3B  00AA               	movwf	??_CRC16+2
 12660  1C3C  01A9               	clrf	??_CRC16+1
 12661  1C3D  0829               	movf	??_CRC16+1,w
 12662  1C3E  06AE               	xorwf	CRC16@crc,f
 12663  1C3F  082A               	movf	??_CRC16+2,w
 12664  1C40  06AF               	xorwf	CRC16@crc+1,f
 12665                           
 12666                           ;crc16.c: 17:         for (i=0;i<8;i++)
 12667  1C41  01AD               	clrf	CRC16@i
 12668  1C42                     l61:	
 12669                           
 12670                           ;crc16.c: 18:         {;crc16.c: 19:             if ((crc&0x8000)!=0)
 12671  1C42  1FAF               	btfss	CRC16@crc+1,7
 12672  1C43  2C52               	goto	l6950
 12673                           
 12674                           ;crc16.c: 20:             {;crc16.c: 21:                  crc=(crc<<1)^generator;
 12675  1C44  082F               	movf	CRC16@crc+1,w
 12676  1C45  00A9               	movwf	??_CRC16+1
 12677  1C46  082E               	movf	CRC16@crc,w
 12678  1C47  00A8               	movwf	??_CRC16
 12679  1C48  1003               	clrc
 12680  1C49  0DA8               	rlf	??_CRC16,f
 12681  1C4A  0DA9               	rlf	??_CRC16+1,f
 12682  1C4B  3021               	movlw	33
 12683  1C4C  0628               	xorwf	??_CRC16,w
 12684  1C4D  00AE               	movwf	CRC16@crc
 12685  1C4E  3010               	movlw	16
 12686  1C4F  0629               	xorwf	??_CRC16+1,w
 12687  1C50  00AF               	movwf	CRC16@crc+1
 12688                           
 12689                           ;crc16.c: 22:             }else
 12690  1C51  2C59               	goto	l6952
 12691  1C52                     l6950:	
 12692                           
 12693                           ;crc16.c: 23:             {;crc16.c: 24:                 crc<<=1;
 12694  1C52  3001               	movlw	1
 12695  1C53                     u6945:	
 12696  1C53  1003               	clrc
 12697  1C54  0DAE               	rlf	CRC16@crc,f
 12698  1C55  0DAF               	rlf	CRC16@crc+1,f
 12699  1C56  3EFF               	addlw	-1
 12700  1C57  1D03               	skipz
 12701  1C58  2C53               	goto	u6945
 12702  1C59                     l6952:	
 12703                           
 12704                           ;crc16.c: 26:         }
 12705  1C59  3001               	movlw	1
 12706  1C5A  00A8               	movwf	??_CRC16
 12707  1C5B  0828               	movf	??_CRC16,w
 12708  1C5C  07AD               	addwf	CRC16@i,f
 12709  1C5D  3008               	movlw	8
 12710  1C5E  022D               	subwf	CRC16@i,w
 12711  1C5F  1C03               	skipc
 12712  1C60  2C42               	goto	l61
 12713                           
 12714                           ;crc16.c: 27:     }
 12715  1C61  3001               	movlw	1
 12716  1C62  00A8               	movwf	??_CRC16
 12717  1C63  0828               	movf	??_CRC16,w
 12718  1C64  07AC               	addwf	CRC16@k,f
 12719  1C65  2C2E               	goto	l6958
 12720  1C66                     l6960:	
 12721                           
 12722                           ;crc16.c: 29:     return crc;
 12723  1C66  082F               	movf	CRC16@crc+1,w
 12724  1C67  00A7               	movwf	?_CRC16+1
 12725  1C68  082E               	movf	CRC16@crc,w
 12726  1C69  00A6               	movwf	?_CRC16
 12727  1C6A  0008               	return
 12728  1C6B                     __end_of_CRC16:	
 12729                           
 12730                           	psect	text58
 12731  14EE                     __ptext58:	
 12732 ;; *************** function _Button_Init *****************
 12733 ;; Defined at:
 12734 ;;		line 38 in file "key-handler.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;  keydef          1    wreg     PTR struct .
 12737 ;;		 -> main@keydef(6), 
 12738 ;; Auto vars:     Size  Location     Type
 12739 ;;  keydef          1    7[BANK0 ] PTR struct .
 12740 ;;		 -> main@keydef(6), 
 12741 ;; Return value:  Size  Location     Type
 12742 ;;                  1    wreg      void 
 12743 ;; Registers used:
 12744 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12745 ;; Tracked objects:
 12746 ;;		On entry : B00/100
 12747 ;;		On exit  : B00/B00
 12748 ;;		Unchanged: 0/0
 12749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12750 ;;      Params:         0       0       0       0       0
 12751 ;;      Locals:         0       1       0       0       0
 12752 ;;      Temps:          0       1       0       0       0
 12753 ;;      Totals:         0       2       0       0       0
 12754 ;;Total ram usage:        2 bytes
 12755 ;; Hardware stack levels used:    1
 12756 ;; Hardware stack levels required when called:    4
 12757 ;; This function calls:
 12758 ;;		Nothing
 12759 ;; This function is called by:
 12760 ;;		_main
 12761 ;; This function uses a non-reentrant model
 12762 ;;
 12763                           
 12764                           
 12765                           ;psect for function _Button_Init
 12766  14EE                     _Button_Init:	
 12767                           
 12768                           ;incstack = 0
 12769                           ; Regs used in _Button_Init: [wreg-fsr0h+status,2+status,0]
 12770                           ;Button_Init@keydef stored from wreg
 12771  14EE  1283               	bcf	3,5	;RP0=0, select bank0
 12772  14EF  00A7               	movwf	Button_Init@keydef
 12773                           
 12774                           ;key-handler.c: 38: void Button_Init (KeyPointerStruct *keydef);key-handler.c: 39: {;key
      +                          -handler.c: 40:     static KeyStruct set_rtc;;key-handler.c: 41:     static KeyStruct se
      +                          t_time1;;key-handler.c: 42:     static KeyStruct set_time2;;key-handler.c: 43:     stati
      +                          c KeyStruct set_right;;key-handler.c: 44:     static KeyStruct set_up;;key-handler.c: 45
      +                          :     static KeyStruct set_down;;key-handler.c: 47:     keydef->set_rtc=&set_rtc;
 12775  14F0  30C5               	movlw	(low (Button_Init@set_rtc| 0))& (0+255)
 12776  14F1  00A6               	movwf	??_Button_Init
 12777  14F2  0827               	movf	Button_Init@keydef,w
 12778  14F3  0084               	movwf	4
 12779  14F4  0826               	movf	??_Button_Init,w
 12780  14F5  1783               	bsf	3,7	;select IRP bank2
 12781  14F6  0080               	movwf	0
 12782                           
 12783                           ;key-handler.c: 48:     keydef->set_time1=&set_time1;
 12784  14F7  30BE               	movlw	(low (Button_Init@set_time1| 0))& (0+255)
 12785  14F8  00A6               	movwf	??_Button_Init
 12786  14F9  0A27               	incf	Button_Init@keydef,w
 12787  14FA  0084               	movwf	4
 12788  14FB  0826               	movf	??_Button_Init,w
 12789  14FC  0080               	movwf	0
 12790                           
 12791                           ;key-handler.c: 49:     keydef->set_time2=&set_time2;
 12792  14FD  30B7               	movlw	(low (Button_Init@set_time2| 0))& (0+255)
 12793  14FE  00A6               	movwf	??_Button_Init
 12794  14FF  0827               	movf	Button_Init@keydef,w
 12795  1500  3E02               	addlw	2
 12796  1501  0084               	movwf	4
 12797  1502  0826               	movf	??_Button_Init,w
 12798  1503  0080               	movwf	0
 12799                           
 12800                           ;key-handler.c: 50:     keydef->set_right=&set_right;
 12801  1504  30B0               	movlw	(low (Button_Init@set_right| 0))& (0+255)
 12802  1505  00A6               	movwf	??_Button_Init
 12803  1506  0827               	movf	Button_Init@keydef,w
 12804  1507  3E03               	addlw	3
 12805  1508  0084               	movwf	4
 12806  1509  0826               	movf	??_Button_Init,w
 12807  150A  0080               	movwf	0
 12808                           
 12809                           ;key-handler.c: 51:     keydef->set_up=&set_up;
 12810  150B  30CF               	movlw	(low (Button_Init@set_up| (0+256)))& (0+255)
 12811  150C  00A6               	movwf	??_Button_Init
 12812  150D  0827               	movf	Button_Init@keydef,w
 12813  150E  3E04               	addlw	4
 12814  150F  0084               	movwf	4
 12815  1510  0826               	movf	??_Button_Init,w
 12816  1511  0080               	movwf	0
 12817                           
 12818                           ;key-handler.c: 52:     keydef->set_down=&set_down;
 12819  1512  30C8               	movlw	(low (Button_Init@set_down| (0+256)))& (0+255)
 12820  1513  00A6               	movwf	??_Button_Init
 12821  1514  0827               	movf	Button_Init@keydef,w
 12822  1515  3E05               	addlw	5
 12823  1516  0084               	movwf	4
 12824  1517  0826               	movf	??_Button_Init,w
 12825  1518  0080               	movwf	0
 12826                           
 12827                           ;key-handler.c: 54:     set_rtc.pin=0;
 12828  1519  1683               	bsf	3,5	;RP0=1, select bank1
 12829  151A  01C6               	clrf	(Button_Init@set_rtc^(0+128)+1)
 12830                           
 12831                           ;key-handler.c: 55:     set_rtc.port=&PORTB;
 12832  151B  3000               	movlw	0
 12833  151C  00C9               	movwf	((low ((Button_Init@set_rtc| 0+3))+1))^(0+128)
 12834  151D  3006               	movlw	6
 12835  151E  00C8               	movwf	(low ((Button_Init@set_rtc| 0+3)))^(0+128)
 12836                           
 12837                           ;key-handler.c: 56:     set_rtc.button_short_function=k_set_rtc_short;
 12838  151F  01CA               	clrf	(Button_Init@set_rtc^(0+128)+5)
 12839                           
 12840                           ;key-handler.c: 57:     set_rtc.button_long_function=k_set_rtc_long;
 12841  1520  01CB               	clrf	(Button_Init@set_rtc^(0+128)+6)
 12842  1521  0ACB               	incf	(Button_Init@set_rtc^(0+128)+6),f
 12843                           
 12844                           ;key-handler.c: 58:     set_rtc.klock=0;
 12845  1522  01C5               	clrf	Button_Init@set_rtc^(0+128)
 12846                           
 12847                           ;key-handler.c: 59:     set_rtc.lock_long_press=0;
 12848  1523  01C7               	clrf	(Button_Init@set_rtc^(0+128)+2)
 12849                           
 12850                           ;key-handler.c: 61:     set_time1.pin=7;
 12851  1524  3007               	movlw	7
 12852  1525  1283               	bcf	3,5	;RP0=0, select bank0
 12853  1526  00A6               	movwf	??_Button_Init
 12854  1527  0826               	movf	??_Button_Init,w
 12855  1528  1683               	bsf	3,5	;RP0=1, select bank1
 12856  1529  00BF               	movwf	(Button_Init@set_time1^(0+128)+1)
 12857                           
 12858                           ;key-handler.c: 62:     set_time1.port=&PORTC;
 12859  152A  3000               	movlw	0
 12860  152B  00C2               	movwf	((low ((Button_Init@set_time1| 0+3))+1))^(0+128)
 12861  152C  3007               	movlw	7
 12862  152D  00C1               	movwf	(low ((Button_Init@set_time1| 0+3)))^(0+128)
 12863                           
 12864                           ;key-handler.c: 63:     set_time1.button_short_function=k_set_time1_short;
 12865  152E  3002               	movlw	2
 12866  152F  1283               	bcf	3,5	;RP0=0, select bank0
 12867  1530  00A6               	movwf	??_Button_Init
 12868  1531  0826               	movf	??_Button_Init,w
 12869  1532  1683               	bsf	3,5	;RP0=1, select bank1
 12870  1533  00C3               	movwf	(Button_Init@set_time1^(0+128)+5)
 12871                           
 12872                           ;key-handler.c: 64:     set_time1.button_long_function=k_set_time1_long;
 12873  1534  3003               	movlw	3
 12874  1535  1283               	bcf	3,5	;RP0=0, select bank0
 12875  1536  00A6               	movwf	??_Button_Init
 12876  1537  0826               	movf	??_Button_Init,w
 12877  1538  1683               	bsf	3,5	;RP0=1, select bank1
 12878  1539  00C4               	movwf	(Button_Init@set_time1^(0+128)+6)
 12879                           
 12880                           ;key-handler.c: 65:     set_time1.klock=0;
 12881  153A  01BE               	clrf	Button_Init@set_time1^(0+128)
 12882                           
 12883                           ;key-handler.c: 66:     set_time1.lock_long_press=0;
 12884  153B  01C0               	clrf	(Button_Init@set_time1^(0+128)+2)
 12885                           
 12886                           ;key-handler.c: 68:     set_time2.pin=5;
 12887  153C  3005               	movlw	5
 12888  153D  1283               	bcf	3,5	;RP0=0, select bank0
 12889  153E  00A6               	movwf	??_Button_Init
 12890  153F  0826               	movf	??_Button_Init,w
 12891  1540  1683               	bsf	3,5	;RP0=1, select bank1
 12892  1541  00B8               	movwf	(Button_Init@set_time2^(0+128)+1)
 12893                           
 12894                           ;key-handler.c: 69:     set_time2.port=&PORTC;
 12895  1542  3000               	movlw	0
 12896  1543  00BB               	movwf	((low ((Button_Init@set_time2| 0+3))+1))^(0+128)
 12897  1544  3007               	movlw	7
 12898  1545  00BA               	movwf	(low ((Button_Init@set_time2| 0+3)))^(0+128)
 12899                           
 12900                           ;key-handler.c: 70:     set_time2.button_short_function=k_set_time2_short;
 12901  1546  3004               	movlw	4
 12902  1547  1283               	bcf	3,5	;RP0=0, select bank0
 12903  1548  00A6               	movwf	??_Button_Init
 12904  1549  0826               	movf	??_Button_Init,w
 12905  154A  1683               	bsf	3,5	;RP0=1, select bank1
 12906  154B  00BC               	movwf	(Button_Init@set_time2^(0+128)+5)
 12907                           
 12908                           ;key-handler.c: 71:     set_time2.button_long_function=k_set_time2_long;
 12909  154C  3005               	movlw	5
 12910  154D  1283               	bcf	3,5	;RP0=0, select bank0
 12911  154E  00A6               	movwf	??_Button_Init
 12912  154F  0826               	movf	??_Button_Init,w
 12913  1550  1683               	bsf	3,5	;RP0=1, select bank1
 12914  1551  00BD               	movwf	(Button_Init@set_time2^(0+128)+6)
 12915                           
 12916                           ;key-handler.c: 72:     set_time2.klock=0;
 12917  1552  01B7               	clrf	Button_Init@set_time2^(0+128)
 12918                           
 12919                           ;key-handler.c: 73:     set_time2.lock_long_press=0;
 12920  1553  01B9               	clrf	(Button_Init@set_time2^(0+128)+2)
 12921                           
 12922                           ;key-handler.c: 75:     set_right.pin=1;
 12923  1554  01B1               	clrf	(Button_Init@set_right^(0+128)+1)
 12924  1555  0AB1               	incf	(Button_Init@set_right^(0+128)+1),f
 12925                           
 12926                           ;key-handler.c: 76:     set_right.port=&PORTB;
 12927  1556  3000               	movlw	0
 12928  1557  00B4               	movwf	((low ((Button_Init@set_right| 0+3))+1))^(0+128)
 12929  1558  3006               	movlw	6
 12930  1559  00B3               	movwf	(low ((Button_Init@set_right| 0+3)))^(0+128)
 12931                           
 12932                           ;key-handler.c: 77:     set_right.button_short_function= k_set_right_short;
 12933  155A  3006               	movlw	6
 12934  155B  1283               	bcf	3,5	;RP0=0, select bank0
 12935  155C  00A6               	movwf	??_Button_Init
 12936  155D  0826               	movf	??_Button_Init,w
 12937  155E  1683               	bsf	3,5	;RP0=1, select bank1
 12938  155F  00B5               	movwf	(Button_Init@set_right^(0+128)+5)
 12939                           
 12940                           ;key-handler.c: 78:     set_right.button_long_function=k_set_right_long;
 12941  1560  3007               	movlw	7
 12942  1561  1283               	bcf	3,5	;RP0=0, select bank0
 12943  1562  00A6               	movwf	??_Button_Init
 12944  1563  0826               	movf	??_Button_Init,w
 12945  1564  1683               	bsf	3,5	;RP0=1, select bank1
 12946  1565  00B6               	movwf	(Button_Init@set_right^(0+128)+6)
 12947                           
 12948                           ;key-handler.c: 79:     set_right.klock=0;
 12949  1566  01B0               	clrf	Button_Init@set_right^(0+128)
 12950                           
 12951                           ;key-handler.c: 80:     set_right.lock_long_press=0;
 12952  1567  01B2               	clrf	(Button_Init@set_right^(0+128)+2)
 12953                           
 12954                           ;key-handler.c: 82:     set_up.pin=3;
 12955  1568  3003               	movlw	3
 12956  1569  1283               	bcf	3,5	;RP0=0, select bank0
 12957  156A  00A6               	movwf	??_Button_Init
 12958  156B  0826               	movf	??_Button_Init,w
 12959  156C  1683               	bsf	3,5	;RP0=1, select bank3
 12960  156D  1703               	bsf	3,6	;RP1=1, select bank3
 12961  156E  00D0               	movwf	(Button_Init@set_up^(0+384)+1)
 12962                           
 12963                           ;key-handler.c: 83:     set_up.port=&PORTB;
 12964  156F  3000               	movlw	0
 12965  1570  00D3               	movwf	((low ((Button_Init@set_up| (0+256)+3))+1))^(0+128)
 12966  1571  3006               	movlw	6
 12967  1572  00D2               	movwf	(low ((Button_Init@set_up| (0+256)+3)))^(0+128)
 12968                           
 12969                           ;key-handler.c: 84:     set_up.button_short_function=k_set_up_short;
 12970  1573  3008               	movlw	8
 12971  1574  1283               	bcf	3,5	;RP0=0, select bank0
 12972  1575  1303               	bcf	3,6	;RP1=0, select bank0
 12973  1576  00A6               	movwf	??_Button_Init
 12974  1577  0826               	movf	??_Button_Init,w
 12975  1578  1683               	bsf	3,5	;RP0=1, select bank3
 12976  1579  1703               	bsf	3,6	;RP1=1, select bank3
 12977  157A  00D4               	movwf	(Button_Init@set_up^(0+384)+5)
 12978                           
 12979                           ;key-handler.c: 85:     set_up.button_long_function=k_set_up_long;
 12980  157B  3009               	movlw	9
 12981  157C  1283               	bcf	3,5	;RP0=0, select bank0
 12982  157D  1303               	bcf	3,6	;RP1=0, select bank0
 12983  157E  00A6               	movwf	??_Button_Init
 12984  157F  0826               	movf	??_Button_Init,w
 12985  1580  1683               	bsf	3,5	;RP0=1, select bank3
 12986  1581  1703               	bsf	3,6	;RP1=1, select bank3
 12987  1582  00D5               	movwf	(Button_Init@set_up^(0+384)+6)
 12988                           
 12989                           ;key-handler.c: 86:     set_up.klock=0;
 12990  1583  01CF               	clrf	Button_Init@set_up^(0+384)
 12991                           
 12992                           ;key-handler.c: 87:     set_up.lock_long_press=0;
 12993  1584  01D1               	clrf	(Button_Init@set_up^(0+384)+2)
 12994                           
 12995                           ;key-handler.c: 89:     set_down.pin=2;
 12996  1585  3002               	movlw	2
 12997  1586  1283               	bcf	3,5	;RP0=0, select bank0
 12998  1587  1303               	bcf	3,6	;RP1=0, select bank0
 12999  1588  00A6               	movwf	??_Button_Init
 13000  1589  0826               	movf	??_Button_Init,w
 13001  158A  1683               	bsf	3,5	;RP0=1, select bank3
 13002  158B  1703               	bsf	3,6	;RP1=1, select bank3
 13003  158C  00C9               	movwf	(Button_Init@set_down^(0+384)+1)
 13004                           
 13005                           ;key-handler.c: 90:     set_down.port=&PORTB;
 13006  158D  3000               	movlw	0
 13007  158E  00CC               	movwf	((low ((Button_Init@set_down| (0+256)+3))+1))^(0+128)
 13008  158F  3006               	movlw	6
 13009  1590  00CB               	movwf	(low ((Button_Init@set_down| (0+256)+3)))^(0+128)
 13010                           
 13011                           ;key-handler.c: 91:     set_down.button_short_function=k_set_down_short;
 13012  1591  300A               	movlw	10
 13013  1592  1283               	bcf	3,5	;RP0=0, select bank0
 13014  1593  1303               	bcf	3,6	;RP1=0, select bank0
 13015  1594  00A6               	movwf	??_Button_Init
 13016  1595  0826               	movf	??_Button_Init,w
 13017  1596  1683               	bsf	3,5	;RP0=1, select bank3
 13018  1597  1703               	bsf	3,6	;RP1=1, select bank3
 13019  1598  00CD               	movwf	(Button_Init@set_down^(0+384)+5)
 13020                           
 13021                           ;key-handler.c: 92:     set_down.button_long_function=k_set_down_long;
 13022  1599  300B               	movlw	11
 13023  159A  1283               	bcf	3,5	;RP0=0, select bank0
 13024  159B  1303               	bcf	3,6	;RP1=0, select bank0
 13025  159C  00A6               	movwf	??_Button_Init
 13026  159D  0826               	movf	??_Button_Init,w
 13027  159E  1683               	bsf	3,5	;RP0=1, select bank3
 13028  159F  1703               	bsf	3,6	;RP1=1, select bank3
 13029  15A0  00CE               	movwf	(Button_Init@set_down^(0+384)+6)
 13030                           
 13031                           ;key-handler.c: 93:     set_down.klock=0;
 13032  15A1  01C8               	clrf	Button_Init@set_down^(0+384)
 13033                           
 13034                           ;key-handler.c: 94:     set_down.lock_long_press=0;
 13035  15A2  01CA               	clrf	(Button_Init@set_down^(0+384)+2)
 13036  15A3  0008               	return
 13037  15A4                     __end_of_Button_Init:	
 13038                           
 13039                           	psect	text59
 13040  13C5                     __ptext59:	
 13041 ;; *************** function _ISR *****************
 13042 ;; Defined at:
 13043 ;;		line 39 in file "interrupts.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;		None
 13046 ;; Auto vars:     Size  Location     Type
 13047 ;;  pulse_time      2    4[BANK0 ] unsigned int 
 13048 ;; Return value:  Size  Location     Type
 13049 ;;                  1    wreg      void 
 13050 ;; Registers used:
 13051 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 300/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13057 ;;      Params:         0       0       0       0       0
 13058 ;;      Locals:         0       2       0       0       0
 13059 ;;      Temps:          0       4       0       0       0
 13060 ;;      Totals:         0       6       0       0       0
 13061 ;;Total ram usage:        6 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:    3
 13064 ;; This function calls:
 13065 ;;		_Manchester_Decode
 13066 ;;		i1_Display_7Seg
 13067 ;; This function is called by:
 13068 ;;		Interrupt level 1
 13069 ;; This function uses a non-reentrant model
 13070 ;;
 13071                           
 13072                           
 13073                           ;psect for function _ISR
 13074  13C5                     _ISR:	
 13075                           
 13076                           ;interrupts.c: 41:     static unsigned char edge_dir, set_flag, display_timer;;interrupt
      +                          s.c: 42:     unsigned int pulse_time;;interrupts.c: 50:     if (TMR0IE && TMR0IF)
 13077  13C5  1A8B               	btfsc	11,5	;volatile
 13078  13C6  1D0B               	btfss	11,2	;volatile
 13079  13C7  2BFA               	goto	i1l6032
 13080                           
 13081                           ;interrupts.c: 51:     {;interrupts.c: 52:         if(display_timer>15 && g_display_cont
      +                          roll==1)
 13082  13C8  3010               	movlw	16
 13083  13C9  1683               	bsf	3,5	;RP0=1, select bank1
 13084  13CA  022A               	subwf	ISR@display_timer^(0+128),w
 13085  13CB  1C03               	skipc
 13086  13CC  2BDE               	goto	i1l6022
 13087  13CD  032E               	decf	_g_display_controll^(0+128),w	;volatile
 13088  13CE  1D03               	btfss	3,2
 13089  13CF  2BDE               	goto	i1l6022
 13090                           
 13091                           ;interrupts.c: 53:         {;interrupts.c: 54:             Display_7Seg(&g_display_text[
      +                          0],g_decimal_point);
 13092  13D0  082D               	movf	_g_decimal_point^(0+128),w
 13093  13D1  1283               	bcf	3,5	;RP0=0, select bank0
 13094  13D2  00A0               	movwf	??_ISR
 13095  13D3  0820               	movf	??_ISR,w
 13096  13D4  00FB               	movwf	i1Display_7Seg@decimal_point
 13097  13D5  30CC               	movlw	(low (_g_display_text| 0))& (0+255)
 13098  13D6  160A  118A  2164  160A  118A  	fcall	i1_Display_7Seg
 13099                           
 13100                           ;interrupts.c: 55:             display_timer=0;
 13101  13DB  1683               	bsf	3,5	;RP0=1, select bank1
 13102  13DC  01AA               	clrf	ISR@display_timer^(0+128)
 13103                           
 13104                           ;interrupts.c: 57:         }else
 13105  13DD  2BE4               	goto	i1l350
 13106  13DE                     i1l6022:	
 13107                           
 13108                           ;interrupts.c: 58:         {;interrupts.c: 59:             display_timer++;
 13109  13DE  3001               	movlw	1
 13110  13DF  1283               	bcf	3,5	;RP0=0, select bank0
 13111  13E0  00A0               	movwf	??_ISR
 13112  13E1  0820               	movf	??_ISR,w
 13113  13E2  1683               	bsf	3,5	;RP0=1, select bank1
 13114  13E3  07AA               	addwf	ISR@display_timer^(0+128),f
 13115  13E4                     i1l350:	
 13116                           ;interrupts.c: 60:         }
 13117                           
 13118                           
 13119                           ;interrupts.c: 62:         if(g_button_timer)
 13120  13E4  0820               	movf	_g_button_timer^(0+128),w	;volatile
 13121  13E5  0421               	iorwf	(_g_button_timer+1)^(0+128),w	;volatile
 13122  13E6  1903               	btfsc	3,2
 13123  13E7  2BEE               	goto	i1l6026
 13124                           
 13125                           ;interrupts.c: 63:         {;interrupts.c: 64:             g_button_timer--;
 13126  13E8  3001               	movlw	1
 13127  13E9  02A0               	subwf	_g_button_timer^(0+128),f	;volatile
 13128  13EA  3000               	movlw	0
 13129  13EB  1C03               	skipc
 13130  13EC  03A1               	decf	(_g_button_timer+1)^(0+128),f	;volatile
 13131  13ED  02A1               	subwf	(_g_button_timer+1)^(0+128),f	;volatile
 13132  13EE                     i1l6026:	
 13133                           
 13134                           ;interrupts.c: 67:         if(g_generic_timer)
 13135  13EE  1283               	bcf	3,5	;RP0=0, select bank0
 13136  13EF  0859               	movf	_g_generic_timer,w	;volatile
 13137  13F0  045A               	iorwf	_g_generic_timer+1,w	;volatile
 13138  13F1  1903               	btfsc	3,2
 13139  13F2  2BF9               	goto	i1l6030
 13140                           
 13141                           ;interrupts.c: 68:         {;interrupts.c: 69:             g_generic_timer--;
 13142  13F3  3001               	movlw	1
 13143  13F4  02D9               	subwf	_g_generic_timer,f	;volatile
 13144  13F5  3000               	movlw	0
 13145  13F6  1C03               	skipc
 13146  13F7  03DA               	decf	_g_generic_timer+1,f	;volatile
 13147  13F8  02DA               	subwf	_g_generic_timer+1,f	;volatile
 13148  13F9                     i1l6030:	
 13149                           
 13150                           ;interrupts.c: 72:         TMR0IF=0;
 13151  13F9  110B               	bcf	11,2	;volatile
 13152  13FA                     i1l6032:	
 13153                           
 13154                           ;interrupts.c: 81:     if(CCP2IF && CCP2IE)
 13155  13FA  1C0D               	btfss	13,0	;volatile
 13156  13FB  2C2B               	goto	i1l6056
 13157  13FC  1683               	bsf	3,5	;RP0=1, select bank1
 13158  13FD  1C0D               	btfss	13,0	;volatile
 13159  13FE  2C2B               	goto	i1l6056
 13160                           
 13161                           ;interrupts.c: 82:     {;interrupts.c: 83:         g_reciver_ccp2_isr_fire_flag=1;
 13162  13FF  3001               	movlw	1
 13163  1400  1283               	bcf	3,5	;RP0=0, select bank0
 13164  1401  00A0               	movwf	??_ISR
 13165  1402  0820               	movf	??_ISR,w
 13166  1403  1683               	bsf	3,5	;RP0=1, select bank1
 13167  1404  00AF               	movwf	_g_reciver_ccp2_isr_fire_flag^(0+128)	;volatile
 13168                           
 13169                           ;interrupts.c: 85:         if(edge_dir==0)
 13170  1405  0851               	movf	ISR@edge_dir^(0+128),w
 13171  1406  1D03               	btfss	3,2
 13172  1407  2C11               	goto	i1l6044
 13173                           
 13174                           ;interrupts.c: 86:         {;interrupts.c: 87:             CCP2CONbits.CCP2M=0b0101;
 13175  1408  1283               	bcf	3,5	;RP0=0, select bank0
 13176  1409  081D               	movf	29,w	;volatile
 13177  140A  39F0               	andlw	-16
 13178  140B  3805               	iorlw	5
 13179  140C  009D               	movwf	29	;volatile
 13180                           
 13181                           ;interrupts.c: 88:             edge_dir=1;
 13182  140D  1683               	bsf	3,5	;RP0=1, select bank1
 13183  140E  01D1               	clrf	ISR@edge_dir^(0+128)
 13184  140F  0AD1               	incf	ISR@edge_dir^(0+128),f
 13185                           
 13186                           ;interrupts.c: 90:         }else
 13187  1410  2C18               	goto	i1l6048
 13188  1411                     i1l6044:	
 13189                           
 13190                           ;interrupts.c: 91:         {;interrupts.c: 92:             CCP2CONbits.CCP2M=0b0100;
 13191  1411  1283               	bcf	3,5	;RP0=0, select bank0
 13192  1412  081D               	movf	29,w	;volatile
 13193  1413  39F0               	andlw	-16
 13194  1414  3804               	iorlw	4
 13195  1415  009D               	movwf	29	;volatile
 13196                           
 13197                           ;interrupts.c: 93:             edge_dir=0;
 13198  1416  1683               	bsf	3,5	;RP0=1, select bank1
 13199  1417  01D1               	clrf	ISR@edge_dir^(0+128)
 13200  1418                     i1l6048:	
 13201                           
 13202                           ;interrupts.c: 96:         pulse_time=CCPR2;
 13203  1418  1283               	bcf	3,5	;RP0=0, select bank0
 13204  1419  081C               	movf	28,w	;volatile
 13205  141A  00A5               	movwf	ISR@pulse_time+1
 13206  141B  081B               	movf	27,w	;volatile
 13207  141C  00A4               	movwf	ISR@pulse_time
 13208                           
 13209                           ;interrupts.c: 98:         Manchester_Decode(&edge_dir,&pulse_time);
 13210  141D  3024               	movlw	(low (ISR@pulse_time| 0))& (0+255)
 13211  141E  00A0               	movwf	??_ISR
 13212  141F  0820               	movf	??_ISR,w
 13213  1420  00F3               	movwf	Manchester_Decode@pulse_time
 13214  1421  30D1               	movlw	(low (ISR@edge_dir| 0))& (0+255)
 13215  1422  120A  158A  220B  160A  118A  	fcall	_Manchester_Decode
 13216                           
 13217                           ;interrupts.c: 100:         TMR1=0;
 13218  1427  1283               	bcf	3,5	;RP0=0, select bank0
 13219  1428  018E               	clrf	14	;volatile
 13220  1429  018F               	clrf	15	;volatile
 13221                           
 13222                           ;interrupts.c: 101:         CCP2IF=0;
 13223  142A  100D               	bcf	13,0	;volatile
 13224  142B                     i1l6056:	
 13225                           
 13226                           ;interrupts.c: 110:     if(CCP1IF && CCP1IE)
 13227  142B  1283               	bcf	3,5	;RP0=0, select bank0
 13228  142C  1D0C               	btfss	12,2	;volatile
 13229  142D  2C4E               	goto	i1l359
 13230  142E  1683               	bsf	3,5	;RP0=1, select bank1
 13231  142F  1D0C               	btfss	12,2	;volatile
 13232  1430  2C4E               	goto	i1l359
 13233                           
 13234                           ;interrupts.c: 111:     {;interrupts.c: 112:         if(set_flag)
 13235  1431  082B               	movf	ISR@set_flag^(0+128),w
 13236  1432  1903               	btfsc	3,2
 13237  1433  2C3C               	goto	i1l6066
 13238                           
 13239                           ;interrupts.c: 113:         {;interrupts.c: 114:             CCP1CONbits.CCP1M=0b1000;
 13240  1434  1283               	bcf	3,5	;RP0=0, select bank0
 13241  1435  0817               	movf	23,w	;volatile
 13242  1436  39F0               	andlw	-16
 13243  1437  3808               	iorlw	8
 13244  1438  0097               	movwf	23	;volatile
 13245                           
 13246                           ;interrupts.c: 115:             set_flag=0;
 13247  1439  1683               	bsf	3,5	;RP0=1, select bank1
 13248  143A  01AB               	clrf	ISR@set_flag^(0+128)
 13249                           
 13250                           ;interrupts.c: 116:         }else
 13251  143B  2C44               	goto	i1l6070
 13252  143C                     i1l6066:	
 13253                           
 13254                           ;interrupts.c: 117:         {;interrupts.c: 118:             CCP1CONbits.CCP1M=0b1001;
 13255  143C  1283               	bcf	3,5	;RP0=0, select bank0
 13256  143D  0817               	movf	23,w	;volatile
 13257  143E  39F0               	andlw	-16
 13258  143F  3809               	iorlw	9
 13259  1440  0097               	movwf	23	;volatile
 13260                           
 13261                           ;interrupts.c: 119:             set_flag=1;
 13262  1441  1683               	bsf	3,5	;RP0=1, select bank1
 13263  1442  01AB               	clrf	ISR@set_flag^(0+128)
 13264  1443  0AAB               	incf	ISR@set_flag^(0+128),f
 13265  1444                     i1l6070:	
 13266                           
 13267                           ;interrupts.c: 122:         CCPR1=g_pwm_freq;
 13268  1444  0823               	movf	(_g_pwm_freq+1)^(0+128),w	;volatile
 13269  1445  1283               	bcf	3,5	;RP0=0, select bank0
 13270  1446  0096               	movwf	22	;volatile
 13271  1447  1683               	bsf	3,5	;RP0=1, select bank1
 13272  1448  0822               	movf	_g_pwm_freq^(0+128),w	;volatile
 13273  1449  1283               	bcf	3,5	;RP0=0, select bank0
 13274  144A  0095               	movwf	21	;volatile
 13275                           
 13276                           ;interrupts.c: 123:         TMR1=0;
 13277  144B  018E               	clrf	14	;volatile
 13278  144C  018F               	clrf	15	;volatile
 13279                           
 13280                           ;interrupts.c: 124:         CCP1IF=0;
 13281  144D  110C               	bcf	12,2	;volatile
 13282  144E                     i1l359:	
 13283  144E  1283               	bcf	3,5	;RP0=0, select bank0
 13284  144F  0823               	movf	??_ISR+3,w
 13285  1450  008A               	movwf	10
 13286  1451  0822               	movf	??_ISR+2,w
 13287  1452  0084               	movwf	4
 13288  1453  0E21               	swapf	(??_ISR+1)^0,w
 13289  1454  0083               	movwf	3
 13290  1455  0EFE               	swapf	126,f
 13291  1456  0E7E               	swapf	126,w
 13292  1457  0009               	retfie
 13293  1458                     __end_of_ISR:	
 13294                           
 13295                           	psect	intentry
 13296  0004                     __pintentry:	
 13297                           ;incstack = 0
 13298 ;; hardware stack exceeded
 13299                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13300                           
 13301  0004                     interrupt_function:	
 13302  007E                     saved_w	set	btemp
 13303  0004  00FE               	movwf	btemp
 13304  0005  0E03               	swapf	3,w
 13305  0006  1283               	bcf	3,5	;RP0=0, select bank0
 13306  0007  1303               	bcf	3,6	;RP1=0, select bank0
 13307  0008  00A1               	movwf	??_ISR+1
 13308  0009  0804               	movf	4,w
 13309  000A  00A2               	movwf	??_ISR+2
 13310  000B  080A               	movf	10,w
 13311  000C  00A3               	movwf	??_ISR+3
 13312  000D  160A  118A  2BC5   	ljmp	_ISR
 13313                           
 13314                           	psect	text60
 13315  1164                     __ptext60:	
 13316 ;; *************** function i1_Display_7Seg *****************
 13317 ;; Defined at:
 13318 ;;		line 96 in file "display-7-segment.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;  text            1    wreg     PTR unsigned char 
 13321 ;;		 -> g_display_text(4), 
 13322 ;;  decimal_poin    1   11[COMMON] unsigned char 
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;  text            1   13[COMMON] PTR unsigned char 
 13325 ;;		 -> g_display_text(4), 
 13326 ;; Return value:  Size  Location     Type
 13327 ;;                  1    wreg      void 
 13328 ;; Registers used:
 13329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13330 ;; Tracked objects:
 13331 ;;		On entry : 300/0
 13332 ;;		On exit  : 300/0
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13335 ;;      Params:         1       0       0       0       0
 13336 ;;      Locals:         1       0       0       0       0
 13337 ;;      Temps:          1       0       0       0       0
 13338 ;;      Totals:         3       0       0       0       0
 13339 ;;Total ram usage:        3 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    2
 13342 ;; This function calls:
 13343 ;;		i1_One_Digit_Handler
 13344 ;; This function is called by:
 13345 ;;		_ISR
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           
 13350                           ;psect for function i1_Display_7Seg
 13351  1164                     i1_Display_7Seg:	
 13352                           
 13353                           ;incstack = 0
 13354 ;; hardware stack exceeded
 13355                           ; Regs used in i1_Display_7Seg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13356                           ;i1Display_7Seg@text stored from wreg
 13357  1164  00FD               	movwf	i1Display_7Seg@text
 13358                           
 13359                           ;display-7-segment.c: 96: void Display_7Seg(unsigned char *text, unsigned char decimal_p
      +                          oint);display-7-segment.c: 97: {;display-7-segment.c: 98:     static unsigned char enabl
      +                          e_digit=1;;display-7-segment.c: 100:     if(enable_digit<=1)
 13360  1165  3002               	movlw	2
 13361  1166  025E               	subwf	Display_7Seg@enable_digit,w
 13362  1167  1803               	skipnc
 13363  1168  297F               	goto	i1l5970
 13364                           
 13365                           ;display-7-segment.c: 101:     {;display-7-segment.c: 102:         if(decimal_point & 0b
      +                          1000)
 13366  1169  1DFB               	btfss	i1Display_7Seg@decimal_point,3
 13367  116A  2970               	goto	i1l5966
 13368                           
 13369                           ;display-7-segment.c: 103:         {;display-7-segment.c: 104:             One_Digit_Han
      +                          dler(*text,1,1);
 13370  116B  01F6               	clrf	i1One_Digit_Handler@digit_number
 13371  116C  0AF6               	incf	i1One_Digit_Handler@digit_number,f
 13372  116D  01F7               	clrf	i1One_Digit_Handler@decimal_point
 13373  116E  0AF7               	incf	i1One_Digit_Handler@decimal_point,f
 13374  116F  2973               	goto	L16
 13375  1170                     i1l5966:	
 13376                           ;display-7-segment.c: 105:         }else
 13377                           
 13378                           
 13379                           ;display-7-segment.c: 106:         {;display-7-segment.c: 107:             One_Digit_Han
      +                          dler(*text,1,0);
 13380  1170  01F6               	clrf	i1One_Digit_Handler@digit_number
 13381  1171  0AF6               	incf	i1One_Digit_Handler@digit_number,f
 13382  1172  01F7               	clrf	i1One_Digit_Handler@decimal_point
 13383  1173                     L16:	
 13384  1173  087D               	movf	i1Display_7Seg@text,w
 13385  1174  0084               	movwf	4
 13386  1175  1383               	bcf	3,7	;select IRP bank0
 13387  1176  0800               	movf	0,w
 13388  1177  160A  158A  22D0   	fcall	i1_One_Digit_Handler
 13389                           
 13390                           ;display-7-segment.c: 109:         enable_digit=2;
 13391  117A  3002               	movlw	2
 13392  117B  00FC               	movwf	??i1_Display_7Seg
 13393  117C  087C               	movf	??i1_Display_7Seg,w
 13394  117D  00DE               	movwf	Display_7Seg@enable_digit
 13395                           
 13396                           ;display-7-segment.c: 111:     }else if(enable_digit==2)
 13397  117E  0008               	return
 13398  117F                     i1l5970:	
 13399  117F  3002               	movlw	2
 13400  1180  065E               	xorwf	Display_7Seg@enable_digit,w
 13401  1181  1D03               	btfss	3,2
 13402  1182  299D               	goto	i1l5980
 13403                           
 13404                           ;display-7-segment.c: 112:     {;display-7-segment.c: 113:         if(decimal_point & 0b
      +                          0100)
 13405  1183  1D7B               	btfss	i1Display_7Seg@decimal_point,2
 13406  1184  298C               	goto	i1l5976
 13407                           
 13408                           ;display-7-segment.c: 114:         {;display-7-segment.c: 115:             One_Digit_Han
      +                          dler(*(text+1),2,1);
 13409  1185  3002               	movlw	2
 13410  1186  00FC               	movwf	??i1_Display_7Seg
 13411  1187  087C               	movf	??i1_Display_7Seg,w
 13412  1188  00F6               	movwf	i1One_Digit_Handler@digit_number
 13413  1189  01F7               	clrf	i1One_Digit_Handler@decimal_point
 13414  118A  0AF7               	incf	i1One_Digit_Handler@decimal_point,f
 13415  118B  2991               	goto	L17
 13416  118C                     i1l5976:	
 13417                           ;display-7-segment.c: 116:         }else
 13418                           
 13419                           
 13420                           ;display-7-segment.c: 117:         {;display-7-segment.c: 118:             One_Digit_Han
      +                          dler(*(text+1),2,0);
 13421  118C  3002               	movlw	2
 13422  118D  00FC               	movwf	??i1_Display_7Seg
 13423  118E  087C               	movf	??i1_Display_7Seg,w
 13424  118F  00F6               	movwf	i1One_Digit_Handler@digit_number
 13425  1190  01F7               	clrf	i1One_Digit_Handler@decimal_point
 13426  1191                     L17:	
 13427  1191  0A7D               	incf	i1Display_7Seg@text,w
 13428  1192  0084               	movwf	4
 13429  1193  1383               	bcf	3,7	;select IRP bank0
 13430  1194  0800               	movf	0,w
 13431  1195  160A  158A  22D0   	fcall	i1_One_Digit_Handler
 13432                           
 13433                           ;display-7-segment.c: 120:         enable_digit=3;
 13434  1198  3003               	movlw	3
 13435  1199  00FC               	movwf	??i1_Display_7Seg
 13436  119A  087C               	movf	??i1_Display_7Seg,w
 13437  119B  00DE               	movwf	Display_7Seg@enable_digit
 13438                           
 13439                           ;display-7-segment.c: 122:     }else if(enable_digit==3)
 13440  119C  0008               	return
 13441  119D                     i1l5980:	
 13442  119D  3003               	movlw	3
 13443  119E  065E               	xorwf	Display_7Seg@enable_digit,w
 13444  119F  1D03               	btfss	3,2
 13445  11A0  29BC               	goto	i1l5990
 13446                           
 13447                           ;display-7-segment.c: 123:     {;display-7-segment.c: 124:         if(decimal_point & 0b
      +                          0010)
 13448  11A1  1CFB               	btfss	i1Display_7Seg@decimal_point,1
 13449  11A2  29AA               	goto	i1l5986
 13450                           
 13451                           ;display-7-segment.c: 125:         {;display-7-segment.c: 126:            One_Digit_Hand
      +                          ler(*(text+2),3,1);
 13452  11A3  3003               	movlw	3
 13453  11A4  00FC               	movwf	??i1_Display_7Seg
 13454  11A5  087C               	movf	??i1_Display_7Seg,w
 13455  11A6  00F6               	movwf	i1One_Digit_Handler@digit_number
 13456  11A7  01F7               	clrf	i1One_Digit_Handler@decimal_point
 13457  11A8  0AF7               	incf	i1One_Digit_Handler@decimal_point,f
 13458  11A9  29AF               	goto	L18
 13459  11AA                     i1l5986:	
 13460                           ;display-7-segment.c: 127:         }else
 13461                           
 13462                           
 13463                           ;display-7-segment.c: 128:         {;display-7-segment.c: 129:            One_Digit_Hand
      +                          ler(*(text+2),3,0);
 13464  11AA  3003               	movlw	3
 13465  11AB  00FC               	movwf	??i1_Display_7Seg
 13466  11AC  087C               	movf	??i1_Display_7Seg,w
 13467  11AD  00F6               	movwf	i1One_Digit_Handler@digit_number
 13468  11AE  01F7               	clrf	i1One_Digit_Handler@decimal_point
 13469  11AF                     L18:	
 13470  11AF  087D               	movf	i1Display_7Seg@text,w
 13471  11B0  3E02               	addlw	2
 13472  11B1  0084               	movwf	4
 13473  11B2  1383               	bcf	3,7	;select IRP bank0
 13474  11B3  0800               	movf	0,w
 13475  11B4  160A  158A  22D0   	fcall	i1_One_Digit_Handler
 13476                           
 13477                           ;display-7-segment.c: 131:         enable_digit=4;
 13478  11B7  3004               	movlw	4
 13479  11B8  00FC               	movwf	??i1_Display_7Seg
 13480  11B9  087C               	movf	??i1_Display_7Seg,w
 13481  11BA  00DE               	movwf	Display_7Seg@enable_digit
 13482                           
 13483                           ;display-7-segment.c: 133:     }else if(enable_digit>=4)
 13484  11BB  0008               	return
 13485  11BC                     i1l5990:	
 13486  11BC  3004               	movlw	4
 13487  11BD  025E               	subwf	Display_7Seg@enable_digit,w
 13488  11BE  1C03               	skipc
 13489  11BF  0008               	return
 13490                           
 13491                           ;display-7-segment.c: 134:     {;display-7-segment.c: 135:         if(decimal_point & 0b
      +                          0001)
 13492  11C0  1C7B               	btfss	i1Display_7Seg@decimal_point,0
 13493  11C1  29C9               	goto	i1l5996
 13494                           
 13495                           ;display-7-segment.c: 136:         {;display-7-segment.c: 137:             One_Digit_Han
      +                          dler(*(text+3),4,1);
 13496  11C2  3004               	movlw	4
 13497  11C3  00FC               	movwf	??i1_Display_7Seg
 13498  11C4  087C               	movf	??i1_Display_7Seg,w
 13499  11C5  00F6               	movwf	i1One_Digit_Handler@digit_number
 13500  11C6  01F7               	clrf	i1One_Digit_Handler@decimal_point
 13501  11C7  0AF7               	incf	i1One_Digit_Handler@decimal_point,f
 13502  11C8  29CE               	goto	L19
 13503  11C9                     i1l5996:	
 13504                           ;display-7-segment.c: 138:         }else
 13505                           
 13506                           
 13507                           ;display-7-segment.c: 139:         {;display-7-segment.c: 140:             One_Digit_Han
      +                          dler(*(text+3),4,0);
 13508  11C9  3004               	movlw	4
 13509  11CA  00FC               	movwf	??i1_Display_7Seg
 13510  11CB  087C               	movf	??i1_Display_7Seg,w
 13511  11CC  00F6               	movwf	i1One_Digit_Handler@digit_number
 13512  11CD  01F7               	clrf	i1One_Digit_Handler@decimal_point
 13513  11CE                     L19:	
 13514  11CE  087D               	movf	i1Display_7Seg@text,w
 13515  11CF  3E03               	addlw	3
 13516  11D0  0084               	movwf	4
 13517  11D1  1383               	bcf	3,7	;select IRP bank0
 13518  11D2  0800               	movf	0,w
 13519  11D3  160A  158A  22D0   	fcall	i1_One_Digit_Handler
 13520                           
 13521                           ;display-7-segment.c: 142:         enable_digit=1;
 13522  11D6  01DE               	clrf	Display_7Seg@enable_digit
 13523  11D7  0ADE               	incf	Display_7Seg@enable_digit,f
 13524  11D8  0008               	return
 13525  11D9                     __end_ofi1_Display_7Seg:	
 13526                           
 13527                           	psect	text61
 13528  1AD0                     __ptext61:	
 13529 ;; *************** function i1_One_Digit_Handler *****************
 13530 ;; Defined at:
 13531 ;;		line 147 in file "display-7-segment.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;  sign            1    wreg     unsigned char 
 13534 ;;  digit_number    1    6[COMMON] unsigned char 
 13535 ;;  decimal_poin    1    7[COMMON] unsigned char 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  sign            1   10[COMMON] unsigned char 
 13538 ;; Return value:  Size  Location     Type
 13539 ;;                  1    wreg      void 
 13540 ;; Registers used:
 13541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13542 ;; Tracked objects:
 13543 ;;		On entry : B00/0
 13544 ;;		On exit  : B00/0
 13545 ;;		Unchanged: 800/0
 13546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13547 ;;      Params:         2       0       0       0       0
 13548 ;;      Locals:         1       0       0       0       0
 13549 ;;      Temps:          2       0       0       0       0
 13550 ;;      Totals:         5       0       0       0       0
 13551 ;;Total ram usage:        5 bytes
 13552 ;; Hardware stack levels used:    1
 13553 ;; Hardware stack levels required when called:    1
 13554 ;; This function calls:
 13555 ;;		i1_Disable_All_Digits
 13556 ;;		i1_Set_Anode_Outputs
 13557 ;;		i1_Sign_Anode_Data
 13558 ;; This function is called by:
 13559 ;;		i1_Display_7Seg
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563                           
 13564                           ;psect for function i1_One_Digit_Handler
 13565  1AD0                     i1_One_Digit_Handler:	
 13566                           
 13567                           ;incstack = 0
 13568 ;; hardware stack exceeded
 13569                           ; Regs used in i1_One_Digit_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13570                           ;i1One_Digit_Handler@sign stored from wreg
 13571  1AD0  00FA               	movwf	i1One_Digit_Handler@sign
 13572                           
 13573                           ;display-7-segment.c: 147: void One_Digit_Handler(unsigned char sign, unsigned char digi
      +                          t_number, unsigned char decimal_point);display-7-segment.c: 148: {;display-7-segment.c: 
      +                          150:     Disable_All_Digits();
 13574  1AD1  160A  158A  2058  160A  158A  	fcall	i1_Disable_All_Digits
 13575                           
 13576                           ;display-7-segment.c: 151:     Set_Anode_Outputs(Sign_Anode_Data(sign),decimal_point);
 13577  1AD6  0877               	movf	i1One_Digit_Handler@decimal_point,w
 13578  1AD7  00F8               	movwf	??i1_One_Digit_Handler
 13579  1AD8  0878               	movf	??i1_One_Digit_Handler,w
 13580  1AD9  00F3               	movwf	i1Set_Anode_Outputs@decimal_point
 13581  1ADA  087A               	movf	i1One_Digit_Handler@sign,w
 13582  1ADB  160A  118A  2662  160A  158A  	fcall	i1_Sign_Anode_Data
 13583  1AE0  160A  158A  273A  160A  158A  	fcall	i1_Set_Anode_Outputs
 13584                           
 13585                           ;display-7-segment.c: 152:     switch (digit_number)
 13586  1AE5  2AEE               	goto	i1l5574
 13587  1AE6                     i1l152:	
 13588                           ;display-7-segment.c: 153:     {;display-7-segment.c: 154:         case 1 : PORTBbits.RB
      +                          7=0; break;
 13589                           
 13590  1AE6  1386               	bcf	6,7	;volatile
 13591  1AE7  0008               	return
 13592  1AE8                     i1l154:	
 13593                           ;display-7-segment.c: 155:         case 2 : PORTBbits.RB6=0; break;
 13594                           
 13595  1AE8  1306               	bcf	6,6	;volatile
 13596  1AE9  0008               	return
 13597  1AEA                     i1l155:	
 13598                           ;display-7-segment.c: 156:         case 3 : PORTBbits.RB5=0; break;
 13599                           
 13600  1AEA  1286               	bcf	6,5	;volatile
 13601  1AEB  0008               	return
 13602  1AEC                     i1l156:	
 13603                           ;display-7-segment.c: 157:         case 4 : PORTBbits.RB4=0; break;
 13604                           
 13605  1AEC  1206               	bcf	6,4	;volatile
 13606  1AED  0008               	return
 13607  1AEE                     i1l5574:	
 13608  1AEE  0876               	movf	i1One_Digit_Handler@digit_number,w
 13609  1AEF  00F8               	movwf	??i1_One_Digit_Handler
 13610  1AF0  01F9               	clrf	??i1_One_Digit_Handler+1
 13611                           
 13612                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13613                           ; Switch size 1, requested type "simple"
 13614                           ; Number of cases is 1, Range of values is 0 to 0
 13615                           ; switch strategies available:
 13616                           ; Name         Instructions Cycles
 13617                           ; simple_byte            4     3 (average)
 13618                           ; direct_byte           11     8 (fixed)
 13619                           ; jumptable            260     6 (fixed)
 13620                           ;	Chosen strategy is simple_byte
 13621  1AF1  0879               	movf	??i1_One_Digit_Handler+1,w
 13622  1AF2  3A00               	xorlw	0	; case 0
 13623  1AF3  1903               	skipnz
 13624  1AF4  2AF6               	goto	i1l8498
 13625  1AF5  2B04               	goto	i1l157
 13626  1AF6                     i1l8498:	
 13627                           
 13628                           ; Switch size 1, requested type "simple"
 13629                           ; Number of cases is 4, Range of values is 1 to 4
 13630                           ; switch strategies available:
 13631                           ; Name         Instructions Cycles
 13632                           ; simple_byte           13     7 (average)
 13633                           ; direct_byte           23    11 (fixed)
 13634                           ; jumptable            263     9 (fixed)
 13635                           ;	Chosen strategy is simple_byte
 13636  1AF6  0878               	movf	??i1_One_Digit_Handler,w
 13637  1AF7  3A01               	xorlw	1	; case 1
 13638  1AF8  1903               	skipnz
 13639  1AF9  2AE6               	goto	i1l152
 13640  1AFA  3A03               	xorlw	3	; case 2
 13641  1AFB  1903               	skipnz
 13642  1AFC  2AE8               	goto	i1l154
 13643  1AFD  3A01               	xorlw	1	; case 3
 13644  1AFE  1903               	skipnz
 13645  1AFF  2AEA               	goto	i1l155
 13646  1B00  3A07               	xorlw	7	; case 4
 13647  1B01  1903               	skipnz
 13648  1B02  2AEC               	goto	i1l156
 13649  1B03  2B04               	goto	i1l157
 13650  1B04                     i1l157:	
 13651  1B04  0008               	return
 13652  1B05                     __end_ofi1_One_Digit_Handler:	
 13653                           
 13654                           	psect	text62
 13655  1662                     __ptext62:	
 13656 ;; *************** function i1_Sign_Anode_Data *****************
 13657 ;; Defined at:
 13658 ;;		line 27 in file "display-7-segment.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  sign            1    wreg     unsigned char 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  sign            1    2[COMMON] unsigned char 
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      unsigned char 
 13665 ;; Registers used:
 13666 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13667 ;; Tracked objects:
 13668 ;;		On entry : B00/0
 13669 ;;		On exit  : B00/0
 13670 ;;		Unchanged: B00/0
 13671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13672 ;;      Params:         0       0       0       0       0
 13673 ;;      Locals:         1       0       0       0       0
 13674 ;;      Temps:          2       0       0       0       0
 13675 ;;      Totals:         3       0       0       0       0
 13676 ;;Total ram usage:        3 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; This function calls:
 13679 ;;		Nothing
 13680 ;; This function is called by:
 13681 ;;		i1_One_Digit_Handler
 13682 ;; This function uses a non-reentrant model
 13683 ;;
 13684                           
 13685                           
 13686                           ;psect for function i1_Sign_Anode_Data
 13687  1662                     i1_Sign_Anode_Data:	
 13688                           
 13689                           ;incstack = 0
 13690 ;; hardware stack exceeded
 13691                           ; Regs used in i1_Sign_Anode_Data: [wreg-fsr0h+status,2+status,0]
 13692                           ;i1Sign_Anode_Data@sign stored from wreg
 13693  1662  00F2               	movwf	i1Sign_Anode_Data@sign
 13694                           
 13695                           ;display-7-segment.c: 27: unsigned char Sign_Anode_Data(unsigned char sign);display-7-se
      +                          gment.c: 28: {;display-7-segment.c: 29:     switch (sign)
 13696  1663  2E9C               	goto	i1l5212
 13697  1664                     i1l5026:	
 13698  1664  30FC               	movlw	252
 13699  1665  0008               	return
 13700  1666                     i1l5030:	
 13701  1666  3060               	movlw	96
 13702  1667  0008               	return
 13703  1668                     i1l5034:	
 13704  1668  30DA               	movlw	218
 13705  1669  0008               	return
 13706  166A                     i1l5038:	
 13707  166A  30F2               	movlw	242
 13708  166B  0008               	return
 13709  166C                     i1l5042:	
 13710  166C  3066               	movlw	102
 13711  166D  0008               	return
 13712  166E                     i1l5046:	
 13713  166E  30B6               	movlw	182
 13714  166F  0008               	return
 13715  1670                     i1l5050:	
 13716  1670  30BE               	movlw	190
 13717  1671  0008               	return
 13718  1672                     i1l5054:	
 13719  1672  30E4               	movlw	228
 13720  1673  0008               	return
 13721  1674                     i1l5058:	
 13722  1674  30FE               	movlw	254
 13723  1675  0008               	return
 13724  1676                     i1l5062:	
 13725  1676  30F6               	movlw	246
 13726  1677  0008               	return
 13727  1678                     i1l5106:	
 13728  1678  30EE               	movlw	238
 13729  1679  0008               	return
 13730  167A                     i1l5110:	
 13731  167A  303E               	movlw	62
 13732  167B  0008               	return
 13733  167C                     i1l5114:	
 13734  167C  309C               	movlw	156
 13735  167D  0008               	return
 13736  167E                     i1l5118:	
 13737  167E  307A               	movlw	122
 13738  167F  0008               	return
 13739  1680                     i1l5122:	
 13740  1680  309E               	movlw	158
 13741  1681  0008               	return
 13742  1682                     i1l5126:	
 13743  1682  308E               	movlw	142
 13744  1683  0008               	return
 13745  1684                     i1l5130:	
 13746  1684  30BC               	movlw	188
 13747  1685  0008               	return
 13748  1686                     i1l5134:	
 13749  1686  306E               	movlw	110
 13750  1687  0008               	return
 13751  1688                     i1l5142:	
 13752  1688  3070               	movlw	112
 13753  1689  0008               	return
 13754  168A                     i1l5150:	
 13755  168A  301C               	movlw	28
 13756  168B  0008               	return
 13757  168C                     i1l5154:	
 13758  168C  30EC               	movlw	236
 13759  168D  0008               	return
 13760  168E                     i1l5158:	
 13761  168E  302A               	movlw	42
 13762  168F  0008               	return
 13763  1690                     i1l5166:	
 13764  1690  3073               	movlw	115
 13765  1691  0008               	return
 13766  1692                     i1l5170:	
 13767  1692  300A               	movlw	10
 13768  1693  0008               	return
 13769  1694                     i1l5178:	
 13770  1694  301E               	movlw	30
 13771  1695  0008               	return
 13772  1696                     i1l5182:	
 13773  1696  307C               	movlw	124
 13774  1697  0008               	return
 13775  1698                     i1l5198:	
 13776  1698  3076               	movlw	118
 13777  1699  0008               	return
 13778  169A                     i1l5206:	
 13779  169A  3000               	movlw	0
 13780  169B  0008               	return
 13781  169C                     i1l5212:	
 13782  169C  0872               	movf	i1Sign_Anode_Data@sign,w
 13783  169D  00F0               	movwf	??i1_Sign_Anode_Data
 13784  169E  01F1               	clrf	??i1_Sign_Anode_Data+1
 13785                           
 13786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13787                           ; Switch size 1, requested type "simple"
 13788                           ; Number of cases is 1, Range of values is 0 to 0
 13789                           ; switch strategies available:
 13790                           ; Name         Instructions Cycles
 13791                           ; simple_byte            4     3 (average)
 13792                           ; direct_byte           11     8 (fixed)
 13793                           ; jumptable            260     6 (fixed)
 13794                           ;	Chosen strategy is simple_byte
 13795  169F  0871               	movf	??i1_Sign_Anode_Data+1,w
 13796  16A0  3A00               	xorlw	0	; case 0
 13797  16A1  1903               	skipnz
 13798  16A2  2EA4               	goto	i1l8500
 13799  16A3  2E9A               	goto	i1l5206
 13800  16A4                     i1l8500:	
 13801                           
 13802                           ; Switch size 1, requested type "simple"
 13803                           ; Number of cases is 46, Range of values is 0 to 122
 13804                           ; switch strategies available:
 13805                           ; Name         Instructions Cycles
 13806                           ; simple_byte          139    70 (average)
 13807                           ; jumptable            260     6 (fixed)
 13808                           ;	Chosen strategy is simple_byte
 13809  16A4  0870               	movf	??i1_Sign_Anode_Data,w
 13810  16A5  3A00               	xorlw	0	; case 0
 13811  16A6  1903               	skipnz
 13812  16A7  2E64               	goto	i1l5026
 13813  16A8  3A01               	xorlw	1	; case 1
 13814  16A9  1903               	skipnz
 13815  16AA  2E66               	goto	i1l5030
 13816  16AB  3A03               	xorlw	3	; case 2
 13817  16AC  1903               	skipnz
 13818  16AD  2E68               	goto	i1l5034
 13819  16AE  3A01               	xorlw	1	; case 3
 13820  16AF  1903               	skipnz
 13821  16B0  2E6A               	goto	i1l5038
 13822  16B1  3A07               	xorlw	7	; case 4
 13823  16B2  1903               	skipnz
 13824  16B3  2E6C               	goto	i1l5042
 13825  16B4  3A01               	xorlw	1	; case 5
 13826  16B5  1903               	skipnz
 13827  16B6  2E6E               	goto	i1l5046
 13828  16B7  3A03               	xorlw	3	; case 6
 13829  16B8  1903               	skipnz
 13830  16B9  2E70               	goto	i1l5050
 13831  16BA  3A01               	xorlw	1	; case 7
 13832  16BB  1903               	skipnz
 13833  16BC  2E72               	goto	i1l5054
 13834  16BD  3A0F               	xorlw	15	; case 8
 13835  16BE  1903               	skipnz
 13836  16BF  2E74               	goto	i1l5058
 13837  16C0  3A01               	xorlw	1	; case 9
 13838  16C1  1903               	skipnz
 13839  16C2  2E76               	goto	i1l5062
 13840  16C3  3A23               	xorlw	35	; case 42
 13841  16C4  1903               	skipnz
 13842  16C5  2E9A               	goto	i1l5206
 13843  16C6  3A1A               	xorlw	26	; case 48
 13844  16C7  1903               	skipnz
 13845  16C8  2E64               	goto	i1l5026
 13846  16C9  3A01               	xorlw	1	; case 49
 13847  16CA  1903               	skipnz
 13848  16CB  2E66               	goto	i1l5030
 13849  16CC  3A03               	xorlw	3	; case 50
 13850  16CD  1903               	skipnz
 13851  16CE  2E68               	goto	i1l5034
 13852  16CF  3A01               	xorlw	1	; case 51
 13853  16D0  1903               	skipnz
 13854  16D1  2E6A               	goto	i1l5038
 13855  16D2  3A07               	xorlw	7	; case 52
 13856  16D3  1903               	skipnz
 13857  16D4  2E6C               	goto	i1l5042
 13858  16D5  3A01               	xorlw	1	; case 53
 13859  16D6  1903               	skipnz
 13860  16D7  2E6E               	goto	i1l5046
 13861  16D8  3A03               	xorlw	3	; case 54
 13862  16D9  1903               	skipnz
 13863  16DA  2E70               	goto	i1l5050
 13864  16DB  3A01               	xorlw	1	; case 55
 13865  16DC  1903               	skipnz
 13866  16DD  2E72               	goto	i1l5054
 13867  16DE  3A0F               	xorlw	15	; case 56
 13868  16DF  1903               	skipnz
 13869  16E0  2E74               	goto	i1l5058
 13870  16E1  3A01               	xorlw	1	; case 57
 13871  16E2  1903               	skipnz
 13872  16E3  2E76               	goto	i1l5062
 13873  16E4  3A58               	xorlw	88	; case 97
 13874  16E5  1903               	skipnz
 13875  16E6  2E78               	goto	i1l5106
 13876  16E7  3A03               	xorlw	3	; case 98
 13877  16E8  1903               	skipnz
 13878  16E9  2E7A               	goto	i1l5110
 13879  16EA  3A01               	xorlw	1	; case 99
 13880  16EB  1903               	skipnz
 13881  16EC  2E7C               	goto	i1l5114
 13882  16ED  3A07               	xorlw	7	; case 100
 13883  16EE  1903               	skipnz
 13884  16EF  2E7E               	goto	i1l5118
 13885  16F0  3A01               	xorlw	1	; case 101
 13886  16F1  1903               	skipnz
 13887  16F2  2E80               	goto	i1l5122
 13888  16F3  3A03               	xorlw	3	; case 102
 13889  16F4  1903               	skipnz
 13890  16F5  2E82               	goto	i1l5126
 13891  16F6  3A01               	xorlw	1	; case 103
 13892  16F7  1903               	skipnz
 13893  16F8  2E84               	goto	i1l5130
 13894  16F9  3A0F               	xorlw	15	; case 104
 13895  16FA  1903               	skipnz
 13896  16FB  2E86               	goto	i1l5134
 13897  16FC  3A01               	xorlw	1	; case 105
 13898  16FD  1903               	skipnz
 13899  16FE  2E66               	goto	i1l5030
 13900  16FF  3A03               	xorlw	3	; case 106
 13901  1700  1903               	skipnz
 13902  1701  2E88               	goto	i1l5142
 13903  1702  3A01               	xorlw	1	; case 107
 13904  1703  1903               	skipnz
 13905  1704  2E86               	goto	i1l5134
 13906  1705  3A07               	xorlw	7	; case 108
 13907  1706  1903               	skipnz
 13908  1707  2E8A               	goto	i1l5150
 13909  1708  3A01               	xorlw	1	; case 109
 13910  1709  1903               	skipnz
 13911  170A  2E8C               	goto	i1l5154
 13912  170B  3A03               	xorlw	3	; case 110
 13913  170C  1903               	skipnz
 13914  170D  2E8E               	goto	i1l5158
 13915  170E  3A01               	xorlw	1	; case 111
 13916  170F  1903               	skipnz
 13917  1710  2E64               	goto	i1l5026
 13918  1711  3A1F               	xorlw	31	; case 112
 13919  1712  1903               	skipnz
 13920  1713  2E90               	goto	i1l5166
 13921  1714  3A02               	xorlw	2	; case 114
 13922  1715  1903               	skipnz
 13923  1716  2E92               	goto	i1l5170
 13924  1717  3A01               	xorlw	1	; case 115
 13925  1718  1903               	skipnz
 13926  1719  2E6E               	goto	i1l5046
 13927  171A  3A07               	xorlw	7	; case 116
 13928  171B  1903               	skipnz
 13929  171C  2E94               	goto	i1l5178
 13930  171D  3A01               	xorlw	1	; case 117
 13931  171E  1903               	skipnz
 13932  171F  2E96               	goto	i1l5182
 13933  1720  3A03               	xorlw	3	; case 118
 13934  1721  1903               	skipnz
 13935  1722  2E96               	goto	i1l5182
 13936  1723  3A01               	xorlw	1	; case 119
 13937  1724  1903               	skipnz
 13938  1725  2E96               	goto	i1l5182
 13939  1726  3A0F               	xorlw	15	; case 120
 13940  1727  1903               	skipnz
 13941  1728  2E86               	goto	i1l5134
 13942  1729  3A01               	xorlw	1	; case 121
 13943  172A  1903               	skipnz
 13944  172B  2E98               	goto	i1l5198
 13945  172C  3A03               	xorlw	3	; case 122
 13946  172D  1903               	skipnz
 13947  172E  2E68               	goto	i1l5034
 13948  172F  2E9A               	goto	i1l5206
 13949  1730  0008               	return
 13950  1731                     __end_ofi1_Sign_Anode_Data:	
 13951                           
 13952                           	psect	text63
 13953  1F3A                     __ptext63:	
 13954 ;; *************** function i1_Set_Anode_Outputs *****************
 13955 ;; Defined at:
 13956 ;;		line 161 in file "display-7-segment.c"
 13957 ;; Parameters:    Size  Location     Type
 13958 ;;  sign            1    wreg     unsigned char 
 13959 ;;  decimal_poin    1    3[COMMON] unsigned char 
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  sign            1    5[COMMON] unsigned char 
 13962 ;; Return value:  Size  Location     Type
 13963 ;;                  1    wreg      void 
 13964 ;; Registers used:
 13965 ;;		wreg, status,2, status,0
 13966 ;; Tracked objects:
 13967 ;;		On entry : B00/0
 13968 ;;		On exit  : B00/0
 13969 ;;		Unchanged: 800/0
 13970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13971 ;;      Params:         1       0       0       0       0
 13972 ;;      Locals:         1       0       0       0       0
 13973 ;;      Temps:          1       0       0       0       0
 13974 ;;      Totals:         3       0       0       0       0
 13975 ;;Total ram usage:        3 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; This function calls:
 13978 ;;		Nothing
 13979 ;; This function is called by:
 13980 ;;		i1_One_Digit_Handler
 13981 ;; This function uses a non-reentrant model
 13982 ;;
 13983                           
 13984                           
 13985                           ;psect for function i1_Set_Anode_Outputs
 13986  1F3A                     i1_Set_Anode_Outputs:	
 13987                           
 13988                           ;incstack = 0
 13989 ;; hardware stack exceeded
 13990                           ; Regs used in i1_Set_Anode_Outputs: [wreg+status,2+status,0]
 13991                           ;i1Set_Anode_Outputs@sign stored from wreg
 13992  1F3A  00F5               	movwf	i1Set_Anode_Outputs@sign
 13993                           
 13994                           ;display-7-segment.c: 161: void Set_Anode_Outputs(unsigned char sign, unsigned char deci
      +                          mal_point);display-7-segment.c: 162: {;display-7-segment.c: 164:     if(sign>>7 & 1)
 13995  1F3B  0875               	movf	i1Set_Anode_Outputs@sign,w
 13996  1F3C  00F4               	movwf	??i1_Set_Anode_Outputs
 13997  1F3D  3007               	movlw	7
 13998  1F3E                     u477_25:	
 13999  1F3E  1003               	clrc
 14000  1F3F  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 14001  1F40  3EFF               	addlw	-1
 14002  1F41  1D03               	skipz
 14003  1F42  2F3E               	goto	u477_25
 14004  1F43  1C74               	btfss	??i1_Set_Anode_Outputs,0
 14005  1F44  2F47               	goto	i1l160
 14006                           
 14007                           ;display-7-segment.c: 165:     {;display-7-segment.c: 166:         PORTAbits.RA6=1;
 14008  1F45  1705               	bsf	5,6	;volatile
 14009                           
 14010                           ;display-7-segment.c: 167:     }else
 14011  1F46  2F48               	goto	i1l5228
 14012  1F47                     i1l160:	
 14013                           
 14014                           ;display-7-segment.c: 168:     {;display-7-segment.c: 169:         PORTAbits.RA6=0;
 14015  1F47  1305               	bcf	5,6	;volatile
 14016  1F48                     i1l5228:	
 14017                           
 14018                           ;display-7-segment.c: 172:     if(sign>>6 & 1)
 14019  1F48  0875               	movf	i1Set_Anode_Outputs@sign,w
 14020  1F49  00F4               	movwf	??i1_Set_Anode_Outputs
 14021  1F4A  3006               	movlw	6
 14022  1F4B                     u479_25:	
 14023  1F4B  1003               	clrc
 14024  1F4C  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 14025  1F4D  3EFF               	addlw	-1
 14026  1F4E  1D03               	skipz
 14027  1F4F  2F4B               	goto	u479_25
 14028  1F50  1C74               	btfss	??i1_Set_Anode_Outputs,0
 14029  1F51  2F54               	goto	i1l162
 14030                           
 14031                           ;display-7-segment.c: 173:     {;display-7-segment.c: 174:         PORTAbits.RA7=1;
 14032  1F52  1785               	bsf	5,7	;volatile
 14033                           
 14034                           ;display-7-segment.c: 175:     }else
 14035  1F53  2F55               	goto	i1l5232
 14036  1F54                     i1l162:	
 14037                           
 14038                           ;display-7-segment.c: 176:     {;display-7-segment.c: 177:         PORTAbits.RA7=0;
 14039  1F54  1385               	bcf	5,7	;volatile
 14040  1F55                     i1l5232:	
 14041                           
 14042                           ;display-7-segment.c: 180:     if(sign>>5 & 1)
 14043  1F55  0875               	movf	i1Set_Anode_Outputs@sign,w
 14044  1F56  00F4               	movwf	??i1_Set_Anode_Outputs
 14045  1F57  3005               	movlw	5
 14046  1F58                     u481_25:	
 14047  1F58  1003               	clrc
 14048  1F59  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 14049  1F5A  3EFF               	addlw	-1
 14050  1F5B  1D03               	skipz
 14051  1F5C  2F58               	goto	u481_25
 14052  1F5D  1C74               	btfss	??i1_Set_Anode_Outputs,0
 14053  1F5E  2F61               	goto	i1l164
 14054                           
 14055                           ;display-7-segment.c: 181:     {;display-7-segment.c: 182:         PORTAbits.RA5=1;
 14056  1F5F  1685               	bsf	5,5	;volatile
 14057                           
 14058                           ;display-7-segment.c: 183:     }else
 14059  1F60  2F62               	goto	i1l5236
 14060  1F61                     i1l164:	
 14061                           
 14062                           ;display-7-segment.c: 184:     {;display-7-segment.c: 185:         PORTAbits.RA5=0;
 14063  1F61  1285               	bcf	5,5	;volatile
 14064  1F62                     i1l5236:	
 14065                           
 14066                           ;display-7-segment.c: 188:     if(sign>>4 & 1)
 14067  1F62  0875               	movf	i1Set_Anode_Outputs@sign,w
 14068  1F63  00F4               	movwf	??i1_Set_Anode_Outputs
 14069  1F64  3004               	movlw	4
 14070  1F65                     u483_25:	
 14071  1F65  1003               	clrc
 14072  1F66  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 14073  1F67  3EFF               	addlw	-1
 14074  1F68  1D03               	skipz
 14075  1F69  2F65               	goto	u483_25
 14076  1F6A  1C74               	btfss	??i1_Set_Anode_Outputs,0
 14077  1F6B  2F6E               	goto	i1l166
 14078                           
 14079                           ;display-7-segment.c: 189:     {;display-7-segment.c: 190:         PORTAbits.RA4=1;
 14080  1F6C  1605               	bsf	5,4	;volatile
 14081                           
 14082                           ;display-7-segment.c: 191:     }else
 14083  1F6D  2F6F               	goto	i1l5240
 14084  1F6E                     i1l166:	
 14085                           
 14086                           ;display-7-segment.c: 192:     {;display-7-segment.c: 193:         PORTAbits.RA4=0;
 14087  1F6E  1205               	bcf	5,4	;volatile
 14088  1F6F                     i1l5240:	
 14089                           
 14090                           ;display-7-segment.c: 196:     if(sign>>3 & 1)
 14091  1F6F  0875               	movf	i1Set_Anode_Outputs@sign,w
 14092  1F70  00F4               	movwf	??i1_Set_Anode_Outputs
 14093  1F71  3003               	movlw	3
 14094  1F72                     u485_25:	
 14095  1F72  1003               	clrc
 14096  1F73  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 14097  1F74  3EFF               	addlw	-1
 14098  1F75  1D03               	skipz
 14099  1F76  2F72               	goto	u485_25
 14100  1F77  1C74               	btfss	??i1_Set_Anode_Outputs,0
 14101  1F78  2F7B               	goto	i1l168
 14102                           
 14103                           ;display-7-segment.c: 197:     {;display-7-segment.c: 198:         PORTAbits.RA3=1;
 14104  1F79  1585               	bsf	5,3	;volatile
 14105                           
 14106                           ;display-7-segment.c: 199:     }else
 14107  1F7A  2F7C               	goto	i1l5244
 14108  1F7B                     i1l168:	
 14109                           
 14110                           ;display-7-segment.c: 200:     {;display-7-segment.c: 201:         PORTAbits.RA3=0;
 14111  1F7B  1185               	bcf	5,3	;volatile
 14112  1F7C                     i1l5244:	
 14113                           
 14114                           ;display-7-segment.c: 204:     if(sign>>2 & 1)
 14115  1F7C  0875               	movf	i1Set_Anode_Outputs@sign,w
 14116  1F7D  00F4               	movwf	??i1_Set_Anode_Outputs
 14117  1F7E  3002               	movlw	2
 14118  1F7F                     u487_25:	
 14119  1F7F  1003               	clrc
 14120  1F80  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 14121  1F81  3EFF               	addlw	-1
 14122  1F82  1D03               	skipz
 14123  1F83  2F7F               	goto	u487_25
 14124  1F84  1C74               	btfss	??i1_Set_Anode_Outputs,0
 14125  1F85  2F88               	goto	i1l170
 14126                           
 14127                           ;display-7-segment.c: 205:     {;display-7-segment.c: 206:         PORTAbits.RA2=1;
 14128  1F86  1505               	bsf	5,2	;volatile
 14129                           
 14130                           ;display-7-segment.c: 207:     }else
 14131  1F87  2F89               	goto	i1l5248
 14132  1F88                     i1l170:	
 14133                           
 14134                           ;display-7-segment.c: 208:     {;display-7-segment.c: 209:         PORTAbits.RA2=0;
 14135  1F88  1105               	bcf	5,2	;volatile
 14136  1F89                     i1l5248:	
 14137                           
 14138                           ;display-7-segment.c: 212:     if(sign>>1 & 1)
 14139  1F89  0875               	movf	i1Set_Anode_Outputs@sign,w
 14140  1F8A  00F4               	movwf	??i1_Set_Anode_Outputs
 14141  1F8B  3001               	movlw	1
 14142  1F8C                     u489_25:	
 14143  1F8C  1003               	clrc
 14144  1F8D  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 14145  1F8E  3EFF               	addlw	-1
 14146  1F8F  1D03               	skipz
 14147  1F90  2F8C               	goto	u489_25
 14148  1F91  1C74               	btfss	??i1_Set_Anode_Outputs,0
 14149  1F92  2F95               	goto	i1l172
 14150                           
 14151                           ;display-7-segment.c: 213:     {;display-7-segment.c: 214:         PORTAbits.RA1=1;
 14152  1F93  1485               	bsf	5,1	;volatile
 14153                           
 14154                           ;display-7-segment.c: 215:     }else
 14155  1F94  2F96               	goto	i1l5252
 14156  1F95                     i1l172:	
 14157                           
 14158                           ;display-7-segment.c: 216:     {;display-7-segment.c: 217:         PORTAbits.RA1=0;
 14159  1F95  1085               	bcf	5,1	;volatile
 14160  1F96                     i1l5252:	
 14161                           
 14162                           ;display-7-segment.c: 220:     if(decimal_point==1)
 14163  1F96  0373               	decf	i1Set_Anode_Outputs@decimal_point,w
 14164  1F97  1D03               	btfss	3,2
 14165  1F98  2F9B               	goto	i1l174
 14166                           
 14167                           ;display-7-segment.c: 221:     {;display-7-segment.c: 222:         PORTAbits.RA0=1;
 14168  1F99  1405               	bsf	5,0	;volatile
 14169                           
 14170                           ;display-7-segment.c: 223:     }else
 14171  1F9A  0008               	return
 14172  1F9B                     i1l174:	
 14173                           
 14174                           ;display-7-segment.c: 224:     {;display-7-segment.c: 225:         PORTAbits.RA0=0;
 14175  1F9B  1005               	bcf	5,0	;volatile
 14176  1F9C  0008               	return
 14177  1F9D                     __end_ofi1_Set_Anode_Outputs:	
 14178                           
 14179                           	psect	text64
 14180  1858                     __ptext64:	
 14181 ;; *************** function i1_Disable_All_Digits *****************
 14182 ;; Defined at:
 14183 ;;		line 86 in file "display-7-segment.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;		None
 14186 ;; Auto vars:     Size  Location     Type
 14187 ;;		None
 14188 ;; Return value:  Size  Location     Type
 14189 ;;                  1    wreg      void 
 14190 ;; Registers used:
 14191 ;;		None
 14192 ;; Tracked objects:
 14193 ;;		On entry : B00/0
 14194 ;;		On exit  : B00/0
 14195 ;;		Unchanged: 800/0
 14196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14197 ;;      Params:         0       0       0       0       0
 14198 ;;      Locals:         0       0       0       0       0
 14199 ;;      Temps:          0       0       0       0       0
 14200 ;;      Totals:         0       0       0       0       0
 14201 ;;Total ram usage:        0 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; This function calls:
 14204 ;;		Nothing
 14205 ;; This function is called by:
 14206 ;;		i1_One_Digit_Handler
 14207 ;; This function uses a non-reentrant model
 14208 ;;
 14209                           
 14210                           
 14211                           ;psect for function i1_Disable_All_Digits
 14212  1858                     i1_Disable_All_Digits:	
 14213                           
 14214                           ;display-7-segment.c: 88:     PORTBbits.RB7=1;
 14215                           
 14216                           ;incstack = 0
 14217 ;; hardware stack exceeded
 14218                           ; Regs used in i1_Disable_All_Digits: []
 14219  1858  1786               	bsf	6,7	;volatile
 14220                           
 14221                           ;display-7-segment.c: 89:     PORTBbits.RB6=1;
 14222  1859  1706               	bsf	6,6	;volatile
 14223                           
 14224                           ;display-7-segment.c: 90:     PORTBbits.RB5=1;
 14225  185A  1686               	bsf	6,5	;volatile
 14226                           
 14227                           ;display-7-segment.c: 91:     PORTBbits.RB4=1;
 14228  185B  1606               	bsf	6,4	;volatile
 14229  185C  0008               	return
 14230  185D                     __end_ofi1_Disable_All_Digits:	
 14231                           
 14232                           	psect	text65
 14233  0A0B                     __ptext65:	
 14234 ;; *************** function _Manchester_Decode *****************
 14235 ;; Defined at:
 14236 ;;		line 43 in file "manchester_decode.c"
 14237 ;; Parameters:    Size  Location     Type
 14238 ;;  edge_dir        1    wreg     PTR unsigned char 
 14239 ;;		 -> ISR@edge_dir(1), 
 14240 ;;  pulse_time      1    3[COMMON] PTR unsigned int 
 14241 ;;		 -> ISR@pulse_time(2), 
 14242 ;; Auto vars:     Size  Location     Type
 14243 ;;  edge_dir        1    8[COMMON] PTR unsigned char 
 14244 ;;		 -> ISR@edge_dir(1), 
 14245 ;; Return value:  Size  Location     Type
 14246 ;;                  1    wreg      void 
 14247 ;; Registers used:
 14248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14249 ;; Tracked objects:
 14250 ;;		On entry : 300/0
 14251 ;;		On exit  : 300/100
 14252 ;;		Unchanged: 0/0
 14253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14254 ;;      Params:         1       0       0       0       0
 14255 ;;      Locals:         1       0       0       0       0
 14256 ;;      Temps:          4       0       0       0       0
 14257 ;;      Totals:         6       0       0       0       0
 14258 ;;Total ram usage:        6 bytes
 14259 ;; Hardware stack levels used:    1
 14260 ;; Hardware stack levels required when called:    1
 14261 ;; This function calls:
 14262 ;;		i1_Frame_Buffer
 14263 ;; This function is called by:
 14264 ;;		_ISR
 14265 ;; This function uses a non-reentrant model
 14266 ;;
 14267                           
 14268                           
 14269                           ;psect for function _Manchester_Decode
 14270  0A0B                     _Manchester_Decode:	
 14271                           
 14272                           ;incstack = 0
 14273 ;; hardware stack exceeded
 14274                           ; Regs used in _Manchester_Decode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14275                           ;Manchester_Decode@edge_dir stored from wreg
 14276  0A0B  00F8               	movwf	Manchester_Decode@edge_dir
 14277                           
 14278                           ;manchester_decode.c: 43: void Manchester_Decode(unsigned char *edge_dir, unsigned int *
      +                          pulse_time);manchester_decode.c: 44: {;manchester_decode.c: 45:     static unsigned char
      +                           decoded_byte, bit_pos, data_counter, start_data_flag;;manchester_decode.c: 46:     stat
      +                          ic unsigned char next_edge_also_T_flag,sync_flag;;manchester_decode.c: 48:  if(sync_flag
      +                          ==0)
 14279  0A0C  1683               	bsf	3,5	;RP0=1, select bank1
 14280  0A0D  0825               	movf	Manchester_Decode@sync_flag^(0+128),w
 14281  0A0E  1D03               	btfss	3,2
 14282  0A0F  2A34               	goto	i1l5896
 14283                           
 14284                           ;manchester_decode.c: 49:     {;manchester_decode.c: 52:         if((*pulse_time>((80000
      +                          00/4)/300*2)*80/100) && (*pulse_time<((8000000/4)/300*2)*120/100))
 14285  0A10  0873               	movf	Manchester_Decode@pulse_time,w
 14286  0A11  0084               	movwf	4
 14287  0A12  1383               	bcf	3,7	;select IRP bank0
 14288  0A13  0800               	movf	0,w
 14289  0A14  00F4               	movwf	??_Manchester_Decode
 14290  0A15  0A84               	incf	4,f
 14291  0A16  0800               	movf	0,w
 14292  0A17  00F5               	movwf	??_Manchester_Decode+1
 14293  0A18  3029               	movlw	41
 14294  0A19  0275               	subwf	??_Manchester_Decode+1,w
 14295  0A1A  30AA               	movlw	170
 14296  0A1B  1903               	skipnz
 14297  0A1C  0274               	subwf	??_Manchester_Decode,w
 14298  0A1D  1C03               	skipc
 14299  0A1E  0008               	return
 14300  0A1F  0873               	movf	Manchester_Decode@pulse_time,w
 14301  0A20  0084               	movwf	4
 14302  0A21  0800               	movf	0,w
 14303  0A22  00F4               	movwf	??_Manchester_Decode
 14304  0A23  0A84               	incf	4,f
 14305  0A24  0800               	movf	0,w
 14306  0A25  00F5               	movwf	??_Manchester_Decode+1
 14307  0A26  303E               	movlw	62
 14308  0A27  0275               	subwf	??_Manchester_Decode+1,w
 14309  0A28  307E               	movlw	126
 14310  0A29  1903               	skipnz
 14311  0A2A  0274               	subwf	??_Manchester_Decode,w
 14312  0A2B  1803               	skipnc
 14313  0A2C  0008               	return
 14314                           
 14315                           ;manchester_decode.c: 53:         {;manchester_decode.c: 54:             next_edge_also_
      +                          T_flag=0;
 14316  0A2D  01A6               	clrf	Manchester_Decode@next_edge_also_T_flag^(0+128)
 14317                           
 14318                           ;manchester_decode.c: 55:             decoded_byte=0;
 14319  0A2E  01D0               	clrf	Manchester_Decode@decoded_byte^(0+128)
 14320                           
 14321                           ;manchester_decode.c: 56:             bit_pos=0;
 14322  0A2F  01A9               	clrf	Manchester_Decode@bit_pos^(0+128)
 14323                           
 14324                           ;manchester_decode.c: 57:             sync_flag=1;
 14325  0A30  01A5               	clrf	Manchester_Decode@sync_flag^(0+128)
 14326  0A31  0AA5               	incf	Manchester_Decode@sync_flag^(0+128),f
 14327                           
 14328                           ;manchester_decode.c: 58:             data_counter=0;
 14329  0A32  01A8               	clrf	Manchester_Decode@data_counter^(0+128)
 14330  0A33  0008               	return
 14331  0A34                     i1l5896:	
 14332  0A34  0825               	movf	Manchester_Decode@sync_flag^(0+128),w
 14333  0A35  1903               	btfsc	3,2
 14334  0A36  0008               	return
 14335                           
 14336                           ;manchester_decode.c: 68:     {;manchester_decode.c: 70:         if(next_edge_also_T_fla
      +                          g==0)
 14337  0A37  0826               	movf	Manchester_Decode@next_edge_also_T_flag^(0+128),w
 14338  0A38  1D03               	btfss	3,2
 14339  0A39  2A9F               	goto	i1l5922
 14340                           
 14341                           ;manchester_decode.c: 71:         {;manchester_decode.c: 72:             if((*pulse_time
      +                          >(8000000/4)/300*80/100) &&
 14342  0A3A  0873               	movf	Manchester_Decode@pulse_time,w
 14343  0A3B  0084               	movwf	4
 14344  0A3C  1383               	bcf	3,7	;select IRP bank0
 14345  0A3D  0800               	movf	0,w
 14346  0A3E  00F4               	movwf	??_Manchester_Decode
 14347  0A3F  0A84               	incf	4,f
 14348  0A40  0800               	movf	0,w
 14349  0A41  00F5               	movwf	??_Manchester_Decode+1
 14350  0A42  3014               	movlw	20
 14351  0A43  0275               	subwf	??_Manchester_Decode+1,w
 14352  0A44  30D5               	movlw	213
 14353  0A45  1903               	skipnz
 14354  0A46  0274               	subwf	??_Manchester_Decode,w
 14355  0A47  1C03               	skipc
 14356  0A48  2A5A               	goto	i1l5908
 14357  0A49  0873               	movf	Manchester_Decode@pulse_time,w
 14358  0A4A  0084               	movwf	4
 14359  0A4B  0800               	movf	0,w
 14360  0A4C  00F4               	movwf	??_Manchester_Decode
 14361  0A4D  0A84               	incf	4,f
 14362  0A4E  0800               	movf	0,w
 14363  0A4F  00F5               	movwf	??_Manchester_Decode+1
 14364  0A50  301F               	movlw	31
 14365  0A51  0275               	subwf	??_Manchester_Decode+1,w
 14366  0A52  303F               	movlw	63
 14367  0A53  1903               	skipnz
 14368  0A54  0274               	subwf	??_Manchester_Decode,w
 14369  0A55  1803               	skipnc
 14370  0A56  2A5A               	goto	i1l5908
 14371                           
 14372                           ;manchester_decode.c: 74:             {;manchester_decode.c: 75:                     nex
      +                          t_edge_also_T_flag=1;
 14373  0A57  01A6               	clrf	Manchester_Decode@next_edge_also_T_flag^(0+128)
 14374  0A58  0AA6               	incf	Manchester_Decode@next_edge_also_T_flag^(0+128),f
 14375                           
 14376                           ;manchester_decode.c: 76:                     return;
 14377  0A59  0008               	return
 14378  0A5A                     i1l5908:	
 14379  0A5A  0873               	movf	Manchester_Decode@pulse_time,w
 14380  0A5B  0084               	movwf	4
 14381  0A5C  0800               	movf	0,w
 14382  0A5D  00F4               	movwf	??_Manchester_Decode
 14383  0A5E  0A84               	incf	4,f
 14384  0A5F  0800               	movf	0,w
 14385  0A60  00F5               	movwf	??_Manchester_Decode+1
 14386  0A61  3029               	movlw	41
 14387  0A62  0275               	subwf	??_Manchester_Decode+1,w
 14388  0A63  30AA               	movlw	170
 14389  0A64  1903               	skipnz
 14390  0A65  0274               	subwf	??_Manchester_Decode,w
 14391  0A66  1C03               	skipc
 14392  0A67  2A9D               	goto	i1l5918
 14393  0A68  0873               	movf	Manchester_Decode@pulse_time,w
 14394  0A69  0084               	movwf	4
 14395  0A6A  0800               	movf	0,w
 14396  0A6B  00F4               	movwf	??_Manchester_Decode
 14397  0A6C  0A84               	incf	4,f
 14398  0A6D  0800               	movf	0,w
 14399  0A6E  00F5               	movwf	??_Manchester_Decode+1
 14400  0A6F  303E               	movlw	62
 14401  0A70  0275               	subwf	??_Manchester_Decode+1,w
 14402  0A71  307E               	movlw	126
 14403  0A72  1903               	skipnz
 14404  0A73  0274               	subwf	??_Manchester_Decode,w
 14405  0A74  1803               	skipnc
 14406  0A75  2A9D               	goto	i1l5918
 14407                           
 14408                           ;manchester_decode.c: 80:             {;manchester_decode.c: 81:                 if(*edg
      +                          e_dir==0)
 14409  0A76  0878               	movf	Manchester_Decode@edge_dir,w
 14410  0A77  0084               	movwf	4
 14411  0A78  0800               	movf	0,w
 14412  0A79  1D03               	btfss	3,2
 14413  0A7A  2A88               	goto	i1l5916
 14414                           
 14415                           ;manchester_decode.c: 82:                 {;manchester_decode.c: 83:                    
      +                           decoded_byte^=(0x80>>bit_pos);
 14416  0A7B  0A29               	incf	Manchester_Decode@bit_pos^(0+128),w
 14417  0A7C  00F4               	movwf	??_Manchester_Decode
 14418  0A7D  3080               	movlw	128
 14419  0A7E  00F5               	movwf	??_Manchester_Decode+1
 14420  0A7F  3000               	movlw	0
 14421  0A80  00F6               	movwf	??_Manchester_Decode+2
 14422  0A81  2A85               	goto	u550_24
 14423  0A82                     u550_25:	
 14424  0A82  0D76               	rlf	??_Manchester_Decode+2,w
 14425  0A83  0CF6               	rrf	??_Manchester_Decode+2,f
 14426  0A84  0CF5               	rrf	??_Manchester_Decode+1,f
 14427  0A85                     u550_24:	
 14428  0A85  0BF4               	decfsz	??_Manchester_Decode,f
 14429  0A86  2A82               	goto	u550_25
 14430  0A87  2A92               	goto	L20
 14431  0A88                     i1l5916:	
 14432                           ;manchester_decode.c: 84:                 }else
 14433                           
 14434                           
 14435                           ;manchester_decode.c: 85:                 {;manchester_decode.c: 86:                    
      +                           decoded_byte^=(0x00>>bit_pos);
 14436  0A88  0A29               	incf	Manchester_Decode@bit_pos^(0+128),w
 14437  0A89  00F4               	movwf	??_Manchester_Decode
 14438  0A8A  01F5               	clrf	??_Manchester_Decode+1
 14439  0A8B  01F6               	clrf	??_Manchester_Decode+2
 14440  0A8C  2A90               	goto	u551_24
 14441  0A8D                     u551_25:	
 14442  0A8D  0D76               	rlf	??_Manchester_Decode+2,w
 14443  0A8E  0CF6               	rrf	??_Manchester_Decode+2,f
 14444  0A8F  0CF5               	rrf	??_Manchester_Decode+1,f
 14445  0A90                     u551_24:	
 14446  0A90  0BF4               	decfsz	??_Manchester_Decode,f
 14447  0A91  2A8D               	goto	u551_25
 14448  0A92                     L20:	
 14449  0A92  0875               	movf	??_Manchester_Decode+1,w
 14450  0A93  00F7               	movwf	??_Manchester_Decode+3
 14451  0A94  0877               	movf	??_Manchester_Decode+3,w
 14452  0A95  1683               	bsf	3,5	;RP0=1, select bank1
 14453  0A96  1303               	bcf	3,6	;RP1=0, select bank1
 14454  0A97  06D0               	xorwf	Manchester_Decode@decoded_byte^(0+128),f
 14455                           
 14456                           ;manchester_decode.c: 88:                 bit_pos++;
 14457                           
 14458                           ;manchester_decode.c: 87:                 }
 14459  0A98  3001               	movlw	1
 14460  0A99  00F4               	movwf	??_Manchester_Decode
 14461  0A9A  0874               	movf	??_Manchester_Decode,w
 14462  0A9B  07A9               	addwf	Manchester_Decode@bit_pos^(0+128),f
 14463                           
 14464                           ;manchester_decode.c: 90:             }else
 14465  0A9C  2AE3               	goto	i1l5938
 14466  0A9D                     i1l5918:	
 14467                           
 14468                           ;manchester_decode.c: 91:             {;manchester_decode.c: 93:                 sync_fl
      +                          ag=0;
 14469  0A9D  01A5               	clrf	Manchester_Decode@sync_flag^(0+128)
 14470  0A9E  0008               	return
 14471  0A9F                     i1l5922:	
 14472                           
 14473                           ;manchester_decode.c: 98:         {;manchester_decode.c: 99:             if((*pulse_time
      +                          >(8000000/4)/300*80/100) &&
 14474  0A9F  0873               	movf	Manchester_Decode@pulse_time,w
 14475  0AA0  0084               	movwf	4
 14476  0AA1  1383               	bcf	3,7	;select IRP bank0
 14477  0AA2  0800               	movf	0,w
 14478  0AA3  00F4               	movwf	??_Manchester_Decode
 14479  0AA4  0A84               	incf	4,f
 14480  0AA5  0800               	movf	0,w
 14481  0AA6  00F5               	movwf	??_Manchester_Decode+1
 14482  0AA7  3014               	movlw	20
 14483  0AA8  0275               	subwf	??_Manchester_Decode+1,w
 14484  0AA9  30D5               	movlw	213
 14485  0AAA  1903               	skipnz
 14486  0AAB  0274               	subwf	??_Manchester_Decode,w
 14487  0AAC  1C03               	skipc
 14488  0AAD  2A9D               	goto	i1l5918
 14489  0AAE  0873               	movf	Manchester_Decode@pulse_time,w
 14490  0AAF  0084               	movwf	4
 14491  0AB0  0800               	movf	0,w
 14492  0AB1  00F4               	movwf	??_Manchester_Decode
 14493  0AB2  0A84               	incf	4,f
 14494  0AB3  0800               	movf	0,w
 14495  0AB4  00F5               	movwf	??_Manchester_Decode+1
 14496  0AB5  301F               	movlw	31
 14497  0AB6  0275               	subwf	??_Manchester_Decode+1,w
 14498  0AB7  303F               	movlw	63
 14499  0AB8  1903               	skipnz
 14500  0AB9  0274               	subwf	??_Manchester_Decode,w
 14501  0ABA  1803               	skipnc
 14502  0ABB  2A9D               	goto	i1l5918
 14503                           
 14504                           ;manchester_decode.c: 101:             {;manchester_decode.c: 102:                 if(*e
      +                          dge_dir==0)
 14505  0ABC  0878               	movf	Manchester_Decode@edge_dir,w
 14506  0ABD  0084               	movwf	4
 14507  0ABE  0800               	movf	0,w
 14508  0ABF  1D03               	btfss	3,2
 14509  0AC0  2ACE               	goto	i1l5930
 14510                           
 14511                           ;manchester_decode.c: 103:                 {;manchester_decode.c: 104:                  
      +                             decoded_byte^=(0x80>>bit_pos);
 14512  0AC1  0A29               	incf	Manchester_Decode@bit_pos^(0+128),w
 14513  0AC2  00F4               	movwf	??_Manchester_Decode
 14514  0AC3  3080               	movlw	128
 14515  0AC4  00F5               	movwf	??_Manchester_Decode+1
 14516  0AC5  3000               	movlw	0
 14517  0AC6  00F6               	movwf	??_Manchester_Decode+2
 14518  0AC7  2ACB               	goto	u555_24
 14519  0AC8                     u555_25:	
 14520  0AC8  0D76               	rlf	??_Manchester_Decode+2,w
 14521  0AC9  0CF6               	rrf	??_Manchester_Decode+2,f
 14522  0ACA  0CF5               	rrf	??_Manchester_Decode+1,f
 14523  0ACB                     u555_24:	
 14524  0ACB  0BF4               	decfsz	??_Manchester_Decode,f
 14525  0ACC  2AC8               	goto	u555_25
 14526  0ACD  2AD8               	goto	L21
 14527  0ACE                     i1l5930:	
 14528                           ;manchester_decode.c: 105:                 }else
 14529                           
 14530                           
 14531                           ;manchester_decode.c: 106:                 {;manchester_decode.c: 107:                  
      +                             decoded_byte^=(0x00>>bit_pos);
 14532  0ACE  0A29               	incf	Manchester_Decode@bit_pos^(0+128),w
 14533  0ACF  00F4               	movwf	??_Manchester_Decode
 14534  0AD0  01F5               	clrf	??_Manchester_Decode+1
 14535  0AD1  01F6               	clrf	??_Manchester_Decode+2
 14536  0AD2  2AD6               	goto	u556_24
 14537  0AD3                     u556_25:	
 14538  0AD3  0D76               	rlf	??_Manchester_Decode+2,w
 14539  0AD4  0CF6               	rrf	??_Manchester_Decode+2,f
 14540  0AD5  0CF5               	rrf	??_Manchester_Decode+1,f
 14541  0AD6                     u556_24:	
 14542  0AD6  0BF4               	decfsz	??_Manchester_Decode,f
 14543  0AD7  2AD3               	goto	u556_25
 14544  0AD8                     L21:	
 14545  0AD8  0875               	movf	??_Manchester_Decode+1,w
 14546  0AD9  00F7               	movwf	??_Manchester_Decode+3
 14547  0ADA  0877               	movf	??_Manchester_Decode+3,w
 14548  0ADB  1683               	bsf	3,5	;RP0=1, select bank1
 14549  0ADC  1303               	bcf	3,6	;RP1=0, select bank1
 14550  0ADD  06D0               	xorwf	Manchester_Decode@decoded_byte^(0+128),f
 14551                           
 14552                           ;manchester_decode.c: 109:                 bit_pos++;
 14553                           
 14554                           ;manchester_decode.c: 108:                 }
 14555  0ADE  3001               	movlw	1
 14556  0ADF  00F4               	movwf	??_Manchester_Decode
 14557  0AE0  0874               	movf	??_Manchester_Decode,w
 14558  0AE1  07A9               	addwf	Manchester_Decode@bit_pos^(0+128),f
 14559                           
 14560                           ;manchester_decode.c: 110:                 next_edge_also_T_flag=0;
 14561  0AE2  01A6               	clrf	Manchester_Decode@next_edge_also_T_flag^(0+128)
 14562  0AE3                     i1l5938:	
 14563                           ;manchester_decode.c: 112:             }else
 14564                           
 14565                           
 14566                           ;manchester_decode.c: 120:         if(bit_pos>7)
 14567  0AE3  3008               	movlw	8
 14568  0AE4  0229               	subwf	Manchester_Decode@bit_pos^(0+128),w
 14569  0AE5  1C03               	skipc
 14570  0AE6  0008               	return
 14571                           
 14572                           ;manchester_decode.c: 121:         {;manchester_decode.c: 122:             if(decoded_by
      +                          te=='$')
 14573  0AE7  3024               	movlw	36
 14574  0AE8  0650               	xorwf	Manchester_Decode@decoded_byte^(0+128),w
 14575  0AE9  1D03               	btfss	3,2
 14576  0AEA  2AED               	goto	i1l5944
 14577                           
 14578                           ;manchester_decode.c: 123:             {;manchester_decode.c: 124:                 start
      +                          _data_flag=1;
 14579  0AEB  01A7               	clrf	Manchester_Decode@start_data_flag^(0+128)
 14580  0AEC  0AA7               	incf	Manchester_Decode@start_data_flag^(0+128),f
 14581  0AED                     i1l5944:	
 14582                           
 14583                           ;manchester_decode.c: 127:             if(start_data_flag)
 14584  0AED  0827               	movf	Manchester_Decode@start_data_flag^(0+128),w
 14585  0AEE  1903               	btfsc	3,2
 14586  0AEF  2AFD               	goto	i1l5950
 14587                           
 14588                           ;manchester_decode.c: 128:             {;manchester_decode.c: 130:                 Frame
      +                          _Buffer(&decoded_byte,1);
 14589  0AF0  01F0               	clrf	i1Frame_Buffer@mode
 14590  0AF1  0AF0               	incf	i1Frame_Buffer@mode,f
 14591  0AF2  30D0               	movlw	(low (Manchester_Decode@decoded_byte| 0))& (0+255)
 14592  0AF3  120A  158A  2000  120A  158A  	fcall	i1_Frame_Buffer
 14593                           
 14594                           ;manchester_decode.c: 131:                 data_counter++;
 14595  0AF8  3001               	movlw	1
 14596  0AF9  00F4               	movwf	??_Manchester_Decode
 14597  0AFA  0874               	movf	??_Manchester_Decode,w
 14598  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
 14599  0AFC  07A8               	addwf	Manchester_Decode@data_counter^(0+128),f
 14600  0AFD                     i1l5950:	
 14601                           
 14602                           ;manchester_decode.c: 134:             decoded_byte=0;
 14603  0AFD  01D0               	clrf	Manchester_Decode@decoded_byte^(0+128)
 14604                           
 14605                           ;manchester_decode.c: 135:             bit_pos=0;
 14606  0AFE  01A9               	clrf	Manchester_Decode@bit_pos^(0+128)
 14607                           
 14608                           ;manchester_decode.c: 137:             if(data_counter>=6)
 14609  0AFF  3006               	movlw	6
 14610  0B00  0228               	subwf	Manchester_Decode@data_counter^(0+128),w
 14611  0B01  1C03               	skipc
 14612  0B02  0008               	return
 14613                           
 14614                           ;manchester_decode.c: 138:             {;manchester_decode.c: 139:                 start
      +                          _data_flag=0;
 14615  0B03  01A7               	clrf	Manchester_Decode@start_data_flag^(0+128)
 14616                           
 14617                           ;manchester_decode.c: 140:                 sync_flag=0;
 14618  0B04  01A5               	clrf	Manchester_Decode@sync_flag^(0+128)
 14619  0B05  0008               	return
 14620  0B06                     __end_of_Manchester_Decode:	
 14621                           
 14622                           	psect	text66
 14623  0800                     __ptext66:	
 14624 ;; *************** function i1_Frame_Buffer *****************
 14625 ;; Defined at:
 14626 ;;		line 13 in file "circular_buffer.c"
 14627 ;; Parameters:    Size  Location     Type
 14628 ;;  data            1    wreg     PTR unsigned char 
 14629 ;;		 -> Frame_Decode@data(1), Manchester_Decode@decoded_byte(1), 
 14630 ;;  mode            1    0[COMMON] unsigned char 
 14631 ;; Auto vars:     Size  Location     Type
 14632 ;;  data            1    2[COMMON] PTR unsigned char 
 14633 ;;		 -> Frame_Decode@data(1), Manchester_Decode@decoded_byte(1), 
 14634 ;; Return value:  Size  Location     Type
 14635 ;;                  1    wreg      unsigned char 
 14636 ;; Registers used:
 14637 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14638 ;; Tracked objects:
 14639 ;;		On entry : 300/100
 14640 ;;		On exit  : 300/0
 14641 ;;		Unchanged: 0/0
 14642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14643 ;;      Params:         1       0       0       0       0
 14644 ;;      Locals:         1       0       0       0       0
 14645 ;;      Temps:          1       0       0       0       0
 14646 ;;      Totals:         3       0       0       0       0
 14647 ;;Total ram usage:        3 bytes
 14648 ;; Hardware stack levels used:    1
 14649 ;; This function calls:
 14650 ;;		Nothing
 14651 ;; This function is called by:
 14652 ;;		_Manchester_Decode
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           
 14657                           ;psect for function i1_Frame_Buffer
 14658  0800                     i1_Frame_Buffer:	
 14659                           
 14660                           ;incstack = 0
 14661 ;; hardware stack exceeded
 14662                           ; Regs used in i1_Frame_Buffer: [wreg-fsr0h+status,2+status,0]
 14663                           ;i1Frame_Buffer@data stored from wreg
 14664  0800  00F2               	movwf	i1Frame_Buffer@data
 14665                           
 14666                           ;circular_buffer.c: 13: unsigned char Frame_Buffer(unsigned char *data,unsigned char mod
      +                          e);circular_buffer.c: 14: {;circular_buffer.c: 15:  static unsigned char buffer[30];;cir
      +                          cular_buffer.c: 16:  static unsigned char read_pointer, write_pointer, write_pointer_mem
      +                          ;;circular_buffer.c: 18:  if(mode==1)
 14667  0801  0370               	decf	i1Frame_Buffer@mode,w
 14668  0802  1D03               	btfss	3,2
 14669  0803  282A               	goto	i1l5556
 14670                           
 14671                           ;circular_buffer.c: 19:  {;circular_buffer.c: 20:   write_pointer_mem=write_pointer;
 14672  0804  1283               	bcf	3,5	;RP0=0, select bank0
 14673  0805  085C               	movf	Frame_Buffer@write_pointer,w
 14674  0806  00F1               	movwf	??i1_Frame_Buffer
 14675  0807  0871               	movf	??i1_Frame_Buffer,w
 14676  0808  1683               	bsf	3,5	;RP0=1, select bank1
 14677  0809  00AC               	movwf	Frame_Buffer@write_pointer_mem^(0+128)
 14678                           
 14679                           ;circular_buffer.c: 21:   write_pointer++;
 14680  080A  3001               	movlw	1
 14681  080B  00F1               	movwf	??i1_Frame_Buffer
 14682  080C  0871               	movf	??i1_Frame_Buffer,w
 14683  080D  1283               	bcf	3,5	;RP0=0, select bank0
 14684  080E  07DC               	addwf	Frame_Buffer@write_pointer,f
 14685                           
 14686                           ;circular_buffer.c: 23:   if(write_pointer==30)
 14687  080F  301E               	movlw	30
 14688  0810  065C               	xorwf	Frame_Buffer@write_pointer,w
 14689  0811  1903               	btfsc	3,2
 14690                           
 14691                           ;circular_buffer.c: 24:   {;circular_buffer.c: 25:    write_pointer=0;
 14692  0812  01DC               	clrf	Frame_Buffer@write_pointer
 14693                           
 14694                           ;circular_buffer.c: 27:   if(write_pointer==read_pointer)
 14695  0813  085C               	movf	Frame_Buffer@write_pointer,w
 14696  0814  065D               	xorwf	Frame_Buffer@read_pointer,w
 14697  0815  1D03               	skipz
 14698  0816  281E               	goto	i1l5550
 14699                           
 14700                           ;circular_buffer.c: 28:   {;circular_buffer.c: 29:    write_pointer=write_pointer_mem;
 14701  0817  1683               	bsf	3,5	;RP0=1, select bank1
 14702  0818  082C               	movf	Frame_Buffer@write_pointer_mem^(0+128),w
 14703  0819  00F1               	movwf	??i1_Frame_Buffer
 14704  081A  0871               	movf	??i1_Frame_Buffer,w
 14705  081B  1283               	bcf	3,5	;RP0=0, select bank0
 14706  081C  00DC               	movwf	Frame_Buffer@write_pointer
 14707  081D  0008               	return
 14708  081E                     i1l5550:	
 14709                           
 14710                           ;circular_buffer.c: 33:   buffer[write_pointer]=*data;
 14711  081E  0872               	movf	i1Frame_Buffer@data,w
 14712  081F  0084               	movwf	4
 14713  0820  1383               	bcf	3,7	;select IRP bank0
 14714  0821  0800               	movf	0,w
 14715  0822  00F1               	movwf	??i1_Frame_Buffer
 14716  0823  085C               	movf	Frame_Buffer@write_pointer,w
 14717  0824  3E10               	addlw	(low (Frame_Buffer@buffer| (0+256)))& (0+255)
 14718  0825  0084               	movwf	4
 14719  0826  0871               	movf	??i1_Frame_Buffer,w
 14720  0827  1783               	bsf	3,7	;select IRP bank2
 14721  0828  0080               	movwf	0
 14722  0829  0008               	return
 14723  082A                     i1l5556:	
 14724                           
 14725                           ;circular_buffer.c: 38:  {;circular_buffer.c: 39:   if(write_pointer!=read_pointer)
 14726  082A  1283               	bcf	3,5	;RP0=0, select bank0
 14727  082B  085C               	movf	Frame_Buffer@write_pointer,w
 14728  082C  065D               	xorwf	Frame_Buffer@read_pointer,w
 14729  082D  1903               	skipnz
 14730  082E  0008               	return
 14731                           
 14732                           ;circular_buffer.c: 40:   {;circular_buffer.c: 41:    read_pointer++;
 14733  082F  3001               	movlw	1
 14734  0830  00F1               	movwf	??i1_Frame_Buffer
 14735  0831  0871               	movf	??i1_Frame_Buffer,w
 14736  0832  07DD               	addwf	Frame_Buffer@read_pointer,f
 14737                           
 14738                           ;circular_buffer.c: 42:    if(read_pointer==30)
 14739  0833  301E               	movlw	30
 14740  0834  065D               	xorwf	Frame_Buffer@read_pointer,w
 14741  0835  1903               	btfsc	3,2
 14742                           
 14743                           ;circular_buffer.c: 43:    {;circular_buffer.c: 44:     read_pointer=0;
 14744  0836  01DD               	clrf	Frame_Buffer@read_pointer
 14745                           
 14746                           ;circular_buffer.c: 46:    *data=buffer[read_pointer];
 14747  0837  085D               	movf	Frame_Buffer@read_pointer,w
 14748  0838  3E10               	addlw	(low (Frame_Buffer@buffer| (0+256)))& (0+255)
 14749  0839  0084               	movwf	4
 14750  083A  1783               	bsf	3,7	;select IRP bank2
 14751  083B  0800               	movf	0,w
 14752  083C  00F1               	movwf	??i1_Frame_Buffer
 14753  083D  0872               	movf	i1Frame_Buffer@data,w
 14754  083E  0084               	movwf	4
 14755  083F  0871               	movf	??i1_Frame_Buffer,w
 14756  0840  1383               	bcf	3,7	;select IRP bank0
 14757  0841  0080               	movwf	0
 14758  0842  0008               	return
 14759  0843                     __end_ofi1_Frame_Buffer:	
 14760  007E                     btemp	set	126	;btemp
 14761  007E                     wtemp0	set	126


Data Sizes:
    Strings     80
    Constant    35
    Data        1
    BSS         155
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      63
    BANK1            80     20      70
    BANK3            96     25      95
    BANK2            96      0      30

Pointer List with Targets:

    Menu_Handler@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Handler@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Menu_Handler@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Menu_Handler@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Handler@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Handler@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@year(BANK3[8]), 

    Menu_Handler@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Handler@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Init@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Button_Init@keydef.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Menu_Set_Time@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Button_Handler@keydef.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    PCF8583_Set_Date_Time@time_struct_ptr	PTR struct . size(1) Largest target is 7
		 -> Menu_Set_Time@time(BANK1[7]), 

    PCF8583_Read_Time_Date@time_struct_ptr	PTR struct . size(2) Largest target is 7
		 -> Menu_Set_Time@time(BANK1[7]), main@time(BANK3[7]), 

    Send_7Seg_Text@text	PTR unsigned char  size(1) Largest target is 5
		 -> STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), 
		 -> STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[5]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    Read_Limit_From_EEprom@limit2.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Read_Limit_From_EEprom@limit2	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Read_Limit_From_EEprom@limit1.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Read_Limit_From_EEprom@limit1	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Write_Limit_To_EEprom@limit2.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Write_Limit_To_EEprom@limit2	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Write_Limit_To_EEprom@limit1.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Write_Limit_To_EEprom@limit1	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Menu_Handler@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    Menu_Handler@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK3[7]), 

    Menu_Handler@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    Menu_Set_Param_Time_Limit@menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Param_Time_Limit@menu	PTR struct MenuParamStruct size(2) Largest target is 9
		 -> Menu_Set_Time@current_menu(BANK1[8]), NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_work_day_1(BANK3[8]), 
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@time_limit_free_day_1(BANK3[8]), Menu_Init@year(BANK3[8]), Menu_Init@day_month(BANK3[8]), 
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Set_Time@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    Menu_Set_Time@menudef.year_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@menudef.day_month_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@menudef.hours_minutes_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Set_Time@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    Menu_Set_Time@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Set_Time@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    Menu_Set_Time@current_menu_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Set_Time@current_menu_ptr	PTR struct MenuParamStruct size(2) Largest target is 9
		 -> Menu_Set_Time@current_menu(BANK1[8]), NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_work_day_1(BANK3[8]), 
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@time_limit_free_day_1(BANK3[8]), Menu_Init@year(BANK3[8]), Menu_Init@day_month(BANK3[8]), 
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    current_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Show_Time@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    Show_Time@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK3[7]), 

    F1346.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1344.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1342.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1341.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.year_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.day_month_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.hours_minutes_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Init@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    Menu_Init@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    Menu_Init@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Init@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    F1347.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1346.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1345.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1344.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1343.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1342.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    F1341.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    S51MenuParamStruct$next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_free_day_2(BANK3[8]), Menu_Init@year(BANK3[8]), 
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Check_Time_Date@time_limit.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    Check_Time_Date@time_limit.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    Check_Time_Date@time_limit.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Check_Time_Date@time_limit	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    Check_Time_Date@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK3[7]), 

    Check_RCV_Data@time_limit	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK3[7]), 

    Check_RCV_Data@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK3[7]), 

    Check_RCV_Data@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    Check_Event@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    CRC_check@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    Frame_Decode@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    Manchester_Decode@edge_dir	PTR unsigned char  size(1) Largest target is 1
		 -> ISR@edge_dir(BANK1[1]), 

    Manchester_Decode@pulse_time	PTR unsigned int  size(1) Largest target is 2
		 -> ISR@pulse_time(BANK0[2]), 

    Button_Handler@keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), 

    Button_Handler@keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK3[7]), 

    Button_Handler@keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    Button_Handler@keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    Button_Handler@keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    Button_Handler@keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    Button_Handler@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    Button_Init@keydef.set_down.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_up.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_right.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_time2.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_time1.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_rtc.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), 

    Button_Init@keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK3[7]), 

    Button_Init@keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    Button_Init@keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    Button_Init@keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    Button_Init@keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    Button_Init@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK3[6]), 

    F1308.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1307.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1306.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1305.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1304.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1303.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    S37$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Key_Press@button.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Key_Press@button	PTR struct . size(2) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), Button_Init@set_up(BANK3[7]), Button_Init@set_right(BANK1[7]), Button_Init@set_time2(BANK1[7]), 
		 -> Button_Init@set_time1(BANK1[7]), Button_Init@set_rtc(BANK1[7]), 

    Display_7Seg@text	PTR unsigned char  size(1) Largest target is 4
		 -> g_display_text(BANK1[4]), 

    CRC16@data_tab_ptr	PTR unsigned char  size(1) Largest target is 5
		 -> main@data_rcv(BANK3[5]), 

    Frame_Buffer@data	PTR unsigned char  size(1) Largest target is 1
		 -> Frame_Decode@data(BANK0[1]), Manchester_Decode@decoded_byte(BANK1[1]), 

    S60$time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_2(BANK3[8]), 

    S60$time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_free_day_1(BANK3[8]), 

    S60$time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    S60$time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    S60$year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@year(BANK3[8]), 

    S60$day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@day_month(BANK3[8]), 

    S60$hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    S44$set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), 

    keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK3[7]), 

    S44$set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK3[7]), 

    keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK3[7]), 

    S44$set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    S44$set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    S44$set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    S44$set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_Display_7Seg
    i1_Display_7Seg->i1_One_Digit_Handler
    i1_One_Digit_Handler->i1_Set_Anode_Outputs
    i1_Set_Anode_Outputs->i1_Sign_Anode_Data
    _Manchester_Decode->i1_Frame_Buffer

Critical Paths under _main in BANK0

    _main->_Menu_Handler
    _Menu_Init->_Read_Limit_From_EEprom
    _Menu_Handler->_Menu_Set_Time
    _Show_Time->_PCF8583_Read_Time_Date
    _Display_Weekday->_Send_7Seg_Text
    _Menu_Set_Time->_Find_Weekday
    _Write_Limit_To_EEprom->_Write_EEprom
    _Read_Limit_From_EEprom->_Read_EEprom
    _PCF8583_Set_Date_Time->_DEC_2_BCD
    _DEC_2_BCD->___lbmod
    _Menu_Set_Param_Time_Limit->___awdiv
    ___awdiv->___awmod
    _Is_Valid_Date->_Is_Leap
    _Is_Leap->___lwmod
    _Find_Weekday->___lwmod
    ___lwmod->___lwdiv
    _Button_Handler->_Key_Press
    _Check_RCV_Data->_Check_Time_Date
    _Check_Time_Date->_PCF8583_Read_Time_Date
    _PCF8583_Read_Time_Date->_BCD_2_DEC
    _PCF8583_Write_Byte->_I2C_Master_Write
    _PCF8583_Read_Byte->_I2C_Master_Read
    _BCD_2_DEC->___bmul
    ___bmul->___awmod
    _Check_Event->_Play_Ring
    _Play_Ring->_Generate_PWM
    ___lwdiv->___wmul
    _Wait_ms->___lmul
    _Generate_PWM->___lldiv
    _Display_7Seg->_One_Digit_Handler
    _One_Digit_Handler->_Set_Anode_Outputs
    _Set_Anode_Outputs->_Sign_Anode_Data
    _Frame_Decode->_Frame_Buffer
    _CRC_check->_CRC16

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Menu_Handler->_Menu_Set_Time

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   88863
                                             55 BANK0      2     2      0
                                              0 BANK3     25    25      0
                        _Button_Init
                     _Check_RCV_Data
                        _Global_Init
                           _I2C_Init
                     _Interrupt_Init
                       _Menu_Handler
                          _Menu_Init
 ---------------------------------------------------------------------------------
 (1) _Menu_Init                                            2     2      0    1582
                                             11 BANK0      2     2      0
                 _Disable_All_Digits
             _Read_Limit_From_EEprom
 ---------------------------------------------------------------------------------
 (1) _Menu_Handler                                         6     4      2   66118
                                             49 BANK0      6     4      2
                     _Button_Handler
                      _Menu_Set_Time
                          _Show_Time
 ---------------------------------------------------------------------------------
 (2) _Show_Time                                            4     3      1   18317
                                             34 BANK0      4     3      1
                     _Button_Handler
                 _Disable_All_Digits
                    _Display_Weekday
             _PCF8583_Read_Time_Date
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _Display_Weekday                                      3     3      0    2869
                                             10 BANK0      3     3      0
                     _Send_7Seg_Text
 ---------------------------------------------------------------------------------
 (2) _Menu_Set_Time                                       25    23      2   45532
                                             44 BANK0      5     3      2
                                              0 BANK1     20    20      0
                     _Button_Handler
                       _Find_Weekday
                      _Is_Valid_Date
          _Menu_Set_Param_Time_Limit
             _PCF8583_Read_Time_Date
              _PCF8583_Set_Date_Time
             _Read_Limit_From_EEprom
                     _Send_7Seg_Text
              _Write_Limit_To_EEprom
                            ___awdiv
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _Write_Limit_To_EEprom                                4     2      2    1524
                                              8 BANK0      4     2      2
                       _Write_EEprom
 ---------------------------------------------------------------------------------
 (4) _Write_EEprom                                         2     1      1     782
                                              6 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _Read_Limit_From_EEprom                               4     2      2    1205
                                              7 BANK0      4     2      2
                        _Read_EEprom
 ---------------------------------------------------------------------------------
 (3) _Read_EEprom                                          1     1      0      31
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PCF8583_Set_Date_Time                                8     8      0    5163
                                             17 BANK0      8     8      0
                          _DEC_2_BCD
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                 _PCF8583_Write_Byte
 ---------------------------------------------------------------------------------
 (4) _DEC_2_BCD                                            4     4      0    1345
                                             13 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _Menu_Set_Param_Time_Limit                           16    13      3   10562
                                             22 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              7     6      1     772
                                              6 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              5     4      1     511
                                              6 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    3493
                                              6 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    3145
                                             13 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Is_Valid_Date                                        4     1      3    1637
                                             29 BANK0      4     1      3
                            _Is_Leap
 ---------------------------------------------------------------------------------
 (4) _Is_Leap                                              3     1      2     992
                                             26 BANK0      3     1      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _Find_Weekday                                        18    12      6    3693
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     772
                                             20 BANK0      6     2      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Button_Handler                                       3     3      0    1466
                                             16 BANK0      3     3      0
                          _Key_Press
 ---------------------------------------------------------------------------------
 (4) _Key_Press                                           10     8      2     674
                                              6 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Global_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Check_RCV_Data                                       4     2      2   19897
                                             42 BANK0      4     2      2
                          _CRC_check
                        _Check_Event
                    _Check_Time_Date
                       _Frame_Decode
 ---------------------------------------------------------------------------------
 (2) _Check_Time_Date                                      8     7      1    8884
                                             34 BANK0      8     7      1
             _PCF8583_Read_Time_Date
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1396
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _PCF8583_Read_Time_Date                              13    11      2    6341
                                             21 BANK0     13    11      2
                          _BCD_2_DEC
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                  _PCF8583_Read_Byte
                 _PCF8583_Write_Byte
 ---------------------------------------------------------------------------------
 (4) _PCF8583_Write_Byte                                   4     3      1    1893
                                              8 BANK0      4     3      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _PCF8583_Read_Byte                                    4     4      0    1601
                                             11 BANK0      4     4      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2    1471
                                              6 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      5     5      0      65
                                              6 BANK0      5     5      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _BCD_2_DEC                                            4     4      0     378
                                             17 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     316
                                             13 BANK0      4     3      1
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Check_Event                                          2     2      0    8798
                                             36 BANK0      2     2      0
                       _Frame_Decode
                          _Play_Ring
                     _Send_7Seg_Text
 ---------------------------------------------------------------------------------
 (4) _Send_7Seg_Text                                       4     3      1    2838
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _Play_Ring                                            8     8      0    4601
                                             28 BANK0      8     8      0
                       _Display_7Seg
                       _Generate_PWM
                   _Init_CaptureMode
                   _Init_CompareMode
                            _Wait_ms
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     961
                                             12 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _Wait_ms                                              6     4      2     437
                                             19 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     316
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Init_CompareMode                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Init_CaptureMode                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Generate_PWM                                         8     4      4     542
                                             20 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     421
                                              6 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _Display_7Seg                                         3     2      1    2491
                                             17 BANK0      3     2      1
                  _One_Digit_Handler
 ---------------------------------------------------------------------------------
 (5) _One_Digit_Handler                                    5     3      2    1902
                                             12 BANK0      5     3      2
                 _Disable_All_Digits
                  _Set_Anode_Outputs
                    _Sign_Anode_Data
 ---------------------------------------------------------------------------------
 (6) _Sign_Anode_Data                                      3     3      0      31
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _Set_Anode_Outputs                                    3     2      1     338
                                              9 BANK0      3     2      1
                    _Sign_Anode_Data (ARG)
 ---------------------------------------------------------------------------------
 (2) _Disable_All_Digits                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Frame_Decode                                         7     5      2    1044
                                              9 BANK0      7     5      2
                       _Frame_Buffer
 ---------------------------------------------------------------------------------
 (3) _Frame_Buffer                                         3     2      1     436
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _CRC_check                                            4     4      0     626
                                             16 BANK0      4     4      0
                              _CRC16
 ---------------------------------------------------------------------------------
 (3) _CRC16                                               10     8      2     429
                                              6 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _Button_Init                                          2     2      0     222
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  6     6      0    1448
                                              0 BANK0      6     6      0
                  _Manchester_Decode
                     i1_Display_7Seg
 ---------------------------------------------------------------------------------
 (8) i1_Display_7Seg                                       3     2      1     996
                                             11 COMMON     3     2      1
                i1_One_Digit_Handler
 ---------------------------------------------------------------------------------
 (9) i1_One_Digit_Handler                                  5     3      2     706
                                              6 COMMON     5     3      2
               i1_Disable_All_Digits
                i1_Set_Anode_Outputs
                  i1_Sign_Anode_Data
 ---------------------------------------------------------------------------------
 (10) i1_Sign_Anode_Data                                   3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) i1_Set_Anode_Outputs                                 3     2      1     202
                                              3 COMMON     3     2      1
                  i1_Sign_Anode_Data (ARG)
 ---------------------------------------------------------------------------------
 (10) i1_Disable_All_Digits                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Manchester_Decode                                    6     5      1     421
                                              3 COMMON     6     5      1
                     i1_Frame_Buffer
 ---------------------------------------------------------------------------------
 (9) i1_Frame_Buffer                                       3     2      1      92
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Button_Init
   _Check_RCV_Data
     _CRC_check
       _CRC16
     _Check_Event
       _Frame_Decode
         _Frame_Buffer
       _Play_Ring
         _Display_7Seg
           _One_Digit_Handler
             _Disable_All_Digits
             _Set_Anode_Outputs
               _Sign_Anode_Data (ARG)
             _Sign_Anode_Data
         _Generate_PWM
           ___lldiv
         _Init_CaptureMode
         _Init_CompareMode
         _Wait_ms
           ___lmul
         ___lwdiv
           ___wmul (ARG)
       _Send_7Seg_Text
     _Check_Time_Date
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
             ___awmod (ARG)
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       ___wmul
     _Frame_Decode
       _Frame_Buffer
   _Global_Init
   _I2C_Init
   _Interrupt_Init
   _Menu_Handler
     _Button_Handler
       _Key_Press
     _Menu_Set_Time
       _Button_Handler
         _Key_Press
       _Find_Weekday
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         ___wmul
       _Is_Valid_Date
         _Is_Leap
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
       _Menu_Set_Param_Time_Limit
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___lbdiv
         ___lbmod
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
             ___awmod (ARG)
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _PCF8583_Set_Date_Time
         _DEC_2_BCD
           ___lbdiv
           ___lbmod
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _Read_Limit_From_EEprom
         _Read_EEprom
       _Send_7Seg_Text
       _Write_Limit_To_EEprom
         _Write_EEprom
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awmod (ARG)
     _Show_Time
       _Button_Handler
         _Key_Press
       _Disable_All_Digits
       _Display_Weekday
         _Send_7Seg_Text
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
             ___awmod (ARG)
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       ___awdiv
         ___awmod (ARG)
       ___awmod
   _Menu_Init
     _Disable_All_Digits
     _Read_Limit_From_EEprom
       _Read_EEprom

 _ISR (ROOT)
   _Manchester_Decode
     i1_Frame_Buffer
   i1_Display_7Seg
     i1_One_Digit_Handler
       i1_Disable_All_Digits
       i1_Set_Anode_Outputs
         i1_Sign_Anode_Data (ARG)
       i1_Sign_Anode_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     19      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      1E      11       31.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     14      46       7       87.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     39      3F       5       78.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     110      12        0.0%
ABS                  0      0     110       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jun 20 22:24:14 2020

                      ??_Interrupt_Init 0026                                       pc 0002  
                        ___bmul@product 002F                             __CFG_CP$OFF 0000  
                           _SSPSTATbits 0094                                      l61 1C42  
                                    _RD 0C60                                      _WR 0C61  
                          ___awdiv@sign 0033                          ??_Frame_Decode 002B  
                    __size_of_DEC_2_BCD 001C                                      fsr 0004  
                   ___wmul@multiplicand 0028                           ??_Global_Init 0026  
                        ??_Frame_Buffer 0027                   _Write_Limit_To_EEprom 108D  
             _Menu_Set_Param_Time_Limit 003A                                     l202 1888  
                                   l160 1FAA                                     l152 1B1B  
                                   l170 1FEB                                     l162 1FB7  
                                   l154 1B1D                                     l155 1B1F  
                                   l172 1FF8                                     l164 1FC4  
                                   l156 1B21                                     l157 1B39  
                                   l174 1FFE                                     l166 1FD1  
                                   l168 1FDE                                     l477 1DD5  
                                   l646 0C80                                     l736 01FE  
                                   l870 18F6                                     l962 194C  
                                   l798 1DD3                            __CFG_CPD$OFF 0000  
                                   _ISR 13C5                                     fsr0 0004  
                      ??_Send_7Seg_Text 0027                                     indf 0000  
                          ___awmod@sign 002C                ??_Read_Limit_From_EEprom 0029  
          __size_ofi1_One_Digit_Handler 0035                       ?_Init_CompareMode 0070  
                 __size_of_Write_EEprom 001C                            __CFG_LVP$OFF 0000  
               __end_of_Sign_Anode_Data 1800                                    ?_ISR 0070  
           __size_of_PCF8583_Write_Byte 002C                        ISR@display_timer 00AA  
                    ??_Init_CompareMode 0026                                    l1172 19C3  
                                  l6210 1739                                    l6202 1735  
                                  l7030 1DE9                                    l7022 1DE4  
                                  l6302 1753                                    l6230 1743  
                                  l6222 173F                                    l6214 173B  
                                  l6206 1737                                    l6400 1FAB  
                                  l7018 1DDF                                    l6330 175D  
                                  l6322 1759                                    l6314 1757  
                                  l6306 1755                                    l6234 1745  
                                  l6226 1741                                    l6218 173D  
                                  l7210 1ED2                                    l7202 1EC2  
                                  l6420 1FEC                                    l6412 1FD2  
                                  l6404 1FB8                                    l7300 035B  
                                  l7054 1E16                                    l7038 1DF9  
                                  l6350 1763                                    l6342 1761  
                                  l6326 175B                                    l6502 18C1  
                                  l7214 1EDA                                    l7150 1DA2  
                                  l7142 1D8A                                    l7400 1940  
                                  l6424 1FF9                                    l6416 1FDF  
                                  l6408 1FC5                                    l7080 12C0  
                                  l7224 146E                                    l7136 112E  
                                  l7152 1DA8                                    l7144 1D90  
                                  l6370 1767                                    l6354 1765  
                                  l6338 175F                                    l6290 174D  
                                  l6282 1749                                    l6530 1F31  
                                  l7082 1258                                    l7226 147A  
                                  l7330 0540                                    l7306 03C6  
                                  l7154 1DAE                                    l7146 1D96  
                                  l6516 1EEC                                    l7084 12C5  
                                  l8140 15BE                                    l7172 1E94  
                                  l7324 04DC                                    l7316 0450  
                                  l7148 1D9C                                    l8212 0D5E  
                                  l6614 1C89                                    l6622 1CA9  
                                  l6294 174F                                    l6286 174B  
                                  l6278 1747                                    l6198 1733  
                                  l6446 1B23                                    l6526 1F24  
                                  l6518 1EFC                                    l7078 127B  
                                  l7414 12E3                                    l8126 07C1  
                                  l7342 0646                                    l7270 0137  
                                  l7158 1DB4                                    l6624 1C94  
                                  l6384 176B                                    l8128 07CB  
                                  l8152 1638                                    l7168 1E92  
                                  l6544 196A                                    l7336 05D9  
                                  l7256 00E3                                    l7248 00CF  
                                  l6378 1769                                    l6298 1751  
                                  l6650 11F4                                    l7450 130C  
                                  l7426 1336                                    l6714 0A09  
                                  l6706 09D6                                    l6546 1973  
                                  l7274 015B                                    l7266 0112  
                                  l8242 0DCC                                    l8218 0D76  
                                  l6660 1212                                    l6484 1BF3  
                                  l6724 1904                                    l7436 1301  
                                  l7428 12EE                                    l6476 19ED  
                                  l8156 163A                                    l6900 1D70  
                                  l6556 1982                                    l6564 19AC  
                                  l7356 10C0                                    l8316 0FBE  
                                  l8324 0FDC                                    l6670 1231  
                                  l6646 11E5                                    l8350 1D03  
                                  l8334 1CFF                                    l6590 1AC0  
                                  l7198 1EBA                                    l7294 02C7  
                                  l7278 017E                                    l8318 0FC5  
                                  l8254 0E09                                    l6656 1201  
                                  l6488 1C09                                    l7448 133C  
                                  l8352 1D3A                                    l6584 1AA4  
                                  l6760 1A17                                    l6904 1D7B  
                                  l7288 0271                                    l8280 0EAA  
                                  l8360 1CC6                                    l6666 121F  
                                  l6930 1BDB                                    l6922 1BB7  
                                  l7458 131F                                    l6498 18BB  
                                  l6818 1944                                    l6586 1AB2  
                                  l6594 1ACB                                    l6676 123E  
                                  l6748 1A99                                    l6924 1BC5  
                                  l7468 1342                                    l8348 1D33  
                                  l6756 1A08                                    l6844 1E3E  
                                  l6908 1D83                                    l8292 0EF7  
                                  l8364 1CD6                                    l6950 1C52  
                                  l6934 1BE6                                    l6870 1E7D  
                                  l6862 1E6A                                    l6854 1E46  
                                  l6838 1E33                                    l8278 0EA4  
                                  l8198 0CF3                                    l6960 1C66  
                                  l6952 1C59                                    l6696 097D  
                                  l6856 1E54                                    l8296 0F10  
                                  l8368 1CE4                                    l6866 1E75  
                                  l6882 1D47                                    l8378 1B8F  
                                  l6972 135B                                    l8492 1DBC  
                                  l6958 1C2E                                    l8494 1B2B  
                                  l6894 1D54                                    l6886 1D4E  
                                  l8496 1773                                    l6968 1359  
                                  l6896 1D62                                    _EEIF 006C  
                                  STR_1 106A                                    STR_2 1065  
                                  STR_3 1074                                    STR_4 1065  
                                  STR_5 106F                                    STR_6 1065  
                                  STR_7 102E                                    STR_8 1029  
                                  STR_9 1033                                    u6020 19EA  
                                  u6125 1EF0                                    u6145 1EFE  
                                  u6065 1C0B                                    u7105 12A2  
                                  u6225 19AF                                    u6155 1F13  
                                  u6075 1C13                                    _RCEN 048B  
                                  u6165 1F25                                    u8105 0796  
                                  u6265 1AA7                                    u7330 1ED8  
                                  u7250 1EB8                                    u8115 07AF  
                     ??_Check_Time_Date 0043                                    u6285 1AB8  
                                  u6454 094B                                    u7270 1EC0  
                                  u5815 1FA1                                    u6615 07F1  
                                  u6455 0949                                    u6295 1AC1  
                                  u6545 1A22                                    u6705 1E49  
                                  u6625 18D7                                    u6474 09A9  
                                  u5915 1FE2                                    u5835 1FAE  
                                  u6555 1A8D                                    u8155 162C  
                                  u6475 09A7                                    u7515 0310  
                                  u6645 194D                                    u8165 1634  
                                  u6725 1E55                                    u6805 1D57  
                                  u7605 058B                                    u8325 0FFC  
                                  u5935 1FEF                                    u5855 1FBB  
                                  u6655 1954                                    u6735 1E61  
                                  u7535 03A4                                    u6905 1BD2  
                                  u6745 1E6B                                    u6825 1D68  
                                  u7625 0624                                    u7465 01C3  
                                  u5875 1FC8                                    u6915 1BDC  
                                  u6835 1D71                                    u7565 049E  
                                  u5895 1FD5                                    u7495 02B1  
                                  u7655 0871                                    u6945 1C53  
                                  u7585 0526                                    u7665 088A  
                                  u8457 0DA5                                    u6875 1BBA  
                                  u8467 0DDE                                    u8477 0E1C  
                                  u6895 1BC6                                    u8487 0FCD  
                                  _TMR1 000E                                    _WREN 0C62  
                __size_of_Menu_Set_Time 027A                             main@menudef 01E8  
                          __CFG_WRT$OFF 0000                      Menu_Init@day_month 01B8  
                                  _main 1B74                        __end_of_I2C_Init 18A0  
                    __size_of_CRC_check 0021               PCF8583_Write_Byte@address 002B  
          PCF8583_Set_Date_Time@bcd_day 0036                                    btemp 007E  
          PCF8583_Set_Date_Time@bcd_min 0034            PCF8583_Set_Date_Time@bcd_hrs 0035  
          PCF8583_Set_Date_Time@bcd_sec 0033            PCF8583_Set_Date_Time@bcd_mon 0037  
          Read_Limit_From_EEprom@limit1 002A            Read_Limit_From_EEprom@limit2 0027  
                                  start 0010                           __CFG_IESO$OFF 0000  
                         ??_Read_EEprom 0026                Display_7Seg@enable_digit 005E  
                     CRC16@data_tab_ptr 002B                       ___bmul@multiplier 0030  
                         __CFG_MCLRE$ON 0000                         __end_of_Is_Leap 1A19  
                          main@data_rcv 01D6                 __size_of_Button_Handler 0081  
                                 ??_ISR 0020                        Menu_Handler@time 0052  
       Write_Limit_To_EEprom@limit_type 0029                         ??_Is_Valid_Date 0040  
                           _Check_Event 12C9                        ?_I2C_Master_Read 0070  
                      ?_I2C_Master_Wait 0070                         __end_of_Wait_ms 1A9E  
            __end_of_Disable_All_Digits 186D                        ?_I2C_Master_Stop 0070  
                         ??_Button_Init 0026                            _Write_EEprom 18E6  
                                 ?_main 0070                                   _ACKEN 048C  
                                 _ACKDT 048D                         __end_of___awdiv 1E82  
                       __end_of___lbdiv 1984                                   _EEADR 010D  
                                 _CCPR1 0015                                   STR_10 1051  
                                 _EEDAT 010C                                   _CCPR2 001B  
                                 STR_11 1051                                   STR_12 1051  
                                 STR_20 1060                                   STR_21 1047  
                                 STR_13 1038                                   STR_14 1065  
                                 STR_15 1042                                   STR_16 105B  
                                 _CRC16 1C2A                                   STR_17 104C  
                         __CFG_WDTE$OFF 0000                                   STR_18 1056  
                                 STR_19 103D                         __end_of___awmod 1D88  
                       __end_of___lbmod 19C9                                   _EEPGD 0C67  
                                 _ANSEL 0188                         __end_of___lldiv 1F3A  
                       ___awdiv@divisor 002D              __size_of_One_Digit_Handler 0035  
                       __end_of___lwdiv 1BEB                                   i1l160 1F47  
                                 i1l152 1AE6                                   i1l170 1F88  
                                 i1l162 1F54                                   i1l154 1AE8  
                                 i1l155 1AEA                                   i1l172 1F95  
                                 i1l164 1F61                                   i1l156 1AEC  
                                 i1l157 1B04                                   i1l174 1F9B  
                                 i1l166 1F6E                                   i1l350 13E4  
                                 i1l168 1F7B                          Is_Valid_Date@d 0040  
                       __end_of___lwmod 1AD0                                   i1l359 144E  
                        Is_Valid_Date@m 003D                          Is_Valid_Date@y 003E  
                       ___awdiv@counter 0032                           ?_Menu_Handler 0051  
                                 _PORTB 0006                                   _PORTC 0007  
                 Set_Anode_Outputs@sign 002B           One_Digit_Handler@digit_number 002C  
                   ___lmul@multiplicand 002A                          __CFG_FCMEN$OFF 0000  
                  __end_of_Find_Weekday 14EE                     __end_of_Global_Init 19A6  
                     __end_of_BCD_2_DEC 07FC                    i1_Disable_All_Digits 1858  
                    i1Display_7Seg@text 007D          __size_of_PCF8583_Set_Date_Time 00D4  
                        __CFG_BOREN$OFF 0000                                   pclath 000A  
 __end_ofIs_Valid_Date@k_max_valid_year 1025           Is_Valid_Date@k_max_valid_year 1023  
         __end_of_PCF8583_Set_Date_Time 0917                       __end_of_DEC_2_BCD 18E6  
         Manchester_Decode@decoded_byte 00D0                                   status 0003  
                                 wtemp0 007E                         ___lbdiv@divisor 0026  
                  __end_of_Generate_PWM 1A45                         ___lbdiv@counter 0029  
                        Play_Ring@beats 1018                              Play_Ring@i 0043  
                            Play_Ring@j 0041                         __initialization 0013  
         Manchester_Decode@data_counter 00A8                          Play_Ring@tempo 1025  
                          __end_of_main 1BAF                ??_PCF8583_Read_Time_Date 0037  
                ?_Write_Limit_To_EEprom 0028                           _Menu_Set_Time 0D86  
                                CRC16@i 002D                                  CRC16@k 002C  
                   __end_of_Read_EEprom 18AC                    Button_Handler@keydef 0031  
                  Button_Handler@button 0032                                  ??_main 0057  
                                ?_CRC16 0026                          ??_Menu_Handler 0053  
                     __end_of_CRC_check 1942                       ?_I2C_Master_Start 0070  
                  __end_of_Display_7Seg 124E                       ?_I2C_Master_Write 0026  
       __size_of_Read_Limit_From_EEprom 006E                     __end_of_Button_Init 15A4  
                 ?i1_Disable_All_Digits 0070                          _g_display_text 00CC  
                    ??_I2C_Master_Start 0026                      ??_I2C_Master_Write 0028  
                                _CCP1IE 0462                                  _CCP1IF 0062  
                                _CCP2IE 0468                                  _CCP2IF 0068  
                                _EECON2 018D                        ?_Sign_Anode_Data 0070  
                      ___awdiv@dividend 002F                                  _ANSELH 0189  
         Frame_Buffer@write_pointer_mem 00AC                                  i1l5110 167A  
                                i1l5030 1666                                  i1l5130 1684  
                                i1l5122 1680                                  i1l5114 167C  
                                i1l5106 1678                                  i1l5050 1670  
                                i1l5042 166C                                  i1l5034 1668  
                                i1l5026 1664                                  i1l5212 169C  
                                i1l5206 169A                                  i1l5150 168A  
                                i1l5142 1688                                  i1l5134 1686  
                                i1l5126 1682                                  i1l5118 167E  
                                i1l5062 1676                                  i1l5054 1672  
                                i1l5046 166E                                  i1l5038 166A  
                                i1l6030 13F9                                  i1l6022 13DE  
                                i1l5240 1F6F                                  i1l5232 1F55  
                                i1l6032 13FA                                  i1l5170 1692  
                                i1l5154 168C                                  i1l5058 1674  
                                i1l6026 13EE                                  i1l5252 1F96  
                                i1l5244 1F7C                                  i1l5236 1F62  
                                i1l5228 1F48                                  i1l6044 1411  
                                i1l5182 1696                                  i1l5166 1690  
                                i1l5158 168E                                  i1l6070 1444  
                                i1l5248 1F89                                  i1l6048 1418  
                                i1l6056 142B                                  i1l5178 1694  
                                i1l6066 143C                                  i1l5550 081E  
                                i1l5198 1698                                  i1l5556 082A  
                                i1l5574 1AEE                                  i1l5930 0ACE  
                                i1l5922 0A9F                                  i1l5916 0A88  
                                i1l5908 0A5A                                  i1l8500 16A4  
                                i1l5950 0AFD                                  i1l5918 0A9D  
                                i1l5944 0AED                                  i1l5938 0AE3  
                                i1l5970 117F                                  i1l5980 119D  
                                i1l5990 11BC                                  i1l5966 1170  
                                i1l5896 0A34                                  i1l5976 118C  
                                i1l5986 11AA                                  i1l5996 11C9  
                                i1l8498 1AF6                      __size_of_Key_Press 00F4  
                                u550_24 0A85                                  u550_25 0A82  
                             CRC16@size 0026                                  u551_24 0A90  
                                u551_25 0A8D                    __end_of_Frame_Decode 1E29  
                                u481_25 1F58                                  u555_24 0ACB  
                                u555_25 0AC8                                  u483_25 1F65  
                                u556_24 0AD6                                  u556_25 0AD3  
                                u485_25 1F72                                  u477_25 1F3E  
                                u487_25 1F7F                                  u479_25 1F4B  
                                u489_25 1F8C                                  _TMR0IE 005D  
                                _TMR0IF 005A                    __end_of_Frame_Buffer 1CAF  
                                _SSPADD 0093                                  _TRISA0 0428  
                                _TRISA1 0429                                  _TRISA2 042A  
                                _TRISB0 0430                                  _TRISA3 042B  
                                _TRISB1 0431                                  _TRISC0 0438  
                                _TRISA4 042C                                  _TRISB2 0432  
                                _TRISC1 0439                                  _TRISA5 042D  
                                _TRISB3 0433                                  _TRISC2 043A  
                                _TRISA6 042E                                  _TRISB4 0434  
                                _TRISC3 043B                                  _TRISA7 042F  
                                _TRISB5 0435                                  _TRISC4 043C  
                                _TRISB6 0436                                  _TRISC5 043D  
                                _TRISB7 0437                                  _TRISC6 043E  
                                _TRISC7 043F                                  _SSPBUF 0013  
                             ??_Is_Leap 003C                      __size_of_Menu_Init 0106  
                __end_ofPlay_Ring@beats 1021                          __CFG_PWRTE$OFF 0000  
                __end_ofPlay_Ring@tempo 1027                               ??_Wait_ms 0035  
                       Key_Press@button 0026                                  ___bmul 18B9  
                                ___lmul 1BEB                                  ___wmul 1942  
                    __size_of_Play_Ring 007B                               ??___awdiv 0031  
                             ??___lbdiv 0027                               ??___awmod 002A  
                             ??___lbmod 0027                               ??___lldiv 002E  
                        ?_Menu_Set_Time 004C                               ??___lwdiv 0030  
                             ??___lwmod 0038                        ___awdiv@quotient 0034  
                       ___awmod@divisor 0026             __end_ofi1_Set_Anode_Outputs 1F9D  
                       ___awmod@counter 002B                             _Global_Init 1984  
                    __size_of_Show_Time 017A                               ?_I2C_Init 0070  
                                saved_w 007E                         _Display_Weekday 1D88  
    __size_of_Menu_Set_Param_Time_Limit 0695                        ___lbdiv@dividend 0028  
       i1One_Digit_Handler@digit_number 0076        i1One_Digit_Handler@decimal_point 0077  
                     _Manchester_Decode 0A0B                         ___lbmod@divisor 0026  
                       _g_generic_timer 0059                 __end_of__initialization 0036  
              Menu_Handler@check_button 0056                         ___lbmod@counter 002B  
                          BCD_2_DEC@bcd 0034               __size_of_Init_CaptureMode 000D  
                    ?_Manchester_Decode 0073                           __end_of_CRC16 1C6B  
                     _PCF8583_Read_Byte 1B3A                  _Read_Limit_From_EEprom 10F6  
                   Frame_Decode@DataRCV 002D                     i1_One_Digit_Handler 1AD0  
                   ___bmul@multiplicand 002D                   i1Sign_Anode_Data@sign 0072  
                           _Read_EEprom 18A0                           ISR@pulse_time 0024  
                           ISR@edge_dir 00D1                      ?_PCF8583_Read_Byte 0070  
                        __pcstackCOMMON 0070                          _Button_Handler 1344  
                       Play_Ring@melody 1006                            __pidataBANK0 07FC  
                      Menu_Init@menudef 002C                     ??_Manchester_Decode 0074  
               __size_ofi1_Display_7Seg 0075         __size_of_PCF8583_Read_Time_Date 0117  
                      ___lbdiv@quotient 002A                       __end_of_Key_Press 0A0B  
                           _Button_Init 14EE                     ??_PCF8583_Read_Byte 002B  
                 __size_of_Find_Weekday 0096                                 ??_CRC16 0028  
                       _Check_Time_Date 15A4                      Menu_Handler@keydef 0051  
                     __end_of_Menu_Init 0C0C                              ??_I2C_Init 0026  
                        _OPTION_REGbits 0081                    ?i1_One_Digit_Handler 0076  
                ??i1_Disable_All_Digits 0070                 __size_ofi1_Frame_Buffer 0043  
                           ISR@set_flag 00AB               __end_of_Manchester_Decode 0B06  
                     __end_of_Play_Ring 12C9                  PCF8583_Write_Byte@data 0028  
                 __size_of_Generate_PWM 002C        Read_Limit_From_EEprom@limit_type 0028  
                            __pbssBANK0 0059                              __pbssBANK1 00A0  
                            __pbssBANK2 0110                              __pbssBANK3 0190  
 __end_ofIs_Valid_Date@k_min_valid_year 1023           Is_Valid_Date@k_min_valid_year 1021  
             __end_of_PCF8583_Read_Byte 1B74                    __end_of_Menu_Handler 1CF3  
                     __end_of_Show_Time 0D86                       Read_EEprom@adress 0026  
                __end_of_Button_Handler 13C5               Menu_Set_Time@current_menu 00D7  
             __size_of_Init_CompareMode 000C                              __pmaintext 1B74  
                          _Find_Weekday 1458                         ??_Menu_Set_Time 004E  
                               ?___bmul 002D                                 ?___lmul 0026  
                               ?___wmul 0026                          _g_button_timer 00A0  
                            __pintentry 0004                            ?_Check_Event 0070  
      i1Set_Anode_Outputs@decimal_point 0073                          ___lmul@product 002F  
                 __size_of_Display_7Seg 0075                 __end_of_Display_Weekday 1DD4  
                            _g_pwm_freq 00A2                   ??i1_One_Digit_Handler 0078  
                          _Generate_PWM 1A19         Check_Time_Date@current_time_min 0045  
            __end_of_PCF8583_Write_Byte 1A71                      Check_RCV_Data@time 004A  
                 __size_of_Frame_Decode 0055                   __size_of_Frame_Buffer 0044  
                               _SSPCON2 0091                      _Disable_All_Digits 1867  
         PCF8583_Read_Time_Date@bcd_day 003F                            _Is_Leap$1446 003C  
                               _SSPSTAT 0094           PCF8583_Read_Time_Date@bcd_min 003D  
         PCF8583_Read_Time_Date@bcd_hrs 003E           PCF8583_Read_Time_Date@bcd_sec 003C  
         PCF8583_Read_Time_Date@bcd_mon 0040                              __stringtab 1000  
                _PCF8583_Read_Time_Date 06CF                               _BCD_2_DEC 07E6  
                               _Is_Leap 19F1                 __size_of_Check_RCV_Data 004A  
               __end_ofPlay_Ring@melody 1018                     ?_Disable_All_Digits 0070  
                           Wait_ms@time 0033                Frame_Buffer@read_pointer 005D  
                             _DEC_2_BCD 18CA                         ?_Button_Handler 0070  
                          _Display_7Seg 11D9                 ??_Write_Limit_To_EEprom 002A  
                               _Wait_ms 1A71                         __size_of___bmul 0011  
               __end_of_Check_Time_Date 1662                                 ___awdiv 1E29  
                               ___lbdiv 1963                         __size_of___lmul 003F  
                               ___awmod 1D3D                                 ___lbmod 19A6  
                               ___lldiv 1EDC                         __size_of___wmul 0021  
                               ___lwdiv 1BAF                                 ___lwmod 1A9E  
             Manchester_Decode@edge_dir 0078        Manchester_Decode@start_data_flag 00A7  
             Frame_Buffer@write_pointer 005C                   __end_of_Is_Valid_Date 1EDC  
                          _Frame_Decode 1DD4                                 __ptext1 0B06  
                               __ptext2 1CAF                                 __ptext3 0C0C  
                               __ptext4 1D88                                 __ptext5 0D86  
                               __ptext6 108D                                 __ptext7 18E6  
                               __ptext8 10F6                                 __ptext9 18A0  
                          _Frame_Buffer 1C6B                    ??_Disable_All_Digits 0026  
                          __size_of_ISR 0093                               _T1CONbits 0010  
                    Send_7Seg_Text@text 0029                 __size_of_Interrupt_Init 0013  
           Manchester_Decode@pulse_time 0073                        ___awmod@dividend 0028  
                Play_Ring@MELODY_LENGTH 0040                         Find_Weekday@day 003E  
              __size_of_I2C_Master_Read 0028                __size_of_I2C_Master_Wait 000C  
              __size_of_I2C_Master_Stop 0005                               _CRC_check 1921  
                          DEC_2_BCD@dec 0030                       _Set_Anode_Outputs 1F9D  
                               clrloop0 1875              __size_of_Manchester_Decode 00FB  
                  end_of_initialization 0036                      ?_Set_Anode_Outputs 0029  
             Display_7Seg@decimal_point 0031                              ?_BCD_2_DEC 0070  
               __size_of_Send_7Seg_Text 001F              __size_of_PCF8583_Read_Byte 003A  
                      _Init_CaptureMode 18AC                   _PCF8583_Set_Date_Time 0843  
             __size_of_I2C_Master_Start 0005                     ??_Set_Anode_Outputs 002A  
                            ?_DEC_2_BCD 0070               __size_of_I2C_Master_Write 0007  
                       ___lldiv@divisor 0026                         ___lldiv@counter 0033  
              Check_RCV_Data@time_limit 004B          Menu_Init@time_limit_free_day_1 0198  
        Menu_Init@time_limit_free_day_2 0190                          i1_Display_7Seg 1164  
       Check_Time_Date@time_limit_min_1 0047         Check_Time_Date@time_limit_min_2 0043  
                          ?_Global_Init 0070                               _PORTAbits 0005  
                             _PORTBbits 0006                               _PORTCbits 0007  
                      ?_Display_Weekday 0070               __end_of_Set_Anode_Outputs 2000  
                    Button_Init@set_rtc 00C5                          i1_Frame_Buffer 0800  
                      ___lbmod@dividend 002A                        Menu_Set_Time@key 00D2  
                            ?_CRC_check 0070                       __size_of_I2C_Init 000C  
                 __size_of_Menu_Handler 0044                       i1_Sign_Anode_Data 1662  
                           ___lbmod@rem 002C                 ?_Read_Limit_From_EEprom 0027  
                           _CCP1CONbits 0017                      ?i1_Sign_Anode_Data 0070  
                           _CCP2CONbits 001D                              main@keydef 01DB  
              __size_of_Sign_Anode_Data 00CF                        _Init_CompareMode 187C  
                __end_ofi1_Display_7Seg 11D9                            ?_Read_EEprom 0070  
                         Menu_Init@year 01B0                        Frame_Decode@data 002E  
                   ??i1_Sign_Anode_Data 0070                        ?_Check_Time_Date 0042  
                        __end_of___bmul 18CA          One_Digit_Handler@decimal_point 002D  
           i1Display_7Seg@decimal_point 007B                          __end_of___lmul 1C2A  
                        __end_of___wmul 1963                     Check_Time_Date@time 0049  
                          ?_Button_Init 0070                        CRC_check@DataRCV 0033  
                __end_ofi1_Frame_Buffer 0843                    __size_of_Check_Event 007B  
                          _Menu_Handler 1CAF                     start_initialization 0013  
                             _Key_Press 0917                      Frame_Buffer@buffer 0110  
                           __end_of_ISR 1458            __size_ofi1_Set_Anode_Outputs 0063  
                    Write_EEprom@adress 0026                               _Menu_Init 0B06  
             __end_ofi1_Sign_Anode_Data 1731          __end_of_Read_Limit_From_EEprom 1164  
                           ??_BCD_2_DEC 0031                     Menu_Handler@menudef 0055  
                     ??_I2C_Master_Read 0026                  ?_PCF8583_Set_Date_Time 0070  
                     ??_I2C_Master_Wait 0026                          _Check_RCV_Data 1CF3  
                     ??_I2C_Master_Stop 0026                               _Play_Ring 124E  
                              CRC16@crc 002E                __CFG_FOSC$INTRC_NOCLKOUT 0000  
                      CRC_check@crc_val 0031                             ??_DEC_2_BCD 002D  
                       Show_Time@keydef 0042                         ?i1_Display_7Seg 007B  
                              ??___bmul 002E                                ??___lmul 002E  
                             _Show_Time 0C0C                                ??___wmul 002A  
       PCF8583_Read_Time_Date@year_bits 003B                             __pdataBANK0 005E  
                         ?_Write_EEprom 0026                         ?i1_Frame_Buffer 0070  
                        _Interrupt_Init 107A              __size_of_Set_Anode_Outputs 0063  
                            ?_Key_Press 0026                               ___latbits 0002  
                         __pcstackBANK0 0020                           __pcstackBANK1 00D2  
                         __pcstackBANK3 01D6   Menu_Set_Param_Time_Limit@check_button 0038  
               ?_PCF8583_Read_Time_Date 0035                             ??_CRC_check 0030  
 Menu_Set_Param_Time_Limit@change_digit 005B                              ?_Menu_Init 0070  
        Menu_Init@time_limit_work_day_1 01A8          Menu_Init@time_limit_work_day_2 01A0  
         __size_ofi1_Disable_All_Digits 0005                        Frame_Buffer@data 0028  
                      Frame_Buffer@mode 0026          Set_Anode_Outputs@decimal_point 0029  
                __end_of_Check_RCV_Data 1D3D                        ??_Button_Handler 0030  
                        _Send_7Seg_Text 1902                           Show_Time@time 0045  
            ?_Menu_Set_Param_Time_Limit 0036                              ?_Play_Ring 0070  
                              ?_Is_Leap 003A                  Menu_Init@hours_minutes 01C0  
                    _PCF8583_Write_Byte 1A45                        _I2C_Master_Start 185D  
                      _I2C_Master_Write 186D                        ___lwdiv@dividend 002E  
                              ?_Wait_ms 0033                        Generate_PWM@freq 0034  
                            ?_Show_Time 0042                     ?_PCF8583_Write_Byte 0028  
                              ?___awdiv 002D                                ?___lbdiv 0026  
        __size_of_Write_Limit_To_EEprom 0069                                ?___awmod 0026  
                              ?___lbmod 0026                                ?___lldiv 0026  
         __end_of_Write_Limit_To_EEprom 10F6                   __end_of_Menu_Set_Time 1000  
                              ?___lwdiv 002C                                ?___lwmod 0034  
                       Send_7Seg_Text@i 0028             __end_ofi1_One_Digit_Handler 1B05  
                     ??_Sign_Anode_Data 0026           Menu_Set_Param_Time_Limit@flag 00A4  
                        ??_Write_EEprom 0027           Menu_Set_Param_Time_Limit@menu 0036  
                  I2C_Master_Write@data 0026                  __end_of_Interrupt_Init 108D  
                             __pstrings 1000                      Check_Event@DataRCV 0045  
              __end_of_Init_CaptureMode 18B9                          __size_of_CRC16 0041  
Manchester_Decode@next_edge_also_T_flag 00A6                    __size_of_Global_Init 0022  
        __end_of_PCF8583_Read_Time_Date 07E6                                _I2C_Init 1894  
           Send_7Seg_Text@decimal_point 0026                 i1One_Digit_Handler@sign 007A  
                    _g_display_controll 00AE                        ___lwdiv@quotient 0032  
                  ??_PCF8583_Write_Byte 0029              __size_ofi1_Sign_Anode_Data 00CF  
                __end_of_Send_7Seg_Text 1921                         ?_Check_RCV_Data 004A  
                     interrupt_function 0004                          ___wmul@product 002A  
     __end_of_Menu_Set_Param_Time_Limit 06CF                               clear_ram0 1874  
                              _PIE2bits 008D                       Find_Weekday@month 003C  
                  __size_of_Read_EEprom 000C             Write_Limit_To_EEprom@limit1 002B  
           Write_Limit_To_EEprom@limit2 0028                       Button_Init@keydef 0027  
                     Button_Init@set_up 01CF                         ?_Interrupt_Init 0070  
                           __stringbase 1005                       ___wmul@multiplier 0026  
           __size_of_Disable_All_Digits 0006                    __size_of_Button_Init 00B6  
                           ??_Key_Press 0028                __end_of_Init_CompareMode 1888  
                           ??_Menu_Init 002B                     I2C_Master_Read@data 0029  
                     ___lmul@multiplier 0026                         ?_Send_7Seg_Text 0026  
            PCF8583_Read_Time_Date@year 0041                          CRC16@generator 1027  
                           ??_Play_Ring 003C                  __size_of_Is_Valid_Date 005A  
          _g_reciver_ccp2_isr_fire_flag 00AF                        __size_of_Is_Leap 0028  
                   Sign_Anode_Data@sign 0028                     i1_Set_Anode_Outputs 1F3A  
                           ??_Show_Time 0043                        __size_of_Wait_ms 002D  
                      __size_of___awdiv 0059                        __size_of___lbdiv 0021  
                      __size_of___awmod 004B                        __size_of___lbmod 0023  
                      __size_of___lldiv 005E                        __size_of___lwdiv 003C  
                      __size_of___lwmod 0032           Menu_Set_Time@current_menu_ptr 00D4  
                    __end_of__stringtab 1006               Check_Time_Date@time_limit 0042  
                    i1Frame_Buffer@data 0072                      i1Frame_Buffer@mode 0070  
                       _I2C_Master_Read 19C9                  Display_Weekday@weekday 002C  
                       _I2C_Master_Wait 1888                         _I2C_Master_Stop 1862  
                       ___lwdiv@divisor 002C                    ?i1_Set_Anode_Outputs 0073  
                       ___lwdiv@counter 0031                PCF8583_Read_Byte@address 002D  
                              __ptext10 0843                                __ptext11 18CA  
                              __ptext20 1A9E                                __ptext12 003A  
                              __ptext21 1344                                __ptext13 19A6  
                              __ptext30 1A45                                __ptext22 0917  
                              __ptext14 1963                                __ptext31 1B3A  
                              __ptext23 107A                                __ptext15 1D3D  
                              __ptext40 1902                                __ptext32 186D  
                              __ptext24 1894                                __ptext16 1E29  
                              __ptext41 124E                                __ptext33 1862  
                              __ptext25 1984                                __ptext17 1E82  
                              __ptext50 1B05                                __ptext42 1BAF  
                              __ptext34 185D                                __ptext26 1CF3  
                              __ptext18 19F1                                __ptext51 1731  
                              __ptext43 1A71                                __ptext35 19C9  
                              __ptext27 15A4                                __ptext19 1458  
                              __ptext60 1164                                __ptext52 1F9D  
                              __ptext44 1BEB                                __ptext36 1888  
                              __ptext28 1942                                __ptext61 1AD0  
                              __ptext53 1867                                __ptext45 187C  
                              __ptext37 07E6                                __ptext29 06CF  
                              __ptext62 1662                                __ptext54 1DD4  
                              __ptext46 18AC                                __ptext38 18B9  
                              __ptext63 1F3A                                __ptext55 1C6B  
                              __ptext47 1A19                                __ptext39 12C9  
                              __ptext64 1858                                __ptext56 1921  
                              __ptext48 1EDC                                __ptext65 0A0B  
                              __ptext57 1C2A                                __ptext49 11D9  
                              __ptext66 0800                                __ptext58 14EE  
                              __ptext59 13C5                  __end_ofCRC16@generator 1029  
                     __CFG_BOR4V$BOR40V 0000                 ??_PCF8583_Set_Date_Time 0031  
              __size_of_Display_Weekday 004C                   One_Digit_Handler@sign 0030  
                Menu_Set_Time@menu_type 004D                    __end_of_Write_EEprom 1902  
                      ??i1_Display_7Seg 007C                           __size_of_main 003B  
                       _g_decimal_point 00AD                           ?_Find_Weekday 003A  
                      Find_Weekday@wday 004B                        Find_Weekday@year 003A  
                      ??i1_Frame_Buffer 0071                           ??_Check_Event 0044  
                 Check_RCV_Data@DataRCV 004D                                main@time 01E1  
                    I2C_Master_Read@ack 0028                           _Is_Valid_Date 1E82  
                         ?_Generate_PWM 0034                        Write_EEprom@data 0027  
              __end_of_I2C_Master_Start 1862                __end_of_I2C_Master_Write 1874  
                            _INTCONbits 000B                __size_of_Check_Time_Date 00BE  
 PCF8583_Read_Time_Date@time_struct_ptr 0035                       _One_Digit_Handler 1B05  
                 ??i1_Set_Anode_Outputs 0074                      ?_One_Digit_Handler 002C  
                              intlevel1 0000                Manchester_Decode@bit_pos 00A9  
                      ___lwmod@dividend 0036                        ___lldiv@dividend 002A  
           ??_Menu_Set_Param_Time_Limit 0039                     ??_One_Digit_Handler 002E  
                       _Sign_Anode_Data 1731                   Show_Time@check_button 0044  
                      Display_7Seg@text 0033                               stringcode 1000  
                        ??_Find_Weekday 0040                 PCF8583_Read_Byte@retval 002E  
                            _OSCCONbits 008F                           ?_Display_7Seg 0031  
             Menu_Set_Time@check_button 00D3              Manchester_Decode@sync_flag 00A5  
          __end_ofi1_Disable_All_Digits 185D                           Frame_Decode@i 002F  
               __end_of_I2C_Master_Read 19F1                 __end_of_I2C_Master_Wait 1894  
               __end_of_I2C_Master_Stop 1867                           ?_Frame_Decode 0029  
                        ?_Is_Valid_Date 003D                 i1Set_Anode_Outputs@sign 0075  
                         ?_Frame_Buffer 0026                          ??_Generate_PWM 0038  
  PCF8583_Set_Date_Time@time_struct_ptr 0038               __end_of_One_Digit_Handler 1B3A  
                     ?_Init_CaptureMode 0070                        ___lldiv@quotient 002F  
                       ___lwmod@divisor 0034                     __end_of_Check_Event 1344  
                  Menu_Set_Time@menudef 00D6                         ___lwmod@counter 0039  
                      ??_Check_RCV_Data 004C                                stringdir 1000  
                              stringtab 1000                             Is_Leap@year 003A  
                    ??_Init_CaptureMode 0026                             _SSPCON2bits 0091  
                  Button_Init@set_time1 00BE                    Button_Init@set_time2 00B7  
                  Button_Init@set_right 00B0                     Menu_Set_Time@keydef 004C  
                   Button_Init@set_down 01C8                              _SSPCONbits 0014  
                     ??_Display_Weekday 002A                          ??_Display_7Seg 0032  
                     Menu_Set_Time@time 00DF                      __size_of_BCD_2_DEC 0016  
