

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Aug 30 21:13:36 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text55,local,class=CODE,merge=1,delta=2
    73                           	psect	text56,local,class=CODE,merge=1,delta=2
    74                           	psect	text57,local,class=CODE,merge=1,delta=2
    75                           	psect	text58,local,class=CODE,merge=1,delta=2
    76                           	psect	text59,local,class=CODE,merge=1,delta=2
    77                           	psect	text60,local,class=CODE,merge=1,delta=2
    78                           	psect	text61,local,class=CODE,merge=1,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 2.10
    82                           ; Generated 31/07/2019 GMT
    83                           ; 
    84                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F886 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  008F                     	;# 
   158  0090                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0093                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  0105                     	;# 
   177  0107                     	;# 
   178  0108                     	;# 
   179  0109                     	;# 
   180  010C                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  010F                     	;# 
   185  0185                     	;# 
   186  0187                     	;# 
   187  0188                     	;# 
   188  0189                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0009                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000E                     	;# 
   206  000F                     	;# 
   207  0010                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0013                     	;# 
   211  0014                     	;# 
   212  0015                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001B                     	;# 
   221  001C                     	;# 
   222  001D                     	;# 
   223  001E                     	;# 
   224  001F                     	;# 
   225  0081                     	;# 
   226  0085                     	;# 
   227  0086                     	;# 
   228  0087                     	;# 
   229  0089                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  008F                     	;# 
   234  0090                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0093                     	;# 
   238  0093                     	;# 
   239  0093                     	;# 
   240  0094                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0097                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009C                     	;# 
   249  009D                     	;# 
   250  009E                     	;# 
   251  009F                     	;# 
   252  0105                     	;# 
   253  0107                     	;# 
   254  0108                     	;# 
   255  0109                     	;# 
   256  010C                     	;# 
   257  010C                     	;# 
   258  010D                     	;# 
   259  010E                     	;# 
   260  010F                     	;# 
   261  0185                     	;# 
   262  0187                     	;# 
   263  0188                     	;# 
   264  0189                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  000E                     	;# 
   282  000F                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0015                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001B                     	;# 
   297  001C                     	;# 
   298  001D                     	;# 
   299  001E                     	;# 
   300  001F                     	;# 
   301  0081                     	;# 
   302  0085                     	;# 
   303  0086                     	;# 
   304  0087                     	;# 
   305  0089                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  008F                     	;# 
   310  0090                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0093                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0098                     	;# 
   321  0099                     	;# 
   322  009A                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  009F                     	;# 
   328  0105                     	;# 
   329  0107                     	;# 
   330  0108                     	;# 
   331  0109                     	;# 
   332  010C                     	;# 
   333  010C                     	;# 
   334  010D                     	;# 
   335  010E                     	;# 
   336  010F                     	;# 
   337  0185                     	;# 
   338  0187                     	;# 
   339  0188                     	;# 
   340  0189                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  001D                     	;# 
   375  001E                     	;# 
   376  001F                     	;# 
   377  0081                     	;# 
   378  0085                     	;# 
   379  0086                     	;# 
   380  0087                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  008F                     	;# 
   386  0090                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0093                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  009F                     	;# 
   404  0105                     	;# 
   405  0107                     	;# 
   406  0108                     	;# 
   407  0109                     	;# 
   408  010C                     	;# 
   409  010C                     	;# 
   410  010D                     	;# 
   411  010E                     	;# 
   412  010F                     	;# 
   413  0185                     	;# 
   414  0187                     	;# 
   415  0188                     	;# 
   416  0189                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0009                     	;# 
   428  000A                     	;# 
   429  000B                     	;# 
   430  000C                     	;# 
   431  000D                     	;# 
   432  000E                     	;# 
   433  000E                     	;# 
   434  000F                     	;# 
   435  0010                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0013                     	;# 
   439  0014                     	;# 
   440  0015                     	;# 
   441  0015                     	;# 
   442  0016                     	;# 
   443  0017                     	;# 
   444  0018                     	;# 
   445  0019                     	;# 
   446  001A                     	;# 
   447  001B                     	;# 
   448  001B                     	;# 
   449  001C                     	;# 
   450  001D                     	;# 
   451  001E                     	;# 
   452  001F                     	;# 
   453  0081                     	;# 
   454  0085                     	;# 
   455  0086                     	;# 
   456  0087                     	;# 
   457  0089                     	;# 
   458  008C                     	;# 
   459  008D                     	;# 
   460  008E                     	;# 
   461  008F                     	;# 
   462  0090                     	;# 
   463  0091                     	;# 
   464  0092                     	;# 
   465  0093                     	;# 
   466  0093                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0095                     	;# 
   470  0096                     	;# 
   471  0097                     	;# 
   472  0098                     	;# 
   473  0099                     	;# 
   474  009A                     	;# 
   475  009B                     	;# 
   476  009C                     	;# 
   477  009D                     	;# 
   478  009E                     	;# 
   479  009F                     	;# 
   480  0105                     	;# 
   481  0107                     	;# 
   482  0108                     	;# 
   483  0109                     	;# 
   484  010C                     	;# 
   485  010C                     	;# 
   486  010D                     	;# 
   487  010E                     	;# 
   488  010F                     	;# 
   489  0185                     	;# 
   490  0187                     	;# 
   491  0188                     	;# 
   492  0189                     	;# 
   493  018C                     	;# 
   494  018D                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0093                     	;# 
   544  0094                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0097                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009A                     	;# 
   551  009B                     	;# 
   552  009C                     	;# 
   553  009D                     	;# 
   554  009E                     	;# 
   555  009F                     	;# 
   556  0105                     	;# 
   557  0107                     	;# 
   558  0108                     	;# 
   559  0109                     	;# 
   560  010C                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010E                     	;# 
   564  010F                     	;# 
   565  0185                     	;# 
   566  0187                     	;# 
   567  0188                     	;# 
   568  0189                     	;# 
   569  018C                     	;# 
   570  018D                     	;# 
   571  0000                     	;# 
   572  0001                     	;# 
   573  0002                     	;# 
   574  0003                     	;# 
   575  0004                     	;# 
   576  0005                     	;# 
   577  0006                     	;# 
   578  0007                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0089                     	;# 
   610  008C                     	;# 
   611  008D                     	;# 
   612  008E                     	;# 
   613  008F                     	;# 
   614  0090                     	;# 
   615  0091                     	;# 
   616  0092                     	;# 
   617  0093                     	;# 
   618  0093                     	;# 
   619  0093                     	;# 
   620  0094                     	;# 
   621  0095                     	;# 
   622  0096                     	;# 
   623  0097                     	;# 
   624  0098                     	;# 
   625  0099                     	;# 
   626  009A                     	;# 
   627  009B                     	;# 
   628  009C                     	;# 
   629  009D                     	;# 
   630  009E                     	;# 
   631  009F                     	;# 
   632  0105                     	;# 
   633  0107                     	;# 
   634  0108                     	;# 
   635  0109                     	;# 
   636  010C                     	;# 
   637  010C                     	;# 
   638  010D                     	;# 
   639  010E                     	;# 
   640  010F                     	;# 
   641  0185                     	;# 
   642  0187                     	;# 
   643  0188                     	;# 
   644  0189                     	;# 
   645  018C                     	;# 
   646  018D                     	;# 
   647  0000                     	;# 
   648  0001                     	;# 
   649  0002                     	;# 
   650  0003                     	;# 
   651  0004                     	;# 
   652  0005                     	;# 
   653  0006                     	;# 
   654  0007                     	;# 
   655  0009                     	;# 
   656  000A                     	;# 
   657  000B                     	;# 
   658  000C                     	;# 
   659  000D                     	;# 
   660  000E                     	;# 
   661  000E                     	;# 
   662  000F                     	;# 
   663  0010                     	;# 
   664  0011                     	;# 
   665  0012                     	;# 
   666  0013                     	;# 
   667  0014                     	;# 
   668  0015                     	;# 
   669  0015                     	;# 
   670  0016                     	;# 
   671  0017                     	;# 
   672  0018                     	;# 
   673  0019                     	;# 
   674  001A                     	;# 
   675  001B                     	;# 
   676  001B                     	;# 
   677  001C                     	;# 
   678  001D                     	;# 
   679  001E                     	;# 
   680  001F                     	;# 
   681  0081                     	;# 
   682  0085                     	;# 
   683  0086                     	;# 
   684  0087                     	;# 
   685  0089                     	;# 
   686  008C                     	;# 
   687  008D                     	;# 
   688  008E                     	;# 
   689  008F                     	;# 
   690  0090                     	;# 
   691  0091                     	;# 
   692  0092                     	;# 
   693  0093                     	;# 
   694  0093                     	;# 
   695  0093                     	;# 
   696  0094                     	;# 
   697  0095                     	;# 
   698  0096                     	;# 
   699  0097                     	;# 
   700  0098                     	;# 
   701  0099                     	;# 
   702  009A                     	;# 
   703  009B                     	;# 
   704  009C                     	;# 
   705  009D                     	;# 
   706  009E                     	;# 
   707  009F                     	;# 
   708  0105                     	;# 
   709  0107                     	;# 
   710  0108                     	;# 
   711  0109                     	;# 
   712  010C                     	;# 
   713  010C                     	;# 
   714  010D                     	;# 
   715  010E                     	;# 
   716  010F                     	;# 
   717  0185                     	;# 
   718  0187                     	;# 
   719  0188                     	;# 
   720  0189                     	;# 
   721  018C                     	;# 
   722  018D                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  000E                     	;# 
   738  000F                     	;# 
   739  0010                     	;# 
   740  0011                     	;# 
   741  0012                     	;# 
   742  0013                     	;# 
   743  0014                     	;# 
   744  0015                     	;# 
   745  0015                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001B                     	;# 
   753  001C                     	;# 
   754  001D                     	;# 
   755  001E                     	;# 
   756  001F                     	;# 
   757  0081                     	;# 
   758  0085                     	;# 
   759  0086                     	;# 
   760  0087                     	;# 
   761  0089                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  008E                     	;# 
   765  008F                     	;# 
   766  0090                     	;# 
   767  0091                     	;# 
   768  0092                     	;# 
   769  0093                     	;# 
   770  0093                     	;# 
   771  0093                     	;# 
   772  0094                     	;# 
   773  0095                     	;# 
   774  0096                     	;# 
   775  0097                     	;# 
   776  0098                     	;# 
   777  0099                     	;# 
   778  009A                     	;# 
   779  009B                     	;# 
   780  009C                     	;# 
   781  009D                     	;# 
   782  009E                     	;# 
   783  009F                     	;# 
   784  0105                     	;# 
   785  0107                     	;# 
   786  0108                     	;# 
   787  0109                     	;# 
   788  010C                     	;# 
   789  010C                     	;# 
   790  010D                     	;# 
   791  010E                     	;# 
   792  010F                     	;# 
   793  0185                     	;# 
   794  0187                     	;# 
   795  0188                     	;# 
   796  0189                     	;# 
   797  018C                     	;# 
   798  018D                     	;# 
   799  0000                     	;# 
   800  0001                     	;# 
   801  0002                     	;# 
   802  0003                     	;# 
   803  0004                     	;# 
   804  0005                     	;# 
   805  0006                     	;# 
   806  0007                     	;# 
   807  0009                     	;# 
   808  000A                     	;# 
   809  000B                     	;# 
   810  000C                     	;# 
   811  000D                     	;# 
   812  000E                     	;# 
   813  000E                     	;# 
   814  000F                     	;# 
   815  0010                     	;# 
   816  0011                     	;# 
   817  0012                     	;# 
   818  0013                     	;# 
   819  0014                     	;# 
   820  0015                     	;# 
   821  0015                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001B                     	;# 
   829  001C                     	;# 
   830  001D                     	;# 
   831  001E                     	;# 
   832  001F                     	;# 
   833  0081                     	;# 
   834  0085                     	;# 
   835  0086                     	;# 
   836  0087                     	;# 
   837  0089                     	;# 
   838  008C                     	;# 
   839  008D                     	;# 
   840  008E                     	;# 
   841  008F                     	;# 
   842  0090                     	;# 
   843  0091                     	;# 
   844  0092                     	;# 
   845  0093                     	;# 
   846  0093                     	;# 
   847  0093                     	;# 
   848  0094                     	;# 
   849  0095                     	;# 
   850  0096                     	;# 
   851  0097                     	;# 
   852  0098                     	;# 
   853  0099                     	;# 
   854  009A                     	;# 
   855  009B                     	;# 
   856  009C                     	;# 
   857  009D                     	;# 
   858  009E                     	;# 
   859  009F                     	;# 
   860  0105                     	;# 
   861  0107                     	;# 
   862  0108                     	;# 
   863  0109                     	;# 
   864  010C                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  010F                     	;# 
   869  0185                     	;# 
   870  0187                     	;# 
   871  0188                     	;# 
   872  0189                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  0000                     	;# 
   876  0001                     	;# 
   877  0002                     	;# 
   878  0003                     	;# 
   879  0004                     	;# 
   880  0005                     	;# 
   881  0006                     	;# 
   882  0007                     	;# 
   883  0009                     	;# 
   884  000A                     	;# 
   885  000B                     	;# 
   886  000C                     	;# 
   887  000D                     	;# 
   888  000E                     	;# 
   889  000E                     	;# 
   890  000F                     	;# 
   891  0010                     	;# 
   892  0011                     	;# 
   893  0012                     	;# 
   894  0013                     	;# 
   895  0014                     	;# 
   896  0015                     	;# 
   897  0015                     	;# 
   898  0016                     	;# 
   899  0017                     	;# 
   900  0018                     	;# 
   901  0019                     	;# 
   902  001A                     	;# 
   903  001B                     	;# 
   904  001B                     	;# 
   905  001C                     	;# 
   906  001D                     	;# 
   907  001E                     	;# 
   908  001F                     	;# 
   909  0081                     	;# 
   910  0085                     	;# 
   911  0086                     	;# 
   912  0087                     	;# 
   913  0089                     	;# 
   914  008C                     	;# 
   915  008D                     	;# 
   916  008E                     	;# 
   917  008F                     	;# 
   918  0090                     	;# 
   919  0091                     	;# 
   920  0092                     	;# 
   921  0093                     	;# 
   922  0093                     	;# 
   923  0093                     	;# 
   924  0094                     	;# 
   925  0095                     	;# 
   926  0096                     	;# 
   927  0097                     	;# 
   928  0098                     	;# 
   929  0099                     	;# 
   930  009A                     	;# 
   931  009B                     	;# 
   932  009C                     	;# 
   933  009D                     	;# 
   934  009E                     	;# 
   935  009F                     	;# 
   936  0105                     	;# 
   937  0107                     	;# 
   938  0108                     	;# 
   939  0109                     	;# 
   940  010C                     	;# 
   941  010C                     	;# 
   942  010D                     	;# 
   943  010E                     	;# 
   944  010F                     	;# 
   945  0185                     	;# 
   946  0187                     	;# 
   947  0188                     	;# 
   948  0189                     	;# 
   949  018C                     	;# 
   950  018D                     	;# 
   951  0000                     	;# 
   952  0001                     	;# 
   953  0002                     	;# 
   954  0003                     	;# 
   955  0004                     	;# 
   956  0005                     	;# 
   957  0006                     	;# 
   958  0007                     	;# 
   959  0009                     	;# 
   960  000A                     	;# 
   961  000B                     	;# 
   962  000C                     	;# 
   963  000D                     	;# 
   964  000E                     	;# 
   965  000E                     	;# 
   966  000F                     	;# 
   967  0010                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0013                     	;# 
   971  0014                     	;# 
   972  0015                     	;# 
   973  0015                     	;# 
   974  0016                     	;# 
   975  0017                     	;# 
   976  0018                     	;# 
   977  0019                     	;# 
   978  001A                     	;# 
   979  001B                     	;# 
   980  001B                     	;# 
   981  001C                     	;# 
   982  001D                     	;# 
   983  001E                     	;# 
   984  001F                     	;# 
   985  0081                     	;# 
   986  0085                     	;# 
   987  0086                     	;# 
   988  0087                     	;# 
   989  0089                     	;# 
   990  008C                     	;# 
   991  008D                     	;# 
   992  008E                     	;# 
   993  008F                     	;# 
   994  0090                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0093                     	;# 
   998  0093                     	;# 
   999  0093                     	;# 
  1000  0094                     	;# 
  1001  0095                     	;# 
  1002  0096                     	;# 
  1003  0097                     	;# 
  1004  0098                     	;# 
  1005  0099                     	;# 
  1006  009A                     	;# 
  1007  009B                     	;# 
  1008  009C                     	;# 
  1009  009D                     	;# 
  1010  009E                     	;# 
  1011  009F                     	;# 
  1012  0105                     	;# 
  1013  0107                     	;# 
  1014  0108                     	;# 
  1015  0109                     	;# 
  1016  010C                     	;# 
  1017  010C                     	;# 
  1018  010D                     	;# 
  1019  010E                     	;# 
  1020  010F                     	;# 
  1021  0185                     	;# 
  1022  0187                     	;# 
  1023  0188                     	;# 
  1024  0189                     	;# 
  1025  018C                     	;# 
  1026  018D                     	;# 
  1027  0000                     	;# 
  1028  0001                     	;# 
  1029  0002                     	;# 
  1030  0003                     	;# 
  1031  0004                     	;# 
  1032  0005                     	;# 
  1033  0006                     	;# 
  1034  0007                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000D                     	;# 
  1040  000E                     	;# 
  1041  000E                     	;# 
  1042  000F                     	;# 
  1043  0010                     	;# 
  1044  0011                     	;# 
  1045  0012                     	;# 
  1046  0013                     	;# 
  1047  0014                     	;# 
  1048  0015                     	;# 
  1049  0015                     	;# 
  1050  0016                     	;# 
  1051  0017                     	;# 
  1052  0018                     	;# 
  1053  0019                     	;# 
  1054  001A                     	;# 
  1055  001B                     	;# 
  1056  001B                     	;# 
  1057  001C                     	;# 
  1058  001D                     	;# 
  1059  001E                     	;# 
  1060  001F                     	;# 
  1061  0081                     	;# 
  1062  0085                     	;# 
  1063  0086                     	;# 
  1064  0087                     	;# 
  1065  0089                     	;# 
  1066  008C                     	;# 
  1067  008D                     	;# 
  1068  008E                     	;# 
  1069  008F                     	;# 
  1070  0090                     	;# 
  1071  0091                     	;# 
  1072  0092                     	;# 
  1073  0093                     	;# 
  1074  0093                     	;# 
  1075  0093                     	;# 
  1076  0094                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0098                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  009F                     	;# 
  1088  0105                     	;# 
  1089  0107                     	;# 
  1090  0108                     	;# 
  1091  0109                     	;# 
  1092  010C                     	;# 
  1093  010C                     	;# 
  1094  010D                     	;# 
  1095  010E                     	;# 
  1096  010F                     	;# 
  1097  0185                     	;# 
  1098  0187                     	;# 
  1099  0188                     	;# 
  1100  0189                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  0000                     	;# 
  1104  0001                     	;# 
  1105  0002                     	;# 
  1106  0003                     	;# 
  1107  0004                     	;# 
  1108  0005                     	;# 
  1109  0006                     	;# 
  1110  0007                     	;# 
  1111  0009                     	;# 
  1112  000A                     	;# 
  1113  000B                     	;# 
  1114  000C                     	;# 
  1115  000D                     	;# 
  1116  000E                     	;# 
  1117  000E                     	;# 
  1118  000F                     	;# 
  1119  0010                     	;# 
  1120  0011                     	;# 
  1121  0012                     	;# 
  1122  0013                     	;# 
  1123  0014                     	;# 
  1124  0015                     	;# 
  1125  0015                     	;# 
  1126  0016                     	;# 
  1127  0017                     	;# 
  1128  0018                     	;# 
  1129  0019                     	;# 
  1130  001A                     	;# 
  1131  001B                     	;# 
  1132  001B                     	;# 
  1133  001C                     	;# 
  1134  001D                     	;# 
  1135  001E                     	;# 
  1136  001F                     	;# 
  1137  0081                     	;# 
  1138  0085                     	;# 
  1139  0086                     	;# 
  1140  0087                     	;# 
  1141  0089                     	;# 
  1142  008C                     	;# 
  1143  008D                     	;# 
  1144  008E                     	;# 
  1145  008F                     	;# 
  1146  0090                     	;# 
  1147  0091                     	;# 
  1148  0092                     	;# 
  1149  0093                     	;# 
  1150  0093                     	;# 
  1151  0093                     	;# 
  1152  0094                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0098                     	;# 
  1157  0099                     	;# 
  1158  009A                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  0105                     	;# 
  1165  0107                     	;# 
  1166  0108                     	;# 
  1167  0109                     	;# 
  1168  010C                     	;# 
  1169  010C                     	;# 
  1170  010D                     	;# 
  1171  010E                     	;# 
  1172  010F                     	;# 
  1173  0185                     	;# 
  1174  0187                     	;# 
  1175  0188                     	;# 
  1176  0189                     	;# 
  1177  018C                     	;# 
  1178  018D                     	;# 
  1179  0000                     	;# 
  1180  0001                     	;# 
  1181  0002                     	;# 
  1182  0003                     	;# 
  1183  0004                     	;# 
  1184  0005                     	;# 
  1185  0006                     	;# 
  1186  0007                     	;# 
  1187  0009                     	;# 
  1188  000A                     	;# 
  1189  000B                     	;# 
  1190  000C                     	;# 
  1191  000D                     	;# 
  1192  000E                     	;# 
  1193  000E                     	;# 
  1194  000F                     	;# 
  1195  0010                     	;# 
  1196  0011                     	;# 
  1197  0012                     	;# 
  1198  0013                     	;# 
  1199  0014                     	;# 
  1200  0015                     	;# 
  1201  0015                     	;# 
  1202  0016                     	;# 
  1203  0017                     	;# 
  1204  0018                     	;# 
  1205  0019                     	;# 
  1206  001A                     	;# 
  1207  001B                     	;# 
  1208  001B                     	;# 
  1209  001C                     	;# 
  1210  001D                     	;# 
  1211  001E                     	;# 
  1212  001F                     	;# 
  1213  0081                     	;# 
  1214  0085                     	;# 
  1215  0086                     	;# 
  1216  0087                     	;# 
  1217  0089                     	;# 
  1218  008C                     	;# 
  1219  008D                     	;# 
  1220  008E                     	;# 
  1221  008F                     	;# 
  1222  0090                     	;# 
  1223  0091                     	;# 
  1224  0092                     	;# 
  1225  0093                     	;# 
  1226  0093                     	;# 
  1227  0093                     	;# 
  1228  0094                     	;# 
  1229  0095                     	;# 
  1230  0096                     	;# 
  1231  0097                     	;# 
  1232  0098                     	;# 
  1233  0099                     	;# 
  1234  009A                     	;# 
  1235  009B                     	;# 
  1236  009C                     	;# 
  1237  009D                     	;# 
  1238  009E                     	;# 
  1239  009F                     	;# 
  1240  0105                     	;# 
  1241  0107                     	;# 
  1242  0108                     	;# 
  1243  0109                     	;# 
  1244  010C                     	;# 
  1245  010C                     	;# 
  1246  010D                     	;# 
  1247  010E                     	;# 
  1248  010F                     	;# 
  1249  0185                     	;# 
  1250  0187                     	;# 
  1251  0188                     	;# 
  1252  0189                     	;# 
  1253  018C                     	;# 
  1254  018D                     	;# 
  1255                           
  1256                           	psect	idataBANK0
  1257  0003                     __pidataBANK0:	
  1258                           
  1259                           ;initializer for Display_7Seg@enable_digit
  1260  0003  3401               	retlw	1
  1261                           
  1262                           	psect	strings
  1263  1000                     __pstrings:	
  1264  1000                     stringtab:	
  1265  1000                     __stringtab:	
  1266  1000                     stringcode:	
  1267                           ;	String table - string pointers are 1 byte each
  1268                           
  1269  1000                     stringdir:	
  1270  1000  3010               	movlw	high stringdir
  1271  1001  008A               	movwf	10
  1272  1002  0804               	movf	4,w
  1273  1003  0A84               	incf	4,f
  1274  1004  0782               	addwf	2,f
  1275  1005                     __stringbase:	
  1276  1005  3400               	retlw	0
  1277  1006                     __end_of__stringtab:	
  1278  1006                     Play_Ring@melody:	
  1279  1006  3493               	retlw	147
  1280  1007  3402               	retlw	2
  1281  1008  340B               	retlw	11
  1282  1009  3402               	retlw	2
  1283  100A  344B               	retlw	75
  1284  100B  3402               	retlw	2
  1285  100C  3488               	retlw	136
  1286  100D  3401               	retlw	1
  1287  100E  3401               	retlw	1
  1288  100F  3400               	retlw	0
  1289  1010  3488               	retlw	136
  1290  1011  3401               	retlw	1
  1291  1012  344B               	retlw	75
  1292  1013  3402               	retlw	2
  1293  1014  3493               	retlw	147
  1294  1015  3402               	retlw	2
  1295  1016  340B               	retlw	11
  1296  1017  3402               	retlw	2
  1297  1018                     __end_ofPlay_Ring@melody:	
  1298  1018                     Play_Ring@beats:	
  1299  1018  3404               	retlw	4
  1300  1019  3404               	retlw	4
  1301  101A  3404               	retlw	4
  1302  101B  3402               	retlw	2
  1303  101C  3440               	retlw	64
  1304  101D  3404               	retlw	4
  1305  101E  3404               	retlw	4
  1306  101F  3404               	retlw	4
  1307  1020  3402               	retlw	2
  1308  1021                     __end_ofPlay_Ring@beats:	
  1309  1021                     Play_Ring@tempo:	
  1310  1021  3408               	retlw	8
  1311  1022  3407               	retlw	7
  1312  1023                     __end_ofPlay_Ring@tempo:	
  1313  1023                     CRC16@generator:	
  1314  1023  3421               	retlw	33
  1315  1024  3410               	retlw	16
  1316  1025                     __end_ofCRC16@generator:	
  1317  0015                     _CCPR1	set	21
  1318  000E                     _TMR1	set	14
  1319  001B                     _CCPR2	set	27
  1320  0007                     _PORTCbits	set	7
  1321  0017                     _CCP1CONbits	set	23
  1322  001D                     _CCP2CONbits	set	29
  1323  0010                     _T1CONbits	set	16
  1324  000B                     _INTCONbits	set	11
  1325  0013                     _SSPBUF	set	19
  1326  0014                     _SSPCONbits	set	20
  1327  0005                     _PORTAbits	set	5
  1328  0006                     _PORTBbits	set	6
  1329  0007                     _PORTC	set	7
  1330  0006                     _PORTB	set	6
  1331  006C                     _EEIF	set	108
  1332  0062                     _CCP1IF	set	98
  1333  0068                     _CCP2IF	set	104
  1334  005A                     _TMR0IF	set	90
  1335  005D                     _TMR0IE	set	93
  1336  008D                     _PIE2bits	set	141
  1337  0081                     _OPTION_REGbits	set	129
  1338  008F                     _OSCCONbits	set	143
  1339  0094                     _SSPSTATbits	set	148
  1340  0091                     _SSPCON2bits	set	145
  1341  0094                     _SSPSTAT	set	148
  1342  0091                     _SSPCON2	set	145
  1343  0093                     _SSPADD	set	147
  1344  0462                     _CCP1IE	set	1122
  1345  0468                     _CCP2IE	set	1128
  1346  0437                     _TRISB7	set	1079
  1347  0436                     _TRISB6	set	1078
  1348  0435                     _TRISB5	set	1077
  1349  0434                     _TRISB4	set	1076
  1350  0433                     _TRISB3	set	1075
  1351  0432                     _TRISB2	set	1074
  1352  0431                     _TRISB1	set	1073
  1353  0430                     _TRISB0	set	1072
  1354  042F                     _TRISA7	set	1071
  1355  042E                     _TRISA6	set	1070
  1356  042D                     _TRISA5	set	1069
  1357  042C                     _TRISA4	set	1068
  1358  042B                     _TRISA3	set	1067
  1359  042A                     _TRISA2	set	1066
  1360  0429                     _TRISA1	set	1065
  1361  0428                     _TRISA0	set	1064
  1362  043F                     _TRISC7	set	1087
  1363  043E                     _TRISC6	set	1086
  1364  043D                     _TRISC5	set	1085
  1365  043C                     _TRISC4	set	1084
  1366  043B                     _TRISC3	set	1083
  1367  043A                     _TRISC2	set	1082
  1368  0439                     _TRISC1	set	1081
  1369  0438                     _TRISC0	set	1080
  1370  048C                     _ACKEN	set	1164
  1371  048D                     _ACKDT	set	1165
  1372  048B                     _RCEN	set	1163
  1373  010C                     _EEDAT	set	268
  1374  010D                     _EEADR	set	269
  1375  018D                     _EECON2	set	397
  1376  0189                     _ANSELH	set	393
  1377  0188                     _ANSEL	set	392
  1378  0C60                     _RD	set	3168
  1379  0C67                     _EEPGD	set	3175
  1380  0C61                     _WR	set	3169
  1381  0C62                     _WREN	set	3170
  1382  1025                     STR_7:	
  1383  1025  3473               	retlw	115	;'s'
  1384  1026  3465               	retlw	101	;'e'
  1385  1027  3474               	retlw	116	;'t'
  1386  1028  3431               	retlw	49	;'1'
  1387  1029  3400               	retlw	0
  1388  102A                     STR_8:	
  1389  102A  3473               	retlw	115	;'s'
  1390  102B  3472               	retlw	114	;'r'
  1391  102C  3474               	retlw	116	;'t'
  1392  102D  3463               	retlw	99	;'c'
  1393  102E  3400               	retlw	0
  1394  102F                     STR_9:	
  1395  102F  3473               	retlw	115	;'s'
  1396  1030  3461               	retlw	97	;'a'
  1397  1031  3476               	retlw	118	;'v'
  1398  1032  3465               	retlw	101	;'e'
  1399  1033  3400               	retlw	0
  1400  1034                     STR_2:	
  1401  1034  342A               	retlw	42	;'*'
  1402  1035  342A               	retlw	42	;'*'
  1403  1036  342A               	retlw	42	;'*'
  1404  1037  342A               	retlw	42	;'*'
  1405  1038  3400               	retlw	0
  1406  1039                     STR_1:	
  1407  1039  3462               	retlw	98	;'b'
  1408  103A  3472               	retlw	114	;'r'
  1409  103B  3461               	retlw	97	;'a'
  1410  103C  346D               	retlw	109	;'m'
  1411  103D  3400               	retlw	0
  1412  103E                     STR_5:	
  1413  103E  3464               	retlw	100	;'d'
  1414  103F  347A               	retlw	122	;'z'
  1415  1040  3477               	retlw	119	;'w'
  1416  1041  346F               	retlw	111	;'o'
  1417  1042  3400               	retlw	0
  1418  1043                     STR_3:	
  1419  1043  3466               	retlw	102	;'f'
  1420  1044  3475               	retlw	117	;'u'
  1421  1045  3472               	retlw	114	;'r'
  1422  1046  3474               	retlw	116	;'t'
  1423  1047  3400               	retlw	0
  1424  1034                     
  1425                           ; #config settings
  1426  0000                     
  1427                           	psect	cinit
  1428  0013                     start_initialization:	
  1429  0013                     __initialization:	
  1430                           
  1431                           ; Initialize objects allocated to BANK0
  1432  0013  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1433  0018  00E3               	movwf	__pdataBANK0& (0+127)
  1434                           
  1435                           ; Clear objects allocated to BANK3
  1436  0019  1783               	bsf	3,7	;select IRP bank2
  1437  001A  3090               	movlw	low __pbssBANK3
  1438  001B  0084               	movwf	4
  1439  001C  30E4               	movlw	low (__pbssBANK3+84)
  1440  001D  160A  158A  268E  120A  118A  	fcall	clear_ram0
  1441                           
  1442                           ; Clear objects allocated to BANK1
  1443  0022  1383               	bcf	3,7	;select IRP bank0
  1444  0023  30A0               	movlw	low __pbssBANK1
  1445  0024  0084               	movwf	4
  1446  0025  30D0               	movlw	low (__pbssBANK1+48)
  1447  0026  160A  158A  268E  120A  118A  	fcall	clear_ram0
  1448                           
  1449                           ; Clear objects allocated to BANK0
  1450  002B  304C               	movlw	low __pbssBANK0
  1451  002C  0084               	movwf	4
  1452  002D  3063               	movlw	low (__pbssBANK0+23)
  1453  002E  160A  158A  268E   	fcall	clear_ram0
  1454  0031                     end_of_initialization:	
  1455                           ;End of C runtime variable initialization code
  1456                           
  1457  0031                     __end_of__initialization:	
  1458  0031  0183               	clrf	3
  1459  0032  120A  158A  2801   	ljmp	_main	;jump to C main() function
  1460                           
  1461                           	psect	bssBANK0
  1462  004C                     __pbssBANK0:	
  1463  004C                     _g_com_timeout:	
  1464  004C                     	ds	2
  1465  004E                     _g_generic_timer:	
  1466  004E                     	ds	2
  1467  0050                     _g_button_timer:	
  1468  0050                     	ds	2
  1469  0052                     Menu_Set_Param_Time_Limit@change_digit:	
  1470  0052                     	ds	1
  1471  0053                     Manchester_Decode@sync_flag:	
  1472  0053                     	ds	1
  1473  0054                     Manchester_Decode@bit_pos:	
  1474  0054                     	ds	1
  1475  0055                     ISR@display_timer:	
  1476  0055                     	ds	1
  1477  0056                     ISR@set_flag:	
  1478  0056                     	ds	1
  1479  0057                     Frame_Buffer@write_pointer_mem:	
  1480  0057                     	ds	1
  1481  0058                     Frame_Buffer@write_pointer:	
  1482  0058                     	ds	1
  1483  0059                     Frame_Buffer@read_pointer:	
  1484  0059                     	ds	1
  1485  005A                     _g_decimal_point:	
  1486  005A                     	ds	1
  1487  005B                     _g_display_controll:	
  1488  005B                     	ds	1
  1489  005C                     _g_reciver_ccp2_isr_fire_flag:	
  1490  005C                     	ds	1
  1491  005D                     _g_display_text:	
  1492  005D                     	ds	4
  1493  0061                     Manchester_Decode@decoded_byte:	
  1494  0061                     	ds	1
  1495  0062                     ISR@edge_dir:	
  1496  0062                     	ds	1
  1497                           
  1498                           	psect	dataBANK0
  1499  0063                     __pdataBANK0:	
  1500  0063                     Display_7Seg@enable_digit:	
  1501  0063                     	ds	1
  1502                           
  1503                           	psect	bssBANK1
  1504  00A0                     __pbssBANK1:	
  1505  00A0                     _g_pwm_freq:	
  1506  00A0                     	ds	2
  1507  00A2                     Menu_Set_Param_Time_Limit@flag:	
  1508  00A2                     	ds	1
  1509  00A3                     Manchester_Decode@next_edge_also_T_flag:	
  1510  00A3                     	ds	1
  1511  00A4                     Manchester_Decode@start_data_flag:	
  1512  00A4                     	ds	1
  1513  00A5                     Manchester_Decode@data_counter:	
  1514  00A5                     	ds	1
  1515  00A6                     Button_Init@set_down:	
  1516  00A6                     	ds	7
  1517  00AD                     Button_Init@set_up:	
  1518  00AD                     	ds	7
  1519  00B4                     Button_Init@set_right:	
  1520  00B4                     	ds	7
  1521  00BB                     Button_Init@set_time2:	
  1522  00BB                     	ds	7
  1523  00C2                     Button_Init@set_time1:	
  1524  00C2                     	ds	7
  1525  00C9                     Button_Init@set_rtc:	
  1526  00C9                     	ds	7
  1527                           
  1528                           	psect	bssBANK3
  1529  0190                     __pbssBANK3:	
  1530  0190                     Frame_Buffer@buffer:	
  1531  0190                     	ds	60
  1532  01CC                     Menu_Init@time_limit_work_day_2:	
  1533  01CC                     	ds	8
  1534  01D4                     Menu_Init@time_limit_work_day_1:	
  1535  01D4                     	ds	8
  1536  01DC                     Menu_Init@hours_minutes:	
  1537  01DC                     	ds	8
  1538                           
  1539                           	psect	clrtext
  1540  1E8E                     clear_ram0:	
  1541                           ;	Called with FSR containing the base address, and
  1542                           ;	W with the last address+1
  1543                           
  1544  1E8E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1545  1E8F                     clrloop0:	
  1546  1E8F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1547  1E90  0A84               	incf	4,f	;increment pointer
  1548  1E91  0604               	xorwf	4,w	;XOR with final address
  1549  1E92  1903               	btfsc	3,2	;have we reached the end yet?
  1550  1E93  3400               	retlw	0	;all done for this memory range, return
  1551  1E94  0604               	xorwf	4,w	;XOR again to restore value
  1552  1E95  2E8F               	goto	clrloop0	;do the next byte
  1553                           
  1554                           	psect	cstackBANK2
  1555  0110                     __pcstackBANK2:	
  1556  0110                     main@data_rcv:	
  1557                           
  1558                           ; 5 bytes @ 0x0
  1559  0110                     	ds	5
  1560  0115                     main@keydef:	
  1561                           
  1562                           ; 6 bytes @ 0x5
  1563  0115                     	ds	6
  1564  011B                     main@time:	
  1565                           
  1566                           ; 7 bytes @ 0xB
  1567  011B                     	ds	7
  1568  0122                     main@menudef:	
  1569                           
  1570                           ; 7 bytes @ 0x12
  1571  0122                     	ds	7
  1572                           
  1573                           	psect	cstackBANK1
  1574  00D0                     __pcstackBANK1:	
  1575  00D0                     Menu_Set_Time@key:	
  1576                           
  1577                           ; 1 bytes @ 0x0
  1578  00D0                     	ds	1
  1579  00D1                     Menu_Set_Time@check_button:	
  1580                           
  1581                           ; 1 bytes @ 0x1
  1582  00D1                     	ds	1
  1583  00D2                     Menu_Set_Time@current_menu_ptr:	
  1584                           
  1585                           ; 2 bytes @ 0x2
  1586  00D2                     	ds	2
  1587  00D4                     Menu_Set_Time@menudef:	
  1588                           
  1589                           ; 1 bytes @ 0x4
  1590  00D4                     	ds	1
  1591  00D5                     Menu_Set_Time@time:	
  1592                           
  1593                           ; 7 bytes @ 0x5
  1594  00D5                     	ds	7
  1595  00DC                     Menu_Set_Time@current_menu:	
  1596                           
  1597                           ; 8 bytes @ 0xC
  1598  00DC                     	ds	8
  1599                           
  1600                           	psect	cstackCOMMON
  1601  0070                     __pcstackCOMMON:	
  1602  0070                     ?_Global_Init:	
  1603  0070                     ?_Interrupt_Init:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  0070                     ?_I2C_Init:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0070                     ?_Button_Init:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0070                     ?_Menu_Init:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0070                     ?_Play_Ring:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ?_PCF8583_Set_Date_Time:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  0070                     ?_Read_EEprom:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624  0070                     ?_main:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627  0070                     ?_Sign_Anode_Data:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  0070                     ?_Disable_All_Digits:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?_I2C_Master_Wait:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ?_I2C_Master_Start:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?_I2C_Master_Stop:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     ?_I2C_Master_Read:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0070                     ?_ISR:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ?_Key_Press:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?_Button_Handler:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0070                     ?_CRC_check:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657  0070                     ?_Check_Event:	
  1658                           ; 1 bytes @ 0x0
  1659                           
  1660  0070                     ?_Init_CompareMode:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0070                     ?_Init_CaptureMode:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0070                     ?_BCD_2_DEC:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669  0070                     ?_DEC_2_BCD:	
  1670                           ; 1 bytes @ 0x0
  1671                           
  1672  0070                     ?_PCF8583_Read_Byte:	
  1673                           ; 1 bytes @ 0x0
  1674                           
  1675  0070                     ?i1_Frame_Buffer:	
  1676                           ; 1 bytes @ 0x0
  1677                           
  1678  0070                     ?i1_Sign_Anode_Data:	
  1679                           ; 1 bytes @ 0x0
  1680                           
  1681  0070                     ??i1_Sign_Anode_Data:	
  1682                           ; 1 bytes @ 0x0
  1683                           
  1684  0070                     ?i1_Disable_All_Digits:	
  1685                           ; 1 bytes @ 0x0
  1686                           
  1687  0070                     ??i1_Disable_All_Digits:	
  1688                           ; 1 bytes @ 0x0
  1689                           
  1690  0070                     i1Frame_Buffer@mode:	
  1691                           ; 1 bytes @ 0x0
  1692                           
  1693                           
  1694                           ; 1 bytes @ 0x0
  1695  0070                     	ds	1
  1696  0071                     ??i1_Frame_Buffer:	
  1697                           
  1698                           ; 1 bytes @ 0x1
  1699  0071                     	ds	1
  1700  0072                     i1Frame_Buffer@data:	
  1701  0072                     i1Sign_Anode_Data@sign:	
  1702                           ; 1 bytes @ 0x2
  1703                           
  1704                           
  1705                           ; 1 bytes @ 0x2
  1706  0072                     	ds	1
  1707  0073                     ?_Manchester_Decode:	
  1708  0073                     ?i1_Set_Anode_Outputs:	
  1709                           ; 1 bytes @ 0x3
  1710                           
  1711  0073                     Manchester_Decode@pulse_time:	
  1712                           ; 1 bytes @ 0x3
  1713                           
  1714  0073                     i1Set_Anode_Outputs@decimal_point:	
  1715                           ; 1 bytes @ 0x3
  1716                           
  1717                           
  1718                           ; 1 bytes @ 0x3
  1719  0073                     	ds	1
  1720  0074                     ??_Manchester_Decode:	
  1721  0074                     ??i1_Set_Anode_Outputs:	
  1722                           ; 1 bytes @ 0x4
  1723                           
  1724                           
  1725                           ; 1 bytes @ 0x4
  1726  0074                     	ds	1
  1727  0075                     i1Set_Anode_Outputs@sign:	
  1728                           
  1729                           ; 1 bytes @ 0x5
  1730  0075                     	ds	1
  1731  0076                     ?i1_One_Digit_Handler:	
  1732  0076                     i1One_Digit_Handler@digit_number:	
  1733                           ; 1 bytes @ 0x6
  1734                           
  1735                           
  1736                           ; 1 bytes @ 0x6
  1737  0076                     	ds	1
  1738  0077                     i1One_Digit_Handler@decimal_point:	
  1739                           
  1740                           ; 1 bytes @ 0x7
  1741  0077                     	ds	1
  1742  0078                     ??i1_One_Digit_Handler:	
  1743  0078                     Manchester_Decode@edge_dir:	
  1744                           ; 1 bytes @ 0x8
  1745                           
  1746                           
  1747                           ; 1 bytes @ 0x8
  1748  0078                     	ds	2
  1749  007A                     i1One_Digit_Handler@sign:	
  1750                           
  1751                           ; 1 bytes @ 0xA
  1752  007A                     	ds	1
  1753  007B                     ?i1_Display_7Seg:	
  1754  007B                     i1Display_7Seg@decimal_point:	
  1755                           ; 1 bytes @ 0xB
  1756                           
  1757                           
  1758                           ; 1 bytes @ 0xB
  1759  007B                     	ds	1
  1760  007C                     ??i1_Display_7Seg:	
  1761                           
  1762                           ; 1 bytes @ 0xC
  1763  007C                     	ds	1
  1764  007D                     i1Display_7Seg@text:	
  1765                           
  1766                           ; 1 bytes @ 0xD
  1767  007D                     	ds	1
  1768                           
  1769                           	psect	cstackBANK0
  1770  0020                     __pcstackBANK0:	
  1771  0020                     ??_ISR:	
  1772                           
  1773                           ; 1 bytes @ 0x0
  1774  0020                     	ds	4
  1775  0024                     ISR@pulse_time:	
  1776                           
  1777                           ; 2 bytes @ 0x4
  1778  0024                     	ds	2
  1779  0026                     ??_Global_Init:	
  1780  0026                     ??_Interrupt_Init:	
  1781                           ; 1 bytes @ 0x6
  1782                           
  1783  0026                     ??_I2C_Init:	
  1784                           ; 1 bytes @ 0x6
  1785                           
  1786  0026                     ??_Button_Init:	
  1787                           ; 1 bytes @ 0x6
  1788                           
  1789  0026                     ?_Send_7Seg_Text:	
  1790                           ; 1 bytes @ 0x6
  1791                           
  1792  0026                     ?_Write_EEprom:	
  1793                           ; 1 bytes @ 0x6
  1794                           
  1795  0026                     ??_Read_EEprom:	
  1796                           ; 1 bytes @ 0x6
  1797                           
  1798  0026                     ?_Frame_Buffer:	
  1799                           ; 1 bytes @ 0x6
  1800                           
  1801  0026                     ??_Sign_Anode_Data:	
  1802                           ; 1 bytes @ 0x6
  1803                           
  1804  0026                     ??_Disable_All_Digits:	
  1805                           ; 1 bytes @ 0x6
  1806                           
  1807  0026                     ??_I2C_Master_Wait:	
  1808                           ; 1 bytes @ 0x6
  1809                           
  1810  0026                     ??_I2C_Master_Start:	
  1811                           ; 1 bytes @ 0x6
  1812                           
  1813  0026                     ??_I2C_Master_Stop:	
  1814                           ; 1 bytes @ 0x6
  1815                           
  1816  0026                     ?_I2C_Master_Write:	
  1817                           ; 1 bytes @ 0x6
  1818                           
  1819  0026                     ??_I2C_Master_Read:	
  1820                           ; 1 bytes @ 0x6
  1821                           
  1822  0026                     ??_Key_Press:	
  1823                           ; 1 bytes @ 0x6
  1824                           
  1825  0026                     ??_Init_CompareMode:	
  1826                           ; 1 bytes @ 0x6
  1827                           
  1828  0026                     ??_Init_CaptureMode:	
  1829                           ; 1 bytes @ 0x6
  1830                           
  1831  0026                     ?___bmul:	
  1832                           ; 1 bytes @ 0x6
  1833                           
  1834  0026                     ?___lbdiv:	
  1835                           ; 1 bytes @ 0x6
  1836                           
  1837  0026                     ?___lbmod:	
  1838                           ; 1 bytes @ 0x6
  1839                           
  1840  0026                     ?_CRC16:	
  1841                           ; 1 bytes @ 0x6
  1842                           
  1843  0026                     ?___wmul:	
  1844                           ; 2 bytes @ 0x6
  1845                           
  1846  0026                     ?___awdiv:	
  1847                           ; 2 bytes @ 0x6
  1848                           
  1849  0026                     ?___awmod:	
  1850                           ; 2 bytes @ 0x6
  1851                           
  1852  0026                     ?___lwdiv:	
  1853                           ; 2 bytes @ 0x6
  1854                           
  1855  0026                     ?___lmul:	
  1856                           ; 2 bytes @ 0x6
  1857                           
  1858  0026                     ?___lldiv:	
  1859                           ; 4 bytes @ 0x6
  1860                           
  1861  0026                     Frame_Buffer@mode:	
  1862                           ; 4 bytes @ 0x6
  1863                           
  1864  0026                     CRC16@size:	
  1865                           ; 1 bytes @ 0x6
  1866                           
  1867  0026                     Send_7Seg_Text@decimal_point:	
  1868                           ; 1 bytes @ 0x6
  1869                           
  1870  0026                     Write_EEprom@adress:	
  1871                           ; 1 bytes @ 0x6
  1872                           
  1873  0026                     Read_EEprom@adress:	
  1874                           ; 1 bytes @ 0x6
  1875                           
  1876  0026                     ___bmul@multiplicand:	
  1877                           ; 1 bytes @ 0x6
  1878                           
  1879  0026                     ___lbdiv@divisor:	
  1880                           ; 1 bytes @ 0x6
  1881                           
  1882  0026                     ___lbmod@divisor:	
  1883                           ; 1 bytes @ 0x6
  1884                           
  1885  0026                     I2C_Master_Write@data:	
  1886                           ; 1 bytes @ 0x6
  1887                           
  1888  0026                     ___wmul@multiplier:	
  1889                           ; 2 bytes @ 0x6
  1890                           
  1891  0026                     ___awdiv@divisor:	
  1892                           ; 2 bytes @ 0x6
  1893                           
  1894  0026                     ___awmod@divisor:	
  1895                           ; 2 bytes @ 0x6
  1896                           
  1897  0026                     ___lwdiv@divisor:	
  1898                           ; 2 bytes @ 0x6
  1899                           
  1900  0026                     ___lmul@multiplier:	
  1901                           ; 2 bytes @ 0x6
  1902                           
  1903  0026                     ___lldiv@divisor:	
  1904                           ; 4 bytes @ 0x6
  1905                           
  1906                           
  1907                           ; 4 bytes @ 0x6
  1908  0026                     	ds	1
  1909  0027                     ??_Send_7Seg_Text:	
  1910  0027                     ?_Read_Limit_From_EEprom:	
  1911                           ; 1 bytes @ 0x7
  1912                           
  1913  0027                     ??_Write_EEprom:	
  1914                           ; 1 bytes @ 0x7
  1915                           
  1916  0027                     ??_Frame_Buffer:	
  1917                           ; 1 bytes @ 0x7
  1918                           
  1919  0027                     ??___bmul:	
  1920                           ; 1 bytes @ 0x7
  1921                           
  1922  0027                     ??___lbdiv:	
  1923                           ; 1 bytes @ 0x7
  1924                           
  1925  0027                     ??___lbmod:	
  1926                           ; 1 bytes @ 0x7
  1927                           
  1928  0027                     Button_Init@keydef:	
  1929                           ; 1 bytes @ 0x7
  1930                           
  1931  0027                     Read_Limit_From_EEprom@limit2:	
  1932                           ; 1 bytes @ 0x7
  1933                           
  1934  0027                     Write_EEprom@data:	
  1935                           ; 1 bytes @ 0x7
  1936                           
  1937                           
  1938                           ; 1 bytes @ 0x7
  1939  0027                     	ds	1
  1940  0028                     ??_Read_Limit_From_EEprom:	
  1941  0028                     ?_Write_Limit_To_EEprom:	
  1942                           ; 1 bytes @ 0x8
  1943                           
  1944  0028                     ??_CRC16:	
  1945                           ; 1 bytes @ 0x8
  1946                           
  1947  0028                     ??_I2C_Master_Write:	
  1948                           ; 1 bytes @ 0x8
  1949                           
  1950  0028                     ?_PCF8583_Write_Byte:	
  1951                           ; 1 bytes @ 0x8
  1952                           
  1953  0028                     Frame_Buffer@data:	
  1954                           ; 1 bytes @ 0x8
  1955                           
  1956  0028                     Sign_Anode_Data@sign:	
  1957                           ; 1 bytes @ 0x8
  1958                           
  1959  0028                     I2C_Master_Read@ack:	
  1960                           ; 1 bytes @ 0x8
  1961                           
  1962  0028                     Write_Limit_To_EEprom@limit2:	
  1963                           ; 1 bytes @ 0x8
  1964                           
  1965  0028                     Send_7Seg_Text@text:	
  1966                           ; 1 bytes @ 0x8
  1967                           
  1968  0028                     PCF8583_Write_Byte@data:	
  1969                           ; 1 bytes @ 0x8
  1970                           
  1971  0028                     ___bmul@product:	
  1972                           ; 1 bytes @ 0x8
  1973                           
  1974  0028                     ___lbdiv@dividend:	
  1975                           ; 1 bytes @ 0x8
  1976                           
  1977  0028                     ___wmul@multiplicand:	
  1978                           ; 1 bytes @ 0x8
  1979                           
  1980  0028                     ___awdiv@dividend:	
  1981                           ; 2 bytes @ 0x8
  1982                           
  1983  0028                     ___awmod@dividend:	
  1984                           ; 2 bytes @ 0x8
  1985                           
  1986  0028                     ___lwdiv@dividend:	
  1987                           ; 2 bytes @ 0x8
  1988                           
  1989                           
  1990                           ; 2 bytes @ 0x8
  1991  0028                     	ds	1
  1992  0029                     ?_Set_Anode_Outputs:	
  1993  0029                     ??_Write_Limit_To_EEprom:	
  1994                           ; 1 bytes @ 0x9
  1995                           
  1996  0029                     ??_PCF8583_Write_Byte:	
  1997                           ; 1 bytes @ 0x9
  1998                           
  1999  0029                     ?_Frame_Decode:	
  2000                           ; 1 bytes @ 0x9
  2001                           
  2002  0029                     Set_Anode_Outputs@decimal_point:	
  2003                           ; 2 bytes @ 0x9
  2004                           
  2005  0029                     Read_Limit_From_EEprom@limit1:	
  2006                           ; 1 bytes @ 0x9
  2007                           
  2008  0029                     Send_7Seg_Text@i:	
  2009                           ; 1 bytes @ 0x9
  2010                           
  2011  0029                     ___bmul@multiplier:	
  2012                           ; 1 bytes @ 0x9
  2013                           
  2014  0029                     ___lbdiv@counter:	
  2015                           ; 1 bytes @ 0x9
  2016                           
  2017  0029                     I2C_Master_Read@data:	
  2018                           ; 1 bytes @ 0x9
  2019                           
  2020                           
  2021                           ; 2 bytes @ 0x9
  2022  0029                     	ds	1
  2023  002A                     ??_Menu_Init:	
  2024  002A                     ??_Set_Anode_Outputs:	
  2025                           ; 1 bytes @ 0xA
  2026                           
  2027  002A                     ??_BCD_2_DEC:	
  2028                           ; 1 bytes @ 0xA
  2029                           
  2030  002A                     ??___wmul:	
  2031                           ; 1 bytes @ 0xA
  2032                           
  2033  002A                     ??___awdiv:	
  2034                           ; 1 bytes @ 0xA
  2035                           
  2036  002A                     ??___awmod:	
  2037                           ; 1 bytes @ 0xA
  2038                           
  2039  002A                     ??___lwdiv:	
  2040                           ; 1 bytes @ 0xA
  2041                           
  2042  002A                     Key_Press@button:	
  2043                           ; 1 bytes @ 0xA
  2044                           
  2045  002A                     Write_Limit_To_EEprom@limit1:	
  2046                           ; 1 bytes @ 0xA
  2047                           
  2048  002A                     ___lbdiv@quotient:	
  2049                           ; 1 bytes @ 0xA
  2050                           
  2051  002A                     ___lbmod@dividend:	
  2052                           ; 1 bytes @ 0xA
  2053                           
  2054  002A                     ___wmul@product:	
  2055                           ; 1 bytes @ 0xA
  2056                           
  2057  002A                     ___lmul@multiplicand:	
  2058                           ; 2 bytes @ 0xA
  2059                           
  2060  002A                     ___lldiv@dividend:	
  2061                           ; 4 bytes @ 0xA
  2062                           
  2063                           
  2064                           ; 4 bytes @ 0xA
  2065  002A                     	ds	1
  2066  002B                     ??_Button_Handler:	
  2067  002B                     ??_Frame_Decode:	
  2068                           ; 1 bytes @ 0xB
  2069                           
  2070  002B                     ??_PCF8583_Read_Byte:	
  2071                           ; 1 bytes @ 0xB
  2072                           
  2073  002B                     CRC16@data_tab_ptr:	
  2074                           ; 1 bytes @ 0xB
  2075                           
  2076  002B                     Set_Anode_Outputs@sign:	
  2077                           ; 1 bytes @ 0xB
  2078                           
  2079  002B                     Menu_Init@menudef:	
  2080                           ; 1 bytes @ 0xB
  2081                           
  2082  002B                     PCF8583_Write_Byte@address:	
  2083                           ; 1 bytes @ 0xB
  2084                           
  2085  002B                     ___awdiv@counter:	
  2086                           ; 1 bytes @ 0xB
  2087                           
  2088  002B                     ___awmod@counter:	
  2089                           ; 1 bytes @ 0xB
  2090                           
  2091  002B                     ___lbmod@counter:	
  2092                           ; 1 bytes @ 0xB
  2093                           
  2094  002B                     ___lwdiv@counter:	
  2095                           ; 1 bytes @ 0xB
  2096                           
  2097                           
  2098                           ; 1 bytes @ 0xB
  2099  002B                     	ds	1
  2100  002C                     ?_One_Digit_Handler:	
  2101  002C                     CRC16@k:	
  2102                           ; 1 bytes @ 0xC
  2103                           
  2104  002C                     One_Digit_Handler@digit_number:	
  2105                           ; 1 bytes @ 0xC
  2106                           
  2107  002C                     Button_Handler@keydef:	
  2108                           ; 1 bytes @ 0xC
  2109                           
  2110  002C                     ___awdiv@sign:	
  2111                           ; 1 bytes @ 0xC
  2112                           
  2113  002C                     ___awmod@sign:	
  2114                           ; 1 bytes @ 0xC
  2115                           
  2116  002C                     ___lbmod@rem:	
  2117                           ; 1 bytes @ 0xC
  2118                           
  2119  002C                     ___lwdiv@quotient:	
  2120                           ; 1 bytes @ 0xC
  2121                           
  2122                           
  2123                           ; 2 bytes @ 0xC
  2124  002C                     	ds	1
  2125  002D                     ??_DEC_2_BCD:	
  2126  002D                     CRC16@i:	
  2127                           ; 1 bytes @ 0xD
  2128                           
  2129  002D                     One_Digit_Handler@decimal_point:	
  2130                           ; 1 bytes @ 0xD
  2131                           
  2132  002D                     Button_Handler@button:	
  2133                           ; 1 bytes @ 0xD
  2134                           
  2135  002D                     Frame_Decode@DataRCV:	
  2136                           ; 1 bytes @ 0xD
  2137                           
  2138  002D                     BCD_2_DEC@bcd:	
  2139                           ; 1 bytes @ 0xD
  2140                           
  2141  002D                     PCF8583_Read_Byte@address:	
  2142                           ; 1 bytes @ 0xD
  2143                           
  2144  002D                     ___awdiv@quotient:	
  2145                           ; 1 bytes @ 0xD
  2146                           
  2147                           
  2148                           ; 2 bytes @ 0xD
  2149  002D                     	ds	1
  2150  002E                     ??_One_Digit_Handler:	
  2151  002E                     ??___lmul:	
  2152                           ; 1 bytes @ 0xE
  2153                           
  2154  002E                     ??___lldiv:	
  2155                           ; 1 bytes @ 0xE
  2156                           
  2157  002E                     Frame_Decode@data:	
  2158                           ; 1 bytes @ 0xE
  2159                           
  2160  002E                     PCF8583_Read_Byte@retval:	
  2161                           ; 1 bytes @ 0xE
  2162                           
  2163  002E                     CRC16@crc:	
  2164                           ; 1 bytes @ 0xE
  2165                           
  2166                           
  2167                           ; 2 bytes @ 0xE
  2168  002E                     	ds	1
  2169  002F                     ?_PCF8583_Read_Time_Date:	
  2170  002F                     ?_Menu_Set_Param_Time_Limit:	
  2171                           ; 1 bytes @ 0xF
  2172                           
  2173  002F                     Frame_Decode@i:	
  2174                           ; 1 bytes @ 0xF
  2175                           
  2176  002F                     Menu_Set_Param_Time_Limit@menu:	
  2177                           ; 1 bytes @ 0xF
  2178                           
  2179  002F                     PCF8583_Read_Time_Date@time_struct_ptr:	
  2180                           ; 2 bytes @ 0xF
  2181                           
  2182  002F                     ___lmul@product:	
  2183                           ; 2 bytes @ 0xF
  2184                           
  2185  002F                     ___lldiv@quotient:	
  2186                           ; 4 bytes @ 0xF
  2187                           
  2188                           
  2189                           ; 4 bytes @ 0xF
  2190  002F                     	ds	1
  2191  0030                     ??_CRC_check:	
  2192  0030                     One_Digit_Handler@sign:	
  2193                           ; 1 bytes @ 0x10
  2194                           
  2195  0030                     DEC_2_BCD@dec:	
  2196                           ; 1 bytes @ 0x10
  2197                           
  2198                           
  2199                           ; 1 bytes @ 0x10
  2200  0030                     	ds	1
  2201  0031                     ??_PCF8583_Read_Time_Date:	
  2202  0031                     ??_PCF8583_Set_Date_Time:	
  2203                           ; 1 bytes @ 0x11
  2204                           
  2205  0031                     ?_Display_7Seg:	
  2206                           ; 1 bytes @ 0x11
  2207                           
  2208  0031                     Display_7Seg@decimal_point:	
  2209                           ; 1 bytes @ 0x11
  2210                           
  2211  0031                     Menu_Set_Param_Time_Limit@check_button:	
  2212                           ; 1 bytes @ 0x11
  2213                           
  2214  0031                     CRC_check@crc_val:	
  2215                           ; 1 bytes @ 0x11
  2216                           
  2217                           
  2218                           ; 2 bytes @ 0x11
  2219  0031                     	ds	1
  2220  0032                     ??_Menu_Set_Param_Time_Limit:	
  2221  0032                     ??_Display_7Seg:	
  2222                           ; 1 bytes @ 0x12
  2223                           
  2224                           
  2225                           ; 1 bytes @ 0x12
  2226  0032                     	ds	1
  2227  0033                     ?_Wait_ms:	
  2228  0033                     Display_7Seg@text:	
  2229                           ; 1 bytes @ 0x13
  2230                           
  2231  0033                     CRC_check@DataRCV:	
  2232                           ; 1 bytes @ 0x13
  2233                           
  2234  0033                     PCF8583_Set_Date_Time@bcd_sec:	
  2235                           ; 1 bytes @ 0x13
  2236                           
  2237  0033                     ___lldiv@counter:	
  2238                           ; 1 bytes @ 0x13
  2239                           
  2240  0033                     Wait_ms@time:	
  2241                           ; 1 bytes @ 0x13
  2242                           
  2243                           
  2244                           ; 2 bytes @ 0x13
  2245  0033                     	ds	1
  2246  0034                     ?_Generate_PWM:	
  2247  0034                     PCF8583_Set_Date_Time@bcd_min:	
  2248                           ; 1 bytes @ 0x14
  2249                           
  2250  0034                     Generate_PWM@freq:	
  2251                           ; 1 bytes @ 0x14
  2252                           
  2253                           
  2254                           ; 4 bytes @ 0x14
  2255  0034                     	ds	1
  2256  0035                     ??_Wait_ms:	
  2257  0035                     PCF8583_Read_Time_Date@year_bits:	
  2258                           ; 1 bytes @ 0x15
  2259                           
  2260  0035                     PCF8583_Set_Date_Time@bcd_hrs:	
  2261                           ; 1 bytes @ 0x15
  2262                           
  2263                           
  2264                           ; 1 bytes @ 0x15
  2265  0035                     	ds	1
  2266  0036                     PCF8583_Read_Time_Date@bcd_sec:	
  2267  0036                     PCF8583_Set_Date_Time@bcd_day:	
  2268                           ; 1 bytes @ 0x16
  2269                           
  2270                           
  2271                           ; 1 bytes @ 0x16
  2272  0036                     	ds	1
  2273  0037                     PCF8583_Read_Time_Date@bcd_min:	
  2274  0037                     PCF8583_Set_Date_Time@bcd_mon:	
  2275                           ; 1 bytes @ 0x17
  2276                           
  2277                           
  2278                           ; 1 bytes @ 0x17
  2279  0037                     	ds	1
  2280  0038                     ??_Generate_PWM:	
  2281  0038                     PCF8583_Read_Time_Date@bcd_hrs:	
  2282                           ; 1 bytes @ 0x18
  2283                           
  2284  0038                     PCF8583_Set_Date_Time@time_struct_ptr:	
  2285                           ; 1 bytes @ 0x18
  2286                           
  2287                           
  2288                           ; 1 bytes @ 0x18
  2289  0038                     	ds	1
  2290  0039                     PCF8583_Read_Time_Date@bcd_day:	
  2291                           
  2292                           ; 1 bytes @ 0x19
  2293  0039                     	ds	1
  2294  003A                     PCF8583_Read_Time_Date@bcd_mon:	
  2295                           
  2296                           ; 1 bytes @ 0x1A
  2297  003A                     	ds	1
  2298  003B                     PCF8583_Read_Time_Date@year:	
  2299                           
  2300                           ; 1 bytes @ 0x1B
  2301  003B                     	ds	1
  2302  003C                     ??_Play_Ring:	
  2303  003C                     ?_Check_Time_Date:	
  2304                           ; 1 bytes @ 0x1C
  2305                           
  2306  003C                     ?_Show_Time:	
  2307                           ; 1 bytes @ 0x1C
  2308                           
  2309  003C                     Check_Time_Date@time_limit:	
  2310                           ; 1 bytes @ 0x1C
  2311                           
  2312  003C                     Show_Time@keydef:	
  2313                           ; 1 bytes @ 0x1C
  2314                           
  2315                           
  2316                           ; 1 bytes @ 0x1C
  2317  003C                     	ds	1
  2318  003D                     ??_Check_Time_Date:	
  2319  003D                     ??_Show_Time:	
  2320                           ; 1 bytes @ 0x1D
  2321                           
  2322  003D                     Check_Time_Date@time_limit_min_1:	
  2323                           ; 1 bytes @ 0x1D
  2324                           
  2325                           
  2326                           ; 2 bytes @ 0x1D
  2327  003D                     	ds	1
  2328  003E                     Show_Time@time:	
  2329                           
  2330                           ; 1 bytes @ 0x1E
  2331  003E                     	ds	1
  2332  003F                     ?_Menu_Set_Time:	
  2333  003F                     Menu_Set_Time@keydef:	
  2334                           ; 1 bytes @ 0x1F
  2335                           
  2336  003F                     Check_Time_Date@time_limit_min_2:	
  2337                           ; 1 bytes @ 0x1F
  2338                           
  2339                           
  2340                           ; 2 bytes @ 0x1F
  2341  003F                     	ds	1
  2342  0040                     Play_Ring@MELODY_LENGTH:	
  2343  0040                     Menu_Set_Time@menu_type:	
  2344                           ; 1 bytes @ 0x20
  2345                           
  2346                           
  2347                           ; 1 bytes @ 0x20
  2348  0040                     	ds	1
  2349  0041                     ??_Menu_Set_Time:	
  2350  0041                     Check_Time_Date@current_time_min:	
  2351                           ; 1 bytes @ 0x21
  2352                           
  2353  0041                     Play_Ring@j:	
  2354                           ; 2 bytes @ 0x21
  2355                           
  2356                           
  2357                           ; 2 bytes @ 0x21
  2358  0041                     	ds	2
  2359  0043                     Check_Time_Date@time:	
  2360  0043                     Play_Ring@i:	
  2361                           ; 1 bytes @ 0x23
  2362                           
  2363                           
  2364                           ; 1 bytes @ 0x23
  2365  0043                     	ds	1
  2366  0044                     ?_Menu_Handler:	
  2367  0044                     ??_Check_Event:	
  2368                           ; 1 bytes @ 0x24
  2369                           
  2370  0044                     Menu_Handler@keydef:	
  2371                           ; 1 bytes @ 0x24
  2372                           
  2373                           
  2374                           ; 1 bytes @ 0x24
  2375  0044                     	ds	1
  2376  0045                     Check_Event@DataRCV:	
  2377  0045                     Menu_Handler@time:	
  2378                           ; 1 bytes @ 0x25
  2379                           
  2380                           
  2381                           ; 1 bytes @ 0x25
  2382  0045                     	ds	1
  2383  0046                     ?_Check_RCV_Data:	
  2384  0046                     ??_Menu_Handler:	
  2385                           ; 1 bytes @ 0x26
  2386                           
  2387  0046                     Check_RCV_Data@time:	
  2388                           ; 1 bytes @ 0x26
  2389                           
  2390                           
  2391                           ; 1 bytes @ 0x26
  2392  0046                     	ds	1
  2393  0047                     Check_RCV_Data@time_limit:	
  2394  0047                     Menu_Handler@menudef:	
  2395                           ; 1 bytes @ 0x27
  2396                           
  2397                           
  2398                           ; 1 bytes @ 0x27
  2399  0047                     	ds	1
  2400  0048                     ??_Check_RCV_Data:	
  2401  0048                     Menu_Handler@check_button:	
  2402                           ; 1 bytes @ 0x28
  2403                           
  2404                           
  2405                           ; 1 bytes @ 0x28
  2406  0048                     	ds	1
  2407  0049                     Check_RCV_Data@DataRCV:	
  2408                           
  2409                           ; 1 bytes @ 0x29
  2410  0049                     	ds	1
  2411  004A                     ??_main:	
  2412                           
  2413                           ; 1 bytes @ 0x2A
  2414  004A                     	ds	2
  2415                           
  2416                           	psect	maintext
  2417  0801                     __pmaintext:	
  2418 ;;
  2419 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2420 ;;
  2421 ;; *************** function _main *****************
  2422 ;; Defined at:
  2423 ;;		line 25 in file "main.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  menudef         7   18[BANK2 ] struct .
  2428 ;;  time            7   11[BANK2 ] struct .
  2429 ;;  keydef          6    5[BANK2 ] struct .
  2430 ;;  data_rcv        5    0[BANK2 ] struct .
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : B00/0
  2437 ;;		On exit  : 300/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2440 ;;      Params:         0       0       0       0       0
  2441 ;;      Locals:         0       0       0       0      25
  2442 ;;      Temps:          0       2       0       0       0
  2443 ;;      Totals:         0       2       0       0      25
  2444 ;;Total ram usage:       27 bytes
  2445 ;; Hardware stack levels required when called:   10
  2446 ;; This function calls:
  2447 ;;		_Button_Init
  2448 ;;		_Check_RCV_Data
  2449 ;;		_Global_Init
  2450 ;;		_I2C_Init
  2451 ;;		_Interrupt_Init
  2452 ;;		_Menu_Handler
  2453 ;;		_Menu_Init
  2454 ;; This function is called by:
  2455 ;;		Startup code after reset
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           
  2460                           ;psect for function _main
  2461  0801                     _main:	
  2462                           
  2463                           ;main.c: 27:     Global_Init();
  2464                           
  2465                           ;incstack = 0
  2466 ;; hardware stack exceeded
  2467                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2468  0801  160A  158A  2793  120A  158A  	fcall	_Global_Init
  2469                           
  2470                           ;main.c: 28:     Interrupt_Init();
  2471  0806  160A  158A  26E5  120A  158A  	fcall	_Interrupt_Init
  2472                           
  2473                           ;main.c: 29:     I2C_Init();
  2474  080B  160A  158A  26A2  120A  158A  	fcall	_I2C_Init
  2475                           
  2476                           ;main.c: 31:     DataStruct data_rcv;;main.c: 32:     KeyPointerStruct keydef;;main.c: 3
      +                          3:     MenuParamPonterStruct menudef;;main.c: 34:     TimeStruct time;;main.c: 36:     B
      +                          utton_Init(&keydef);
  2477  0810  3015               	movlw	(low (main@keydef| (0+256)))& (0+255)
  2478  0811  120A  158A  22C1  120A  158A  	fcall	_Button_Init
  2479                           
  2480                           ;main.c: 37:     Menu_Init(&menudef);
  2481  0816  3022               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2482  0817  160A  118A  2633  120A  158A  	fcall	_Menu_Init
  2483  081C                     l7248:	
  2484                           
  2485                           ;main.c: 40:     {;main.c: 41:        Check_RCV_Data(&data_rcv,&time,&menudef);
  2486  081C  301B               	movlw	(low (main@time| (0+256)))& (0+255)
  2487  081D  1283               	bcf	3,5	;RP0=0, select bank0
  2488  081E  1303               	bcf	3,6	;RP1=0, select bank0
  2489  081F  00CA               	movwf	??_main
  2490  0820  084A               	movf	??_main,w
  2491  0821  00C6               	movwf	Check_RCV_Data@time
  2492  0822  3022               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2493  0823  00CB               	movwf	??_main+1
  2494  0824  084B               	movf	??_main+1,w
  2495  0825  00C7               	movwf	Check_RCV_Data@time_limit
  2496  0826  3010               	movlw	(low (main@data_rcv| (0+256)))& (0+255)
  2497  0827  160A  118A  23AA  120A  158A  	fcall	_Check_RCV_Data
  2498                           
  2499                           ;main.c: 42:        Menu_Handler(&menudef,&keydef,&time);
  2500  082C  3015               	movlw	(low (main@keydef| (0+256)))& (0+255)
  2501  082D  00CA               	movwf	??_main
  2502  082E  084A               	movf	??_main,w
  2503  082F  00C4               	movwf	Menu_Handler@keydef
  2504  0830  301B               	movlw	(low (main@time| (0+256)))& (0+255)
  2505  0831  00CB               	movwf	??_main+1
  2506  0832  084B               	movf	??_main+1,w
  2507  0833  00C5               	movwf	Menu_Handler@time
  2508  0834  3022               	movlw	(low (main@menudef| (0+256)))& (0+255)
  2509  0835  160A  118A  2118  120A  158A  	fcall	_Menu_Handler
  2510  083A  281C               	goto	l7248
  2511  083B                     __end_of_main:	
  2512                           
  2513                           	psect	text1
  2514  1633                     __ptext1:	
  2515 ;; *************** function _Menu_Init *****************
  2516 ;; Defined at:
  2517 ;;		line 35 in file "menu.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  menudef         1    wreg     PTR struct .
  2520 ;;		 -> main@menudef(7), 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  menudef         1   11[BANK0 ] PTR struct .
  2523 ;;		 -> main@menudef(7), 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : B00/900
  2530 ;;		On exit  : B00/B00
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2533 ;;      Params:         0       0       0       0       0
  2534 ;;      Locals:         0       1       0       0       0
  2535 ;;      Temps:          0       1       0       0       0
  2536 ;;      Totals:         0       2       0       0       0
  2537 ;;Total ram usage:        2 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    6
  2540 ;; This function calls:
  2541 ;;		_Disable_All_Digits
  2542 ;;		_Read_Limit_From_EEprom
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           
  2549                           ;psect for function _Menu_Init
  2550  1633                     _Menu_Init:	
  2551                           
  2552                           ;incstack = 0
  2553                           ; Regs used in _Menu_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2554                           ;Menu_Init@menudef stored from wreg
  2555  1633  1283               	bcf	3,5	;RP0=0, select bank0
  2556  1634  00AB               	movwf	Menu_Init@menudef
  2557                           
  2558                           ;menu.c: 35: void Menu_Init(MenuParamPonterStruct *menudef);menu.c: 36: {;menu.c: 37:   
      +                             g_display_controll=0;
  2559  1635  01DB               	clrf	_g_display_controll	;volatile
  2560                           
  2561                           ;menu.c: 38:      Disable_All_Digits();
  2562  1636  160A  158A  267D  160A  118A  	fcall	_Disable_All_Digits
  2563                           
  2564                           ;menu.c: 40:     static MenuParamStruct hours_minutes;;menu.c: 41:     static MenuParamS
      +                          truct time_limit_work_day_1;;menu.c: 42:     static MenuParamStruct time_limit_work_day_
      +                          2;;menu.c: 44:     menudef->hours_minutes_ptr=&hours_minutes;
  2565  163B  30DC               	movlw	(low (Menu_Init@hours_minutes| (0+256)))& (0+255)
  2566  163C  00AA               	movwf	??_Menu_Init
  2567  163D  082B               	movf	Menu_Init@menudef,w
  2568  163E  0084               	movwf	4
  2569  163F  082A               	movf	??_Menu_Init,w
  2570  1640  1783               	bsf	3,7	;select IRP bank2
  2571  1641  0080               	movwf	0
  2572                           
  2573                           ;menu.c: 45:     menudef->time_limit_work_day_1_ptr=&time_limit_work_day_1;
  2574  1642  30D4               	movlw	(low (Menu_Init@time_limit_work_day_1| (0+256)))& (0+255)
  2575  1643  00AA               	movwf	??_Menu_Init
  2576  1644  082B               	movf	Menu_Init@menudef,w
  2577  1645  3E03               	addlw	3
  2578  1646  0084               	movwf	4
  2579  1647  082A               	movf	??_Menu_Init,w
  2580  1648  0080               	movwf	0
  2581                           
  2582                           ;menu.c: 46:     menudef->time_limit_work_day_2_ptr=&time_limit_work_day_2;
  2583  1649  30CC               	movlw	(low (Menu_Init@time_limit_work_day_2| (0+256)))& (0+255)
  2584  164A  00AA               	movwf	??_Menu_Init
  2585  164B  082B               	movf	Menu_Init@menudef,w
  2586  164C  3E04               	addlw	4
  2587  164D  0084               	movwf	4
  2588  164E  082A               	movf	??_Menu_Init,w
  2589  164F  0080               	movwf	0
  2590                           
  2591                           ;menu.c: 48:     Read_Limit_From_EEprom(menudef->time_limit_work_day_1_ptr,
  2592  1650  082B               	movf	Menu_Init@menudef,w
  2593  1651  3E04               	addlw	4
  2594  1652  0084               	movwf	4
  2595  1653  0800               	movf	0,w
  2596  1654  00AA               	movwf	??_Menu_Init
  2597  1655  082A               	movf	??_Menu_Init,w
  2598  1656  00A7               	movwf	Read_Limit_From_EEprom@limit2
  2599  1657  082B               	movf	Menu_Init@menudef,w
  2600  1658  3E03               	addlw	3
  2601  1659  0084               	movwf	4
  2602  165A  0800               	movf	0,w
  2603  165B  160A  118A  21B5  160A  118A  	fcall	_Read_Limit_From_EEprom
  2604                           
  2605                           ;menu.c: 51:     hours_minutes.max_limit=23;
  2606  1660  3017               	movlw	23
  2607  1661  00AA               	movwf	??_Menu_Init
  2608  1662  082A               	movf	??_Menu_Init,w
  2609  1663  1683               	bsf	3,5	;RP0=1, select bank3
  2610  1664  1703               	bsf	3,6	;RP1=1, select bank3
  2611  1665  00DC               	movwf	Menu_Init@hours_minutes^(0+384)
  2612                           
  2613                           ;menu.c: 52:     hours_minutes.max_limit1=59;
  2614  1666  303B               	movlw	59
  2615  1667  1283               	bcf	3,5	;RP0=0, select bank0
  2616  1668  1303               	bcf	3,6	;RP1=0, select bank0
  2617  1669  00AA               	movwf	??_Menu_Init
  2618  166A  082A               	movf	??_Menu_Init,w
  2619  166B  1683               	bsf	3,5	;RP0=1, select bank3
  2620  166C  1703               	bsf	3,6	;RP1=1, select bank3
  2621  166D  00DD               	movwf	(Menu_Init@hours_minutes^(0+384)+1)
  2622                           
  2623                           ;menu.c: 53:     hours_minutes.min_limit=0;
  2624  166E  01DF               	clrf	(Menu_Init@hours_minutes^(0+384)+3)
  2625                           
  2626                           ;menu.c: 54:     hours_minutes.min_limit1=0;
  2627  166F  01E0               	clrf	(Menu_Init@hours_minutes^(0+384)+4)
  2628                           
  2629                           ;menu.c: 55:     hours_minutes.next_menu=0;
  2630  1670  01E3               	clrf	(low ((Menu_Init@hours_minutes| (0+256)+7)))^(0+128)
  2631                           
  2632                           ;menu.c: 58:     time_limit_work_day_1.max_limit=23;
  2633  1671  3017               	movlw	23
  2634  1672  1283               	bcf	3,5	;RP0=0, select bank0
  2635  1673  1303               	bcf	3,6	;RP1=0, select bank0
  2636  1674  00AA               	movwf	??_Menu_Init
  2637  1675  082A               	movf	??_Menu_Init,w
  2638  1676  1683               	bsf	3,5	;RP0=1, select bank3
  2639  1677  1703               	bsf	3,6	;RP1=1, select bank3
  2640  1678  00D4               	movwf	Menu_Init@time_limit_work_day_1^(0+384)
  2641                           
  2642                           ;menu.c: 59:     time_limit_work_day_1.max_limit1=59;
  2643  1679  303B               	movlw	59
  2644  167A  1283               	bcf	3,5	;RP0=0, select bank0
  2645  167B  1303               	bcf	3,6	;RP1=0, select bank0
  2646  167C  00AA               	movwf	??_Menu_Init
  2647  167D  082A               	movf	??_Menu_Init,w
  2648  167E  1683               	bsf	3,5	;RP0=1, select bank3
  2649  167F  1703               	bsf	3,6	;RP1=1, select bank3
  2650  1680  00D5               	movwf	(Menu_Init@time_limit_work_day_1^(0+384)+1)
  2651                           
  2652                           ;menu.c: 60:     time_limit_work_day_1.min_limit=0;
  2653  1681  01D7               	clrf	(Menu_Init@time_limit_work_day_1^(0+384)+3)
  2654                           
  2655                           ;menu.c: 61:     time_limit_work_day_1.min_limit1=0;
  2656  1682  01D8               	clrf	(Menu_Init@time_limit_work_day_1^(0+384)+4)
  2657                           
  2658                           ;menu.c: 62:     time_limit_work_day_1.next_menu=&time_limit_work_day_2;
  2659  1683  30CC               	movlw	(low (Menu_Init@time_limit_work_day_2| (0+256)))& (0+255)
  2660  1684  1283               	bcf	3,5	;RP0=0, select bank0
  2661  1685  1303               	bcf	3,6	;RP1=0, select bank0
  2662  1686  00AA               	movwf	??_Menu_Init
  2663  1687  082A               	movf	??_Menu_Init,w
  2664  1688  1683               	bsf	3,5	;RP0=1, select bank3
  2665  1689  1703               	bsf	3,6	;RP1=1, select bank3
  2666  168A  00DB               	movwf	(low ((Menu_Init@time_limit_work_day_1| (0+256)+7)))^(0+128)
  2667                           
  2668                           ;menu.c: 64:     time_limit_work_day_2.max_limit=23;
  2669  168B  3017               	movlw	23
  2670  168C  1283               	bcf	3,5	;RP0=0, select bank0
  2671  168D  1303               	bcf	3,6	;RP1=0, select bank0
  2672  168E  00AA               	movwf	??_Menu_Init
  2673  168F  082A               	movf	??_Menu_Init,w
  2674  1690  1683               	bsf	3,5	;RP0=1, select bank3
  2675  1691  1703               	bsf	3,6	;RP1=1, select bank3
  2676  1692  00CC               	movwf	Menu_Init@time_limit_work_day_2^(0+384)
  2677                           
  2678                           ;menu.c: 65:     time_limit_work_day_2.max_limit1=59;
  2679  1693  303B               	movlw	59
  2680  1694  1283               	bcf	3,5	;RP0=0, select bank0
  2681  1695  1303               	bcf	3,6	;RP1=0, select bank0
  2682  1696  00AA               	movwf	??_Menu_Init
  2683  1697  082A               	movf	??_Menu_Init,w
  2684  1698  1683               	bsf	3,5	;RP0=1, select bank3
  2685  1699  1703               	bsf	3,6	;RP1=1, select bank3
  2686  169A  00CD               	movwf	(Menu_Init@time_limit_work_day_2^(0+384)+1)
  2687                           
  2688                           ;menu.c: 66:     time_limit_work_day_2.min_limit=0;
  2689  169B  01CF               	clrf	(Menu_Init@time_limit_work_day_2^(0+384)+3)
  2690                           
  2691                           ;menu.c: 67:     time_limit_work_day_2.min_limit1=0;
  2692  169C  01D0               	clrf	(Menu_Init@time_limit_work_day_2^(0+384)+4)
  2693                           
  2694                           ;menu.c: 68:     time_limit_work_day_2.next_menu=0;
  2695  169D  01D3               	clrf	(low ((Menu_Init@time_limit_work_day_2| (0+256)+7)))^(0+128)
  2696  169E  0008               	return
  2697  169F                     __end_of_Menu_Init:	
  2698                           
  2699                           	psect	text2
  2700  1118                     __ptext2:	
  2701 ;; *************** function _Menu_Handler *****************
  2702 ;; Defined at:
  2703 ;;		line 344 in file "menu.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  menudef         1    wreg     PTR struct .
  2706 ;;		 -> main@menudef(7), 
  2707 ;;  keydef          1   36[BANK0 ] PTR struct .
  2708 ;;		 -> main@keydef(6), 
  2709 ;;  time            1   37[BANK0 ] PTR struct .
  2710 ;;		 -> main@time(7), 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  menudef         1   39[BANK0 ] PTR struct .
  2713 ;;		 -> main@menudef(7), 
  2714 ;;  check_button    1   40[BANK0 ] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 300/800
  2721 ;;		On exit  : 300/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2724 ;;      Params:         0       2       0       0       0
  2725 ;;      Locals:         0       2       0       0       0
  2726 ;;      Temps:          0       1       0       0       0
  2727 ;;      Totals:         0       5       0       0       0
  2728 ;;Total ram usage:        5 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    9
  2731 ;; This function calls:
  2732 ;;		_Button_Handler
  2733 ;;		_Menu_Set_Time
  2734 ;;		_Show_Time
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           
  2741                           ;psect for function _Menu_Handler
  2742  1118                     _Menu_Handler:	
  2743                           
  2744                           ;incstack = 0
  2745 ;; hardware stack exceeded
  2746                           ; Regs used in _Menu_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2747                           ;Menu_Handler@menudef stored from wreg
  2748  1118  00C7               	movwf	Menu_Handler@menudef
  2749                           
  2750                           ;menu.c: 344: void Menu_Handler(MenuParamPonterStruct *menudef, KeyPointerStruct *keydef
      +                          ,;menu.c: 345:                  TimeStruct *time);menu.c: 346: {;menu.c: 347:     unsign
      +                          ed char check_button;;menu.c: 349:     check_button=Button_Handler(keydef);
  2751  1119  0844               	movf	Menu_Handler@keydef,w
  2752  111A  160A  118A  25CA  160A  118A  	fcall	_Button_Handler
  2753  111F  00C6               	movwf	??_Menu_Handler
  2754  1120  0846               	movf	??_Menu_Handler,w
  2755  1121  00C8               	movwf	Menu_Handler@check_button
  2756                           
  2757                           ;menu.c: 350:     if(check_button==k_set_right_short)
  2758  1122  3006               	movlw	6
  2759  1123  0648               	xorwf	Menu_Handler@check_button,w
  2760  1124  1D03               	btfss	3,2
  2761  1125  292F               	goto	l7234
  2762                           
  2763                           ;menu.c: 351:     {;menu.c: 352:         Show_Time(time,keydef);
  2764  1126  0844               	movf	Menu_Handler@keydef,w
  2765  1127  00C6               	movwf	??_Menu_Handler
  2766  1128  0846               	movf	??_Menu_Handler,w
  2767  1129  00BC               	movwf	Show_Time@keydef
  2768  112A  0845               	movf	Menu_Handler@time,w
  2769  112B  160A  118A  2789   	fcall	_Show_Time
  2770                           
  2771                           ;menu.c: 354:     }else if(check_button==k_set_rtc_short)
  2772  112E  0008               	return
  2773  112F                     l7234:	
  2774  112F  0848               	movf	Menu_Handler@check_button,w
  2775  1130  1D03               	btfss	3,2
  2776  1131  293D               	goto	l7238
  2777                           
  2778                           ;menu.c: 355:     {;menu.c: 356:         Menu_Set_Time(menudef,keydef,1);
  2779  1132  0844               	movf	Menu_Handler@keydef,w
  2780  1133  00C6               	movwf	??_Menu_Handler
  2781  1134  0846               	movf	??_Menu_Handler,w
  2782  1135  00BF               	movwf	Menu_Set_Time@keydef
  2783  1136  01C0               	clrf	Menu_Set_Time@menu_type
  2784  1137  0AC0               	incf	Menu_Set_Time@menu_type,f
  2785  1138  0847               	movf	Menu_Handler@menudef,w
  2786  1139  120A  118A  26AD   	fcall	_Menu_Set_Time
  2787                           
  2788                           ;menu.c: 358:     }else if(check_button==k_set_time1_short)
  2789  113C  0008               	return
  2790  113D                     l7238:	
  2791  113D  3002               	movlw	2
  2792  113E  0648               	xorwf	Menu_Handler@check_button,w
  2793  113F  1D03               	btfss	3,2
  2794  1140  0008               	return
  2795                           
  2796                           ;menu.c: 359:     {;menu.c: 360:         Menu_Set_Time(menudef,keydef,0);
  2797  1141  0844               	movf	Menu_Handler@keydef,w
  2798  1142  00C6               	movwf	??_Menu_Handler
  2799  1143  0846               	movf	??_Menu_Handler,w
  2800  1144  00BF               	movwf	Menu_Set_Time@keydef
  2801  1145  01C0               	clrf	Menu_Set_Time@menu_type
  2802  1146  0847               	movf	Menu_Handler@menudef,w
  2803  1147  120A  118A  26AD   	fcall	_Menu_Set_Time
  2804  114A  0008               	return
  2805  114B                     __end_of_Menu_Handler:	
  2806                           
  2807                           	psect	text3
  2808  1789                     __ptext3:	
  2809 ;; *************** function _Show_Time *****************
  2810 ;; Defined at:
  2811 ;;		line 79 in file "menu.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  time            1    wreg     PTR struct .
  2814 ;;		 -> main@time(7), 
  2815 ;;  keydef          1   28[BANK0 ] PTR struct .
  2816 ;;		 -> main@keydef(6), 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  time            1   30[BANK0 ] PTR struct .
  2819 ;;		 -> main@time(7), 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : B00/0
  2826 ;;		On exit  : 300/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2829 ;;      Params:         0       1       0       0       0
  2830 ;;      Locals:         0       1       0       0       0
  2831 ;;      Temps:          0       1       0       0       0
  2832 ;;      Totals:         0       3       0       0       0
  2833 ;;Total ram usage:        3 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    8
  2836 ;; This function calls:
  2837 ;;		_Button_Handler
  2838 ;;		_Disable_All_Digits
  2839 ;;		_PCF8583_Read_Time_Date
  2840 ;;		___awdiv
  2841 ;;		___awmod
  2842 ;; This function is called by:
  2843 ;;		_Menu_Handler
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           
  2848                           ;psect for function _Show_Time
  2849  1789                     _Show_Time:	
  2850                           
  2851                           ;incstack = 0
  2852 ;; hardware stack exceeded
  2853                           ; Regs used in _Show_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2854                           ;Show_Time@time stored from wreg
  2855  1789  00BE               	movwf	Show_Time@time
  2856                           
  2857                           ;menu.c: 79: void Show_Time(TimeStruct *time, KeyPointerStruct *keydef);menu.c: 80: {;me
      +                          nu.c: 82:     PCF8583_Read_Time_Date(time);
  2858  178A  083E               	movf	Show_Time@time,w
  2859  178B  00AF               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  2860  178C  3001               	movlw	1
  2861  178D  00B0               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  2862  178E  120A  158A  26E9  160A  118A  	fcall	_PCF8583_Read_Time_Date
  2863                           
  2864                           ;menu.c: 83:     g_display_controll=1;
  2865  1793  3001               	movlw	1
  2866  1794  1283               	bcf	3,5	;RP0=0, select bank0
  2867  1795  00BD               	movwf	??_Show_Time
  2868  1796  083D               	movf	??_Show_Time,w
  2869  1797  00DB               	movwf	_g_display_controll	;volatile
  2870                           
  2871                           ;menu.c: 85:     g_display_text[0]=time->hours/10;
  2872  1798  300A               	movlw	10
  2873  1799  00A6               	movwf	___awdiv@divisor
  2874  179A  3000               	movlw	0
  2875  179B  00A7               	movwf	___awdiv@divisor+1
  2876  179C  083E               	movf	Show_Time@time,w
  2877  179D  3E02               	addlw	2
  2878  179E  0084               	movwf	4
  2879  179F  1783               	bsf	3,7	;select IRP bank2
  2880  17A0  0800               	movf	0,w
  2881  17A1  00A8               	movwf	___awdiv@dividend
  2882  17A2  01A9               	clrf	___awdiv@dividend+1
  2883  17A3  1BA8               	btfsc	___awdiv@dividend,7
  2884  17A4  03A9               	decf	___awdiv@dividend+1,f
  2885  17A5  160A  118A  244D  160A  118A  	fcall	___awdiv
  2886  17AA  0826               	movf	?___awdiv,w
  2887  17AB  00BD               	movwf	??_Show_Time
  2888  17AC  083D               	movf	??_Show_Time,w
  2889  17AD  00DD               	movwf	_g_display_text
  2890                           
  2891                           ;menu.c: 86:     g_display_text[1]=time->hours%10;
  2892  17AE  300A               	movlw	10
  2893  17AF  00A6               	movwf	___awmod@divisor
  2894  17B0  3000               	movlw	0
  2895  17B1  00A7               	movwf	___awmod@divisor+1
  2896  17B2  083E               	movf	Show_Time@time,w
  2897  17B3  3E02               	addlw	2
  2898  17B4  0084               	movwf	4
  2899  17B5  1783               	bsf	3,7	;select IRP bank2
  2900  17B6  0800               	movf	0,w
  2901  17B7  00A8               	movwf	___awmod@dividend
  2902  17B8  01A9               	clrf	___awmod@dividend+1
  2903  17B9  1BA8               	btfsc	___awmod@dividend,7
  2904  17BA  03A9               	decf	___awmod@dividend+1,f
  2905  17BB  160A  118A  235F  160A  118A  	fcall	___awmod
  2906  17C0  0826               	movf	?___awmod,w
  2907  17C1  00BD               	movwf	??_Show_Time
  2908  17C2  083D               	movf	??_Show_Time,w
  2909  17C3  00DE               	movwf	_g_display_text+1
  2910                           
  2911                           ;menu.c: 87:     g_display_text[2]=time->minutes/10;
  2912  17C4  300A               	movlw	10
  2913  17C5  00A6               	movwf	___awdiv@divisor
  2914  17C6  3000               	movlw	0
  2915  17C7  00A7               	movwf	___awdiv@divisor+1
  2916  17C8  0A3E               	incf	Show_Time@time,w
  2917  17C9  0084               	movwf	4
  2918  17CA  1783               	bsf	3,7	;select IRP bank2
  2919  17CB  0800               	movf	0,w
  2920  17CC  00A8               	movwf	___awdiv@dividend
  2921  17CD  01A9               	clrf	___awdiv@dividend+1
  2922  17CE  1BA8               	btfsc	___awdiv@dividend,7
  2923  17CF  03A9               	decf	___awdiv@dividend+1,f
  2924  17D0  160A  118A  244D  160A  118A  	fcall	___awdiv
  2925  17D5  0826               	movf	?___awdiv,w
  2926  17D6  00BD               	movwf	??_Show_Time
  2927  17D7  083D               	movf	??_Show_Time,w
  2928  17D8  00DF               	movwf	_g_display_text+2
  2929                           
  2930                           ;menu.c: 88:     g_display_text[3]=time->minutes%10;
  2931  17D9  300A               	movlw	10
  2932  17DA  00A6               	movwf	___awmod@divisor
  2933  17DB  3000               	movlw	0
  2934  17DC  00A7               	movwf	___awmod@divisor+1
  2935  17DD  0A3E               	incf	Show_Time@time,w
  2936  17DE  0084               	movwf	4
  2937  17DF  1783               	bsf	3,7	;select IRP bank2
  2938  17E0  0800               	movf	0,w
  2939  17E1  00A8               	movwf	___awmod@dividend
  2940  17E2  01A9               	clrf	___awmod@dividend+1
  2941  17E3  1BA8               	btfsc	___awmod@dividend,7
  2942  17E4  03A9               	decf	___awmod@dividend+1,f
  2943  17E5  160A  118A  235F  160A  118A  	fcall	___awmod
  2944  17EA  0826               	movf	?___awmod,w
  2945  17EB  00BD               	movwf	??_Show_Time
  2946  17EC  083D               	movf	??_Show_Time,w
  2947  17ED  00E0               	movwf	_g_display_text+3
  2948                           
  2949                           ;menu.c: 90:     g_decimal_point=0b0100;
  2950  17EE  3004               	movlw	4
  2951  17EF  00BD               	movwf	??_Show_Time
  2952  17F0  083D               	movf	??_Show_Time,w
  2953  17F1  00DA               	movwf	_g_decimal_point
  2954  17F2                     l7128:	
  2955                           ;menu.c: 92:     while(Button_Handler(keydef)!=k_set_right_short)
  2956                           
  2957                           
  2958                           ;menu.c: 92:     while(Button_Handler(keydef)!=k_set_right_short)
  2959  17F2  083C               	movf	Show_Time@keydef,w
  2960  17F3  160A  118A  25CA  160A  118A  	fcall	_Button_Handler
  2961  17F8  3A06               	xorlw	6
  2962  17F9  1D03               	skipz
  2963  17FA  2FF2               	goto	l7128
  2964                           
  2965                           ;menu.c: 96:     g_display_controll=0;
  2966  17FB  01DB               	clrf	_g_display_controll	;volatile
  2967                           
  2968                           ;menu.c: 97:     Disable_All_Digits();
  2969  17FC  160A  158A  267D   	fcall	_Disable_All_Digits
  2970  17FF  0008               	return
  2971  1800                     __end_of_Show_Time:	
  2972                           
  2973                           	psect	text4
  2974  06AD                     __ptext4:	
  2975 ;; *************** function _Menu_Set_Time *****************
  2976 ;; Defined at:
  2977 ;;		line 109 in file "menu.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;  menudef         1    wreg     PTR struct .
  2980 ;;		 -> main@menudef(7), 
  2981 ;;  keydef          1   31[BANK0 ] PTR struct .
  2982 ;;		 -> main@keydef(6), 
  2983 ;;  menu_type       1   32[BANK0 ] unsigned char 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  menudef         1    4[BANK1 ] PTR struct .
  2986 ;;		 -> main@menudef(7), 
  2987 ;;  current_menu    8   12[BANK1 ] struct MenuParamStruct
  2988 ;;  time            7    5[BANK1 ] struct .
  2989 ;;  current_menu    2    2[BANK1 ] PTR struct MenuParamStru
  2990 ;;		 -> Menu_Set_Time@current_menu(8), NULL(0), Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_work_day_1(8), 
  2991 ;;		 -> Menu_Init@hours_minutes(8), 
  2992 ;;  check_button    1    1[BANK1 ] unsigned char 
  2993 ;;  key             1    0[BANK1 ] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : B00/0
  3000 ;;		On exit  : B00/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3003 ;;      Params:         0       2       0       0       0
  3004 ;;      Locals:         0       0      20       0       0
  3005 ;;      Temps:          0       3       0       0       0
  3006 ;;      Totals:         0       5      20       0       0
  3007 ;;Total ram usage:       25 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    8
  3010 ;; This function calls:
  3011 ;;		_Button_Handler
  3012 ;;		_Menu_Set_Param_Time_Limit
  3013 ;;		_PCF8583_Read_Time_Date
  3014 ;;		_PCF8583_Set_Date_Time
  3015 ;;		_Read_Limit_From_EEprom
  3016 ;;		_Send_7Seg_Text
  3017 ;;		_Write_Limit_To_EEprom
  3018 ;; This function is called by:
  3019 ;;		_Menu_Handler
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           
  3024                           ;psect for function _Menu_Set_Time
  3025  06AD                     _Menu_Set_Time:	
  3026                           
  3027                           ;incstack = 0
  3028 ;; hardware stack exceeded
  3029                           ; Regs used in _Menu_Set_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3030                           ;Menu_Set_Time@menudef stored from wreg
  3031  06AD  1683               	bsf	3,5	;RP0=1, select bank1
  3032  06AE  00D4               	movwf	Menu_Set_Time@menudef^(0+128)
  3033                           
  3034                           ;menu.c: 109: void Menu_Set_Time(MenuParamPonterStruct *menudef, KeyPointerStruct *keyde
      +                          f,;menu.c: 110:                    unsigned char menu_type);menu.c: 111: {;menu.c: 112: 
      +                              unsigned char check_button, key;;menu.c: 113:     MenuParamStruct current_menu;;menu
      +                          .c: 114:     MenuParamStruct *current_menu_ptr=&current_menu;
  3035  06AF  30DC               	movlw	(low (Menu_Set_Time@current_menu| 0))& (0+255)
  3036  06B0  00D2               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3037  06B1  3000               	movlw	0
  3038  06B2  00D3               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3039                           
  3040                           ;menu.c: 115:     TimeStruct time;;menu.c: 117:     g_display_controll=1;
  3041  06B3  3001               	movlw	1
  3042  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  3043  06B5  00C1               	movwf	??_Menu_Set_Time
  3044  06B6  0841               	movf	??_Menu_Set_Time,w
  3045  06B7  00DB               	movwf	_g_display_controll	;volatile
  3046                           
  3047                           ;menu.c: 119:     if(menu_type==0)
  3048  06B8  0840               	movf	Menu_Set_Time@menu_type,w
  3049  06B9  1D03               	btfss	3,2
  3050  06BA  2EF4               	goto	l7150
  3051                           
  3052                           ;menu.c: 120:     {;menu.c: 121:         Send_7Seg_Text("set1", 0);
  3053  06BB  01A6               	clrf	Send_7Seg_Text@decimal_point
  3054  06BC  3020               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3055  06BD  120A  118A  27E2  120A  118A  	fcall	_Send_7Seg_Text
  3056                           
  3057                           ;menu.c: 122:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  3058  06C2  300B               	movlw	11
  3059  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  3060  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  3061  06C5  00C3               	movwf	??_Menu_Set_Time+2
  3062  06C6  3026               	movlw	38
  3063  06C7  00C2               	movwf	??_Menu_Set_Time+1
  3064  06C8  305D               	movlw	93
  3065  06C9  00C1               	movwf	??_Menu_Set_Time
  3066  06CA                     u7077:	
  3067  06CA  0BC1               	decfsz	??_Menu_Set_Time,f
  3068  06CB  2ECA               	goto	u7077
  3069  06CC  0BC2               	decfsz	??_Menu_Set_Time+1,f
  3070  06CD  2ECA               	goto	u7077
  3071  06CE  0BC3               	decfsz	??_Menu_Set_Time+2,f
  3072  06CF  2ECA               	goto	u7077
  3073                           
  3074                           ;menu.c: 123:         Read_Limit_From_EEprom(menudef->time_limit_work_day_1_ptr,
  3075  06D0  1683               	bsf	3,5	;RP0=1, select bank1
  3076  06D1  1303               	bcf	3,6	;RP1=0, select bank1
  3077  06D2  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3078  06D3  3E04               	addlw	4
  3079  06D4  0084               	movwf	4
  3080  06D5  1783               	bsf	3,7	;select IRP bank2
  3081  06D6  0800               	movf	0,w
  3082  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  3083  06D8  00C1               	movwf	??_Menu_Set_Time
  3084  06D9  0841               	movf	??_Menu_Set_Time,w
  3085  06DA  00A7               	movwf	Read_Limit_From_EEprom@limit2
  3086  06DB  1683               	bsf	3,5	;RP0=1, select bank1
  3087  06DC  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3088  06DD  3E03               	addlw	3
  3089  06DE  0084               	movwf	4
  3090  06DF  0800               	movf	0,w
  3091  06E0  160A  118A  21B5  120A  118A  	fcall	_Read_Limit_From_EEprom
  3092                           
  3093                           ;menu.c: 126:         current_menu_ptr=menudef->time_limit_work_day_1_ptr;
  3094  06E5  1683               	bsf	3,5	;RP0=1, select bank1
  3095  06E6  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3096  06E7  3E03               	addlw	3
  3097  06E8  0084               	movwf	4
  3098  06E9  0800               	movf	0,w
  3099  06EA  00D2               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3100  06EB  3001               	movlw	1
  3101  06EC  00D3               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3102                           
  3103                           ;menu.c: 127:         key=k_set_time1_short;
  3104  06ED  3002               	movlw	2
  3105  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  3106  06EF  00C1               	movwf	??_Menu_Set_Time
  3107  06F0  0841               	movf	??_Menu_Set_Time,w
  3108  06F1  1683               	bsf	3,5	;RP0=1, select bank1
  3109  06F2  00D0               	movwf	Menu_Set_Time@key^(0+128)
  3110                           
  3111                           ;menu.c: 129:     }else if(menu_type==1)
  3112  06F3  2F39               	goto	l7166
  3113  06F4                     l7150:	
  3114  06F4  0340               	decf	Menu_Set_Time@menu_type,w
  3115  06F5  1D03               	btfss	3,2
  3116  06F6  2F39               	goto	l7166
  3117                           
  3118                           ;menu.c: 130:     {;menu.c: 131:         Send_7Seg_Text("srtc", 0);
  3119  06F7  01A6               	clrf	Send_7Seg_Text@decimal_point
  3120  06F8  3025               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3121  06F9  120A  118A  27E2  120A  118A  	fcall	_Send_7Seg_Text
  3122                           
  3123                           ;menu.c: 132:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  3124  06FE  300B               	movlw	11
  3125  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  3126  0700  1303               	bcf	3,6	;RP1=0, select bank0
  3127  0701  00C3               	movwf	??_Menu_Set_Time+2
  3128  0702  3026               	movlw	38
  3129  0703  00C2               	movwf	??_Menu_Set_Time+1
  3130  0704  305D               	movlw	93
  3131  0705  00C1               	movwf	??_Menu_Set_Time
  3132  0706                     u7087:	
  3133  0706  0BC1               	decfsz	??_Menu_Set_Time,f
  3134  0707  2F06               	goto	u7087
  3135  0708  0BC2               	decfsz	??_Menu_Set_Time+1,f
  3136  0709  2F06               	goto	u7087
  3137  070A  0BC3               	decfsz	??_Menu_Set_Time+2,f
  3138  070B  2F06               	goto	u7087
  3139                           
  3140                           ;menu.c: 134:         PCF8583_Read_Time_Date(&time);
  3141  070C  30D5               	movlw	(low (Menu_Set_Time@time| 0))& (0+255)
  3142  070D  1283               	bcf	3,5	;RP0=0, select bank0
  3143  070E  1303               	bcf	3,6	;RP1=0, select bank0
  3144  070F  00AF               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  3145  0710  3000               	movlw	0
  3146  0711  00B0               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  3147  0712  120A  158A  26E9  120A  118A  	fcall	_PCF8583_Read_Time_Date
  3148                           
  3149                           ;menu.c: 136:         menudef->hours_minutes_ptr->param1=time.minutes;
  3150  0717  0856               	movf	(Menu_Set_Time@time^(0+128)+1),w
  3151  0718  1283               	bcf	3,5	;RP0=0, select bank0
  3152  0719  00C1               	movwf	??_Menu_Set_Time
  3153  071A  1683               	bsf	3,5	;RP0=1, select bank1
  3154  071B  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3155  071C  0084               	movwf	4
  3156  071D  1783               	bsf	3,7	;select IRP bank2
  3157  071E  0800               	movf	0,w
  3158  071F  3E06               	addlw	6
  3159  0720  0084               	movwf	4
  3160  0721  1283               	bcf	3,5	;RP0=0, select bank0
  3161  0722  0841               	movf	??_Menu_Set_Time,w
  3162  0723  0080               	movwf	0
  3163                           
  3164                           ;menu.c: 137:         menudef->hours_minutes_ptr->param=time.hours;
  3165  0724  1683               	bsf	3,5	;RP0=1, select bank1
  3166  0725  0857               	movf	(Menu_Set_Time@time^(0+128)+2),w
  3167  0726  1283               	bcf	3,5	;RP0=0, select bank0
  3168  0727  00C1               	movwf	??_Menu_Set_Time
  3169  0728  1683               	bsf	3,5	;RP0=1, select bank1
  3170  0729  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3171  072A  0084               	movwf	4
  3172  072B  0800               	movf	0,w
  3173  072C  3E05               	addlw	5
  3174  072D  0084               	movwf	4
  3175  072E  1283               	bcf	3,5	;RP0=0, select bank0
  3176  072F  0841               	movf	??_Menu_Set_Time,w
  3177  0730  0080               	movwf	0
  3178                           
  3179                           ;menu.c: 139:         current_menu_ptr=menudef->hours_minutes_ptr;
  3180  0731  1683               	bsf	3,5	;RP0=1, select bank1
  3181  0732  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3182  0733  0084               	movwf	4
  3183  0734  0800               	movf	0,w
  3184  0735  00D2               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3185  0736  3001               	movlw	1
  3186  0737  00D3               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3187                           
  3188                           ;menu.c: 140:         key=k_set_rtc_short;
  3189  0738  01D0               	clrf	Menu_Set_Time@key^(0+128)
  3190  0739                     l7166:	
  3191                           
  3192                           ;menu.c: 143:     g_decimal_point=0b0100;
  3193  0739  3004               	movlw	4
  3194  073A  1283               	bcf	3,5	;RP0=0, select bank0
  3195  073B  00C1               	movwf	??_Menu_Set_Time
  3196  073C  0841               	movf	??_Menu_Set_Time,w
  3197  073D  00DA               	movwf	_g_decimal_point
  3198  073E                     l7168:	
  3199                           
  3200                           ;menu.c: 146:     {;menu.c: 147:         Menu_Set_Param_Time_Limit(current_menu_ptr, che
      +                          ck_button);
  3201  073E  1683               	bsf	3,5	;RP0=1, select bank1
  3202  073F  0852               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  3203  0740  1283               	bcf	3,5	;RP0=0, select bank0
  3204  0741  00AF               	movwf	Menu_Set_Param_Time_Limit@menu
  3205  0742  1683               	bsf	3,5	;RP0=1, select bank1
  3206  0743  0853               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  3207  0744  1283               	bcf	3,5	;RP0=0, select bank0
  3208  0745  00B0               	movwf	Menu_Set_Param_Time_Limit@menu+1
  3209  0746  1683               	bsf	3,5	;RP0=1, select bank1
  3210  0747  0851               	movf	Menu_Set_Time@check_button^(0+128),w
  3211  0748  1283               	bcf	3,5	;RP0=0, select bank0
  3212  0749  00C1               	movwf	??_Menu_Set_Time
  3213  074A  0841               	movf	??_Menu_Set_Time,w
  3214  074B  00B1               	movwf	Menu_Set_Param_Time_Limit@check_button
  3215  074C  120A  118A  2035  120A  118A  	fcall	_Menu_Set_Param_Time_Limit
  3216                           
  3217                           ;menu.c: 150:         check_button=Button_Handler(keydef);
  3218  0751  083F               	movf	Menu_Set_Time@keydef,w
  3219  0752  160A  118A  25CA  120A  118A  	fcall	_Button_Handler
  3220  0757  00C1               	movwf	??_Menu_Set_Time
  3221  0758  0841               	movf	??_Menu_Set_Time,w
  3222  0759  1683               	bsf	3,5	;RP0=1, select bank1
  3223  075A  00D1               	movwf	Menu_Set_Time@check_button^(0+128)
  3224                           
  3225                           ;menu.c: 151:         if(check_button==key)
  3226  075B  0851               	movf	Menu_Set_Time@check_button^(0+128),w
  3227  075C  0650               	xorwf	Menu_Set_Time@key^(0+128),w
  3228  075D  1D03               	skipz
  3229  075E  2F3E               	goto	l7168
  3230                           
  3231                           ;menu.c: 152:         {;menu.c: 153:            if(current_menu_ptr->next_menu==0)
  3232  075F  0852               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  3233  0760  3E07               	addlw	7
  3234  0761  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0762  00C1               	movwf	??_Menu_Set_Time
  3236  0763  1683               	bsf	3,5	;RP0=1, select bank1
  3237  0764  0853               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  3238  0765  1803               	skipnc
  3239  0766  3E01               	addlw	1
  3240  0767  3E00               	addlw	0
  3241  0768  1283               	bcf	3,5	;RP0=0, select bank0
  3242  0769  00C2               	movwf	??_Menu_Set_Time+1
  3243  076A  0841               	movf	??_Menu_Set_Time,w
  3244  076B  0084               	movwf	4
  3245  076C  1783               	bsf	3,7
  3246  076D  1C42               	btfss	??_Menu_Set_Time+1,0
  3247  076E  1383               	bcf	3,7
  3248  076F  0800               	movf	0,w
  3249  0770  1D03               	btfss	3,2
  3250  0771  2FCB               	goto	l7198
  3251                           
  3252                           ;menu.c: 154:            {;menu.c: 155:                 if(menu_type==0)
  3253  0772  0840               	movf	Menu_Set_Time@menu_type,w
  3254  0773  1D03               	btfss	3,2
  3255  0774  2F8A               	goto	l7180
  3256                           
  3257                           ;menu.c: 156:                 {;menu.c: 157:                     Write_Limit_To_EEprom(m
      +                          enudef->time_limit_work_day_1_ptr,
  3258  0775  1683               	bsf	3,5	;RP0=1, select bank1
  3259  0776  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3260  0777  3E04               	addlw	4
  3261  0778  0084               	movwf	4
  3262  0779  1783               	bsf	3,7	;select IRP bank2
  3263  077A  0800               	movf	0,w
  3264  077B  1283               	bcf	3,5	;RP0=0, select bank0
  3265  077C  00C1               	movwf	??_Menu_Set_Time
  3266  077D  0841               	movf	??_Menu_Set_Time,w
  3267  077E  00A8               	movwf	Write_Limit_To_EEprom@limit2
  3268  077F  1683               	bsf	3,5	;RP0=1, select bank1
  3269  0780  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3270  0781  3E03               	addlw	3
  3271  0782  0084               	movwf	4
  3272  0783  0800               	movf	0,w
  3273  0784  160A  118A  20E8  120A  118A  	fcall	_Write_Limit_To_EEprom
  3274                           
  3275                           ;menu.c: 160:                 }else if(menu_type==1)
  3276  0789  2FAC               	goto	l7190
  3277  078A                     l7180:	
  3278  078A  0340               	decf	Menu_Set_Time@menu_type,w
  3279  078B  1D03               	btfss	3,2
  3280  078C  2FAC               	goto	l7190
  3281                           
  3282                           ;menu.c: 161:                 {;menu.c: 162:                     time.seconds=0;
  3283  078D  1683               	bsf	3,5	;RP0=1, select bank1
  3284  078E  01D5               	clrf	Menu_Set_Time@time^(0+128)
  3285                           
  3286                           ;menu.c: 163:                     time.minutes=menudef->hours_minutes_ptr->param1;
  3287  078F  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3288  0790  0084               	movwf	4
  3289  0791  1783               	bsf	3,7	;select IRP bank2
  3290  0792  0800               	movf	0,w
  3291  0793  3E06               	addlw	6
  3292  0794  0084               	movwf	4
  3293  0795  0800               	movf	0,w
  3294  0796  1283               	bcf	3,5	;RP0=0, select bank0
  3295  0797  00C1               	movwf	??_Menu_Set_Time
  3296  0798  0841               	movf	??_Menu_Set_Time,w
  3297  0799  1683               	bsf	3,5	;RP0=1, select bank1
  3298  079A  00D6               	movwf	(Menu_Set_Time@time^(0+128)+1)
  3299                           
  3300                           ;menu.c: 164:                     time.hours=menudef->hours_minutes_ptr->param;
  3301  079B  0854               	movf	Menu_Set_Time@menudef^(0+128),w
  3302  079C  0084               	movwf	4
  3303  079D  0800               	movf	0,w
  3304  079E  3E05               	addlw	5
  3305  079F  0084               	movwf	4
  3306  07A0  0800               	movf	0,w
  3307  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  3308  07A2  00C1               	movwf	??_Menu_Set_Time
  3309  07A3  0841               	movf	??_Menu_Set_Time,w
  3310  07A4  1683               	bsf	3,5	;RP0=1, select bank1
  3311  07A5  00D7               	movwf	(Menu_Set_Time@time^(0+128)+2)
  3312                           
  3313                           ;menu.c: 166:                     PCF8583_Set_Date_Time(&time);
  3314  07A6  30D5               	movlw	(low (Menu_Set_Time@time| 0))& (0+255)
  3315  07A7  120A  158A  250A  120A  118A  	fcall	_PCF8583_Set_Date_Time
  3316  07AC                     l7190:	
  3317                           
  3318                           ;menu.c: 169:                     Send_7Seg_Text("save",0);
  3319  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  3320  07AD  01A6               	clrf	Send_7Seg_Text@decimal_point
  3321  07AE  302A               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3322  07AF  120A  118A  27E2  120A  118A  	fcall	_Send_7Seg_Text
  3323                           
  3324                           ;menu.c: 170:                     _delay((unsigned long)((2000)*(8000000/4000.0)));
  3325  07B4  3015               	movlw	21
  3326  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  3327  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  3328  07B7  00C3               	movwf	??_Menu_Set_Time+2
  3329  07B8  304B               	movlw	75
  3330  07B9  00C2               	movwf	??_Menu_Set_Time+1
  3331  07BA  30BD               	movlw	189
  3332  07BB  00C1               	movwf	??_Menu_Set_Time
  3333  07BC                     u7097:	
  3334  07BC  0BC1               	decfsz	??_Menu_Set_Time,f
  3335  07BD  2FBC               	goto	u7097
  3336  07BE  0BC2               	decfsz	??_Menu_Set_Time+1,f
  3337  07BF  2FBC               	goto	u7097
  3338  07C0  0BC3               	decfsz	??_Menu_Set_Time+2,f
  3339  07C1  2FBC               	goto	u7097
  3340  07C2  2FC3               	nop2
  3341                           
  3342                           ;menu.c: 171:                     Send_7Seg_Text("****",0);
  3343  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  3344  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  3345  07C5  01A6               	clrf	Send_7Seg_Text@decimal_point
  3346  07C6  302F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3347  07C7  120A  118A  27E2   	fcall	_Send_7Seg_Text
  3348  07CA  0008               	return
  3349  07CB                     l7198:	
  3350                           
  3351                           ;menu.c: 175:               current_menu_ptr=(current_menu_ptr->next_menu);
  3352  07CB  1683               	bsf	3,5	;RP0=1, select bank1
  3353  07CC  0852               	movf	Menu_Set_Time@current_menu_ptr^(0+128),w
  3354  07CD  3E07               	addlw	7
  3355  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  3356  07CF  00C1               	movwf	??_Menu_Set_Time
  3357  07D0  1683               	bsf	3,5	;RP0=1, select bank1
  3358  07D1  0853               	movf	(Menu_Set_Time@current_menu_ptr+1)^(0+128),w
  3359  07D2  1803               	skipnc
  3360  07D3  3E01               	addlw	1
  3361  07D4  3E00               	addlw	0
  3362  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  3363  07D6  00C2               	movwf	??_Menu_Set_Time+1
  3364  07D7  0841               	movf	??_Menu_Set_Time,w
  3365  07D8  0084               	movwf	4
  3366  07D9  1783               	bsf	3,7
  3367  07DA  1C42               	btfss	??_Menu_Set_Time+1,0
  3368  07DB  1383               	bcf	3,7
  3369  07DC  0800               	movf	0,w
  3370  07DD  1683               	bsf	3,5	;RP0=1, select bank1
  3371  07DE  00D2               	movwf	Menu_Set_Time@current_menu_ptr^(0+128)
  3372  07DF  3001               	movlw	1
  3373  07E0  00D3               	movwf	(Menu_Set_Time@current_menu_ptr+1)^(0+128)
  3374  07E1  2F3E               	goto	l7168
  3375  07E2                     __end_of_Menu_Set_Time:	
  3376                           
  3377                           	psect	text5
  3378  10E8                     __ptext5:	
  3379 ;; *************** function _Write_Limit_To_EEprom *****************
  3380 ;; Defined at:
  3381 ;;		line 372 in file "menu.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  limit1          1    wreg     PTR struct MenuParamStru
  3384 ;;		 -> Menu_Init@time_limit_work_day_1(8), 
  3385 ;;  limit2          1    8[BANK0 ] PTR struct MenuParamStru
  3386 ;;		 -> Menu_Init@time_limit_work_day_2(8), 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  limit1          1   10[BANK0 ] PTR struct MenuParamStru
  3389 ;;		 -> Menu_Init@time_limit_work_day_1(8), 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : B00/900
  3396 ;;		On exit  : B00/800
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3399 ;;      Params:         0       1       0       0       0
  3400 ;;      Locals:         0       1       0       0       0
  3401 ;;      Temps:          0       1       0       0       0
  3402 ;;      Totals:         0       3       0       0       0
  3403 ;;Total ram usage:        3 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    5
  3406 ;; This function calls:
  3407 ;;		_Write_EEprom
  3408 ;; This function is called by:
  3409 ;;		_Menu_Set_Time
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           
  3414                           ;psect for function _Write_Limit_To_EEprom
  3415  10E8                     _Write_Limit_To_EEprom:	
  3416                           
  3417                           ;incstack = 0
  3418                           ; Regs used in _Write_Limit_To_EEprom: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3419                           ;Write_Limit_To_EEprom@limit1 stored from wreg
  3420  10E8  1283               	bcf	3,5	;RP0=0, select bank0
  3421  10E9  00AA               	movwf	Write_Limit_To_EEprom@limit1
  3422                           
  3423                           ;menu.c: 372: void Write_Limit_To_EEprom(MenuParamStruct *limit1, MenuParamStruct *limit
      +                          2);menu.c: 373: {;menu.c: 375:     Write_EEprom(limit1->param, 0x00);
  3424  10EA  01A6               	clrf	Write_EEprom@adress
  3425  10EB  082A               	movf	Write_Limit_To_EEprom@limit1,w
  3426  10EC  3E05               	addlw	5
  3427  10ED  0084               	movwf	4
  3428  10EE  0800               	movf	0,w
  3429  10EF  160A  158A  2714  160A  118A  	fcall	_Write_EEprom
  3430                           
  3431                           ;menu.c: 376:     Write_EEprom(limit1->param1,0x01);
  3432  10F4  01A6               	clrf	Write_EEprom@adress
  3433  10F5  0AA6               	incf	Write_EEprom@adress,f
  3434  10F6  082A               	movf	Write_Limit_To_EEprom@limit1,w
  3435  10F7  3E06               	addlw	6
  3436  10F8  0084               	movwf	4
  3437  10F9  0800               	movf	0,w
  3438  10FA  160A  158A  2714  160A  118A  	fcall	_Write_EEprom
  3439                           
  3440                           ;menu.c: 377:     Write_EEprom(limit2->param, 0x02);
  3441  10FF  3002               	movlw	2
  3442  1100  00A9               	movwf	??_Write_Limit_To_EEprom
  3443  1101  0829               	movf	??_Write_Limit_To_EEprom,w
  3444  1102  00A6               	movwf	Write_EEprom@adress
  3445  1103  0828               	movf	Write_Limit_To_EEprom@limit2,w
  3446  1104  3E05               	addlw	5
  3447  1105  0084               	movwf	4
  3448  1106  0800               	movf	0,w
  3449  1107  160A  158A  2714  160A  118A  	fcall	_Write_EEprom
  3450                           
  3451                           ;menu.c: 378:     Write_EEprom(limit2->param1, 0x03);
  3452  110C  3003               	movlw	3
  3453  110D  00A9               	movwf	??_Write_Limit_To_EEprom
  3454  110E  0829               	movf	??_Write_Limit_To_EEprom,w
  3455  110F  00A6               	movwf	Write_EEprom@adress
  3456  1110  0828               	movf	Write_Limit_To_EEprom@limit2,w
  3457  1111  3E06               	addlw	6
  3458  1112  0084               	movwf	4
  3459  1113  0800               	movf	0,w
  3460  1114  160A  158A  2714   	fcall	_Write_EEprom
  3461  1117  0008               	return
  3462  1118                     __end_of_Write_Limit_To_EEprom:	
  3463                           
  3464                           	psect	text6
  3465  1F14                     __ptext6:	
  3466 ;; *************** function _Write_EEprom *****************
  3467 ;; Defined at:
  3468 ;;		line 11 in file "flash.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  data            1    wreg     char 
  3471 ;;  adress          1    6[BANK0 ] unsigned char 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  data            1    7[BANK0 ] char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg
  3478 ;; Tracked objects:
  3479 ;;		On entry : B00/800
  3480 ;;		On exit  : B00/800
  3481 ;;		Unchanged: 800/0
  3482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3483 ;;      Params:         0       1       0       0       0
  3484 ;;      Locals:         0       1       0       0       0
  3485 ;;      Temps:          0       0       0       0       0
  3486 ;;      Totals:         0       2       0       0       0
  3487 ;;Total ram usage:        2 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    4
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		_Write_Limit_To_EEprom
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function _Write_EEprom
  3499  1F14                     _Write_EEprom:	
  3500                           
  3501                           ;incstack = 0
  3502                           ; Regs used in _Write_EEprom: [wreg]
  3503                           ;Write_EEprom@data stored from wreg
  3504  1F14  00A7               	movwf	Write_EEprom@data
  3505                           
  3506                           ;flash.c: 11: void Write_EEprom(signed char data, unsigned char adress);flash.c: 12: {;f
      +                          lash.c: 13:     EEADR=adress;
  3507  1F15  0826               	movf	Write_EEprom@adress,w
  3508  1F16  1703               	bsf	3,6	;RP1=1, select bank2
  3509  1F17  008D               	movwf	13	;volatile
  3510                           
  3511                           ;flash.c: 14:     EEDAT=data;
  3512  1F18  1303               	bcf	3,6	;RP1=0, select bank0
  3513  1F19  0827               	movf	Write_EEprom@data,w
  3514  1F1A  1703               	bsf	3,6	;RP1=1, select bank2
  3515  1F1B  008C               	movwf	12	;volatile
  3516                           
  3517                           ;flash.c: 15:     INTCONbits.GIE=0;
  3518  1F1C  138B               	bcf	11,7	;volatile
  3519                           
  3520                           ;flash.c: 16:     WREN=1;
  3521  1F1D  1683               	bsf	3,5	;RP0=1, select bank3
  3522  1F1E  150C               	bsf	12,2	;volsfr
  3523                           
  3524                           ;flash.c: 17:     EECON2=0x55;
  3525  1F1F  3055               	movlw	85
  3526  1F20  008D               	movwf	13	;volsfr
  3527                           
  3528                           ;flash.c: 18:     EECON2=0xAA;
  3529  1F21  30AA               	movlw	170
  3530  1F22  008D               	movwf	13	;volsfr
  3531                           
  3532                           ;flash.c: 19:     WR=1;
  3533  1F23  148C               	bsf	12,1	;volsfr
  3534  1F24                     l800:	
  3535                           ;flash.c: 20:     while(!EEIF){};
  3536                           
  3537  1F24  1283               	bcf	3,5	;RP0=0, select bank0
  3538  1F25  1303               	bcf	3,6	;RP1=0, select bank0
  3539  1F26  1E0D               	btfss	13,4	;volatile
  3540  1F27  2F24               	goto	l800
  3541                           
  3542                           ;flash.c: 21:     WREN=0;
  3543  1F28  1683               	bsf	3,5	;RP0=1, select bank3
  3544  1F29  1703               	bsf	3,6	;RP1=1, select bank3
  3545  1F2A  110C               	bcf	12,2	;volsfr
  3546                           
  3547                           ;flash.c: 22:     EEIF=0;
  3548  1F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3549  1F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3550  1F2D  120D               	bcf	13,4	;volatile
  3551                           
  3552                           ;flash.c: 23:     INTCONbits.GIE=1;
  3553  1F2E  178B               	bsf	11,7	;volatile
  3554  1F2F  0008               	return
  3555  1F30                     __end_of_Write_EEprom:	
  3556                           
  3557                           	psect	text7
  3558  11B5                     __ptext7:	
  3559 ;; *************** function _Read_Limit_From_EEprom *****************
  3560 ;; Defined at:
  3561 ;;		line 389 in file "menu.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  limit1          1    wreg     PTR struct MenuParamStru
  3564 ;;		 -> Menu_Init@time_limit_work_day_1(8), 
  3565 ;;  limit2          1    7[BANK0 ] PTR struct MenuParamStru
  3566 ;;		 -> Menu_Init@time_limit_work_day_2(8), 
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  limit1          1    9[BANK0 ] PTR struct MenuParamStru
  3569 ;;		 -> Menu_Init@time_limit_work_day_1(8), 
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : A00/800
  3576 ;;		On exit  : B00/800
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3579 ;;      Params:         0       1       0       0       0
  3580 ;;      Locals:         0       1       0       0       0
  3581 ;;      Temps:          0       1       0       0       0
  3582 ;;      Totals:         0       3       0       0       0
  3583 ;;Total ram usage:        3 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    5
  3586 ;; This function calls:
  3587 ;;		_Read_EEprom
  3588 ;; This function is called by:
  3589 ;;		_Menu_Init
  3590 ;;		_Menu_Set_Time
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           
  3595                           ;psect for function _Read_Limit_From_EEprom
  3596  11B5                     _Read_Limit_From_EEprom:	
  3597                           
  3598                           ;incstack = 0
  3599                           ; Regs used in _Read_Limit_From_EEprom: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3600                           ;Read_Limit_From_EEprom@limit1 stored from wreg
  3601  11B5  1283               	bcf	3,5	;RP0=0, select bank0
  3602  11B6  00A9               	movwf	Read_Limit_From_EEprom@limit1
  3603                           
  3604                           ;menu.c: 389: void Read_Limit_From_EEprom(MenuParamStruct *limit1, MenuParamStruct *limi
      +                          t2);menu.c: 390: {;menu.c: 391:     limit1->param=Read_EEprom(0x00);
  3605  11B7  3000               	movlw	0
  3606  11B8  160A  158A  26AE  160A  118A  	fcall	_Read_EEprom
  3607  11BD  1303               	bcf	3,6	;RP1=0, select bank0
  3608  11BE  00A8               	movwf	??_Read_Limit_From_EEprom
  3609  11BF  0829               	movf	Read_Limit_From_EEprom@limit1,w
  3610  11C0  3E05               	addlw	5
  3611  11C1  0084               	movwf	4
  3612  11C2  0828               	movf	??_Read_Limit_From_EEprom,w
  3613  11C3  0080               	movwf	0
  3614                           
  3615                           ;menu.c: 392:     limit1->param1=Read_EEprom(0x01);
  3616  11C4  3001               	movlw	1
  3617  11C5  160A  158A  26AE  160A  118A  	fcall	_Read_EEprom
  3618  11CA  1303               	bcf	3,6	;RP1=0, select bank0
  3619  11CB  00A8               	movwf	??_Read_Limit_From_EEprom
  3620  11CC  0829               	movf	Read_Limit_From_EEprom@limit1,w
  3621  11CD  3E06               	addlw	6
  3622  11CE  0084               	movwf	4
  3623  11CF  0828               	movf	??_Read_Limit_From_EEprom,w
  3624  11D0  0080               	movwf	0
  3625                           
  3626                           ;menu.c: 393:     limit2->param=Read_EEprom(0x02);
  3627  11D1  3002               	movlw	2
  3628  11D2  160A  158A  26AE  160A  118A  	fcall	_Read_EEprom
  3629  11D7  1303               	bcf	3,6	;RP1=0, select bank0
  3630  11D8  00A8               	movwf	??_Read_Limit_From_EEprom
  3631  11D9  0827               	movf	Read_Limit_From_EEprom@limit2,w
  3632  11DA  3E05               	addlw	5
  3633  11DB  0084               	movwf	4
  3634  11DC  0828               	movf	??_Read_Limit_From_EEprom,w
  3635  11DD  0080               	movwf	0
  3636                           
  3637                           ;menu.c: 394:     limit2->param1=Read_EEprom(0x03);
  3638  11DE  3003               	movlw	3
  3639  11DF  160A  158A  26AE   	fcall	_Read_EEprom
  3640  11E2  1303               	bcf	3,6	;RP1=0, select bank0
  3641  11E3  00A8               	movwf	??_Read_Limit_From_EEprom
  3642  11E4  0827               	movf	Read_Limit_From_EEprom@limit2,w
  3643  11E5  3E06               	addlw	6
  3644  11E6  0084               	movwf	4
  3645  11E7  0828               	movf	??_Read_Limit_From_EEprom,w
  3646  11E8  0080               	movwf	0
  3647  11E9  0008               	return
  3648  11EA                     __end_of_Read_Limit_From_EEprom:	
  3649                           
  3650                           	psect	text8
  3651  1EAE                     __ptext8:	
  3652 ;; *************** function _Read_EEprom *****************
  3653 ;; Defined at:
  3654 ;;		line 26 in file "flash.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  adress          1    wreg     unsigned char 
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;  adress          1    6[BANK0 ] unsigned char 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      char 
  3661 ;; Registers used:
  3662 ;;		wreg
  3663 ;; Tracked objects:
  3664 ;;		On entry : B00/800
  3665 ;;		On exit  : B00/A00
  3666 ;;		Unchanged: 800/0
  3667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3668 ;;      Params:         0       0       0       0       0
  3669 ;;      Locals:         0       1       0       0       0
  3670 ;;      Temps:          0       0       0       0       0
  3671 ;;      Totals:         0       1       0       0       0
  3672 ;;Total ram usage:        1 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    4
  3675 ;; This function calls:
  3676 ;;		Nothing
  3677 ;; This function is called by:
  3678 ;;		_Read_Limit_From_EEprom
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           
  3683                           ;psect for function _Read_EEprom
  3684  1EAE                     _Read_EEprom:	
  3685                           
  3686                           ;incstack = 0
  3687                           ; Regs used in _Read_EEprom: [wreg]
  3688                           ;Read_EEprom@adress stored from wreg
  3689  1EAE  00A6               	movwf	Read_EEprom@adress
  3690                           
  3691                           ;flash.c: 26: signed char Read_EEprom(unsigned char adress);flash.c: 27: {;flash.c: 28: 
      +                              INTCONbits.GIE=0;
  3692  1EAF  138B               	bcf	11,7	;volatile
  3693                           
  3694                           ;flash.c: 29:     EEADR=adress;
  3695  1EB0  0826               	movf	Read_EEprom@adress,w
  3696  1EB1  1703               	bsf	3,6	;RP1=1, select bank2
  3697  1EB2  008D               	movwf	13	;volatile
  3698                           
  3699                           ;flash.c: 30:     EEPGD=0;
  3700  1EB3  1683               	bsf	3,5	;RP0=1, select bank3
  3701  1EB4  138C               	bcf	12,7	;volsfr
  3702                           
  3703                           ;flash.c: 31:     RD=1;
  3704  1EB5  140C               	bsf	12,0	;volsfr
  3705                           
  3706                           ;flash.c: 32:     INTCONbits.GIE=1;
  3707  1EB6  178B               	bsf	11,7	;volatile
  3708                           
  3709                           ;flash.c: 33:     return EEDAT;
  3710  1EB7  1283               	bcf	3,5	;RP0=0, select bank2
  3711  1EB8  080C               	movf	12,w	;volatile
  3712  1EB9  0008               	return
  3713  1EBA                     __end_of_Read_EEprom:	
  3714                           
  3715                           	psect	text9
  3716  0D0A                     __ptext9:	
  3717 ;; *************** function _PCF8583_Set_Date_Time *****************
  3718 ;; Defined at:
  3719 ;;		line 105 in file "pcf8583.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  time_struct_    1    wreg     PTR struct .
  3722 ;;		 -> Menu_Set_Time@time(7), 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  time_struct_    1   24[BANK0 ] PTR struct .
  3725 ;;		 -> Menu_Set_Time@time(7), 
  3726 ;;  bcd_mon         1   23[BANK0 ] unsigned char 
  3727 ;;  bcd_day         1   22[BANK0 ] unsigned char 
  3728 ;;  bcd_hrs         1   21[BANK0 ] unsigned char 
  3729 ;;  bcd_min         1   20[BANK0 ] unsigned char 
  3730 ;;  bcd_sec         1   19[BANK0 ] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : B00/900
  3737 ;;		On exit  : 300/100
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3740 ;;      Params:         0       0       0       0       0
  3741 ;;      Locals:         0       6       0       0       0
  3742 ;;      Temps:          0       2       0       0       0
  3743 ;;      Totals:         0       8       0       0       0
  3744 ;;Total ram usage:        8 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    7
  3747 ;; This function calls:
  3748 ;;		_DEC_2_BCD
  3749 ;;		_I2C_Master_Start
  3750 ;;		_I2C_Master_Stop
  3751 ;;		_I2C_Master_Write
  3752 ;;		_PCF8583_Write_Byte
  3753 ;; This function is called by:
  3754 ;;		_Menu_Set_Time
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function _PCF8583_Set_Date_Time
  3760  0D0A                     _PCF8583_Set_Date_Time:	
  3761                           
  3762                           ;incstack = 0
  3763 ;; hardware stack exceeded
  3764                           ; Regs used in _PCF8583_Set_Date_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3765                           ;PCF8583_Set_Date_Time@time_struct_ptr stored from wreg
  3766  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  3767  0D0B  00B8               	movwf	PCF8583_Set_Date_Time@time_struct_ptr
  3768                           
  3769                           ;pcf8583.c: 105: void PCF8583_Set_Date_Time(TimeStruct *time_struct_ptr);pcf8583.c: 106:
      +                           {;pcf8583.c: 107:  unsigned char bcd_sec;;pcf8583.c: 108:  unsigned char bcd_min;;pcf85
      +                          83.c: 109:  unsigned char bcd_hrs;;pcf8583.c: 110:  unsigned char bcd_day;;pcf8583.c: 11
      +                          1:  unsigned char bcd_mon;;pcf8583.c: 113:  INTCONbits.GIE=0;
  3770  0D0C  138B               	bcf	11,7	;volatile
  3771                           
  3772                           ;pcf8583.c: 115:  bcd_sec = DEC_2_BCD(time_struct_ptr->seconds);
  3773  0D0D  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  3774  0D0E  0084               	movwf	4
  3775  0D0F  1383               	bcf	3,7	;select IRP bank0
  3776  0D10  0800               	movf	0,w
  3777  0D11  160A  158A  26F8  120A  158A  	fcall	_DEC_2_BCD
  3778  0D16  00B1               	movwf	??_PCF8583_Set_Date_Time
  3779  0D17  0831               	movf	??_PCF8583_Set_Date_Time,w
  3780  0D18  00B3               	movwf	PCF8583_Set_Date_Time@bcd_sec
  3781                           
  3782                           ;pcf8583.c: 116:  bcd_min = DEC_2_BCD(time_struct_ptr->minutes);
  3783  0D19  0A38               	incf	PCF8583_Set_Date_Time@time_struct_ptr,w
  3784  0D1A  0084               	movwf	4
  3785  0D1B  1383               	bcf	3,7	;select IRP bank0
  3786  0D1C  0800               	movf	0,w
  3787  0D1D  160A  158A  26F8  120A  158A  	fcall	_DEC_2_BCD
  3788  0D22  00B1               	movwf	??_PCF8583_Set_Date_Time
  3789  0D23  0831               	movf	??_PCF8583_Set_Date_Time,w
  3790  0D24  00B4               	movwf	PCF8583_Set_Date_Time@bcd_min
  3791                           
  3792                           ;pcf8583.c: 117:  bcd_hrs = DEC_2_BCD(time_struct_ptr->hours);
  3793  0D25  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  3794  0D26  3E02               	addlw	2
  3795  0D27  0084               	movwf	4
  3796  0D28  1383               	bcf	3,7	;select IRP bank0
  3797  0D29  0800               	movf	0,w
  3798  0D2A  160A  158A  26F8  120A  158A  	fcall	_DEC_2_BCD
  3799  0D2F  00B1               	movwf	??_PCF8583_Set_Date_Time
  3800  0D30  0831               	movf	??_PCF8583_Set_Date_Time,w
  3801  0D31  00B5               	movwf	PCF8583_Set_Date_Time@bcd_hrs
  3802                           
  3803                           ;pcf8583.c: 118:  bcd_day = DEC_2_BCD(time_struct_ptr->day) | (time_struct_ptr->year<<6)
      +                          ;
  3804  0D32  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  3805  0D33  3E05               	addlw	5
  3806  0D34  0084               	movwf	4
  3807  0D35  1383               	bcf	3,7	;select IRP bank0
  3808  0D36  0800               	movf	0,w
  3809  0D37  00B1               	movwf	??_PCF8583_Set_Date_Time
  3810  0D38  3006               	movlw	6
  3811  0D39                     u6455:	
  3812  0D39  1003               	clrc
  3813  0D3A  0DB1               	rlf	??_PCF8583_Set_Date_Time,f
  3814  0D3B  3EFF               	addlw	-1
  3815  0D3C  1D03               	skipz
  3816  0D3D  2D39               	goto	u6455
  3817  0D3E  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  3818  0D3F  3E03               	addlw	3
  3819  0D40  0084               	movwf	4
  3820  0D41  0800               	movf	0,w
  3821  0D42  160A  158A  26F8  120A  158A  	fcall	_DEC_2_BCD
  3822  0D47  0431               	iorwf	??_PCF8583_Set_Date_Time,w
  3823  0D48  00B2               	movwf	??_PCF8583_Set_Date_Time+1
  3824  0D49  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  3825  0D4A  00B6               	movwf	PCF8583_Set_Date_Time@bcd_day
  3826                           
  3827                           ;pcf8583.c: 119:  bcd_mon = DEC_2_BCD(time_struct_ptr->month & 0b00011111) |
  3828  0D4B  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  3829  0D4C  3E06               	addlw	6
  3830  0D4D  0084               	movwf	4
  3831  0D4E  1383               	bcf	3,7	;select IRP bank0
  3832  0D4F  0800               	movf	0,w
  3833  0D50  00B1               	movwf	??_PCF8583_Set_Date_Time
  3834  0D51  3005               	movlw	5
  3835  0D52                     u6465:	
  3836  0D52  1003               	clrc
  3837  0D53  0DB1               	rlf	??_PCF8583_Set_Date_Time,f
  3838  0D54  3EFF               	addlw	-1
  3839  0D55  1D03               	skipz
  3840  0D56  2D52               	goto	u6465
  3841  0D57  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  3842  0D58  3E04               	addlw	4
  3843  0D59  0084               	movwf	4
  3844  0D5A  0800               	movf	0,w
  3845  0D5B  391F               	andlw	31
  3846  0D5C  160A  158A  26F8  120A  158A  	fcall	_DEC_2_BCD
  3847  0D61  0431               	iorwf	??_PCF8583_Set_Date_Time,w
  3848  0D62  00B2               	movwf	??_PCF8583_Set_Date_Time+1
  3849  0D63  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  3850  0D64  00B7               	movwf	PCF8583_Set_Date_Time@bcd_mon
  3851                           
  3852                           ;pcf8583.c: 122:  PCF8583_Write_Byte(0x00, 0x80);
  3853  0D65  3080               	movlw	128
  3854  0D66  00B1               	movwf	??_PCF8583_Set_Date_Time
  3855  0D67  0831               	movf	??_PCF8583_Set_Date_Time,w
  3856  0D68  00A8               	movwf	PCF8583_Write_Byte@data
  3857  0D69  3000               	movlw	0
  3858  0D6A  160A  118A  208F  120A  158A  	fcall	_PCF8583_Write_Byte
  3859                           
  3860                           ;pcf8583.c: 124:  I2C_Master_Start();
  3861  0D6F  160A  158A  2682  120A  158A  	fcall	_I2C_Master_Start
  3862                           
  3863                           ;pcf8583.c: 125:  I2C_Master_Write(0xA0);
  3864  0D74  30A0               	movlw	160
  3865  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0D76  00A6               	movwf	I2C_Master_Write@data
  3867  0D77  3000               	movlw	0
  3868  0D78  00A7               	movwf	I2C_Master_Write@data+1
  3869  0D79  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  3870                           
  3871                           ;pcf8583.c: 126:  I2C_Master_Write(0x02);
  3872  0D7E  3002               	movlw	2
  3873  0D7F  00A6               	movwf	I2C_Master_Write@data
  3874  0D80  3000               	movlw	0
  3875  0D81  00A7               	movwf	I2C_Master_Write@data+1
  3876  0D82  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  3877                           
  3878                           ;pcf8583.c: 127:  I2C_Master_Write(bcd_sec);
  3879  0D87  0833               	movf	PCF8583_Set_Date_Time@bcd_sec,w
  3880  0D88  00B1               	movwf	??_PCF8583_Set_Date_Time
  3881  0D89  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  3882  0D8A  0831               	movf	??_PCF8583_Set_Date_Time,w
  3883  0D8B  00A6               	movwf	I2C_Master_Write@data
  3884  0D8C  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  3885  0D8D  00A7               	movwf	I2C_Master_Write@data+1
  3886  0D8E  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  3887                           
  3888                           ;pcf8583.c: 128:  I2C_Master_Write(bcd_min);
  3889  0D93  0834               	movf	PCF8583_Set_Date_Time@bcd_min,w
  3890  0D94  00B1               	movwf	??_PCF8583_Set_Date_Time
  3891  0D95  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  3892  0D96  0831               	movf	??_PCF8583_Set_Date_Time,w
  3893  0D97  00A6               	movwf	I2C_Master_Write@data
  3894  0D98  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  3895  0D99  00A7               	movwf	I2C_Master_Write@data+1
  3896  0D9A  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  3897                           
  3898                           ;pcf8583.c: 129:  I2C_Master_Write(bcd_hrs);
  3899  0D9F  0835               	movf	PCF8583_Set_Date_Time@bcd_hrs,w
  3900  0DA0  00B1               	movwf	??_PCF8583_Set_Date_Time
  3901  0DA1  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  3902  0DA2  0831               	movf	??_PCF8583_Set_Date_Time,w
  3903  0DA3  00A6               	movwf	I2C_Master_Write@data
  3904  0DA4  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  3905  0DA5  00A7               	movwf	I2C_Master_Write@data+1
  3906  0DA6  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  3907                           
  3908                           ;pcf8583.c: 130:  I2C_Master_Write(bcd_day);
  3909  0DAB  0836               	movf	PCF8583_Set_Date_Time@bcd_day,w
  3910  0DAC  00B1               	movwf	??_PCF8583_Set_Date_Time
  3911  0DAD  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  3912  0DAE  0831               	movf	??_PCF8583_Set_Date_Time,w
  3913  0DAF  00A6               	movwf	I2C_Master_Write@data
  3914  0DB0  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  3915  0DB1  00A7               	movwf	I2C_Master_Write@data+1
  3916  0DB2  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  3917                           
  3918                           ;pcf8583.c: 131:  I2C_Master_Write(bcd_mon);
  3919  0DB7  0837               	movf	PCF8583_Set_Date_Time@bcd_mon,w
  3920  0DB8  00B1               	movwf	??_PCF8583_Set_Date_Time
  3921  0DB9  01B2               	clrf	??_PCF8583_Set_Date_Time+1
  3922  0DBA  0831               	movf	??_PCF8583_Set_Date_Time,w
  3923  0DBB  00A6               	movwf	I2C_Master_Write@data
  3924  0DBC  0832               	movf	??_PCF8583_Set_Date_Time+1,w
  3925  0DBD  00A7               	movwf	I2C_Master_Write@data+1
  3926  0DBE  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  3927                           
  3928                           ;pcf8583.c: 132:  I2C_Master_Stop();
  3929  0DC3  160A  118A  2048  120A  158A  	fcall	_I2C_Master_Stop
  3930                           
  3931                           ;pcf8583.c: 134:  PCF8583_Write_Byte(0x10,time_struct_ptr->year);
  3932  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0DC9  0838               	movf	PCF8583_Set_Date_Time@time_struct_ptr,w
  3934  0DCA  3E05               	addlw	5
  3935  0DCB  0084               	movwf	4
  3936  0DCC  1383               	bcf	3,7	;select IRP bank0
  3937  0DCD  0800               	movf	0,w
  3938  0DCE  00B1               	movwf	??_PCF8583_Set_Date_Time
  3939  0DCF  0831               	movf	??_PCF8583_Set_Date_Time,w
  3940  0DD0  00A8               	movwf	PCF8583_Write_Byte@data
  3941  0DD1  3010               	movlw	16
  3942  0DD2  160A  118A  208F  120A  158A  	fcall	_PCF8583_Write_Byte
  3943                           
  3944                           ;pcf8583.c: 135:  PCF8583_Write_Byte(0x00, 0x00);
  3945  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  3946  0DD8  01A8               	clrf	PCF8583_Write_Byte@data
  3947  0DD9  3000               	movlw	0
  3948  0DDA  160A  118A  208F   	fcall	_PCF8583_Write_Byte
  3949                           
  3950                           ;pcf8583.c: 137:     INTCONbits.GIE=1;
  3951  0DDD  178B               	bsf	11,7	;volatile
  3952  0DDE  0008               	return
  3953  0DDF                     __end_of_PCF8583_Set_Date_Time:	
  3954                           
  3955                           	psect	text10
  3956  1EF8                     __ptext10:	
  3957 ;; *************** function _DEC_2_BCD *****************
  3958 ;; Defined at:
  3959 ;;		line 30 in file "pcf8583.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  dec             1    wreg     unsigned char 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  dec             1   16[BANK0 ] unsigned char 
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      unsigned char 
  3966 ;; Registers used:
  3967 ;;		wreg, status,2, status,0, pclath, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : B00/0
  3970 ;;		On exit  : 300/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3973 ;;      Params:         0       0       0       0       0
  3974 ;;      Locals:         0       1       0       0       0
  3975 ;;      Temps:          0       3       0       0       0
  3976 ;;      Totals:         0       4       0       0       0
  3977 ;;Total ram usage:        4 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    5
  3980 ;; This function calls:
  3981 ;;		___lbdiv
  3982 ;;		___lbmod
  3983 ;; This function is called by:
  3984 ;;		_PCF8583_Set_Date_Time
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           
  3989                           ;psect for function _DEC_2_BCD
  3990  1EF8                     _DEC_2_BCD:	
  3991                           
  3992                           ;incstack = 0
  3993 ;; hardware stack exceeded
  3994                           ; Regs used in _DEC_2_BCD: [wreg+status,2+status,0+pclath+cstack]
  3995                           ;DEC_2_BCD@dec stored from wreg
  3996  1EF8  00B0               	movwf	DEC_2_BCD@dec
  3997                           
  3998                           ;pcf8583.c: 30: unsigned char DEC_2_BCD(unsigned char dec);pcf8583.c: 31: {;pcf8583.c: 3
      +                          2:     return (((dec/10)<<4)+(dec%10));
  3999  1EF9  300A               	movlw	10
  4000  1EFA  00AD               	movwf	??_DEC_2_BCD
  4001  1EFB  082D               	movf	??_DEC_2_BCD,w
  4002  1EFC  00A6               	movwf	___lbdiv@divisor
  4003  1EFD  0830               	movf	DEC_2_BCD@dec,w
  4004  1EFE  160A  158A  2772  160A  158A  	fcall	___lbdiv
  4005  1F03  00AE               	movwf	??_DEC_2_BCD+1
  4006  1F04  3004               	movlw	4
  4007  1F05                     u5685:	
  4008  1F05  1003               	clrc
  4009  1F06  0DAE               	rlf	??_DEC_2_BCD+1,f
  4010  1F07  3EFF               	addlw	-1
  4011  1F08  1D03               	skipz
  4012  1F09  2F05               	goto	u5685
  4013  1F0A  300A               	movlw	10
  4014  1F0B  00AF               	movwf	??_DEC_2_BCD+2
  4015  1F0C  082F               	movf	??_DEC_2_BCD+2,w
  4016  1F0D  00A6               	movwf	___lbmod@divisor
  4017  1F0E  0830               	movf	DEC_2_BCD@dec,w
  4018  1F0F  160A  158A  27B5   	fcall	___lbmod
  4019  1F12  072E               	addwf	??_DEC_2_BCD+1,w
  4020  1F13  0008               	return
  4021  1F14                     __end_of_DEC_2_BCD:	
  4022                           
  4023                           	psect	text11
  4024  0035                     __ptext11:	
  4025 ;; *************** function _Menu_Set_Param_Time_Limit *****************
  4026 ;; Defined at:
  4027 ;;		line 190 in file "menu.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  menu            2   15[BANK0 ] PTR struct MenuParamStru
  4030 ;;		 -> Menu_Set_Time@current_menu(8), NULL(0), Menu_Init@time_limit_work_day_2(8), Menu_Init@time_limit_work_day_1(8), 
  4031 ;;		 -> Menu_Init@hours_minutes(8), 
  4032 ;;  check_button    1   17[BANK0 ] unsigned char 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 300/800
  4041 ;;		On exit  : 300/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4044 ;;      Params:         0       3       0       0       0
  4045 ;;      Locals:         0       0       0       0       0
  4046 ;;      Temps:          0      13       0       0       0
  4047 ;;      Totals:         0      16       0       0       0
  4048 ;;Total ram usage:       16 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    5
  4051 ;; This function calls:
  4052 ;;		___awdiv
  4053 ;;		___awmod
  4054 ;;		___lbdiv
  4055 ;;		___lbmod
  4056 ;; This function is called by:
  4057 ;;		_Menu_Set_Time
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function _Menu_Set_Param_Time_Limit
  4063  0035                     _Menu_Set_Param_Time_Limit:	
  4064                           
  4065                           ;menu.c: 190: void Menu_Set_Param_Time_Limit(MenuParamStruct *menu,;menu.c: 191:        
      +                                                  unsigned char check_button);menu.c: 192: {;menu.c: 193:     stat
      +                          ic unsigned char flag=0, change_digit=0;;menu.c: 195:     if(flag==0 && g_generic_timer=
      +                          =0)
  4066                           
  4067                           ;incstack = 0
  4068                           ; Regs used in _Menu_Set_Param_Time_Limit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4069  0035  1683               	bsf	3,5	;RP0=1, select bank1
  4070  0036  0822               	movf	Menu_Set_Param_Time_Limit@flag^(0+128),w
  4071  0037  1D03               	btfss	3,2
  4072  0038  28C3               	goto	l6380
  4073  0039  1283               	bcf	3,5	;RP0=0, select bank0
  4074  003A  084E               	movf	_g_generic_timer,w	;volatile
  4075  003B  044F               	iorwf	_g_generic_timer+1,w	;volatile
  4076  003C  1D03               	btfss	3,2
  4077  003D  28C3               	goto	l6380
  4078                           
  4079                           ;menu.c: 196:     {;menu.c: 197:         g_generic_timer=2000;
  4080  003E  30D0               	movlw	208
  4081  003F  00CE               	movwf	_g_generic_timer	;volatile
  4082  0040  3007               	movlw	7
  4083  0041  00CF               	movwf	_g_generic_timer+1	;volatile
  4084                           
  4085                           ;menu.c: 198:         flag=1;
  4086  0042  1683               	bsf	3,5	;RP0=1, select bank1
  4087  0043  01A2               	clrf	Menu_Set_Param_Time_Limit@flag^(0+128)
  4088  0044  0AA2               	incf	Menu_Set_Param_Time_Limit@flag^(0+128),f
  4089                           
  4090                           ;menu.c: 200:         g_display_text[0]=(menu->param)/10;
  4091  0045  300A               	movlw	10
  4092  0046  1283               	bcf	3,5	;RP0=0, select bank0
  4093  0047  00A6               	movwf	___awdiv@divisor
  4094  0048  3000               	movlw	0
  4095  0049  00A7               	movwf	___awdiv@divisor+1
  4096  004A  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4097  004B  3E05               	addlw	5
  4098  004C  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4099  004D  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4100  004E  1803               	skipnc
  4101  004F  3E01               	addlw	1
  4102  0050  3E00               	addlw	0
  4103  0051  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4104  0052  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4105  0053  0084               	movwf	4
  4106  0054  1783               	bsf	3,7
  4107  0055  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4108  0056  1383               	bcf	3,7
  4109  0057  0800               	movf	0,w
  4110  0058  00A8               	movwf	___awdiv@dividend
  4111  0059  01A9               	clrf	___awdiv@dividend+1
  4112  005A  1BA8               	btfsc	___awdiv@dividend,7
  4113  005B  03A9               	decf	___awdiv@dividend+1,f
  4114  005C  160A  118A  244D  120A  118A  	fcall	___awdiv
  4115  0061  0826               	movf	?___awdiv,w
  4116  0062  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4117  0063  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4118  0064  00DD               	movwf	_g_display_text
  4119                           
  4120                           ;menu.c: 201:         g_display_text[1]=(menu->param)%10;
  4121  0065  300A               	movlw	10
  4122  0066  00A6               	movwf	___awmod@divisor
  4123  0067  3000               	movlw	0
  4124  0068  00A7               	movwf	___awmod@divisor+1
  4125  0069  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4126  006A  3E05               	addlw	5
  4127  006B  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4128  006C  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4129  006D  1803               	skipnc
  4130  006E  3E01               	addlw	1
  4131  006F  3E00               	addlw	0
  4132  0070  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4133  0071  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4134  0072  0084               	movwf	4
  4135  0073  1783               	bsf	3,7
  4136  0074  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4137  0075  1383               	bcf	3,7
  4138  0076  0800               	movf	0,w
  4139  0077  00A8               	movwf	___awmod@dividend
  4140  0078  01A9               	clrf	___awmod@dividend+1
  4141  0079  1BA8               	btfsc	___awmod@dividend,7
  4142  007A  03A9               	decf	___awmod@dividend+1,f
  4143  007B  160A  118A  235F  120A  118A  	fcall	___awmod
  4144  0080  0826               	movf	?___awmod,w
  4145  0081  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4146  0082  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4147  0083  00DE               	movwf	_g_display_text+1
  4148                           
  4149                           ;menu.c: 202:         g_display_text[2]=(menu->param1)/10;
  4150  0084  300A               	movlw	10
  4151  0085  00A6               	movwf	___awdiv@divisor
  4152  0086  3000               	movlw	0
  4153  0087  00A7               	movwf	___awdiv@divisor+1
  4154  0088  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4155  0089  3E06               	addlw	6
  4156  008A  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4157  008B  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4158  008C  1803               	skipnc
  4159  008D  3E01               	addlw	1
  4160  008E  3E00               	addlw	0
  4161  008F  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4162  0090  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4163  0091  0084               	movwf	4
  4164  0092  1783               	bsf	3,7
  4165  0093  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4166  0094  1383               	bcf	3,7
  4167  0095  0800               	movf	0,w
  4168  0096  00A8               	movwf	___awdiv@dividend
  4169  0097  01A9               	clrf	___awdiv@dividend+1
  4170  0098  1BA8               	btfsc	___awdiv@dividend,7
  4171  0099  03A9               	decf	___awdiv@dividend+1,f
  4172  009A  160A  118A  244D  120A  118A  	fcall	___awdiv
  4173  009F  0826               	movf	?___awdiv,w
  4174  00A0  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4175  00A1  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4176  00A2  00DF               	movwf	_g_display_text+2
  4177                           
  4178                           ;menu.c: 203:         g_display_text[3]=(menu->param1)%10;
  4179  00A3  300A               	movlw	10
  4180  00A4  00A6               	movwf	___awmod@divisor
  4181  00A5  3000               	movlw	0
  4182  00A6  00A7               	movwf	___awmod@divisor+1
  4183  00A7  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4184  00A8  3E06               	addlw	6
  4185  00A9  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4186  00AA  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4187  00AB  1803               	skipnc
  4188  00AC  3E01               	addlw	1
  4189  00AD  3E00               	addlw	0
  4190  00AE  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4191  00AF  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4192  00B0  0084               	movwf	4
  4193  00B1  1783               	bsf	3,7
  4194  00B2  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4195  00B3  1383               	bcf	3,7
  4196  00B4  0800               	movf	0,w
  4197  00B5  00A8               	movwf	___awmod@dividend
  4198  00B6  01A9               	clrf	___awmod@dividend+1
  4199  00B7  1BA8               	btfsc	___awmod@dividend,7
  4200  00B8  03A9               	decf	___awmod@dividend+1,f
  4201  00B9  160A  118A  235F  120A  118A  	fcall	___awmod
  4202  00BE  0826               	movf	?___awmod,w
  4203  00BF  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4204  00C0  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4205  00C1  00E0               	movwf	_g_display_text+3
  4206                           
  4207                           ;menu.c: 205:     }else if(g_generic_timer==0)
  4208  00C2  28D7               	goto	l6388
  4209  00C3                     l6380:	
  4210  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  4211  00C4  084E               	movf	_g_generic_timer,w	;volatile
  4212  00C5  044F               	iorwf	_g_generic_timer+1,w	;volatile
  4213  00C6  1D03               	btfss	3,2
  4214  00C7  28D7               	goto	l6388
  4215                           
  4216                           ;menu.c: 206:     {;menu.c: 207:         g_display_text[change_digit]='*';
  4217  00C8  302A               	movlw	42
  4218  00C9  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4219  00CA  0852               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  4220  00CB  3E5D               	addlw	(low (_g_display_text| 0))& (0+255)
  4221  00CC  0084               	movwf	4
  4222  00CD  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4223  00CE  1383               	bcf	3,7	;select IRP bank0
  4224  00CF  0080               	movwf	0
  4225                           
  4226                           ;menu.c: 208:         flag=0;
  4227  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4228  00D1  01A2               	clrf	Menu_Set_Param_Time_Limit@flag^(0+128)
  4229                           
  4230                           ;menu.c: 209:         g_generic_timer=400;
  4231  00D2  3090               	movlw	144
  4232  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  4233  00D4  00CE               	movwf	_g_generic_timer	;volatile
  4234  00D5  3001               	movlw	1
  4235  00D6  00CF               	movwf	_g_generic_timer+1	;volatile
  4236  00D7                     l6388:	
  4237                           
  4238                           ;menu.c: 212:      if(check_button==k_set_right_short)
  4239  00D7  3006               	movlw	6
  4240  00D8  0631               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  4241  00D9  1D03               	btfss	3,2
  4242  00DA  296D               	goto	l6410
  4243                           
  4244                           ;menu.c: 213:     {;menu.c: 214:         change_digit++;
  4245  00DB  3001               	movlw	1
  4246  00DC  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4247  00DD  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4248  00DE  07D2               	addwf	Menu_Set_Param_Time_Limit@change_digit,f
  4249                           
  4250                           ;menu.c: 216:         if(change_digit>3)
  4251  00DF  3004               	movlw	4
  4252  00E0  0252               	subwf	Menu_Set_Param_Time_Limit@change_digit,w
  4253  00E1  1C03               	skipc
  4254  00E2  2904               	goto	l6398
  4255                           
  4256                           ;menu.c: 217:         {;menu.c: 218:             change_digit=0;
  4257  00E3  01D2               	clrf	Menu_Set_Param_Time_Limit@change_digit
  4258                           
  4259                           ;menu.c: 220:             g_display_text[3]=(menu->param1)%10;
  4260  00E4  300A               	movlw	10
  4261  00E5  00A6               	movwf	___awmod@divisor
  4262  00E6  3000               	movlw	0
  4263  00E7  00A7               	movwf	___awmod@divisor+1
  4264  00E8  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4265  00E9  3E06               	addlw	6
  4266  00EA  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4267  00EB  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4268  00EC  1803               	skipnc
  4269  00ED  3E01               	addlw	1
  4270  00EE  3E00               	addlw	0
  4271  00EF  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4272  00F0  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4273  00F1  0084               	movwf	4
  4274  00F2  1783               	bsf	3,7
  4275  00F3  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4276  00F4  1383               	bcf	3,7
  4277  00F5  0800               	movf	0,w
  4278  00F6  00A8               	movwf	___awmod@dividend
  4279  00F7  01A9               	clrf	___awmod@dividend+1
  4280  00F8  1BA8               	btfsc	___awmod@dividend,7
  4281  00F9  03A9               	decf	___awmod@dividend+1,f
  4282  00FA  160A  118A  235F  120A  118A  	fcall	___awmod
  4283  00FF  0826               	movf	?___awmod,w
  4284  0100  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4285  0101  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4286  0102  00E0               	movwf	_g_display_text+3
  4287                           
  4288                           ;menu.c: 222:         }else if(change_digit==2)
  4289  0103  296D               	goto	l6410
  4290  0104                     l6398:	
  4291  0104  3002               	movlw	2
  4292  0105  0652               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  4293  0106  1D03               	btfss	3,2
  4294  0107  2928               	goto	l6402
  4295                           
  4296                           ;menu.c: 223:         {;menu.c: 224:             g_display_text[2]=(menu->param1)/10;
  4297  0108  300A               	movlw	10
  4298  0109  00A6               	movwf	___awdiv@divisor
  4299  010A  3000               	movlw	0
  4300  010B  00A7               	movwf	___awdiv@divisor+1
  4301  010C  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4302  010D  3E06               	addlw	6
  4303  010E  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4304  010F  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4305  0110  1803               	skipnc
  4306  0111  3E01               	addlw	1
  4307  0112  3E00               	addlw	0
  4308  0113  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4309  0114  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4310  0115  0084               	movwf	4
  4311  0116  1783               	bsf	3,7
  4312  0117  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4313  0118  1383               	bcf	3,7
  4314  0119  0800               	movf	0,w
  4315  011A  00A8               	movwf	___awdiv@dividend
  4316  011B  01A9               	clrf	___awdiv@dividend+1
  4317  011C  1BA8               	btfsc	___awdiv@dividend,7
  4318  011D  03A9               	decf	___awdiv@dividend+1,f
  4319  011E  160A  118A  244D  120A  118A  	fcall	___awdiv
  4320  0123  0826               	movf	?___awdiv,w
  4321  0124  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4322  0125  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4323  0126  00DF               	movwf	_g_display_text+2
  4324                           
  4325                           ;menu.c: 226:         }else if(change_digit==1)
  4326  0127  296D               	goto	l6410
  4327  0128                     l6402:	
  4328  0128  0352               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  4329  0129  1D03               	btfss	3,2
  4330  012A  294B               	goto	l6406
  4331                           
  4332                           ;menu.c: 227:         {;menu.c: 228:             g_display_text[1]=(menu->param)%10;
  4333  012B  300A               	movlw	10
  4334  012C  00A6               	movwf	___awmod@divisor
  4335  012D  3000               	movlw	0
  4336  012E  00A7               	movwf	___awmod@divisor+1
  4337  012F  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4338  0130  3E05               	addlw	5
  4339  0131  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4340  0132  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4341  0133  1803               	skipnc
  4342  0134  3E01               	addlw	1
  4343  0135  3E00               	addlw	0
  4344  0136  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4345  0137  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4346  0138  0084               	movwf	4
  4347  0139  1783               	bsf	3,7
  4348  013A  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4349  013B  1383               	bcf	3,7
  4350  013C  0800               	movf	0,w
  4351  013D  00A8               	movwf	___awmod@dividend
  4352  013E  01A9               	clrf	___awmod@dividend+1
  4353  013F  1BA8               	btfsc	___awmod@dividend,7
  4354  0140  03A9               	decf	___awmod@dividend+1,f
  4355  0141  160A  118A  235F  120A  118A  	fcall	___awmod
  4356  0146  0826               	movf	?___awmod,w
  4357  0147  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4358  0148  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4359  0149  00DE               	movwf	_g_display_text+1
  4360                           
  4361                           ;menu.c: 229:         }else if(change_digit==0)
  4362  014A  296D               	goto	l6410
  4363  014B                     l6406:	
  4364  014B  0852               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  4365  014C  1D03               	btfss	3,2
  4366  014D  296D               	goto	l6410
  4367                           
  4368                           ;menu.c: 230:         {;menu.c: 231:             g_display_text[0]=(menu->param)/10;
  4369  014E  300A               	movlw	10
  4370  014F  00A6               	movwf	___awdiv@divisor
  4371  0150  3000               	movlw	0
  4372  0151  00A7               	movwf	___awdiv@divisor+1
  4373  0152  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4374  0153  3E05               	addlw	5
  4375  0154  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4376  0155  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4377  0156  1803               	skipnc
  4378  0157  3E01               	addlw	1
  4379  0158  3E00               	addlw	0
  4380  0159  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4381  015A  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4382  015B  0084               	movwf	4
  4383  015C  1783               	bsf	3,7
  4384  015D  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4385  015E  1383               	bcf	3,7
  4386  015F  0800               	movf	0,w
  4387  0160  00A8               	movwf	___awdiv@dividend
  4388  0161  01A9               	clrf	___awdiv@dividend+1
  4389  0162  1BA8               	btfsc	___awdiv@dividend,7
  4390  0163  03A9               	decf	___awdiv@dividend+1,f
  4391  0164  160A  118A  244D  120A  118A  	fcall	___awdiv
  4392  0169  0826               	movf	?___awdiv,w
  4393  016A  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4394  016B  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4395  016C  00DD               	movwf	_g_display_text
  4396  016D                     l6410:	
  4397                           
  4398                           ;menu.c: 235:     if(check_button==k_set_up_short)
  4399  016D  3008               	movlw	8
  4400  016E  0631               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  4401  016F  1D03               	btfss	3,2
  4402  0170  2C36               	goto	l6448
  4403                           
  4404                           ;menu.c: 236:     {;menu.c: 237:         if(change_digit==0)
  4405  0171  0852               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  4406  0172  1D03               	btfss	3,2
  4407  0173  2A5F               	goto	l6420
  4408                           
  4409                           ;menu.c: 238:         {;menu.c: 239:             (menu->param)=(menu->param)+10;
  4410  0174  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4411  0175  3E05               	addlw	5
  4412  0176  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4413  0177  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4414  0178  1803               	skipnc
  4415  0179  3E01               	addlw	1
  4416  017A  3E00               	addlw	0
  4417  017B  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4418  017C  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4419  017D  0084               	movwf	4
  4420  017E  1783               	bsf	3,7
  4421  017F  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4422  0180  1383               	bcf	3,7
  4423  0181  0800               	movf	0,w
  4424  0182  3E0A               	addlw	10
  4425  0183  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4426  0184  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4427  0185  3E05               	addlw	5
  4428  0186  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4429  0187  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4430  0188  1803               	skipnc
  4431  0189  3E01               	addlw	1
  4432  018A  3E00               	addlw	0
  4433  018B  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4434  018C  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4435  018D  0084               	movwf	4
  4436  018E  1783               	bsf	3,7
  4437  018F  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  4438  0190  1383               	bcf	3,7
  4439  0191  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4440  0192  0080               	movwf	0
  4441                           
  4442                           ;menu.c: 241:             if(menu->param>menu->max_limit)
  4443  0193  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4444  0194  3E05               	addlw	5
  4445  0195  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4446  0196  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4447  0197  1803               	skipnc
  4448  0198  3E01               	addlw	1
  4449  0199  3E00               	addlw	0
  4450  019A  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4451  019B  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4452  019C  0084               	movwf	4
  4453  019D  1783               	bsf	3,7
  4454  019E  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4455  019F  1383               	bcf	3,7
  4456  01A0  0800               	movf	0,w
  4457  01A1  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4458  01A2  01B5               	clrf	??_Menu_Set_Param_Time_Limit+3
  4459  01A3  1BB4               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  4460  01A4  03B5               	decf	??_Menu_Set_Param_Time_Limit+3,f
  4461  01A5  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4462  01A6  0084               	movwf	4
  4463  01A7  1783               	bsf	3,7
  4464  01A8  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  4465  01A9  1383               	bcf	3,7
  4466  01AA  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4467  01AB  3A80               	xorlw	128
  4468  01AC  3C80               	sublw	128
  4469  01AD  1D03               	skipz
  4470  01AE  29B1               	goto	u6285
  4471  01AF  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4472  01B0  0200               	subwf	0,w
  4473  01B1                     u6285:	
  4474  01B1  1803               	skipnc
  4475  01B2  29EC               	goto	l684
  4476                           
  4477                           ;menu.c: 242:             {;menu.c: 243:                 (menu->param)=(menu->param)-((m
      +                          enu->max_limit)-(menu->max_limit)%10+10);
  4478  01B3  300A               	movlw	10
  4479  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  4480  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  4481  01B6  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4482  01B7  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4483  01B8  00A6               	movwf	___lbmod@divisor
  4484  01B9  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4485  01BA  0084               	movwf	4
  4486  01BB  1783               	bsf	3,7
  4487  01BC  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  4488  01BD  1383               	bcf	3,7
  4489  01BE  0800               	movf	0,w
  4490  01BF  160A  158A  27B5  120A  118A  	fcall	___lbmod
  4491  01C4  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4492  01C5  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4493  01C6  0084               	movwf	4
  4494  01C7  1783               	bsf	3,7
  4495  01C8  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  4496  01C9  1383               	bcf	3,7
  4497  01CA  0800               	movf	0,w
  4498  01CB  02B3               	subwf	??_Menu_Set_Param_Time_Limit+1,f
  4499  01CC  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4500  01CD  3E05               	addlw	5
  4501  01CE  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4502  01CF  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4503  01D0  1803               	skipnc
  4504  01D1  3E01               	addlw	1
  4505  01D2  3E00               	addlw	0
  4506  01D3  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4507  01D4  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4508  01D5  0084               	movwf	4
  4509  01D6  1783               	bsf	3,7
  4510  01D7  1C35               	btfss	??_Menu_Set_Param_Time_Limit+3,0
  4511  01D8  1383               	bcf	3,7
  4512  01D9  0800               	movf	0,w
  4513  01DA  0733               	addwf	??_Menu_Set_Param_Time_Limit+1,w
  4514  01DB  3EF6               	addlw	-10
  4515  01DC  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4516  01DD  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4517  01DE  3E05               	addlw	5
  4518  01DF  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  4519  01E0  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4520  01E1  1803               	skipnc
  4521  01E2  3E01               	addlw	1
  4522  01E3  3E00               	addlw	0
  4523  01E4  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  4524  01E5  0837               	movf	??_Menu_Set_Param_Time_Limit+5,w
  4525  01E6  0084               	movwf	4
  4526  01E7  1783               	bsf	3,7
  4527  01E8  1C38               	btfss	??_Menu_Set_Param_Time_Limit+6,0
  4528  01E9  1383               	bcf	3,7
  4529  01EA  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  4530  01EB  0080               	movwf	0
  4531  01EC                     l684:	
  4532                           ;menu.c: 244:             }
  4533                           
  4534                           
  4535                           ;menu.c: 246:             if(menu->max_limit/10==menu->min_limit/10)
  4536  01EC  300A               	movlw	10
  4537  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  4538  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  4539  01EF  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4540  01F0  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4541  01F1  00A6               	movwf	___lbdiv@divisor
  4542  01F2  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4543  01F3  3E03               	addlw	3
  4544  01F4  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4545  01F5  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4546  01F6  1803               	skipnc
  4547  01F7  3E01               	addlw	1
  4548  01F8  3E00               	addlw	0
  4549  01F9  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4550  01FA  0833               	movf	??_Menu_Set_Param_Time_Limit+1,w
  4551  01FB  0084               	movwf	4
  4552  01FC  1783               	bsf	3,7
  4553  01FD  1C34               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  4554  01FE  1383               	bcf	3,7
  4555  01FF  0800               	movf	0,w
  4556  0200  160A  158A  2772  120A  118A  	fcall	___lbdiv
  4557  0205  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4558  0206  300A               	movlw	10
  4559  0207  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4560  0208  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  4561  0209  00A6               	movwf	___lbdiv@divisor
  4562  020A  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4563  020B  0084               	movwf	4
  4564  020C  1783               	bsf	3,7
  4565  020D  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  4566  020E  1383               	bcf	3,7
  4567  020F  0800               	movf	0,w
  4568  0210  160A  158A  2772  120A  118A  	fcall	___lbdiv
  4569  0215  0635               	xorwf	??_Menu_Set_Param_Time_Limit+3,w
  4570  0216  1D03               	skipz
  4571  0217  2BB4               	goto	l6438
  4572                           
  4573                           ;menu.c: 247:             {;menu.c: 248:                 (menu->param)=(menu->param%10)+
      +                          ((menu->max_limit)-(menu->max_limit)%10);
  4574  0218  300A               	movlw	10
  4575  0219  00A6               	movwf	___awmod@divisor
  4576  021A  3000               	movlw	0
  4577  021B  00A7               	movwf	___awmod@divisor+1
  4578  021C  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4579  021D  3E05               	addlw	5
  4580  021E  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4581  021F  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4582  0220  1803               	skipnc
  4583  0221  3E01               	addlw	1
  4584  0222  3E00               	addlw	0
  4585  0223  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4586  0224  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4587  0225  0084               	movwf	4
  4588  0226  1783               	bsf	3,7
  4589  0227  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4590  0228  1383               	bcf	3,7
  4591  0229  0800               	movf	0,w
  4592  022A  00A8               	movwf	___awmod@dividend
  4593  022B  01A9               	clrf	___awmod@dividend+1
  4594  022C  1BA8               	btfsc	___awmod@dividend,7
  4595  022D  03A9               	decf	___awmod@dividend+1,f
  4596  022E  160A  118A  235F  120A  118A  	fcall	___awmod
  4597  0233  0826               	movf	?___awmod,w
  4598  0234  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4599  0235  0827               	movf	?___awmod+1,w
  4600  0236  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4601  0237  300A               	movlw	10
  4602  0238  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4603  0239  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  4604  023A  00A6               	movwf	___lbmod@divisor
  4605  023B  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4606  023C  0084               	movwf	4
  4607  023D  1783               	bsf	3,7
  4608  023E  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  4609  023F  1383               	bcf	3,7
  4610  0240  0800               	movf	0,w
  4611  0241  160A  158A  27B5  120A  118A  	fcall	___lbmod
  4612  0246  0234               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  4613  0247  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  4614  0248  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4615  0249  0084               	movwf	4
  4616  024A  1783               	bsf	3,7
  4617  024B  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  4618  024C  1383               	bcf	3,7
  4619  024D  0800               	movf	0,w
  4620  024E  0737               	addwf	??_Menu_Set_Param_Time_Limit+5,w
  4621  024F  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  4622  0250  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4623  0251  3E05               	addlw	5
  4624  0252  00B9               	movwf	??_Menu_Set_Param_Time_Limit+7
  4625  0253  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4626  0254  1803               	skipnc
  4627  0255  3E01               	addlw	1
  4628  0256  3E00               	addlw	0
  4629  0257  00BA               	movwf	??_Menu_Set_Param_Time_Limit+8
  4630  0258  0839               	movf	??_Menu_Set_Param_Time_Limit+7,w
  4631  0259  0084               	movwf	4
  4632  025A  1783               	bsf	3,7
  4633  025B  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  4634  025C  1383               	bcf	3,7
  4635  025D  0838               	movf	??_Menu_Set_Param_Time_Limit+6,w
  4636  025E  2BB3               	goto	L1
  4637  025F                     l6420:	
  4638  025F  0352               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  4639  0260  1D03               	btfss	3,2
  4640  0261  2AB5               	goto	l6426
  4641                           
  4642                           ;menu.c: 252:         {;menu.c: 253:             (menu->param)=(menu->param)+1;
  4643  0262  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4644  0263  3E05               	addlw	5
  4645  0264  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4646  0265  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4647  0266  1803               	skipnc
  4648  0267  3E01               	addlw	1
  4649  0268  3E00               	addlw	0
  4650  0269  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4651  026A  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4652  026B  0084               	movwf	4
  4653  026C  1783               	bsf	3,7
  4654  026D  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4655  026E  1383               	bcf	3,7
  4656  026F  0800               	movf	0,w
  4657  0270  3E01               	addlw	1
  4658  0271  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4659  0272  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4660  0273  3E05               	addlw	5
  4661  0274  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4662  0275  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4663  0276  1803               	skipnc
  4664  0277  3E01               	addlw	1
  4665  0278  3E00               	addlw	0
  4666  0279  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4667  027A  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4668  027B  0084               	movwf	4
  4669  027C  1783               	bsf	3,7
  4670  027D  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  4671  027E  1383               	bcf	3,7
  4672  027F  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4673  0280  0080               	movwf	0
  4674                           
  4675                           ;menu.c: 255:             if((menu->param)>(menu->max_limit))
  4676  0281  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4677  0282  3E05               	addlw	5
  4678  0283  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4679  0284  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4680  0285  1803               	skipnc
  4681  0286  3E01               	addlw	1
  4682  0287  3E00               	addlw	0
  4683  0288  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4684  0289  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4685  028A  0084               	movwf	4
  4686  028B  1783               	bsf	3,7
  4687  028C  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4688  028D  1383               	bcf	3,7
  4689  028E  0800               	movf	0,w
  4690  028F  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4691  0290  01B5               	clrf	??_Menu_Set_Param_Time_Limit+3
  4692  0291  1BB4               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  4693  0292  03B5               	decf	??_Menu_Set_Param_Time_Limit+3,f
  4694  0293  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4695  0294  0084               	movwf	4
  4696  0295  1783               	bsf	3,7
  4697  0296  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  4698  0297  1383               	bcf	3,7
  4699  0298  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4700  0299  3A80               	xorlw	128
  4701  029A  3C80               	sublw	128
  4702  029B  1D03               	skipz
  4703  029C  2A9F               	goto	u6315
  4704  029D  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4705  029E  0200               	subwf	0,w
  4706  029F                     u6315:	
  4707  029F  1803               	skipnc
  4708  02A0  2BB4               	goto	l6438
  4709                           
  4710                           ;menu.c: 256:             {;menu.c: 257:                 (menu->param)=(menu->min_limit)
      +                          ;
  4711  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  4712  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  4713  02A3  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4714  02A4  3E03               	addlw	3
  4715  02A5  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4716  02A6  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4717  02A7  1803               	skipnc
  4718  02A8  3E01               	addlw	1
  4719  02A9  3E00               	addlw	0
  4720  02AA  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4721  02AB  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4722  02AC  0084               	movwf	4
  4723  02AD  1783               	bsf	3,7
  4724  02AE  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4725  02AF  1383               	bcf	3,7
  4726  02B0  0800               	movf	0,w
  4727  02B1  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4728  02B2  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4729  02B3  3E05               	addlw	5
  4730  02B4  2BA7               	goto	L3
  4731  02B5                     l6426:	
  4732  02B5  3002               	movlw	2
  4733  02B6  0652               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  4734  02B7  1D03               	btfss	3,2
  4735  02B8  2B49               	goto	l6432
  4736                           
  4737                           ;menu.c: 260:         {;menu.c: 261:             (menu->param1)=(menu->param1)+10;
  4738  02B9  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4739  02BA  3E06               	addlw	6
  4740  02BB  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4741  02BC  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4742  02BD  1803               	skipnc
  4743  02BE  3E01               	addlw	1
  4744  02BF  3E00               	addlw	0
  4745  02C0  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4746  02C1  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4747  02C2  0084               	movwf	4
  4748  02C3  1783               	bsf	3,7
  4749  02C4  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4750  02C5  1383               	bcf	3,7
  4751  02C6  0800               	movf	0,w
  4752  02C7  3E0A               	addlw	10
  4753  02C8  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4754  02C9  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4755  02CA  3E06               	addlw	6
  4756  02CB  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4757  02CC  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4758  02CD  1803               	skipnc
  4759  02CE  3E01               	addlw	1
  4760  02CF  3E00               	addlw	0
  4761  02D0  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4762  02D1  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4763  02D2  0084               	movwf	4
  4764  02D3  1783               	bsf	3,7
  4765  02D4  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  4766  02D5  1383               	bcf	3,7
  4767  02D6  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4768  02D7  0080               	movwf	0
  4769                           
  4770                           ;menu.c: 263:             if(menu->param1>menu->max_limit1)
  4771  02D8  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4772  02D9  3E06               	addlw	6
  4773  02DA  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4774  02DB  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4775  02DC  1803               	skipnc
  4776  02DD  3E01               	addlw	1
  4777  02DE  3E00               	addlw	0
  4778  02DF  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4779  02E0  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4780  02E1  0084               	movwf	4
  4781  02E2  1783               	bsf	3,7
  4782  02E3  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4783  02E4  1383               	bcf	3,7
  4784  02E5  0800               	movf	0,w
  4785  02E6  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4786  02E7  01B5               	clrf	??_Menu_Set_Param_Time_Limit+3
  4787  02E8  1BB4               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  4788  02E9  03B5               	decf	??_Menu_Set_Param_Time_Limit+3,f
  4789  02EA  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4790  02EB  3E01               	addlw	1
  4791  02EC  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4792  02ED  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4793  02EE  1803               	skipnc
  4794  02EF  3E01               	addlw	1
  4795  02F0  3E00               	addlw	0
  4796  02F1  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  4797  02F2  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  4798  02F3  0084               	movwf	4
  4799  02F4  1783               	bsf	3,7
  4800  02F5  1C37               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  4801  02F6  1383               	bcf	3,7
  4802  02F7  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4803  02F8  3A80               	xorlw	128
  4804  02F9  3C80               	sublw	128
  4805  02FA  1D03               	skipz
  4806  02FB  2AFE               	goto	u6335
  4807  02FC  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4808  02FD  0200               	subwf	0,w
  4809  02FE                     u6335:	
  4810  02FE  1803               	skipnc
  4811  02FF  2BB4               	goto	l6438
  4812                           
  4813                           ;menu.c: 264:             {;menu.c: 265:                 (menu->param1)=(menu->param1)-(
      +                          (menu->max_limit1)-(menu->max_limit1)%10+10);
  4814  0300  300A               	movlw	10
  4815  0301  1283               	bcf	3,5	;RP0=0, select bank0
  4816  0302  1303               	bcf	3,6	;RP1=0, select bank0
  4817  0303  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4818  0304  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4819  0305  00A6               	movwf	___lbmod@divisor
  4820  0306  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4821  0307  3E01               	addlw	1
  4822  0308  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4823  0309  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4824  030A  1803               	skipnc
  4825  030B  3E01               	addlw	1
  4826  030C  3E00               	addlw	0
  4827  030D  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4828  030E  0833               	movf	??_Menu_Set_Param_Time_Limit+1,w
  4829  030F  0084               	movwf	4
  4830  0310  1783               	bsf	3,7
  4831  0311  1C34               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  4832  0312  1383               	bcf	3,7
  4833  0313  0800               	movf	0,w
  4834  0314  160A  158A  27B5  120A  118A  	fcall	___lbmod
  4835  0319  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4836  031A  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4837  031B  3E01               	addlw	1
  4838  031C  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4839  031D  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4840  031E  1803               	skipnc
  4841  031F  3E01               	addlw	1
  4842  0320  3E00               	addlw	0
  4843  0321  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  4844  0322  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  4845  0323  0084               	movwf	4
  4846  0324  1783               	bsf	3,7
  4847  0325  1C37               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  4848  0326  1383               	bcf	3,7
  4849  0327  0800               	movf	0,w
  4850  0328  02B5               	subwf	??_Menu_Set_Param_Time_Limit+3,f
  4851  0329  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4852  032A  3E06               	addlw	6
  4853  032B  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  4854  032C  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4855  032D  1803               	skipnc
  4856  032E  3E01               	addlw	1
  4857  032F  3E00               	addlw	0
  4858  0330  00B9               	movwf	??_Menu_Set_Param_Time_Limit+7
  4859  0331  0838               	movf	??_Menu_Set_Param_Time_Limit+6,w
  4860  0332  0084               	movwf	4
  4861  0333  1783               	bsf	3,7
  4862  0334  1C39               	btfss	??_Menu_Set_Param_Time_Limit+7,0
  4863  0335  1383               	bcf	3,7
  4864  0336  0800               	movf	0,w
  4865  0337  0735               	addwf	??_Menu_Set_Param_Time_Limit+3,w
  4866  0338  3EF6               	addlw	-10
  4867  0339  00BA               	movwf	??_Menu_Set_Param_Time_Limit+8
  4868  033A  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4869  033B  3E06               	addlw	6
  4870  033C  00BB               	movwf	??_Menu_Set_Param_Time_Limit+9
  4871  033D  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4872  033E  1803               	skipnc
  4873  033F  3E01               	addlw	1
  4874  0340  3E00               	addlw	0
  4875  0341  00BC               	movwf	??_Menu_Set_Param_Time_Limit+10
  4876  0342  083B               	movf	??_Menu_Set_Param_Time_Limit+9,w
  4877  0343  0084               	movwf	4
  4878  0344  1783               	bsf	3,7
  4879  0345  1C3C               	btfss	??_Menu_Set_Param_Time_Limit+10,0
  4880  0346  1383               	bcf	3,7
  4881  0347  083A               	movf	??_Menu_Set_Param_Time_Limit+8,w
  4882  0348  2BB3               	goto	L1
  4883  0349                     l6432:	
  4884  0349  3003               	movlw	3
  4885  034A  0652               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  4886  034B  1D03               	btfss	3,2
  4887  034C  2BB4               	goto	l6438
  4888                           
  4889                           ;menu.c: 268:         {;menu.c: 269:             (menu->param1)=(menu->param1)+1;
  4890  034D  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4891  034E  3E06               	addlw	6
  4892  034F  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4893  0350  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4894  0351  1803               	skipnc
  4895  0352  3E01               	addlw	1
  4896  0353  3E00               	addlw	0
  4897  0354  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4898  0355  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4899  0356  0084               	movwf	4
  4900  0357  1783               	bsf	3,7
  4901  0358  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4902  0359  1383               	bcf	3,7
  4903  035A  0800               	movf	0,w
  4904  035B  3E01               	addlw	1
  4905  035C  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4906  035D  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4907  035E  3E06               	addlw	6
  4908  035F  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4909  0360  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4910  0361  1803               	skipnc
  4911  0362  3E01               	addlw	1
  4912  0363  3E00               	addlw	0
  4913  0364  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4914  0365  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4915  0366  0084               	movwf	4
  4916  0367  1783               	bsf	3,7
  4917  0368  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  4918  0369  1383               	bcf	3,7
  4919  036A  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4920  036B  0080               	movwf	0
  4921                           
  4922                           ;menu.c: 271:             if((menu->param1)>(menu->max_limit1))
  4923  036C  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4924  036D  3E06               	addlw	6
  4925  036E  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4926  036F  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4927  0370  1803               	skipnc
  4928  0371  3E01               	addlw	1
  4929  0372  3E00               	addlw	0
  4930  0373  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4931  0374  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4932  0375  0084               	movwf	4
  4933  0376  1783               	bsf	3,7
  4934  0377  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4935  0378  1383               	bcf	3,7
  4936  0379  0800               	movf	0,w
  4937  037A  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4938  037B  01B5               	clrf	??_Menu_Set_Param_Time_Limit+3
  4939  037C  1BB4               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  4940  037D  03B5               	decf	??_Menu_Set_Param_Time_Limit+3,f
  4941  037E  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4942  037F  3E01               	addlw	1
  4943  0380  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4944  0381  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4945  0382  1803               	skipnc
  4946  0383  3E01               	addlw	1
  4947  0384  3E00               	addlw	0
  4948  0385  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  4949  0386  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  4950  0387  0084               	movwf	4
  4951  0388  1783               	bsf	3,7
  4952  0389  1C37               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  4953  038A  1383               	bcf	3,7
  4954  038B  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4955  038C  3A80               	xorlw	128
  4956  038D  3C80               	sublw	128
  4957  038E  1D03               	skipz
  4958  038F  2B92               	goto	u6355
  4959  0390  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4960  0391  0200               	subwf	0,w
  4961  0392                     u6355:	
  4962  0392  1803               	skipnc
  4963  0393  2BB4               	goto	l6438
  4964                           
  4965                           ;menu.c: 272:             {;menu.c: 273:                 (menu->param1)=(menu->min_limit
      +                          1);
  4966  0394  1283               	bcf	3,5	;RP0=0, select bank0
  4967  0395  1303               	bcf	3,6	;RP1=0, select bank0
  4968  0396  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4969  0397  3E04               	addlw	4
  4970  0398  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  4971  0399  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4972  039A  1803               	skipnc
  4973  039B  3E01               	addlw	1
  4974  039C  3E00               	addlw	0
  4975  039D  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  4976  039E  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  4977  039F  0084               	movwf	4
  4978  03A0  1783               	bsf	3,7
  4979  03A1  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  4980  03A2  1383               	bcf	3,7
  4981  03A3  0800               	movf	0,w
  4982  03A4  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  4983  03A5  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  4984  03A6  3E06               	addlw	6
  4985  03A7                     L3:	
  4986  03A7  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  4987  03A8  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  4988  03A9  1803               	skipnc
  4989  03AA  3E01               	addlw	1
  4990  03AB  3E00               	addlw	0
  4991  03AC  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  4992  03AD  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  4993  03AE  0084               	movwf	4
  4994  03AF  1783               	bsf	3,7
  4995  03B0  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  4996  03B1  1383               	bcf	3,7
  4997  03B2  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  4998  03B3                     L1:	
  4999  03B3  0080               	movwf	0
  5000  03B4                     l6438:	
  5001                           
  5002                           ;menu.c: 277:         g_display_text[0]=(menu->param)/10;
  5003  03B4  300A               	movlw	10
  5004  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  5005  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  5006  03B7  00A6               	movwf	___awdiv@divisor
  5007  03B8  3000               	movlw	0
  5008  03B9  00A7               	movwf	___awdiv@divisor+1
  5009  03BA  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5010  03BB  3E05               	addlw	5
  5011  03BC  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5012  03BD  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5013  03BE  1803               	skipnc
  5014  03BF  3E01               	addlw	1
  5015  03C0  3E00               	addlw	0
  5016  03C1  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5017  03C2  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5018  03C3  0084               	movwf	4
  5019  03C4  1783               	bsf	3,7
  5020  03C5  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5021  03C6  1383               	bcf	3,7
  5022  03C7  0800               	movf	0,w
  5023  03C8  00A8               	movwf	___awdiv@dividend
  5024  03C9  01A9               	clrf	___awdiv@dividend+1
  5025  03CA  1BA8               	btfsc	___awdiv@dividend,7
  5026  03CB  03A9               	decf	___awdiv@dividend+1,f
  5027  03CC  160A  118A  244D  120A  118A  	fcall	___awdiv
  5028  03D1  0826               	movf	?___awdiv,w
  5029  03D2  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5030  03D3  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5031  03D4  00DD               	movwf	_g_display_text
  5032                           
  5033                           ;menu.c: 278:         g_display_text[1]=(menu->param)%10;
  5034  03D5  300A               	movlw	10
  5035  03D6  00A6               	movwf	___awmod@divisor
  5036  03D7  3000               	movlw	0
  5037  03D8  00A7               	movwf	___awmod@divisor+1
  5038  03D9  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5039  03DA  3E05               	addlw	5
  5040  03DB  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5041  03DC  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5042  03DD  1803               	skipnc
  5043  03DE  3E01               	addlw	1
  5044  03DF  3E00               	addlw	0
  5045  03E0  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5046  03E1  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5047  03E2  0084               	movwf	4
  5048  03E3  1783               	bsf	3,7
  5049  03E4  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5050  03E5  1383               	bcf	3,7
  5051  03E6  0800               	movf	0,w
  5052  03E7  00A8               	movwf	___awmod@dividend
  5053  03E8  01A9               	clrf	___awmod@dividend+1
  5054  03E9  1BA8               	btfsc	___awmod@dividend,7
  5055  03EA  03A9               	decf	___awmod@dividend+1,f
  5056  03EB  160A  118A  235F  120A  118A  	fcall	___awmod
  5057  03F0  0826               	movf	?___awmod,w
  5058  03F1  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5059  03F2  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5060  03F3  00DE               	movwf	_g_display_text+1
  5061                           
  5062                           ;menu.c: 279:         g_display_text[2]=(menu->param1)/10;
  5063  03F4  300A               	movlw	10
  5064  03F5  00A6               	movwf	___awdiv@divisor
  5065  03F6  3000               	movlw	0
  5066  03F7  00A7               	movwf	___awdiv@divisor+1
  5067  03F8  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5068  03F9  3E06               	addlw	6
  5069  03FA  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5070  03FB  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5071  03FC  1803               	skipnc
  5072  03FD  3E01               	addlw	1
  5073  03FE  3E00               	addlw	0
  5074  03FF  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5075  0400  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5076  0401  0084               	movwf	4
  5077  0402  1783               	bsf	3,7
  5078  0403  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5079  0404  1383               	bcf	3,7
  5080  0405  0800               	movf	0,w
  5081  0406  00A8               	movwf	___awdiv@dividend
  5082  0407  01A9               	clrf	___awdiv@dividend+1
  5083  0408  1BA8               	btfsc	___awdiv@dividend,7
  5084  0409  03A9               	decf	___awdiv@dividend+1,f
  5085  040A  160A  118A  244D  120A  118A  	fcall	___awdiv
  5086  040F  0826               	movf	?___awdiv,w
  5087  0410  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5088  0411  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5089  0412  00DF               	movwf	_g_display_text+2
  5090                           
  5091                           ;menu.c: 280:         g_display_text[3]=(menu->param1)%10;
  5092  0413  300A               	movlw	10
  5093  0414  00A6               	movwf	___awmod@divisor
  5094  0415  3000               	movlw	0
  5095  0416  00A7               	movwf	___awmod@divisor+1
  5096  0417  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5097  0418  3E06               	addlw	6
  5098  0419  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5099  041A  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5100  041B  1803               	skipnc
  5101  041C  3E01               	addlw	1
  5102  041D  3E00               	addlw	0
  5103  041E  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5104  041F  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5105  0420  0084               	movwf	4
  5106  0421  1783               	bsf	3,7
  5107  0422  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5108  0423  1383               	bcf	3,7
  5109  0424  0800               	movf	0,w
  5110  0425  00A8               	movwf	___awmod@dividend
  5111  0426  01A9               	clrf	___awmod@dividend+1
  5112  0427  1BA8               	btfsc	___awmod@dividend,7
  5113  0428  03A9               	decf	___awmod@dividend+1,f
  5114  0429  160A  118A  235F  120A  118A  	fcall	___awmod
  5115  042E  0826               	movf	?___awmod,w
  5116  042F  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5117  0430  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5118  0431  00E0               	movwf	_g_display_text+3
  5119                           
  5120                           ;menu.c: 282:         g_generic_timer=7000;
  5121  0432  3058               	movlw	88
  5122  0433  00CE               	movwf	_g_generic_timer	;volatile
  5123  0434  301B               	movlw	27
  5124  0435  00CF               	movwf	_g_generic_timer+1	;volatile
  5125  0436                     l6448:	
  5126                           
  5127                           ;menu.c: 285:     if(check_button==k_set_down_short)
  5128  0436  300A               	movlw	10
  5129  0437  0631               	xorwf	Menu_Set_Param_Time_Limit@check_button,w
  5130  0438  1D03               	btfss	3,2
  5131  0439  0008               	return
  5132                           
  5133                           ;menu.c: 286:     {;menu.c: 287:         if(change_digit==0)
  5134  043A  0852               	movf	Menu_Set_Param_Time_Limit@change_digit,w
  5135  043B  1D03               	btfss	3,2
  5136  043C  2CC2               	goto	l6456
  5137                           
  5138                           ;menu.c: 288:         {;menu.c: 289:             (menu->param)=(menu->param)-10;
  5139  043D  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5140  043E  3E05               	addlw	5
  5141  043F  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5142  0440  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5143  0441  1803               	skipnc
  5144  0442  3E01               	addlw	1
  5145  0443  3E00               	addlw	0
  5146  0444  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5147  0445  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5148  0446  0084               	movwf	4
  5149  0447  1783               	bsf	3,7
  5150  0448  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5151  0449  1383               	bcf	3,7
  5152  044A  0800               	movf	0,w
  5153  044B  3EF6               	addlw	-10
  5154  044C  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5155  044D  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5156  044E  3E05               	addlw	5
  5157  044F  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  5158  0450  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5159  0451  1803               	skipnc
  5160  0452  3E01               	addlw	1
  5161  0453  3E00               	addlw	0
  5162  0454  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5163  0455  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5164  0456  0084               	movwf	4
  5165  0457  1783               	bsf	3,7
  5166  0458  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5167  0459  1383               	bcf	3,7
  5168  045A  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5169  045B  0080               	movwf	0
  5170                           
  5171                           ;menu.c: 291:             if((menu->param)<(menu->min_limit))
  5172  045C  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5173  045D  3E05               	addlw	5
  5174  045E  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5175  045F  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5176  0460  1803               	skipnc
  5177  0461  3E01               	addlw	1
  5178  0462  3E00               	addlw	0
  5179  0463  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5180  0464  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5181  0465  0084               	movwf	4
  5182  0466  1783               	bsf	3,7
  5183  0467  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5184  0468  1383               	bcf	3,7
  5185  0469  0800               	movf	0,w
  5186  046A  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5187  046B  01B5               	clrf	??_Menu_Set_Param_Time_Limit+3
  5188  046C  1BB4               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5189  046D  03B5               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5190  046E  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5191  046F  3E03               	addlw	3
  5192  0470  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5193  0471  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5194  0472  1803               	skipnc
  5195  0473  3E01               	addlw	1
  5196  0474  3E00               	addlw	0
  5197  0475  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  5198  0476  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5199  0477  0084               	movwf	4
  5200  0478  1783               	bsf	3,7
  5201  0479  1C37               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5202  047A  1383               	bcf	3,7
  5203  047B  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5204  047C  3A80               	xorlw	128
  5205  047D  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  5206  047E  3080               	movlw	128
  5207  047F  0238               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  5208  0480  1D03               	skipz
  5209  0481  2C84               	goto	u6385
  5210  0482  0800               	movf	0,w
  5211  0483  0234               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  5212  0484                     u6385:	
  5213  0484  1803               	skipnc
  5214  0485  2E2C               	goto	l6474
  5215                           
  5216                           ;menu.c: 292:             {;menu.c: 293:                 (menu->param)=(menu->param)+((m
      +                          enu->max_limit)-(menu->max_limit)%10+10);
  5217  0486  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0487  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0488  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5220  0489  3E05               	addlw	5
  5221  048A  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5222  048B  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5223  048C  1803               	skipnc
  5224  048D  3E01               	addlw	1
  5225  048E  3E00               	addlw	0
  5226  048F  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5227  0490  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5228  0491  0084               	movwf	4
  5229  0492  1783               	bsf	3,7
  5230  0493  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5231  0494  1383               	bcf	3,7
  5232  0495  0800               	movf	0,w
  5233  0496  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5234  0497  300A               	movlw	10
  5235  0498  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  5236  0499  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5237  049A  00A6               	movwf	___lbmod@divisor
  5238  049B  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5239  049C  0084               	movwf	4
  5240  049D  1783               	bsf	3,7
  5241  049E  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5242  049F  1383               	bcf	3,7
  5243  04A0  0800               	movf	0,w
  5244  04A1  160A  158A  27B5  120A  118A  	fcall	___lbmod
  5245  04A6  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5246  04A7  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5247  04A8  0084               	movwf	4
  5248  04A9  1783               	bsf	3,7
  5249  04AA  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5250  04AB  1383               	bcf	3,7
  5251  04AC  0800               	movf	0,w
  5252  04AD  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  5253  04AE  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5254  04AF  0237               	subwf	??_Menu_Set_Param_Time_Limit+5,w
  5255  04B0  0734               	addwf	??_Menu_Set_Param_Time_Limit+2,w
  5256  04B1  3E0A               	addlw	10
  5257  04B2  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  5258  04B3  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5259  04B4  3E05               	addlw	5
  5260  04B5  00B9               	movwf	??_Menu_Set_Param_Time_Limit+7
  5261  04B6  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5262  04B7  1803               	skipnc
  5263  04B8  3E01               	addlw	1
  5264  04B9  3E00               	addlw	0
  5265  04BA  00BA               	movwf	??_Menu_Set_Param_Time_Limit+8
  5266  04BB  0839               	movf	??_Menu_Set_Param_Time_Limit+7,w
  5267  04BC  0084               	movwf	4
  5268  04BD  1783               	bsf	3,7
  5269  04BE  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  5270  04BF  1383               	bcf	3,7
  5271  04C0  0838               	movf	??_Menu_Set_Param_Time_Limit+6,w
  5272  04C1  2E2B               	goto	L2
  5273  04C2                     l6456:	
  5274  04C2  0352               	decf	Menu_Set_Param_Time_Limit@change_digit,w
  5275  04C3  1D03               	btfss	3,2
  5276  04C4  2D26               	goto	l6462
  5277                           
  5278                           ;menu.c: 302:         {;menu.c: 303:             (menu->param)=(menu->param)-1;
  5279  04C5  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5280  04C6  3E05               	addlw	5
  5281  04C7  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5282  04C8  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5283  04C9  1803               	skipnc
  5284  04CA  3E01               	addlw	1
  5285  04CB  3E00               	addlw	0
  5286  04CC  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5287  04CD  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5288  04CE  0084               	movwf	4
  5289  04CF  1783               	bsf	3,7
  5290  04D0  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5291  04D1  1383               	bcf	3,7
  5292  04D2  0800               	movf	0,w
  5293  04D3  3EFF               	addlw	-1
  5294  04D4  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5295  04D5  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5296  04D6  3E05               	addlw	5
  5297  04D7  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  5298  04D8  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5299  04D9  1803               	skipnc
  5300  04DA  3E01               	addlw	1
  5301  04DB  3E00               	addlw	0
  5302  04DC  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5303  04DD  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5304  04DE  0084               	movwf	4
  5305  04DF  1783               	bsf	3,7
  5306  04E0  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5307  04E1  1383               	bcf	3,7
  5308  04E2  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5309  04E3  0080               	movwf	0
  5310                           
  5311                           ;menu.c: 305:             if(menu->param<(menu->min_limit))
  5312  04E4  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5313  04E5  3E05               	addlw	5
  5314  04E6  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5315  04E7  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5316  04E8  1803               	skipnc
  5317  04E9  3E01               	addlw	1
  5318  04EA  3E00               	addlw	0
  5319  04EB  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5320  04EC  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5321  04ED  0084               	movwf	4
  5322  04EE  1783               	bsf	3,7
  5323  04EF  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5324  04F0  1383               	bcf	3,7
  5325  04F1  0800               	movf	0,w
  5326  04F2  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5327  04F3  01B5               	clrf	??_Menu_Set_Param_Time_Limit+3
  5328  04F4  1BB4               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5329  04F5  03B5               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5330  04F6  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5331  04F7  3E03               	addlw	3
  5332  04F8  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5333  04F9  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5334  04FA  1803               	skipnc
  5335  04FB  3E01               	addlw	1
  5336  04FC  3E00               	addlw	0
  5337  04FD  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  5338  04FE  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5339  04FF  0084               	movwf	4
  5340  0500  1783               	bsf	3,7
  5341  0501  1C37               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5342  0502  1383               	bcf	3,7
  5343  0503  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5344  0504  3A80               	xorlw	128
  5345  0505  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  5346  0506  3080               	movlw	128
  5347  0507  0238               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  5348  0508  1D03               	skipz
  5349  0509  2D0C               	goto	u6405
  5350  050A  0800               	movf	0,w
  5351  050B  0234               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  5352  050C                     u6405:	
  5353  050C  1803               	skipnc
  5354  050D  2E2C               	goto	l6474
  5355                           
  5356                           ;menu.c: 306:             {;menu.c: 307:                 (menu->param)=(menu->max_limit)
      +                          ;
  5357  050E  1283               	bcf	3,5	;RP0=0, select bank0
  5358  050F  1303               	bcf	3,6	;RP1=0, select bank0
  5359  0510  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5360  0511  0084               	movwf	4
  5361  0512  1783               	bsf	3,7
  5362  0513  1C30               	btfss	Menu_Set_Param_Time_Limit@menu+1,0
  5363  0514  1383               	bcf	3,7
  5364  0515  0800               	movf	0,w
  5365  0516  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5366  0517  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5367  0518  3E05               	addlw	5
  5368  0519  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5369  051A  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5370  051B  1803               	skipnc
  5371  051C  3E01               	addlw	1
  5372  051D  3E00               	addlw	0
  5373  051E  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5374  051F  0833               	movf	??_Menu_Set_Param_Time_Limit+1,w
  5375  0520  0084               	movwf	4
  5376  0521  1783               	bsf	3,7
  5377  0522  1C34               	btfss	??_Menu_Set_Param_Time_Limit+2,0
  5378  0523  1383               	bcf	3,7
  5379  0524  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5380  0525  2E2B               	goto	L2
  5381  0526                     l6462:	
  5382  0526  3002               	movlw	2
  5383  0527  0652               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  5384  0528  1D03               	btfss	3,2
  5385  0529  2DBF               	goto	l6468
  5386                           
  5387                           ;menu.c: 310:         {;menu.c: 311:             (menu->param1)=(menu->param1)-10;
  5388  052A  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5389  052B  3E06               	addlw	6
  5390  052C  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5391  052D  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5392  052E  1803               	skipnc
  5393  052F  3E01               	addlw	1
  5394  0530  3E00               	addlw	0
  5395  0531  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5396  0532  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5397  0533  0084               	movwf	4
  5398  0534  1783               	bsf	3,7
  5399  0535  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5400  0536  1383               	bcf	3,7
  5401  0537  0800               	movf	0,w
  5402  0538  3EF6               	addlw	-10
  5403  0539  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5404  053A  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5405  053B  3E06               	addlw	6
  5406  053C  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  5407  053D  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5408  053E  1803               	skipnc
  5409  053F  3E01               	addlw	1
  5410  0540  3E00               	addlw	0
  5411  0541  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5412  0542  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5413  0543  0084               	movwf	4
  5414  0544  1783               	bsf	3,7
  5415  0545  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5416  0546  1383               	bcf	3,7
  5417  0547  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5418  0548  0080               	movwf	0
  5419                           
  5420                           ;menu.c: 313:             if(menu->param1<(menu->min_limit1))
  5421  0549  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5422  054A  3E06               	addlw	6
  5423  054B  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5424  054C  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5425  054D  1803               	skipnc
  5426  054E  3E01               	addlw	1
  5427  054F  3E00               	addlw	0
  5428  0550  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5429  0551  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5430  0552  0084               	movwf	4
  5431  0553  1783               	bsf	3,7
  5432  0554  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5433  0555  1383               	bcf	3,7
  5434  0556  0800               	movf	0,w
  5435  0557  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5436  0558  01B5               	clrf	??_Menu_Set_Param_Time_Limit+3
  5437  0559  1BB4               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5438  055A  03B5               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5439  055B  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5440  055C  3E04               	addlw	4
  5441  055D  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5442  055E  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5443  055F  1803               	skipnc
  5444  0560  3E01               	addlw	1
  5445  0561  3E00               	addlw	0
  5446  0562  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  5447  0563  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5448  0564  0084               	movwf	4
  5449  0565  1783               	bsf	3,7
  5450  0566  1C37               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5451  0567  1383               	bcf	3,7
  5452  0568  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5453  0569  3A80               	xorlw	128
  5454  056A  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  5455  056B  3080               	movlw	128
  5456  056C  0238               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  5457  056D  1D03               	skipz
  5458  056E  2D71               	goto	u6425
  5459  056F  0800               	movf	0,w
  5460  0570  0234               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  5461  0571                     u6425:	
  5462  0571  1803               	skipnc
  5463  0572  2E2C               	goto	l6474
  5464                           
  5465                           ;menu.c: 314:             {;menu.c: 315:                 (menu->param1)=(menu->param1)+(
      +                          (menu->max_limit1)-(menu->max_limit1)%10+10);
  5466  0573  1283               	bcf	3,5	;RP0=0, select bank0
  5467  0574  1303               	bcf	3,6	;RP1=0, select bank0
  5468  0575  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5469  0576  3E06               	addlw	6
  5470  0577  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5471  0578  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5472  0579  1803               	skipnc
  5473  057A  3E01               	addlw	1
  5474  057B  3E00               	addlw	0
  5475  057C  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5476  057D  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5477  057E  0084               	movwf	4
  5478  057F  1783               	bsf	3,7
  5479  0580  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5480  0581  1383               	bcf	3,7
  5481  0582  0800               	movf	0,w
  5482  0583  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5483  0584  300A               	movlw	10
  5484  0585  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  5485  0586  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5486  0587  00A6               	movwf	___lbmod@divisor
  5487  0588  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5488  0589  3E01               	addlw	1
  5489  058A  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5490  058B  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5491  058C  1803               	skipnc
  5492  058D  3E01               	addlw	1
  5493  058E  3E00               	addlw	0
  5494  058F  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  5495  0590  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5496  0591  0084               	movwf	4
  5497  0592  1783               	bsf	3,7
  5498  0593  1C37               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5499  0594  1383               	bcf	3,7
  5500  0595  0800               	movf	0,w
  5501  0596  160A  158A  27B5  120A  118A  	fcall	___lbmod
  5502  059B  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  5503  059C  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5504  059D  3E01               	addlw	1
  5505  059E  00B9               	movwf	??_Menu_Set_Param_Time_Limit+7
  5506  059F  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5507  05A0  1803               	skipnc
  5508  05A1  3E01               	addlw	1
  5509  05A2  3E00               	addlw	0
  5510  05A3  00BA               	movwf	??_Menu_Set_Param_Time_Limit+8
  5511  05A4  0839               	movf	??_Menu_Set_Param_Time_Limit+7,w
  5512  05A5  0084               	movwf	4
  5513  05A6  1783               	bsf	3,7
  5514  05A7  1C3A               	btfss	??_Menu_Set_Param_Time_Limit+8,0
  5515  05A8  1383               	bcf	3,7
  5516  05A9  0800               	movf	0,w
  5517  05AA  00BB               	movwf	??_Menu_Set_Param_Time_Limit+9
  5518  05AB  0838               	movf	??_Menu_Set_Param_Time_Limit+6,w
  5519  05AC  023B               	subwf	??_Menu_Set_Param_Time_Limit+9,w
  5520  05AD  0734               	addwf	??_Menu_Set_Param_Time_Limit+2,w
  5521  05AE  3E0A               	addlw	10
  5522  05AF  00BC               	movwf	??_Menu_Set_Param_Time_Limit+10
  5523  05B0  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5524  05B1  3E06               	addlw	6
  5525  05B2  00BD               	movwf	??_Menu_Set_Param_Time_Limit+11
  5526  05B3  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5527  05B4  1803               	skipnc
  5528  05B5  3E01               	addlw	1
  5529  05B6  3E00               	addlw	0
  5530  05B7  00BE               	movwf	??_Menu_Set_Param_Time_Limit+12
  5531  05B8  083D               	movf	??_Menu_Set_Param_Time_Limit+11,w
  5532  05B9  0084               	movwf	4
  5533  05BA  1783               	bsf	3,7
  5534  05BB  1C3E               	btfss	??_Menu_Set_Param_Time_Limit+12,0
  5535  05BC  1383               	bcf	3,7
  5536  05BD  083C               	movf	??_Menu_Set_Param_Time_Limit+10,w
  5537  05BE  2E2B               	goto	L2
  5538  05BF                     l6468:	
  5539  05BF  3003               	movlw	3
  5540  05C0  0652               	xorwf	Menu_Set_Param_Time_Limit@change_digit,w
  5541  05C1  1D03               	btfss	3,2
  5542  05C2  2E2C               	goto	l6474
  5543                           
  5544                           ;menu.c: 318:         {;menu.c: 319:             (menu->param1)=(menu->param1)-1;
  5545  05C3  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5546  05C4  3E06               	addlw	6
  5547  05C5  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5548  05C6  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5549  05C7  1803               	skipnc
  5550  05C8  3E01               	addlw	1
  5551  05C9  3E00               	addlw	0
  5552  05CA  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5553  05CB  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5554  05CC  0084               	movwf	4
  5555  05CD  1783               	bsf	3,7
  5556  05CE  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5557  05CF  1383               	bcf	3,7
  5558  05D0  0800               	movf	0,w
  5559  05D1  3EFF               	addlw	-1
  5560  05D2  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5561  05D3  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5562  05D4  3E06               	addlw	6
  5563  05D5  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  5564  05D6  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5565  05D7  1803               	skipnc
  5566  05D8  3E01               	addlw	1
  5567  05D9  3E00               	addlw	0
  5568  05DA  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5569  05DB  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5570  05DC  0084               	movwf	4
  5571  05DD  1783               	bsf	3,7
  5572  05DE  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5573  05DF  1383               	bcf	3,7
  5574  05E0  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5575  05E1  0080               	movwf	0
  5576                           
  5577                           ;menu.c: 321:             if(menu->param1<(menu->min_limit1))
  5578  05E2  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5579  05E3  3E06               	addlw	6
  5580  05E4  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5581  05E5  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5582  05E6  1803               	skipnc
  5583  05E7  3E01               	addlw	1
  5584  05E8  3E00               	addlw	0
  5585  05E9  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5586  05EA  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5587  05EB  0084               	movwf	4
  5588  05EC  1783               	bsf	3,7
  5589  05ED  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5590  05EE  1383               	bcf	3,7
  5591  05EF  0800               	movf	0,w
  5592  05F0  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5593  05F1  01B5               	clrf	??_Menu_Set_Param_Time_Limit+3
  5594  05F2  1BB4               	btfsc	??_Menu_Set_Param_Time_Limit+2,7
  5595  05F3  03B5               	decf	??_Menu_Set_Param_Time_Limit+3,f
  5596  05F4  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5597  05F5  3E04               	addlw	4
  5598  05F6  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5599  05F7  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5600  05F8  1803               	skipnc
  5601  05F9  3E01               	addlw	1
  5602  05FA  3E00               	addlw	0
  5603  05FB  00B7               	movwf	??_Menu_Set_Param_Time_Limit+5
  5604  05FC  0836               	movf	??_Menu_Set_Param_Time_Limit+4,w
  5605  05FD  0084               	movwf	4
  5606  05FE  1783               	bsf	3,7
  5607  05FF  1C37               	btfss	??_Menu_Set_Param_Time_Limit+5,0
  5608  0600  1383               	bcf	3,7
  5609  0601  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5610  0602  3A80               	xorlw	128
  5611  0603  00B8               	movwf	??_Menu_Set_Param_Time_Limit+6
  5612  0604  3080               	movlw	128
  5613  0605  0238               	subwf	??_Menu_Set_Param_Time_Limit+6,w
  5614  0606  1D03               	skipz
  5615  0607  2E0A               	goto	u6445
  5616  0608  0800               	movf	0,w
  5617  0609  0234               	subwf	??_Menu_Set_Param_Time_Limit+2,w
  5618  060A                     u6445:	
  5619  060A  1803               	skipnc
  5620  060B  2E2C               	goto	l6474
  5621                           
  5622                           ;menu.c: 322:             {;menu.c: 323:                 (menu->param1)=(menu->max_limit
      +                          1);
  5623  060C  1283               	bcf	3,5	;RP0=0, select bank0
  5624  060D  1303               	bcf	3,6	;RP1=0, select bank0
  5625  060E  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5626  060F  3E01               	addlw	1
  5627  0610  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5628  0611  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5629  0612  1803               	skipnc
  5630  0613  3E01               	addlw	1
  5631  0614  3E00               	addlw	0
  5632  0615  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5633  0616  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5634  0617  0084               	movwf	4
  5635  0618  1783               	bsf	3,7
  5636  0619  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5637  061A  1383               	bcf	3,7
  5638  061B  0800               	movf	0,w
  5639  061C  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5640  061D  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5641  061E  3E06               	addlw	6
  5642  061F  00B5               	movwf	??_Menu_Set_Param_Time_Limit+3
  5643  0620  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5644  0621  1803               	skipnc
  5645  0622  3E01               	addlw	1
  5646  0623  3E00               	addlw	0
  5647  0624  00B6               	movwf	??_Menu_Set_Param_Time_Limit+4
  5648  0625  0835               	movf	??_Menu_Set_Param_Time_Limit+3,w
  5649  0626  0084               	movwf	4
  5650  0627  1783               	bsf	3,7
  5651  0628  1C36               	btfss	??_Menu_Set_Param_Time_Limit+4,0
  5652  0629  1383               	bcf	3,7
  5653  062A  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5654  062B                     L2:	
  5655  062B  0080               	movwf	0
  5656  062C                     l6474:	
  5657                           
  5658                           ;menu.c: 327:         g_display_text[0]=(menu->param)/10;
  5659  062C  300A               	movlw	10
  5660  062D  1283               	bcf	3,5	;RP0=0, select bank0
  5661  062E  1303               	bcf	3,6	;RP1=0, select bank0
  5662  062F  00A6               	movwf	___awdiv@divisor
  5663  0630  3000               	movlw	0
  5664  0631  00A7               	movwf	___awdiv@divisor+1
  5665  0632  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5666  0633  3E05               	addlw	5
  5667  0634  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5668  0635  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5669  0636  1803               	skipnc
  5670  0637  3E01               	addlw	1
  5671  0638  3E00               	addlw	0
  5672  0639  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5673  063A  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5674  063B  0084               	movwf	4
  5675  063C  1783               	bsf	3,7
  5676  063D  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5677  063E  1383               	bcf	3,7
  5678  063F  0800               	movf	0,w
  5679  0640  00A8               	movwf	___awdiv@dividend
  5680  0641  01A9               	clrf	___awdiv@dividend+1
  5681  0642  1BA8               	btfsc	___awdiv@dividend,7
  5682  0643  03A9               	decf	___awdiv@dividend+1,f
  5683  0644  160A  118A  244D  120A  118A  	fcall	___awdiv
  5684  0649  0826               	movf	?___awdiv,w
  5685  064A  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5686  064B  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5687  064C  00DD               	movwf	_g_display_text
  5688                           
  5689                           ;menu.c: 328:         g_display_text[1]=(menu->param)%10;
  5690  064D  300A               	movlw	10
  5691  064E  00A6               	movwf	___awmod@divisor
  5692  064F  3000               	movlw	0
  5693  0650  00A7               	movwf	___awmod@divisor+1
  5694  0651  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5695  0652  3E05               	addlw	5
  5696  0653  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5697  0654  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5698  0655  1803               	skipnc
  5699  0656  3E01               	addlw	1
  5700  0657  3E00               	addlw	0
  5701  0658  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5702  0659  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5703  065A  0084               	movwf	4
  5704  065B  1783               	bsf	3,7
  5705  065C  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5706  065D  1383               	bcf	3,7
  5707  065E  0800               	movf	0,w
  5708  065F  00A8               	movwf	___awmod@dividend
  5709  0660  01A9               	clrf	___awmod@dividend+1
  5710  0661  1BA8               	btfsc	___awmod@dividend,7
  5711  0662  03A9               	decf	___awmod@dividend+1,f
  5712  0663  160A  118A  235F  120A  118A  	fcall	___awmod
  5713  0668  0826               	movf	?___awmod,w
  5714  0669  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5715  066A  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5716  066B  00DE               	movwf	_g_display_text+1
  5717                           
  5718                           ;menu.c: 329:         g_display_text[2]=(menu->param1)/10;
  5719  066C  300A               	movlw	10
  5720  066D  00A6               	movwf	___awdiv@divisor
  5721  066E  3000               	movlw	0
  5722  066F  00A7               	movwf	___awdiv@divisor+1
  5723  0670  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5724  0671  3E06               	addlw	6
  5725  0672  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5726  0673  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5727  0674  1803               	skipnc
  5728  0675  3E01               	addlw	1
  5729  0676  3E00               	addlw	0
  5730  0677  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5731  0678  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5732  0679  0084               	movwf	4
  5733  067A  1783               	bsf	3,7
  5734  067B  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5735  067C  1383               	bcf	3,7
  5736  067D  0800               	movf	0,w
  5737  067E  00A8               	movwf	___awdiv@dividend
  5738  067F  01A9               	clrf	___awdiv@dividend+1
  5739  0680  1BA8               	btfsc	___awdiv@dividend,7
  5740  0681  03A9               	decf	___awdiv@dividend+1,f
  5741  0682  160A  118A  244D  120A  118A  	fcall	___awdiv
  5742  0687  0826               	movf	?___awdiv,w
  5743  0688  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5744  0689  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5745  068A  00DF               	movwf	_g_display_text+2
  5746                           
  5747                           ;menu.c: 330:         g_display_text[3]=(menu->param1)%10;
  5748  068B  300A               	movlw	10
  5749  068C  00A6               	movwf	___awmod@divisor
  5750  068D  3000               	movlw	0
  5751  068E  00A7               	movwf	___awmod@divisor+1
  5752  068F  082F               	movf	Menu_Set_Param_Time_Limit@menu,w
  5753  0690  3E06               	addlw	6
  5754  0691  00B2               	movwf	??_Menu_Set_Param_Time_Limit
  5755  0692  0830               	movf	Menu_Set_Param_Time_Limit@menu+1,w
  5756  0693  1803               	skipnc
  5757  0694  3E01               	addlw	1
  5758  0695  3E00               	addlw	0
  5759  0696  00B3               	movwf	??_Menu_Set_Param_Time_Limit+1
  5760  0697  0832               	movf	??_Menu_Set_Param_Time_Limit,w
  5761  0698  0084               	movwf	4
  5762  0699  1783               	bsf	3,7
  5763  069A  1C33               	btfss	??_Menu_Set_Param_Time_Limit+1,0
  5764  069B  1383               	bcf	3,7
  5765  069C  0800               	movf	0,w
  5766  069D  00A8               	movwf	___awmod@dividend
  5767  069E  01A9               	clrf	___awmod@dividend+1
  5768  069F  1BA8               	btfsc	___awmod@dividend,7
  5769  06A0  03A9               	decf	___awmod@dividend+1,f
  5770  06A1  160A  118A  235F   	fcall	___awmod
  5771  06A4  0826               	movf	?___awmod,w
  5772  06A5  00B4               	movwf	??_Menu_Set_Param_Time_Limit+2
  5773  06A6  0834               	movf	??_Menu_Set_Param_Time_Limit+2,w
  5774  06A7  00E0               	movwf	_g_display_text+3
  5775                           
  5776                           ;menu.c: 332:         g_generic_timer=7000;
  5777  06A8  3058               	movlw	88
  5778  06A9  00CE               	movwf	_g_generic_timer	;volatile
  5779  06AA  301B               	movlw	27
  5780  06AB  00CF               	movwf	_g_generic_timer+1	;volatile
  5781  06AC  0008               	return
  5782  06AD                     __end_of_Menu_Set_Param_Time_Limit:	
  5783                           
  5784                           	psect	text12
  5785  1FB5                     __ptext12:	
  5786 ;; *************** function ___lbmod *****************
  5787 ;; Defined at:
  5788 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  dividend        1    wreg     unsigned char 
  5791 ;;  divisor         1    6[BANK0 ] unsigned char 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  dividend        1   10[BANK0 ] unsigned char 
  5794 ;;  rem             1   12[BANK0 ] unsigned char 
  5795 ;;  counter         1   11[BANK0 ] unsigned char 
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      unsigned char 
  5798 ;; Registers used:
  5799 ;;		wreg, status,2, status,0
  5800 ;; Tracked objects:
  5801 ;;		On entry : 300/0
  5802 ;;		On exit  : 300/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5805 ;;      Params:         0       1       0       0       0
  5806 ;;      Locals:         0       3       0       0       0
  5807 ;;      Temps:          0       3       0       0       0
  5808 ;;      Totals:         0       7       0       0       0
  5809 ;;Total ram usage:        7 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    4
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_Menu_Set_Param_Time_Limit
  5816 ;;		_DEC_2_BCD
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           
  5821                           ;psect for function ___lbmod
  5822  1FB5                     ___lbmod:	
  5823                           
  5824                           ;incstack = 0
  5825 ;; hardware stack exceeded
  5826                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5827                           ;___lbmod@dividend stored from wreg
  5828  1FB5  00AA               	movwf	___lbmod@dividend
  5829  1FB6  3008               	movlw	8
  5830  1FB7  00A7               	movwf	??___lbmod
  5831  1FB8  0827               	movf	??___lbmod,w
  5832  1FB9  00AB               	movwf	___lbmod@counter
  5833  1FBA  01AC               	clrf	___lbmod@rem
  5834  1FBB                     l5844:	
  5835  1FBB  082A               	movf	___lbmod@dividend,w
  5836  1FBC  00A7               	movwf	??___lbmod
  5837  1FBD  3007               	movlw	7
  5838  1FBE                     u5385:	
  5839  1FBE  1003               	clrc
  5840  1FBF  0CA7               	rrf	??___lbmod,f
  5841  1FC0  3EFF               	addlw	-1
  5842  1FC1  1D03               	skipz
  5843  1FC2  2FBE               	goto	u5385
  5844  1FC3  082C               	movf	___lbmod@rem,w
  5845  1FC4  00A8               	movwf	??___lbmod+1
  5846  1FC5  0728               	addwf	??___lbmod+1,w
  5847  1FC6  0427               	iorwf	??___lbmod,w
  5848  1FC7  00A9               	movwf	??___lbmod+2
  5849  1FC8  0829               	movf	??___lbmod+2,w
  5850  1FC9  00AC               	movwf	___lbmod@rem
  5851  1FCA  1003               	clrc
  5852  1FCB  0DAA               	rlf	___lbmod@dividend,f
  5853  1FCC  0826               	movf	___lbmod@divisor,w
  5854  1FCD  022C               	subwf	___lbmod@rem,w
  5855  1FCE  1C03               	skipc
  5856  1FCF  2FD2               	goto	l1102
  5857  1FD0  0826               	movf	___lbmod@divisor,w
  5858  1FD1  02AC               	subwf	___lbmod@rem,f
  5859  1FD2                     l1102:	
  5860  1FD2  3001               	movlw	1
  5861  1FD3  02AB               	subwf	___lbmod@counter,f
  5862  1FD4  1D03               	btfss	3,2
  5863  1FD5  2FBB               	goto	l5844
  5864  1FD6  082C               	movf	___lbmod@rem,w
  5865  1FD7  0008               	return
  5866  1FD8                     __end_of___lbmod:	
  5867                           
  5868                           	psect	text13
  5869  1F72                     __ptext13:	
  5870 ;; *************** function ___lbdiv *****************
  5871 ;; Defined at:
  5872 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;  dividend        1    wreg     unsigned char 
  5875 ;;  divisor         1    6[BANK0 ] unsigned char 
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;  dividend        1    8[BANK0 ] unsigned char 
  5878 ;;  quotient        1   10[BANK0 ] unsigned char 
  5879 ;;  counter         1    9[BANK0 ] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      unsigned char 
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, status,0
  5884 ;; Tracked objects:
  5885 ;;		On entry : 300/0
  5886 ;;		On exit  : 300/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5889 ;;      Params:         0       1       0       0       0
  5890 ;;      Locals:         0       3       0       0       0
  5891 ;;      Temps:          0       1       0       0       0
  5892 ;;      Totals:         0       5       0       0       0
  5893 ;;Total ram usage:        5 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    4
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_Menu_Set_Param_Time_Limit
  5900 ;;		_DEC_2_BCD
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           
  5905                           ;psect for function ___lbdiv
  5906  1F72                     ___lbdiv:	
  5907                           
  5908                           ;incstack = 0
  5909 ;; hardware stack exceeded
  5910                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5911                           ;___lbdiv@dividend stored from wreg
  5912  1F72  00A8               	movwf	___lbdiv@dividend
  5913  1F73  01AA               	clrf	___lbdiv@quotient
  5914  1F74  0826               	movf	___lbdiv@divisor,w
  5915  1F75  1903               	btfsc	3,2
  5916  1F76  2F91               	goto	l5836
  5917  1F77  01A9               	clrf	___lbdiv@counter
  5918  1F78  0AA9               	incf	___lbdiv@counter,f
  5919  1F79                     l5824:	
  5920  1F79  1BA6               	btfsc	___lbdiv@divisor,7
  5921  1F7A  2F82               	goto	l5826
  5922  1F7B  1003               	clrc
  5923  1F7C  0DA6               	rlf	___lbdiv@divisor,f
  5924  1F7D  3001               	movlw	1
  5925  1F7E  00A7               	movwf	??___lbdiv
  5926  1F7F  0827               	movf	??___lbdiv,w
  5927  1F80  07A9               	addwf	___lbdiv@counter,f
  5928  1F81  2F79               	goto	l5824
  5929  1F82                     l5826:	
  5930  1F82  1003               	clrc
  5931  1F83  0DAA               	rlf	___lbdiv@quotient,f
  5932  1F84  0826               	movf	___lbdiv@divisor,w
  5933  1F85  0228               	subwf	___lbdiv@dividend,w
  5934  1F86  1C03               	skipc
  5935  1F87  2F8C               	goto	L4
  5936  1F88  0826               	movf	___lbdiv@divisor,w
  5937  1F89  02A8               	subwf	___lbdiv@dividend,f
  5938  1F8A  142A               	bsf	___lbdiv@quotient,0
  5939  1F8B  1003               	clrc
  5940  1F8C                     L4:	
  5941  1F8C  0CA6               	rrf	___lbdiv@divisor,f
  5942  1F8D  3001               	movlw	1
  5943  1F8E  02A9               	subwf	___lbdiv@counter,f
  5944  1F8F  1D03               	btfss	3,2
  5945  1F90  2F82               	goto	l5826
  5946  1F91                     l5836:	
  5947  1F91  082A               	movf	___lbdiv@quotient,w
  5948  1F92  0008               	return
  5949  1F93                     __end_of___lbdiv:	
  5950                           
  5951                           	psect	text14
  5952  135F                     __ptext14:	
  5953 ;; *************** function ___awmod *****************
  5954 ;; Defined at:
  5955 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  divisor         2    6[BANK0 ] int 
  5958 ;;  dividend        2    8[BANK0 ] int 
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;  sign            1   12[BANK0 ] unsigned char 
  5961 ;;  counter         1   11[BANK0 ] unsigned char 
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  2    6[BANK0 ] int 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2, status,0
  5966 ;; Tracked objects:
  5967 ;;		On entry : 300/800
  5968 ;;		On exit  : 300/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5971 ;;      Params:         0       4       0       0       0
  5972 ;;      Locals:         0       2       0       0       0
  5973 ;;      Temps:          0       1       0       0       0
  5974 ;;      Totals:         0       7       0       0       0
  5975 ;;Total ram usage:        7 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    4
  5978 ;; This function calls:
  5979 ;;		Nothing
  5980 ;; This function is called by:
  5981 ;;		_Show_Time
  5982 ;;		_Menu_Set_Param_Time_Limit
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           
  5987                           ;psect for function ___awmod
  5988  135F                     ___awmod:	
  5989                           
  5990                           ;incstack = 0
  5991                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5992  135F  01AC               	clrf	___awmod@sign
  5993  1360  1FA9               	btfss	___awmod@dividend+1,7
  5994  1361  2B69               	goto	l6098
  5995  1362  09A8               	comf	___awmod@dividend,f
  5996  1363  09A9               	comf	___awmod@dividend+1,f
  5997  1364  0AA8               	incf	___awmod@dividend,f
  5998  1365  1903               	skipnz
  5999  1366  0AA9               	incf	___awmod@dividend+1,f
  6000  1367  01AC               	clrf	___awmod@sign
  6001  1368  0AAC               	incf	___awmod@sign,f
  6002  1369                     l6098:	
  6003  1369  1FA7               	btfss	___awmod@divisor+1,7
  6004  136A  2B70               	goto	l6102
  6005  136B  09A6               	comf	___awmod@divisor,f
  6006  136C  09A7               	comf	___awmod@divisor+1,f
  6007  136D  0AA6               	incf	___awmod@divisor,f
  6008  136E  1903               	skipnz
  6009  136F  0AA7               	incf	___awmod@divisor+1,f
  6010  1370                     l6102:	
  6011  1370  0826               	movf	___awmod@divisor,w
  6012  1371  0427               	iorwf	___awmod@divisor+1,w
  6013  1372  1903               	btfsc	3,2
  6014  1373  2B9D               	goto	l6120
  6015  1374  01AB               	clrf	___awmod@counter
  6016  1375  0AAB               	incf	___awmod@counter,f
  6017  1376                     l6110:	
  6018  1376  1BA7               	btfsc	___awmod@divisor+1,7
  6019  1377  2B84               	goto	l6112
  6020  1378  3001               	movlw	1
  6021  1379                     u5825:	
  6022  1379  1003               	clrc
  6023  137A  0DA6               	rlf	___awmod@divisor,f
  6024  137B  0DA7               	rlf	___awmod@divisor+1,f
  6025  137C  3EFF               	addlw	-1
  6026  137D  1D03               	skipz
  6027  137E  2B79               	goto	u5825
  6028  137F  3001               	movlw	1
  6029  1380  00AA               	movwf	??___awmod
  6030  1381  082A               	movf	??___awmod,w
  6031  1382  07AB               	addwf	___awmod@counter,f
  6032  1383  2B76               	goto	l6110
  6033  1384                     l6112:	
  6034  1384  0827               	movf	___awmod@divisor+1,w
  6035  1385  0229               	subwf	___awmod@dividend+1,w
  6036  1386  1D03               	skipz
  6037  1387  2B8A               	goto	u5845
  6038  1388  0826               	movf	___awmod@divisor,w
  6039  1389  0228               	subwf	___awmod@dividend,w
  6040  138A                     u5845:	
  6041  138A  1C03               	skipc
  6042  138B  2B92               	goto	l6116
  6043  138C  0826               	movf	___awmod@divisor,w
  6044  138D  02A8               	subwf	___awmod@dividend,f
  6045  138E  0827               	movf	___awmod@divisor+1,w
  6046  138F  1C03               	skipc
  6047  1390  03A9               	decf	___awmod@dividend+1,f
  6048  1391  02A9               	subwf	___awmod@dividend+1,f
  6049  1392                     l6116:	
  6050  1392  3001               	movlw	1
  6051  1393                     u5855:	
  6052  1393  1003               	clrc
  6053  1394  0CA7               	rrf	___awmod@divisor+1,f
  6054  1395  0CA6               	rrf	___awmod@divisor,f
  6055  1396  3EFF               	addlw	-1
  6056  1397  1D03               	skipz
  6057  1398  2B93               	goto	u5855
  6058  1399  3001               	movlw	1
  6059  139A  02AB               	subwf	___awmod@counter,f
  6060  139B  1D03               	btfss	3,2
  6061  139C  2B84               	goto	l6112
  6062  139D                     l6120:	
  6063  139D  082C               	movf	___awmod@sign,w
  6064  139E  1903               	btfsc	3,2
  6065  139F  2BA5               	goto	l6124
  6066  13A0  09A8               	comf	___awmod@dividend,f
  6067  13A1  09A9               	comf	___awmod@dividend+1,f
  6068  13A2  0AA8               	incf	___awmod@dividend,f
  6069  13A3  1903               	skipnz
  6070  13A4  0AA9               	incf	___awmod@dividend+1,f
  6071  13A5                     l6124:	
  6072  13A5  0829               	movf	___awmod@dividend+1,w
  6073  13A6  00A7               	movwf	?___awmod+1
  6074  13A7  0828               	movf	___awmod@dividend,w
  6075  13A8  00A6               	movwf	?___awmod
  6076  13A9  0008               	return
  6077  13AA                     __end_of___awmod:	
  6078                           
  6079                           	psect	text15
  6080  144D                     __ptext15:	
  6081 ;; *************** function ___awdiv *****************
  6082 ;; Defined at:
  6083 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;  divisor         2    6[BANK0 ] int 
  6086 ;;  dividend        2    8[BANK0 ] int 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  quotient        2   13[BANK0 ] int 
  6089 ;;  sign            1   12[BANK0 ] unsigned char 
  6090 ;;  counter         1   11[BANK0 ] unsigned char 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  2    6[BANK0 ] int 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, status,0
  6095 ;; Tracked objects:
  6096 ;;		On entry : 300/800
  6097 ;;		On exit  : 300/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6100 ;;      Params:         0       4       0       0       0
  6101 ;;      Locals:         0       4       0       0       0
  6102 ;;      Temps:          0       1       0       0       0
  6103 ;;      Totals:         0       9       0       0       0
  6104 ;;Total ram usage:        9 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    4
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_Show_Time
  6111 ;;		_Menu_Set_Param_Time_Limit
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           
  6116                           ;psect for function ___awdiv
  6117  144D                     ___awdiv:	
  6118                           
  6119                           ;incstack = 0
  6120                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6121  144D  01AC               	clrf	___awdiv@sign
  6122  144E  1FA7               	btfss	___awdiv@divisor+1,7
  6123  144F  2C57               	goto	l6054
  6124  1450  09A6               	comf	___awdiv@divisor,f
  6125  1451  09A7               	comf	___awdiv@divisor+1,f
  6126  1452  0AA6               	incf	___awdiv@divisor,f
  6127  1453  1903               	skipnz
  6128  1454  0AA7               	incf	___awdiv@divisor+1,f
  6129  1455  01AC               	clrf	___awdiv@sign
  6130  1456  0AAC               	incf	___awdiv@sign,f
  6131  1457                     l6054:	
  6132  1457  1FA9               	btfss	___awdiv@dividend+1,7
  6133  1458  2C62               	goto	l6060
  6134  1459  09A8               	comf	___awdiv@dividend,f
  6135  145A  09A9               	comf	___awdiv@dividend+1,f
  6136  145B  0AA8               	incf	___awdiv@dividend,f
  6137  145C  1903               	skipnz
  6138  145D  0AA9               	incf	___awdiv@dividend+1,f
  6139  145E  3001               	movlw	1
  6140  145F  00AA               	movwf	??___awdiv
  6141  1460  082A               	movf	??___awdiv,w
  6142  1461  06AC               	xorwf	___awdiv@sign,f
  6143  1462                     l6060:	
  6144  1462  01AD               	clrf	___awdiv@quotient
  6145  1463  01AE               	clrf	___awdiv@quotient+1
  6146  1464  0826               	movf	___awdiv@divisor,w
  6147  1465  0427               	iorwf	___awdiv@divisor+1,w
  6148  1466  1903               	btfsc	3,2
  6149  1467  2C99               	goto	l6082
  6150  1468  01AB               	clrf	___awdiv@counter
  6151  1469  0AAB               	incf	___awdiv@counter,f
  6152  146A                     l6070:	
  6153  146A  1BA7               	btfsc	___awdiv@divisor+1,7
  6154  146B  2C78               	goto	l6072
  6155  146C  3001               	movlw	1
  6156  146D                     u5725:	
  6157  146D  1003               	clrc
  6158  146E  0DA6               	rlf	___awdiv@divisor,f
  6159  146F  0DA7               	rlf	___awdiv@divisor+1,f
  6160  1470  3EFF               	addlw	-1
  6161  1471  1D03               	skipz
  6162  1472  2C6D               	goto	u5725
  6163  1473  3001               	movlw	1
  6164  1474  00AA               	movwf	??___awdiv
  6165  1475  082A               	movf	??___awdiv,w
  6166  1476  07AB               	addwf	___awdiv@counter,f
  6167  1477  2C6A               	goto	l6070
  6168  1478                     l6072:	
  6169  1478  3001               	movlw	1
  6170  1479                     u5745:	
  6171  1479  1003               	clrc
  6172  147A  0DAD               	rlf	___awdiv@quotient,f
  6173  147B  0DAE               	rlf	___awdiv@quotient+1,f
  6174  147C  3EFF               	addlw	-1
  6175  147D  1D03               	skipz
  6176  147E  2C79               	goto	u5745
  6177  147F  0827               	movf	___awdiv@divisor+1,w
  6178  1480  0229               	subwf	___awdiv@dividend+1,w
  6179  1481  1D03               	skipz
  6180  1482  2C85               	goto	u5755
  6181  1483  0826               	movf	___awdiv@divisor,w
  6182  1484  0228               	subwf	___awdiv@dividend,w
  6183  1485                     u5755:	
  6184  1485  1C03               	skipc
  6185  1486  2C8E               	goto	l6078
  6186  1487  0826               	movf	___awdiv@divisor,w
  6187  1488  02A8               	subwf	___awdiv@dividend,f
  6188  1489  0827               	movf	___awdiv@divisor+1,w
  6189  148A  1C03               	skipc
  6190  148B  03A9               	decf	___awdiv@dividend+1,f
  6191  148C  02A9               	subwf	___awdiv@dividend+1,f
  6192  148D  142D               	bsf	___awdiv@quotient,0
  6193  148E                     l6078:	
  6194  148E  3001               	movlw	1
  6195  148F                     u5765:	
  6196  148F  1003               	clrc
  6197  1490  0CA7               	rrf	___awdiv@divisor+1,f
  6198  1491  0CA6               	rrf	___awdiv@divisor,f
  6199  1492  3EFF               	addlw	-1
  6200  1493  1D03               	skipz
  6201  1494  2C8F               	goto	u5765
  6202  1495  3001               	movlw	1
  6203  1496  02AB               	subwf	___awdiv@counter,f
  6204  1497  1D03               	btfss	3,2
  6205  1498  2C78               	goto	l6072
  6206  1499                     l6082:	
  6207  1499  082C               	movf	___awdiv@sign,w
  6208  149A  1903               	btfsc	3,2
  6209  149B  2CA1               	goto	l6086
  6210  149C  09AD               	comf	___awdiv@quotient,f
  6211  149D  09AE               	comf	___awdiv@quotient+1,f
  6212  149E  0AAD               	incf	___awdiv@quotient,f
  6213  149F  1903               	skipnz
  6214  14A0  0AAE               	incf	___awdiv@quotient+1,f
  6215  14A1                     l6086:	
  6216  14A1  082E               	movf	___awdiv@quotient+1,w
  6217  14A2  00A7               	movwf	?___awdiv+1
  6218  14A3  082D               	movf	___awdiv@quotient,w
  6219  14A4  00A6               	movwf	?___awdiv
  6220  14A5  0008               	return
  6221  14A6                     __end_of___awdiv:	
  6222                           
  6223                           	psect	text16
  6224  15CA                     __ptext16:	
  6225 ;; *************** function _Button_Handler *****************
  6226 ;; Defined at:
  6227 ;;		line 97 in file "key-handler.c"
  6228 ;; Parameters:    Size  Location     Type
  6229 ;;  keydef          1    wreg     PTR struct .
  6230 ;;		 -> main@keydef(6), 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  keydef          1   12[BANK0 ] PTR struct .
  6233 ;;		 -> main@keydef(6), 
  6234 ;;  button          1   13[BANK0 ] unsigned char 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  1    wreg      unsigned char 
  6237 ;; Registers used:
  6238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 300/800
  6241 ;;		On exit  : B00/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6244 ;;      Params:         0       0       0       0       0
  6245 ;;      Locals:         0       2       0       0       0
  6246 ;;      Temps:          0       1       0       0       0
  6247 ;;      Totals:         0       3       0       0       0
  6248 ;;Total ram usage:        3 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    5
  6251 ;; This function calls:
  6252 ;;		_Key_Press
  6253 ;; This function is called by:
  6254 ;;		_Show_Time
  6255 ;;		_Menu_Set_Time
  6256 ;;		_Menu_Handler
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _Button_Handler
  6262  15CA                     _Button_Handler:	
  6263                           
  6264                           ;incstack = 0
  6265                           ; Regs used in _Button_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6266                           ;Button_Handler@keydef stored from wreg
  6267  15CA  00AC               	movwf	Button_Handler@keydef
  6268                           
  6269                           ;key-handler.c: 97: unsigned char Button_Handler(KeyPointerStruct *keydef);key-handler.c
      +                          : 98: {;key-handler.c: 99:     unsigned char button;;key-handler.c: 101:     button=Key_
      +                          Press(keydef->set_rtc);
  6270  15CB  082C               	movf	Button_Handler@keydef,w
  6271  15CC  0084               	movwf	4
  6272  15CD  1783               	bsf	3,7	;select IRP bank2
  6273  15CE  0800               	movf	0,w
  6274  15CF  120A  158A  212D  160A  118A  	fcall	_Key_Press
  6275  15D4  00AB               	movwf	??_Button_Handler
  6276  15D5  082B               	movf	??_Button_Handler,w
  6277  15D6  00AD               	movwf	Button_Handler@button
  6278                           
  6279                           ;key-handler.c: 102:     if(button!=k_no_key_press)
  6280  15D7  300C               	movlw	12
  6281  15D8  062D               	xorwf	Button_Handler@button,w
  6282  15D9  1903               	btfsc	3,2
  6283  15DA  2DDD               	goto	l6188
  6284  15DB                     l6184:	
  6285                           
  6286                           ;key-handler.c: 103:     {;key-handler.c: 104:         return button;
  6287  15DB  082D               	movf	Button_Handler@button,w
  6288  15DC  0008               	return
  6289  15DD                     l6188:	
  6290                           
  6291                           ;key-handler.c: 106:     button=Key_Press(keydef->set_down);
  6292  15DD  082C               	movf	Button_Handler@keydef,w
  6293  15DE  3E05               	addlw	5
  6294  15DF  0084               	movwf	4
  6295  15E0  1783               	bsf	3,7	;select IRP bank2
  6296  15E1  0800               	movf	0,w
  6297  15E2  120A  158A  212D  160A  118A  	fcall	_Key_Press
  6298  15E7  00AB               	movwf	??_Button_Handler
  6299  15E8  082B               	movf	??_Button_Handler,w
  6300  15E9  00AD               	movwf	Button_Handler@button
  6301                           
  6302                           ;key-handler.c: 107:     if(button!=k_no_key_press)
  6303  15EA  300C               	movlw	12
  6304  15EB  062D               	xorwf	Button_Handler@button,w
  6305  15EC  1D03               	btfss	3,2
  6306  15ED  2DDB               	goto	l6184
  6307                           
  6308                           ;key-handler.c: 111:     button=Key_Press(keydef->set_right);
  6309  15EE  082C               	movf	Button_Handler@keydef,w
  6310  15EF  3E03               	addlw	3
  6311  15F0  0084               	movwf	4
  6312  15F1  1783               	bsf	3,7	;select IRP bank2
  6313  15F2  0800               	movf	0,w
  6314  15F3  120A  158A  212D  160A  118A  	fcall	_Key_Press
  6315  15F8  00AB               	movwf	??_Button_Handler
  6316  15F9  082B               	movf	??_Button_Handler,w
  6317  15FA  00AD               	movwf	Button_Handler@button
  6318                           
  6319                           ;key-handler.c: 112:     if(button!=k_no_key_press)
  6320  15FB  300C               	movlw	12
  6321  15FC  062D               	xorwf	Button_Handler@button,w
  6322  15FD  1D03               	btfss	3,2
  6323  15FE  2DDB               	goto	l6184
  6324                           
  6325                           ;key-handler.c: 116:     button=Key_Press(keydef->set_time1);
  6326  15FF  0A2C               	incf	Button_Handler@keydef,w
  6327  1600  0084               	movwf	4
  6328  1601  1783               	bsf	3,7	;select IRP bank2
  6329  1602  0800               	movf	0,w
  6330  1603  120A  158A  212D  160A  118A  	fcall	_Key_Press
  6331  1608  00AB               	movwf	??_Button_Handler
  6332  1609  082B               	movf	??_Button_Handler,w
  6333  160A  00AD               	movwf	Button_Handler@button
  6334                           
  6335                           ;key-handler.c: 117:     if(button!=k_no_key_press)
  6336  160B  300C               	movlw	12
  6337  160C  062D               	xorwf	Button_Handler@button,w
  6338  160D  1D03               	btfss	3,2
  6339  160E  2DDB               	goto	l6184
  6340                           
  6341                           ;key-handler.c: 121:     button=Key_Press(keydef->set_time2);
  6342  160F  082C               	movf	Button_Handler@keydef,w
  6343  1610  3E02               	addlw	2
  6344  1611  0084               	movwf	4
  6345  1612  1783               	bsf	3,7	;select IRP bank2
  6346  1613  0800               	movf	0,w
  6347  1614  120A  158A  212D  160A  118A  	fcall	_Key_Press
  6348  1619  00AB               	movwf	??_Button_Handler
  6349  161A  082B               	movf	??_Button_Handler,w
  6350  161B  00AD               	movwf	Button_Handler@button
  6351                           
  6352                           ;key-handler.c: 122:     if(button!=k_no_key_press)
  6353  161C  300C               	movlw	12
  6354  161D  062D               	xorwf	Button_Handler@button,w
  6355  161E  1D03               	btfss	3,2
  6356  161F  2DDB               	goto	l6184
  6357                           
  6358                           ;key-handler.c: 126:     button=Key_Press(keydef->set_up);
  6359  1620  082C               	movf	Button_Handler@keydef,w
  6360  1621  3E04               	addlw	4
  6361  1622  0084               	movwf	4
  6362  1623  1783               	bsf	3,7	;select IRP bank2
  6363  1624  0800               	movf	0,w
  6364  1625  120A  158A  212D  160A  118A  	fcall	_Key_Press
  6365  162A  00AB               	movwf	??_Button_Handler
  6366  162B  082B               	movf	??_Button_Handler,w
  6367  162C  00AD               	movwf	Button_Handler@button
  6368                           
  6369                           ;key-handler.c: 127:     if(button!=k_no_key_press)
  6370  162D  300C               	movlw	12
  6371  162E  062D               	xorwf	Button_Handler@button,w
  6372  162F  1D03               	btfss	3,2
  6373  1630  2DDB               	goto	l6184
  6374                           
  6375                           ;key-handler.c: 132:     return k_no_key_press;
  6376  1631  300C               	movlw	12
  6377  1632  0008               	return
  6378  1633                     __end_of_Button_Handler:	
  6379                           
  6380                           	psect	text17
  6381  092D                     __ptext17:	
  6382 ;; *************** function _Key_Press *****************
  6383 ;; Defined at:
  6384 ;;		line 10 in file "key-handler.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;  button          1    wreg     PTR struct .
  6387 ;;		 -> Button_Init@set_down(7), Button_Init@set_up(7), Button_Init@set_right(7), Button_Init@set_time2(7), 
  6388 ;;		 -> Button_Init@set_time1(7), Button_Init@set_rtc(7), 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  button          1   10[BANK0 ] PTR struct .
  6391 ;;		 -> Button_Init@set_down(7), Button_Init@set_up(7), Button_Init@set_right(7), Button_Init@set_time2(7), 
  6392 ;;		 -> Button_Init@set_time1(7), Button_Init@set_rtc(7), 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  1    wreg      enum E1204
  6395 ;; Registers used:
  6396 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6397 ;; Tracked objects:
  6398 ;;		On entry : B00/800
  6399 ;;		On exit  : B00/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6402 ;;      Params:         0       0       0       0       0
  6403 ;;      Locals:         0       1       0       0       0
  6404 ;;      Temps:          0       4       0       0       0
  6405 ;;      Totals:         0       5       0       0       0
  6406 ;;Total ram usage:        5 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    4
  6409 ;; This function calls:
  6410 ;;		Nothing
  6411 ;; This function is called by:
  6412 ;;		_Button_Handler
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           
  6417                           ;psect for function _Key_Press
  6418  092D                     _Key_Press:	
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _Key_Press: [wreg-fsr0h+status,2+status,0]
  6422                           ;Key_Press@button stored from wreg
  6423  092D  00AA               	movwf	Key_Press@button
  6424                           
  6425                           ;key-handler.c: 10: enum button_press Key_Press(KeyStruct *button);key-handler.c: 11: {;
      +                          key-handler.c: 12:  if(button->klock==0 && (*button->port & 1<<button->pin)==0)
  6426  092E  082A               	movf	Key_Press@button,w
  6427  092F  0084               	movwf	4
  6428  0930  1383               	bcf	3,7	;select IRP bank0
  6429  0931  0800               	movf	0,w
  6430  0932  1D03               	btfss	3,2
  6431  0933  2965               	goto	l5954
  6432  0934  082A               	movf	Key_Press@button,w
  6433  0935  3E03               	addlw	3
  6434  0936  0084               	movwf	4
  6435  0937  0800               	movf	0,w
  6436  0938  00A6               	movwf	??_Key_Press
  6437  0939  0A84               	incf	4,f
  6438  093A  0800               	movf	0,w
  6439  093B  00A7               	movwf	??_Key_Press+1
  6440  093C  0826               	movf	??_Key_Press,w
  6441  093D  0084               	movwf	4
  6442  093E  1783               	bsf	3,7
  6443  093F  1C27               	btfss	??_Key_Press+1,0
  6444  0940  1383               	bcf	3,7
  6445  0941  0800               	movf	0,w
  6446  0942  00A8               	movwf	??_Key_Press+2
  6447  0943  3001               	movlw	1
  6448  0944  00A9               	movwf	??_Key_Press+3
  6449  0945  0A2A               	incf	Key_Press@button,w
  6450  0946  0084               	movwf	4
  6451  0947  1383               	bcf	3,7	;select IRP bank0
  6452  0948  0A00               	incf	0,w
  6453  0949  294C               	goto	u5554
  6454  094A                     u5555:	
  6455  094A  1003               	clrc
  6456  094B  0DA9               	rlf	??_Key_Press+3,f
  6457  094C                     u5554:	
  6458  094C  3EFF               	addlw	-1
  6459  094D  1D03               	skipz
  6460  094E  294A               	goto	u5555
  6461  094F  0829               	movf	??_Key_Press+3,w
  6462  0950  0528               	andwf	??_Key_Press+2,w
  6463  0951  1D03               	btfss	3,2
  6464  0952  2965               	goto	l5954
  6465                           
  6466                           ;key-handler.c: 13:  {;key-handler.c: 14:         button->klock=1;
  6467  0953  082A               	movf	Key_Press@button,w
  6468  0954  0084               	movwf	4
  6469  0955  0180               	clrf	0
  6470  0956  0A80               	incf	0,f
  6471                           
  6472                           ;key-handler.c: 15:         button->lock_long_press=1;
  6473  0957  082A               	movf	Key_Press@button,w
  6474  0958  3E02               	addlw	2
  6475  0959  0084               	movwf	4
  6476  095A  0180               	clrf	0
  6477  095B  0A80               	incf	0,f
  6478                           
  6479                           ;key-handler.c: 16:         g_button_timer=7800;
  6480  095C  3078               	movlw	120
  6481  095D  00D0               	movwf	_g_button_timer	;volatile
  6482  095E  301E               	movlw	30
  6483  095F  00D1               	movwf	_g_button_timer+1	;volatile
  6484                           
  6485                           ;key-handler.c: 18:         return button->button_short_function;
  6486  0960  082A               	movf	Key_Press@button,w
  6487  0961  3E05               	addlw	5
  6488  0962  0084               	movwf	4
  6489  0963  0800               	movf	0,w
  6490  0964  0008               	return
  6491  0965                     l5954:	
  6492  0965  082A               	movf	Key_Press@button,w
  6493  0966  3E03               	addlw	3
  6494  0967  0084               	movwf	4
  6495  0968  0800               	movf	0,w
  6496  0969  00A6               	movwf	??_Key_Press
  6497  096A  0A84               	incf	4,f
  6498  096B  0800               	movf	0,w
  6499  096C  00A7               	movwf	??_Key_Press+1
  6500  096D  0826               	movf	??_Key_Press,w
  6501  096E  0084               	movwf	4
  6502  096F  1783               	bsf	3,7
  6503  0970  1C27               	btfss	??_Key_Press+1,0
  6504  0971  1383               	bcf	3,7
  6505  0972  0800               	movf	0,w
  6506  0973  00A8               	movwf	??_Key_Press+2
  6507  0974  3001               	movlw	1
  6508  0975  00A9               	movwf	??_Key_Press+3
  6509  0976  0A2A               	incf	Key_Press@button,w
  6510  0977  0084               	movwf	4
  6511  0978  1383               	bcf	3,7	;select IRP bank0
  6512  0979  0A00               	incf	0,w
  6513  097A  297D               	goto	u5574
  6514  097B                     u5575:	
  6515  097B  1003               	clrc
  6516  097C  0DA9               	rlf	??_Key_Press+3,f
  6517  097D                     u5574:	
  6518  097D  3EFF               	addlw	-1
  6519  097E  1D03               	skipz
  6520  097F  297B               	goto	u5575
  6521  0980  0829               	movf	??_Key_Press+3,w
  6522  0981  0528               	andwf	??_Key_Press+2,w
  6523  0982  1903               	btfsc	3,2
  6524  0983  2998               	goto	l5964
  6525  0984  082A               	movf	Key_Press@button,w
  6526  0985  0084               	movwf	4
  6527  0986  0300               	decf	0,w
  6528  0987  1D03               	btfss	3,2
  6529  0988  2998               	goto	l5964
  6530                           
  6531                           ;key-handler.c: 21:  {;key-handler.c: 22:         if(g_button_timer<(7800 -800))
  6532  0989  301B               	movlw	27
  6533  098A  0251               	subwf	_g_button_timer+1,w	;volatile
  6534  098B  3058               	movlw	88
  6535  098C  1903               	skipnz
  6536  098D  0250               	subwf	_g_button_timer,w	;volatile
  6537  098E  1803               	skipnc
  6538  098F  29AB               	goto	l5972
  6539                           
  6540                           ;key-handler.c: 23:         {;key-handler.c: 24:             button->klock=0;
  6541  0990  082A               	movf	Key_Press@button,w
  6542  0991  0084               	movwf	4
  6543  0992  0180               	clrf	0
  6544                           
  6545                           ;key-handler.c: 25:             button->lock_long_press=0;
  6546  0993  082A               	movf	Key_Press@button,w
  6547  0994  3E02               	addlw	2
  6548  0995  0084               	movwf	4
  6549  0996  0180               	clrf	0
  6550  0997  29AB               	goto	l5972
  6551  0998                     l5964:	
  6552  0998  082A               	movf	Key_Press@button,w
  6553  0999  3E02               	addlw	2
  6554  099A  0084               	movwf	4
  6555  099B  0300               	decf	0,w
  6556  099C  1D03               	btfss	3,2
  6557  099D  29AB               	goto	l5972
  6558  099E  0850               	movf	_g_button_timer,w	;volatile
  6559  099F  0451               	iorwf	_g_button_timer+1,w	;volatile
  6560  09A0  1D03               	btfss	3,2
  6561  09A1  29AB               	goto	l5972
  6562                           
  6563                           ;key-handler.c: 29:     {;key-handler.c: 30:         button->lock_long_press=0;
  6564  09A2  082A               	movf	Key_Press@button,w
  6565  09A3  3E02               	addlw	2
  6566  09A4  0084               	movwf	4
  6567  09A5  0180               	clrf	0
  6568                           
  6569                           ;key-handler.c: 31:         return button->button_long_function;
  6570  09A6  082A               	movf	Key_Press@button,w
  6571  09A7  3E06               	addlw	6
  6572  09A8  0084               	movwf	4
  6573  09A9  0800               	movf	0,w
  6574  09AA  0008               	return
  6575  09AB                     l5972:	
  6576                           
  6577                           ;key-handler.c: 34:     return k_no_key_press;
  6578  09AB  300C               	movlw	12
  6579  09AC  0008               	return
  6580  09AD                     __end_of_Key_Press:	
  6581                           
  6582                           	psect	text18
  6583  1EE5                     __ptext18:	
  6584 ;; *************** function _Interrupt_Init *****************
  6585 ;; Defined at:
  6586 ;;		line 9 in file "interrupts.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2, status,0
  6595 ;; Tracked objects:
  6596 ;;		On entry : B00/100
  6597 ;;		On exit  : B00/100
  6598 ;;		Unchanged: 800/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6600 ;;      Params:         0       0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0
  6603 ;;      Totals:         0       0       0       0       0
  6604 ;;Total ram usage:        0 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    4
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_main
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           
  6615                           ;psect for function _Interrupt_Init
  6616  1EE5                     _Interrupt_Init:	
  6617                           
  6618                           ;interrupts.c: 12:     OPTION_REGbits.T0CS=0;
  6619                           
  6620                           ;incstack = 0
  6621                           ; Regs used in _Interrupt_Init: [wreg+status,2+status,0]
  6622  1EE5  1281               	bcf	1,5	;volatile
  6623                           
  6624                           ;interrupts.c: 13:     OPTION_REGbits.PSA=0;
  6625  1EE6  1181               	bcf	1,3	;volatile
  6626                           
  6627                           ;interrupts.c: 14:     OPTION_REGbits.PS=0b000;
  6628  1EE7  30F8               	movlw	-8
  6629  1EE8  0581               	andwf	1,f	;volatile
  6630                           
  6631                           ;interrupts.c: 15:     INTCONbits.T0IE=1;
  6632  1EE9  168B               	bsf	11,5	;volatile
  6633                           
  6634                           ;interrupts.c: 18:     T1CONbits.TMR1ON=1;
  6635  1EEA  1283               	bcf	3,5	;RP0=0, select bank0
  6636  1EEB  1410               	bsf	16,0	;volatile
  6637                           
  6638                           ;interrupts.c: 19:     T1CONbits.TMR1CS=0;
  6639  1EEC  1090               	bcf	16,1	;volatile
  6640                           
  6641                           ;interrupts.c: 20:     T1CONbits.T1CKPS=0b00;
  6642  1EED  30CF               	movlw	-49
  6643  1EEE  0590               	andwf	16,f	;volatile
  6644                           
  6645                           ;interrupts.c: 23:     INTCONbits.GIE=1;
  6646  1EEF  178B               	bsf	11,7	;volatile
  6647                           
  6648                           ;interrupts.c: 24:     INTCONbits.PEIE=1;
  6649  1EF0  170B               	bsf	11,6	;volatile
  6650                           
  6651                           ;interrupts.c: 27:     CCP2CONbits.CCP2M=0b0100;
  6652  1EF1  081D               	movf	29,w	;volatile
  6653  1EF2  39F0               	andlw	-16
  6654  1EF3  3804               	iorlw	4
  6655  1EF4  009D               	movwf	29	;volatile
  6656                           
  6657                           ;interrupts.c: 28:     PIE2bits.CCP2IE=1;
  6658  1EF5  1683               	bsf	3,5	;RP0=1, select bank1
  6659  1EF6  140D               	bsf	13,0	;volatile
  6660  1EF7  0008               	return
  6661  1EF8                     __end_of_Interrupt_Init:	
  6662                           
  6663                           	psect	text19
  6664  1EA2                     __ptext19:	
  6665 ;; *************** function _I2C_Init *****************
  6666 ;; Defined at:
  6667 ;;		line 18 in file "hw_i2c.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;		None
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;		None
  6672 ;; Return value:  Size  Location     Type
  6673 ;;                  1    wreg      void 
  6674 ;; Registers used:
  6675 ;;		wreg, status,2, status,0
  6676 ;; Tracked objects:
  6677 ;;		On entry : B00/100
  6678 ;;		On exit  : B00/100
  6679 ;;		Unchanged: 800/0
  6680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6681 ;;      Params:         0       0       0       0       0
  6682 ;;      Locals:         0       0       0       0       0
  6683 ;;      Temps:          0       0       0       0       0
  6684 ;;      Totals:         0       0       0       0       0
  6685 ;;Total ram usage:        0 bytes
  6686 ;; Hardware stack levels used:    1
  6687 ;; Hardware stack levels required when called:    4
  6688 ;; This function calls:
  6689 ;;		Nothing
  6690 ;; This function is called by:
  6691 ;;		_main
  6692 ;; This function uses a non-reentrant model
  6693 ;;
  6694                           
  6695                           
  6696                           ;psect for function _I2C_Init
  6697  1EA2                     _I2C_Init:	
  6698                           
  6699                           ;hw_i2c.c: 21:     SSPCONbits.SSPEN=1;
  6700                           
  6701                           ;incstack = 0
  6702                           ; Regs used in _I2C_Init: [wreg+status,2+status,0]
  6703  1EA2  1283               	bcf	3,5	;RP0=0, select bank0
  6704  1EA3  1694               	bsf	20,5	;volatile
  6705                           
  6706                           ;hw_i2c.c: 22:     SSPCONbits.SSPM=0b1000;
  6707  1EA4  0814               	movf	20,w	;volatile
  6708  1EA5  39F0               	andlw	-16
  6709  1EA6  3808               	iorlw	8
  6710  1EA7  0094               	movwf	20	;volatile
  6711                           
  6712                           ;hw_i2c.c: 23:     SSPADD=19;
  6713  1EA8  3013               	movlw	19
  6714  1EA9  1683               	bsf	3,5	;RP0=1, select bank1
  6715  1EAA  0093               	movwf	19	;volatile
  6716                           
  6717                           ;hw_i2c.c: 24:     SSPCON2=0;
  6718  1EAB  0191               	clrf	17	;volatile
  6719                           
  6720                           ;hw_i2c.c: 25:     SSPSTAT=0;
  6721  1EAC  0194               	clrf	20	;volatile
  6722  1EAD  0008               	return
  6723  1EAE                     __end_of_I2C_Init:	
  6724                           
  6725                           	psect	text20
  6726  1F93                     __ptext20:	
  6727 ;; *************** function _Global_Init *****************
  6728 ;; Defined at:
  6729 ;;		line 4 in file "inits.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;		None
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0
  6738 ;; Tracked objects:
  6739 ;;		On entry : B00/0
  6740 ;;		On exit  : B00/100
  6741 ;;		Unchanged: 800/0
  6742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6743 ;;      Params:         0       0       0       0       0
  6744 ;;      Locals:         0       0       0       0       0
  6745 ;;      Temps:          0       0       0       0       0
  6746 ;;      Totals:         0       0       0       0       0
  6747 ;;Total ram usage:        0 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    4
  6750 ;; This function calls:
  6751 ;;		Nothing
  6752 ;; This function is called by:
  6753 ;;		_main
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           
  6758                           ;psect for function _Global_Init
  6759  1F93                     _Global_Init:	
  6760                           
  6761                           ;inits.c: 7:     OSCCONbits.IRCF=0b111;
  6762                           
  6763                           ;incstack = 0
  6764                           ; Regs used in _Global_Init: [wreg+status,2+status,0]
  6765  1F93  3070               	movlw	112
  6766  1F94  1683               	bsf	3,5	;RP0=1, select bank1
  6767  1F95  048F               	iorwf	15,f	;volatile
  6768                           
  6769                           ;inits.c: 8:     OSCCONbits.OSTS=0;
  6770  1F96  118F               	bcf	15,3	;volatile
  6771                           
  6772                           ;inits.c: 9:     OSCCONbits.SCS=1;
  6773  1F97  140F               	bsf	15,0	;volatile
  6774                           
  6775                           ;inits.c: 12:     ANSEL=0x00;
  6776  1F98  1703               	bsf	3,6	;RP1=1, select bank3
  6777  1F99  0188               	clrf	8	;volatile
  6778                           
  6779                           ;inits.c: 13:     ANSELH=0x00;
  6780  1F9A  0189               	clrf	9	;volatile
  6781                           
  6782                           ;inits.c: 15:     TRISC0=0;
  6783  1F9B  1303               	bcf	3,6	;RP1=0, select bank1
  6784  1F9C  1007               	bcf	7,0	;volatile
  6785                           
  6786                           ;inits.c: 16:     TRISC1=1;
  6787  1F9D  1487               	bsf	7,1	;volatile
  6788                           
  6789                           ;inits.c: 17:     TRISC2=0;
  6790  1F9E  1107               	bcf	7,2	;volatile
  6791                           
  6792                           ;inits.c: 18:     TRISC3=1;
  6793  1F9F  1587               	bsf	7,3	;volatile
  6794                           
  6795                           ;inits.c: 19:     TRISC4=1;
  6796  1FA0  1607               	bsf	7,4	;volatile
  6797                           
  6798                           ;inits.c: 20:     TRISC5=1;
  6799  1FA1  1687               	bsf	7,5	;volatile
  6800                           
  6801                           ;inits.c: 21:     TRISC6=0;
  6802  1FA2  1307               	bcf	7,6	;volatile
  6803                           
  6804                           ;inits.c: 22:     TRISC7=1;
  6805  1FA3  1787               	bsf	7,7	;volatile
  6806                           
  6807                           ;inits.c: 24:     TRISA0=0;
  6808  1FA4  1005               	bcf	5,0	;volatile
  6809                           
  6810                           ;inits.c: 25:     TRISA1=0;
  6811  1FA5  1085               	bcf	5,1	;volatile
  6812                           
  6813                           ;inits.c: 26:     TRISA2=0;
  6814  1FA6  1105               	bcf	5,2	;volatile
  6815                           
  6816                           ;inits.c: 27:     TRISA3=0;
  6817  1FA7  1185               	bcf	5,3	;volatile
  6818                           
  6819                           ;inits.c: 28:     TRISA4=0;
  6820  1FA8  1205               	bcf	5,4	;volatile
  6821                           
  6822                           ;inits.c: 29:     TRISA5=0;
  6823  1FA9  1285               	bcf	5,5	;volatile
  6824                           
  6825                           ;inits.c: 30:     TRISA6=0;
  6826  1FAA  1305               	bcf	5,6	;volatile
  6827                           
  6828                           ;inits.c: 31:     TRISA7=0;
  6829  1FAB  1385               	bcf	5,7	;volatile
  6830                           
  6831                           ;inits.c: 33:     TRISB0=1;
  6832  1FAC  1406               	bsf	6,0	;volatile
  6833                           
  6834                           ;inits.c: 34:     TRISB1=1;
  6835  1FAD  1486               	bsf	6,1	;volatile
  6836                           
  6837                           ;inits.c: 35:     TRISB2=1;
  6838  1FAE  1506               	bsf	6,2	;volatile
  6839                           
  6840                           ;inits.c: 36:     TRISB3=1;
  6841  1FAF  1586               	bsf	6,3	;volatile
  6842                           
  6843                           ;inits.c: 37:     TRISB4=0;
  6844  1FB0  1206               	bcf	6,4	;volatile
  6845                           
  6846                           ;inits.c: 38:     TRISB5=0;
  6847  1FB1  1286               	bcf	6,5	;volatile
  6848                           
  6849                           ;inits.c: 39:     TRISB6=0;
  6850  1FB2  1306               	bcf	6,6	;volatile
  6851                           
  6852                           ;inits.c: 40:     TRISB7=0;
  6853  1FB3  1386               	bcf	6,7	;volatile
  6854  1FB4  0008               	return
  6855  1FB5                     __end_of_Global_Init:	
  6856                           
  6857                           	psect	text21
  6858  13AA                     __ptext21:	
  6859 ;; *************** function _Check_RCV_Data *****************
  6860 ;; Defined at:
  6861 ;;		line 290 in file "manchester_decode.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  DataRCV         1    wreg     PTR struct .
  6864 ;;		 -> main@data_rcv(5), 
  6865 ;;  time            1   38[BANK0 ] PTR struct .
  6866 ;;		 -> main@time(7), 
  6867 ;;  time_limit      1   39[BANK0 ] PTR struct .
  6868 ;;		 -> main@menudef(7), 
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  DataRCV         1   41[BANK0 ] PTR struct .
  6871 ;;		 -> main@data_rcv(5), 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  1    wreg      void 
  6874 ;; Registers used:
  6875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6876 ;; Tracked objects:
  6877 ;;		On entry : 300/800
  6878 ;;		On exit  : 300/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6881 ;;      Params:         0       2       0       0       0
  6882 ;;      Locals:         0       1       0       0       0
  6883 ;;      Temps:          0       1       0       0       0
  6884 ;;      Totals:         0       4       0       0       0
  6885 ;;Total ram usage:        4 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    9
  6888 ;; This function calls:
  6889 ;;		_CRC_check
  6890 ;;		_Check_Event
  6891 ;;		_Check_Time_Date
  6892 ;;		_Frame_Decode
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           
  6899                           ;psect for function _Check_RCV_Data
  6900  13AA                     _Check_RCV_Data:	
  6901                           
  6902                           ;incstack = 0
  6903 ;; hardware stack exceeded
  6904                           ; Regs used in _Check_RCV_Data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6905                           ;Check_RCV_Data@DataRCV stored from wreg
  6906  13AA  00C9               	movwf	Check_RCV_Data@DataRCV
  6907                           
  6908                           ;manchester_decode.c: 290: void Check_RCV_Data(DataStruct *DataRCV, TimeStruct *time,;ma
      +                          nchester_decode.c: 291:                     MenuParamPonterStruct *time_limit);mancheste
      +                          r_decode.c: 292: {;manchester_decode.c: 293:     if(g_reciver_ccp2_isr_fire_flag==1)
  6909  13AB  035C               	decf	_g_reciver_ccp2_isr_fire_flag,w	;volatile
  6910  13AC  1D03               	btfss	3,2
  6911  13AD  0008               	return
  6912                           
  6913                           ;manchester_decode.c: 294:     {;manchester_decode.c: 302:         g_com_timeout=23000;
  6914  13AE  30D8               	movlw	216
  6915  13AF  00CC               	movwf	_g_com_timeout	;volatile
  6916  13B0  3059               	movlw	89
  6917  13B1  00CD               	movwf	_g_com_timeout+1	;volatile
  6918                           
  6919                           ;manchester_decode.c: 304:         if(PORTCbits.RC1 == 0)
  6920  13B2  1887               	btfsc	7,1	;volatile
  6921  13B3  2BB8               	goto	l7208
  6922                           
  6923                           ;manchester_decode.c: 305:         {;manchester_decode.c: 306:             g_generic_tim
      +                          er=80;
  6924  13B4  3050               	movlw	80
  6925  13B5  00CE               	movwf	_g_generic_timer	;volatile
  6926  13B6  3000               	movlw	0
  6927  13B7  00CF               	movwf	_g_generic_timer+1	;volatile
  6928  13B8                     l7208:	
  6929                           
  6930                           ;manchester_decode.c: 310:         if(g_generic_timer==0 || g_com_timeout==0)
  6931  13B8  084E               	movf	_g_generic_timer,w	;volatile
  6932  13B9  044F               	iorwf	_g_generic_timer+1,w	;volatile
  6933  13BA  1903               	btfsc	3,2
  6934  13BB  2BC0               	goto	l7224
  6935  13BC  084C               	movf	_g_com_timeout,w	;volatile
  6936  13BD  044D               	iorwf	_g_com_timeout+1,w	;volatile
  6937  13BE  1D03               	btfss	3,2
  6938  13BF  0008               	return
  6939  13C0                     l7224:	
  6940                           
  6941                           ;manchester_decode.c: 312:             while(Frame_Decode(DataRCV)!=0xFF)
  6942  13C0  0849               	movf	Check_RCV_Data@DataRCV,w
  6943  13C1  160A  118A  23F8  160A  118A  	fcall	_Frame_Decode
  6944  13C6  0A29               	incf	?_Frame_Decode,w
  6945  13C7  042A               	iorwf	?_Frame_Decode+1,w
  6946  13C8  1903               	btfsc	3,2
  6947  13C9  2BF6               	goto	l7226
  6948                           
  6949                           ;manchester_decode.c: 313:             {;manchester_decode.c: 314:                 if(Da
      +                          taRCV->RCV_Frame)
  6950  13CA  0849               	movf	Check_RCV_Data@DataRCV,w
  6951  13CB  3E04               	addlw	4
  6952  13CC  0084               	movwf	4
  6953  13CD  1783               	bsf	3,7	;select IRP bank2
  6954  13CE  0800               	movf	0,w
  6955  13CF  1903               	btfsc	3,2
  6956  13D0  2BC0               	goto	l7224
  6957                           
  6958                           ;manchester_decode.c: 315:                 {;manchester_decode.c: 316:                  
      +                             if(CRC_check(DataRCV) && Check_Time_Date(time, time_limit))
  6959  13D1  0849               	movf	Check_RCV_Data@DataRCV,w
  6960  13D2  160A  158A  2730  160A  118A  	fcall	_CRC_check
  6961  13D7  3A00               	xorlw	0
  6962  13D8  1903               	skipnz
  6963  13D9  2BF0               	goto	l7222
  6964  13DA  0847               	movf	Check_RCV_Data@time_limit,w
  6965  13DB  00C8               	movwf	??_Check_RCV_Data
  6966  13DC  0848               	movf	??_Check_RCV_Data,w
  6967  13DD  00BC               	movwf	Check_Time_Date@time_limit
  6968  13DE  0846               	movf	Check_RCV_Data@time,w
  6969  13DF  120A  158A  21AD  160A  118A  	fcall	_Check_Time_Date
  6970  13E4  3A00               	xorlw	0
  6971  13E5  1903               	skipnz
  6972  13E6  2BF0               	goto	l7222
  6973                           
  6974                           ;manchester_decode.c: 317:                     {;manchester_decode.c: 318:              
      +                                     if(Check_Event(DataRCV))
  6975  13E7  0849               	movf	Check_RCV_Data@DataRCV,w
  6976  13E8  120A  158A  20B4  160A  118A  	fcall	_Check_Event
  6977  13ED  3A00               	xorlw	0
  6978  13EE  1D03               	btfss	3,2
  6979  13EF  0008               	return
  6980  13F0                     l7222:	
  6981                           
  6982                           ;manchester_decode.c: 327:                     DataRCV->RCV_Frame=0;
  6983  13F0  0849               	movf	Check_RCV_Data@DataRCV,w
  6984  13F1  3E04               	addlw	4
  6985  13F2  0084               	movwf	4
  6986  13F3  1783               	bsf	3,7	;select IRP bank2
  6987  13F4  0180               	clrf	0
  6988  13F5  2BC0               	goto	l7224
  6989  13F6                     l7226:	
  6990                           
  6991                           ;manchester_decode.c: 331:             g_reciver_ccp2_isr_fire_flag=0;
  6992  13F6  01DC               	clrf	_g_reciver_ccp2_isr_fire_flag	;volatile
  6993  13F7  0008               	return
  6994  13F8                     __end_of_Check_RCV_Data:	
  6995                           
  6996                           	psect	text22
  6997  09AD                     __ptext22:	
  6998 ;; *************** function _Check_Time_Date *****************
  6999 ;; Defined at:
  7000 ;;		line 336 in file "manchester_decode.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  time            1    wreg     PTR struct .
  7003 ;;		 -> main@time(7), 
  7004 ;;  time_limit      1   28[BANK0 ] PTR struct .
  7005 ;;		 -> main@menudef(7), 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  time            1   35[BANK0 ] PTR struct .
  7008 ;;		 -> main@time(7), 
  7009 ;;  current_time    2   33[BANK0 ] unsigned int 
  7010 ;;  time_limit_m    2   31[BANK0 ] unsigned int 
  7011 ;;  time_limit_m    2   29[BANK0 ] unsigned int 
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  1    wreg      unsigned char 
  7014 ;; Registers used:
  7015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7016 ;; Tracked objects:
  7017 ;;		On entry : B00/800
  7018 ;;		On exit  : B00/800
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7021 ;;      Params:         0       1       0       0       0
  7022 ;;      Locals:         0       7       0       0       0
  7023 ;;      Temps:          0       0       0       0       0
  7024 ;;      Totals:         0       8       0       0       0
  7025 ;;Total ram usage:        8 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    8
  7028 ;; This function calls:
  7029 ;;		_PCF8583_Read_Time_Date
  7030 ;;		___wmul
  7031 ;; This function is called by:
  7032 ;;		_Check_RCV_Data
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function _Check_Time_Date
  7038  09AD                     _Check_Time_Date:	
  7039                           
  7040                           ;incstack = 0
  7041 ;; hardware stack exceeded
  7042                           ; Regs used in _Check_Time_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7043                           ;Check_Time_Date@time stored from wreg
  7044  09AD  00C3               	movwf	Check_Time_Date@time
  7045                           
  7046                           ;manchester_decode.c: 336: unsigned char Check_Time_Date(TimeStruct *time, MenuParamPont
      +                          erStruct *time_limit);manchester_decode.c: 337: {;manchester_decode.c: 339:     unsigned
      +                           int time_limit_min_1, time_limit_min_2, current_time_min;;manchester_decode.c: 341:    
      +                           PCF8583_Read_Time_Date(time);
  7047  09AE  0843               	movf	Check_Time_Date@time,w
  7048  09AF  00AF               	movwf	PCF8583_Read_Time_Date@time_struct_ptr
  7049  09B0  3001               	movlw	1
  7050  09B1  00B0               	movwf	PCF8583_Read_Time_Date@time_struct_ptr+1
  7051  09B2  120A  158A  26E9  120A  158A  	fcall	_PCF8583_Read_Time_Date
  7052                           
  7053                           ;manchester_decode.c: 344:     time_limit_min_1=time_limit->time_limit_work_day_1_ptr->p
      +                          aram*60+
  7054  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  7055  09B8  083C               	movf	Check_Time_Date@time_limit,w
  7056  09B9  3E03               	addlw	3
  7057  09BA  0084               	movwf	4
  7058  09BB  1783               	bsf	3,7	;select IRP bank2
  7059  09BC  0800               	movf	0,w
  7060  09BD  3E05               	addlw	5
  7061  09BE  0084               	movwf	4
  7062  09BF  0800               	movf	0,w
  7063  09C0  00A6               	movwf	___wmul@multiplier
  7064  09C1  01A7               	clrf	___wmul@multiplier+1
  7065  09C2  1BA6               	btfsc	___wmul@multiplier,7
  7066  09C3  03A7               	decf	___wmul@multiplier+1,f
  7067  09C4  303C               	movlw	60
  7068  09C5  00A8               	movwf	___wmul@multiplicand
  7069  09C6  3000               	movlw	0
  7070  09C7  00A9               	movwf	___wmul@multiplicand+1
  7071  09C8  160A  158A  2751  120A  158A  	fcall	___wmul
  7072  09CD  083C               	movf	Check_Time_Date@time_limit,w
  7073  09CE  3E03               	addlw	3
  7074  09CF  0084               	movwf	4
  7075  09D0  0800               	movf	0,w
  7076  09D1  3E06               	addlw	6
  7077  09D2  0084               	movwf	4
  7078  09D3  0800               	movf	0,w
  7079  09D4  0726               	addwf	?___wmul,w
  7080  09D5  00BD               	movwf	Check_Time_Date@time_limit_min_1
  7081  09D6  3000               	movlw	0
  7082  09D7  1B80               	btfsc	0,7
  7083  09D8  30FF               	movlw	255
  7084  09D9  1803               	skipnc
  7085  09DA  3E01               	addlw	1
  7086  09DB  0727               	addwf	?___wmul+1,w
  7087  09DC  00BE               	movwf	Check_Time_Date@time_limit_min_1+1
  7088                           
  7089                           ;manchester_decode.c: 347:     time_limit_min_2=time_limit->time_limit_work_day_2_ptr->p
      +                          aram*60+
  7090  09DD  083C               	movf	Check_Time_Date@time_limit,w
  7091  09DE  3E04               	addlw	4
  7092  09DF  0084               	movwf	4
  7093  09E0  0800               	movf	0,w
  7094  09E1  3E05               	addlw	5
  7095  09E2  0084               	movwf	4
  7096  09E3  0800               	movf	0,w
  7097  09E4  00A6               	movwf	___wmul@multiplier
  7098  09E5  01A7               	clrf	___wmul@multiplier+1
  7099  09E6  1BA6               	btfsc	___wmul@multiplier,7
  7100  09E7  03A7               	decf	___wmul@multiplier+1,f
  7101  09E8  303C               	movlw	60
  7102  09E9  00A8               	movwf	___wmul@multiplicand
  7103  09EA  3000               	movlw	0
  7104  09EB  00A9               	movwf	___wmul@multiplicand+1
  7105  09EC  160A  158A  2751  120A  158A  	fcall	___wmul
  7106  09F1  083C               	movf	Check_Time_Date@time_limit,w
  7107  09F2  3E04               	addlw	4
  7108  09F3  0084               	movwf	4
  7109  09F4  0800               	movf	0,w
  7110  09F5  3E06               	addlw	6
  7111  09F6  0084               	movwf	4
  7112  09F7  0800               	movf	0,w
  7113  09F8  0726               	addwf	?___wmul,w
  7114  09F9  00BF               	movwf	Check_Time_Date@time_limit_min_2
  7115  09FA  3000               	movlw	0
  7116  09FB  1B80               	btfsc	0,7
  7117  09FC  30FF               	movlw	255
  7118  09FD  1803               	skipnc
  7119  09FE  3E01               	addlw	1
  7120  09FF  0727               	addwf	?___wmul+1,w
  7121  0A00  00C0               	movwf	Check_Time_Date@time_limit_min_2+1
  7122                           
  7123                           ;manchester_decode.c: 350:     current_time_min=time->hours*60+time->minutes;
  7124  0A01  0843               	movf	Check_Time_Date@time,w
  7125  0A02  3E02               	addlw	2
  7126  0A03  0084               	movwf	4
  7127  0A04  0800               	movf	0,w
  7128  0A05  00A6               	movwf	___wmul@multiplier
  7129  0A06  01A7               	clrf	___wmul@multiplier+1
  7130  0A07  1BA6               	btfsc	___wmul@multiplier,7
  7131  0A08  03A7               	decf	___wmul@multiplier+1,f
  7132  0A09  303C               	movlw	60
  7133  0A0A  00A8               	movwf	___wmul@multiplicand
  7134  0A0B  3000               	movlw	0
  7135  0A0C  00A9               	movwf	___wmul@multiplicand+1
  7136  0A0D  160A  158A  2751  120A  158A  	fcall	___wmul
  7137  0A12  0A43               	incf	Check_Time_Date@time,w
  7138  0A13  0084               	movwf	4
  7139  0A14  0800               	movf	0,w
  7140  0A15  0726               	addwf	?___wmul,w
  7141  0A16  00C1               	movwf	Check_Time_Date@current_time_min
  7142  0A17  3000               	movlw	0
  7143  0A18  1B80               	btfsc	0,7
  7144  0A19  30FF               	movlw	255
  7145  0A1A  1803               	skipnc
  7146  0A1B  3E01               	addlw	1
  7147  0A1C  0727               	addwf	?___wmul+1,w
  7148  0A1D  00C2               	movwf	Check_Time_Date@current_time_min+1
  7149                           
  7150                           ;manchester_decode.c: 352:     if(current_time_min<=time_limit_min_1 && current_time_min
      +                          >=time_limit_min_2)
  7151  0A1E  0842               	movf	Check_Time_Date@current_time_min+1,w
  7152  0A1F  023E               	subwf	Check_Time_Date@time_limit_min_1+1,w
  7153  0A20  1D03               	skipz
  7154  0A21  2A24               	goto	u6865
  7155  0A22  0841               	movf	Check_Time_Date@current_time_min,w
  7156  0A23  023D               	subwf	Check_Time_Date@time_limit_min_1,w
  7157  0A24                     u6865:	
  7158  0A24  1C03               	skipc
  7159  0A25  2A30               	goto	l7110
  7160  0A26  0840               	movf	Check_Time_Date@time_limit_min_2+1,w
  7161  0A27  0242               	subwf	Check_Time_Date@current_time_min+1,w
  7162  0A28  1D03               	skipz
  7163  0A29  2A2C               	goto	u6875
  7164  0A2A  083F               	movf	Check_Time_Date@time_limit_min_2,w
  7165  0A2B  0241               	subwf	Check_Time_Date@current_time_min,w
  7166  0A2C                     u6875:	
  7167  0A2C  1C03               	skipc
  7168  0A2D  2A30               	goto	l7110
  7169                           
  7170                           ;manchester_decode.c: 353:     {;manchester_decode.c: 354:         return 1;
  7171  0A2E  3001               	movlw	1
  7172  0A2F  0008               	return
  7173  0A30                     l7110:	
  7174                           
  7175                           ;manchester_decode.c: 356:     {;manchester_decode.c: 357:         return 0;
  7176  0A30  3000               	movlw	0
  7177  0A31  0008               	return
  7178  0A32                     __end_of_Check_Time_Date:	
  7179                           
  7180                           	psect	text23
  7181  1F51                     __ptext23:	
  7182 ;; *************** function ___wmul *****************
  7183 ;; Defined at:
  7184 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  multiplier      2    6[BANK0 ] unsigned int 
  7187 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;  product         2   10[BANK0 ] unsigned int 
  7190 ;; Return value:  Size  Location     Type
  7191 ;;                  2    6[BANK0 ] unsigned int 
  7192 ;; Registers used:
  7193 ;;		wreg, status,2, status,0
  7194 ;; Tracked objects:
  7195 ;;		On entry : B00/800
  7196 ;;		On exit  : B00/800
  7197 ;;		Unchanged: 800/0
  7198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7199 ;;      Params:         0       4       0       0       0
  7200 ;;      Locals:         0       2       0       0       0
  7201 ;;      Temps:          0       0       0       0       0
  7202 ;;      Totals:         0       6       0       0       0
  7203 ;;Total ram usage:        6 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    4
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_Check_Time_Date
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           
  7214                           ;psect for function ___wmul
  7215  1F51                     ___wmul:	
  7216                           
  7217                           ;incstack = 0
  7218                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7219  1F51  01AA               	clrf	___wmul@product
  7220  1F52  01AB               	clrf	___wmul@product+1
  7221  1F53                     l6516:	
  7222  1F53  1C26               	btfss	___wmul@multiplier,0
  7223  1F54  2F5B               	goto	l892
  7224  1F55  0828               	movf	___wmul@multiplicand,w
  7225  1F56  07AA               	addwf	___wmul@product,f
  7226  1F57  1803               	skipnc
  7227  1F58  0AAB               	incf	___wmul@product+1,f
  7228  1F59  0829               	movf	___wmul@multiplicand+1,w
  7229  1F5A  07AB               	addwf	___wmul@product+1,f
  7230  1F5B                     l892:	
  7231  1F5B  3001               	movlw	1
  7232  1F5C                     u6485:	
  7233  1F5C  1003               	clrc
  7234  1F5D  0DA8               	rlf	___wmul@multiplicand,f
  7235  1F5E  0DA9               	rlf	___wmul@multiplicand+1,f
  7236  1F5F  3EFF               	addlw	-1
  7237  1F60  1D03               	skipz
  7238  1F61  2F5C               	goto	u6485
  7239  1F62  3001               	movlw	1
  7240  1F63                     u6495:	
  7241  1F63  1003               	clrc
  7242  1F64  0CA7               	rrf	___wmul@multiplier+1,f
  7243  1F65  0CA6               	rrf	___wmul@multiplier,f
  7244  1F66  3EFF               	addlw	-1
  7245  1F67  1D03               	skipz
  7246  1F68  2F63               	goto	u6495
  7247  1F69  0826               	movf	___wmul@multiplier,w
  7248  1F6A  0427               	iorwf	___wmul@multiplier+1,w
  7249  1F6B  1D03               	btfss	3,2
  7250  1F6C  2F53               	goto	l6516
  7251  1F6D  082B               	movf	___wmul@product+1,w
  7252  1F6E  00A7               	movwf	?___wmul+1
  7253  1F6F  082A               	movf	___wmul@product,w
  7254  1F70  00A6               	movwf	?___wmul
  7255  1F71  0008               	return
  7256  1F72                     __end_of___wmul:	
  7257                           
  7258                           	psect	text24
  7259  0EE9                     __ptext24:	
  7260 ;; *************** function _PCF8583_Read_Time_Date *****************
  7261 ;; Defined at:
  7262 ;;		line 59 in file "pcf8583.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  time_struct_    2   15[BANK0 ] PTR struct .
  7265 ;;		 -> Menu_Set_Time@time(7), main@time(7), 
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;  year            1   27[BANK0 ] unsigned char 
  7268 ;;  bcd_mon         1   26[BANK0 ] unsigned char 
  7269 ;;  bcd_day         1   25[BANK0 ] unsigned char 
  7270 ;;  bcd_hrs         1   24[BANK0 ] unsigned char 
  7271 ;;  bcd_min         1   23[BANK0 ] unsigned char 
  7272 ;;  bcd_sec         1   22[BANK0 ] unsigned char 
  7273 ;;  year_bits       1   21[BANK0 ] unsigned char 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      void 
  7276 ;; Registers used:
  7277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 300/0
  7280 ;;		On exit  : 300/100
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7283 ;;      Params:         0       2       0       0       0
  7284 ;;      Locals:         0       7       0       0       0
  7285 ;;      Temps:          0       4       0       0       0
  7286 ;;      Totals:         0      13       0       0       0
  7287 ;;Total ram usage:       13 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    7
  7290 ;; This function calls:
  7291 ;;		_BCD_2_DEC
  7292 ;;		_I2C_Master_Read
  7293 ;;		_I2C_Master_Start
  7294 ;;		_I2C_Master_Stop
  7295 ;;		_I2C_Master_Write
  7296 ;;		_PCF8583_Read_Byte
  7297 ;;		_PCF8583_Write_Byte
  7298 ;; This function is called by:
  7299 ;;		_Check_Time_Date
  7300 ;;		_Show_Time
  7301 ;;		_Menu_Set_Time
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           
  7306                           ;psect for function _PCF8583_Read_Time_Date
  7307  0EE9                     _PCF8583_Read_Time_Date:	
  7308                           
  7309                           ;pcf8583.c: 59: void PCF8583_Read_Time_Date(TimeStruct *time_struct_ptr);pcf8583.c: 60: 
      +                          {;pcf8583.c: 61:  unsigned char year_bits;;pcf8583.c: 62:  unsigned char year;;pcf8583.c
      +                          : 63:  unsigned char bcd_sec;;pcf8583.c: 64:  unsigned char bcd_min;;pcf8583.c: 65:  uns
      +                          igned char bcd_hrs;;pcf8583.c: 66:  unsigned char bcd_day;;pcf8583.c: 67:  unsigned char
      +                           bcd_mon;;pcf8583.c: 69:     INTCONbits.GIE=0;
  7310                           
  7311                           ;incstack = 0
  7312 ;; hardware stack exceeded
  7313                           ; Regs used in _PCF8583_Read_Time_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7314  0EE9  138B               	bcf	11,7	;volatile
  7315                           
  7316                           ;pcf8583.c: 71:  I2C_Master_Start();
  7317  0EEA  160A  158A  2682  120A  158A  	fcall	_I2C_Master_Start
  7318                           
  7319                           ;pcf8583.c: 72:  I2C_Master_Write(0xA0);
  7320  0EEF  30A0               	movlw	160
  7321  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  7322  0EF1  00A6               	movwf	I2C_Master_Write@data
  7323  0EF2  3000               	movlw	0
  7324  0EF3  00A7               	movwf	I2C_Master_Write@data+1
  7325  0EF4  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  7326                           
  7327                           ;pcf8583.c: 73:  I2C_Master_Write(0x02);
  7328  0EF9  3002               	movlw	2
  7329  0EFA  00A6               	movwf	I2C_Master_Write@data
  7330  0EFB  3000               	movlw	0
  7331  0EFC  00A7               	movwf	I2C_Master_Write@data+1
  7332  0EFD  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  7333                           
  7334                           ;pcf8583.c: 74:  I2C_Master_Start();
  7335  0F02  160A  158A  2682  120A  158A  	fcall	_I2C_Master_Start
  7336                           
  7337                           ;pcf8583.c: 75:  I2C_Master_Write(0xA1);
  7338  0F07  30A1               	movlw	161
  7339  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  7340  0F09  00A6               	movwf	I2C_Master_Write@data
  7341  0F0A  3000               	movlw	0
  7342  0F0B  00A7               	movwf	I2C_Master_Write@data+1
  7343  0F0C  160A  158A  2687  120A  158A  	fcall	_I2C_Master_Write
  7344                           
  7345                           ;pcf8583.c: 76:  bcd_sec = I2C_Master_Read(1);
  7346  0F11  3001               	movlw	1
  7347  0F12  160A  158A  27D8  120A  158A  	fcall	_I2C_Master_Read
  7348  0F17  00B1               	movwf	??_PCF8583_Read_Time_Date
  7349  0F18  0831               	movf	??_PCF8583_Read_Time_Date,w
  7350  0F19  00B6               	movwf	PCF8583_Read_Time_Date@bcd_sec
  7351                           
  7352                           ;pcf8583.c: 77:  bcd_min = I2C_Master_Read(1);
  7353  0F1A  3001               	movlw	1
  7354  0F1B  160A  158A  27D8  120A  158A  	fcall	_I2C_Master_Read
  7355  0F20  00B1               	movwf	??_PCF8583_Read_Time_Date
  7356  0F21  0831               	movf	??_PCF8583_Read_Time_Date,w
  7357  0F22  00B7               	movwf	PCF8583_Read_Time_Date@bcd_min
  7358                           
  7359                           ;pcf8583.c: 78:  bcd_hrs = I2C_Master_Read(1);
  7360  0F23  3001               	movlw	1
  7361  0F24  160A  158A  27D8  120A  158A  	fcall	_I2C_Master_Read
  7362  0F29  00B1               	movwf	??_PCF8583_Read_Time_Date
  7363  0F2A  0831               	movf	??_PCF8583_Read_Time_Date,w
  7364  0F2B  00B8               	movwf	PCF8583_Read_Time_Date@bcd_hrs
  7365                           
  7366                           ;pcf8583.c: 79:  bcd_day = I2C_Master_Read(1);
  7367  0F2C  3001               	movlw	1
  7368  0F2D  160A  158A  27D8  120A  158A  	fcall	_I2C_Master_Read
  7369  0F32  00B1               	movwf	??_PCF8583_Read_Time_Date
  7370  0F33  0831               	movf	??_PCF8583_Read_Time_Date,w
  7371  0F34  00B9               	movwf	PCF8583_Read_Time_Date@bcd_day
  7372                           
  7373                           ;pcf8583.c: 80:  bcd_mon = I2C_Master_Read(0);
  7374  0F35  3000               	movlw	0
  7375  0F36  160A  158A  27D8  120A  158A  	fcall	_I2C_Master_Read
  7376  0F3B  00B1               	movwf	??_PCF8583_Read_Time_Date
  7377  0F3C  0831               	movf	??_PCF8583_Read_Time_Date,w
  7378  0F3D  00BA               	movwf	PCF8583_Read_Time_Date@bcd_mon
  7379                           
  7380                           ;pcf8583.c: 81:     I2C_Master_Stop();
  7381  0F3E  160A  118A  2048  120A  158A  	fcall	_I2C_Master_Stop
  7382                           
  7383                           ;pcf8583.c: 83:  time_struct_ptr->seconds = BCD_2_DEC(bcd_sec);
  7384  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  7385  0F44  0836               	movf	PCF8583_Read_Time_Date@bcd_sec,w
  7386  0F45  160A  118A  204D  120A  158A  	fcall	_BCD_2_DEC
  7387  0F4A  00B1               	movwf	??_PCF8583_Read_Time_Date
  7388  0F4B  082F               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  7389  0F4C  0084               	movwf	4
  7390  0F4D  1783               	bsf	3,7
  7391  0F4E  1C30               	btfss	PCF8583_Read_Time_Date@time_struct_ptr+1,0
  7392  0F4F  1383               	bcf	3,7
  7393  0F50  0831               	movf	??_PCF8583_Read_Time_Date,w
  7394  0F51  0080               	movwf	0
  7395                           
  7396                           ;pcf8583.c: 84:  time_struct_ptr->minutes = BCD_2_DEC(bcd_min);
  7397  0F52  0837               	movf	PCF8583_Read_Time_Date@bcd_min,w
  7398  0F53  160A  118A  204D  120A  158A  	fcall	_BCD_2_DEC
  7399  0F58  00B1               	movwf	??_PCF8583_Read_Time_Date
  7400  0F59  082F               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  7401  0F5A  3E01               	addlw	1
  7402  0F5B  00B2               	movwf	??_PCF8583_Read_Time_Date+1
  7403  0F5C  0830               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  7404  0F5D  1803               	skipnc
  7405  0F5E  3E01               	addlw	1
  7406  0F5F  3E00               	addlw	0
  7407  0F60  00B3               	movwf	??_PCF8583_Read_Time_Date+2
  7408  0F61  0832               	movf	??_PCF8583_Read_Time_Date+1,w
  7409  0F62  0084               	movwf	4
  7410  0F63  1783               	bsf	3,7
  7411  0F64  1C33               	btfss	??_PCF8583_Read_Time_Date+2,0
  7412  0F65  1383               	bcf	3,7
  7413  0F66  0831               	movf	??_PCF8583_Read_Time_Date,w
  7414  0F67  0080               	movwf	0
  7415                           
  7416                           ;pcf8583.c: 85:  time_struct_ptr->hours = BCD_2_DEC(bcd_hrs & 0x3F);
  7417  0F68  0838               	movf	PCF8583_Read_Time_Date@bcd_hrs,w
  7418  0F69  393F               	andlw	63
  7419  0F6A  160A  118A  204D  120A  158A  	fcall	_BCD_2_DEC
  7420  0F6F  00B1               	movwf	??_PCF8583_Read_Time_Date
  7421  0F70  082F               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  7422  0F71  3E02               	addlw	2
  7423  0F72  00B2               	movwf	??_PCF8583_Read_Time_Date+1
  7424  0F73  0830               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  7425  0F74  1803               	skipnc
  7426  0F75  3E01               	addlw	1
  7427  0F76  3E00               	addlw	0
  7428  0F77  00B3               	movwf	??_PCF8583_Read_Time_Date+2
  7429  0F78  0832               	movf	??_PCF8583_Read_Time_Date+1,w
  7430  0F79  0084               	movwf	4
  7431  0F7A  1783               	bsf	3,7
  7432  0F7B  1C33               	btfss	??_PCF8583_Read_Time_Date+2,0
  7433  0F7C  1383               	bcf	3,7
  7434  0F7D  0831               	movf	??_PCF8583_Read_Time_Date,w
  7435  0F7E  0080               	movwf	0
  7436                           
  7437                           ;pcf8583.c: 86:  time_struct_ptr->day = BCD_2_DEC(bcd_day & 0x3F);
  7438  0F7F  0839               	movf	PCF8583_Read_Time_Date@bcd_day,w
  7439  0F80  393F               	andlw	63
  7440  0F81  160A  118A  204D  120A  158A  	fcall	_BCD_2_DEC
  7441  0F86  00B1               	movwf	??_PCF8583_Read_Time_Date
  7442  0F87  082F               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  7443  0F88  3E03               	addlw	3
  7444  0F89  00B2               	movwf	??_PCF8583_Read_Time_Date+1
  7445  0F8A  0830               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  7446  0F8B  1803               	skipnc
  7447  0F8C  3E01               	addlw	1
  7448  0F8D  3E00               	addlw	0
  7449  0F8E  00B3               	movwf	??_PCF8583_Read_Time_Date+2
  7450  0F8F  0832               	movf	??_PCF8583_Read_Time_Date+1,w
  7451  0F90  0084               	movwf	4
  7452  0F91  1783               	bsf	3,7
  7453  0F92  1C33               	btfss	??_PCF8583_Read_Time_Date+2,0
  7454  0F93  1383               	bcf	3,7
  7455  0F94  0831               	movf	??_PCF8583_Read_Time_Date,w
  7456  0F95  0080               	movwf	0
  7457                           
  7458                           ;pcf8583.c: 87:  time_struct_ptr->month = BCD_2_DEC(bcd_mon & 0x1F);
  7459  0F96  083A               	movf	PCF8583_Read_Time_Date@bcd_mon,w
  7460  0F97  391F               	andlw	31
  7461  0F98  160A  118A  204D  120A  158A  	fcall	_BCD_2_DEC
  7462  0F9D  00B1               	movwf	??_PCF8583_Read_Time_Date
  7463  0F9E  082F               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  7464  0F9F  3E04               	addlw	4
  7465  0FA0  00B2               	movwf	??_PCF8583_Read_Time_Date+1
  7466  0FA1  0830               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  7467  0FA2  1803               	skipnc
  7468  0FA3  3E01               	addlw	1
  7469  0FA4  3E00               	addlw	0
  7470  0FA5  00B3               	movwf	??_PCF8583_Read_Time_Date+2
  7471  0FA6  0832               	movf	??_PCF8583_Read_Time_Date+1,w
  7472  0FA7  0084               	movwf	4
  7473  0FA8  1783               	bsf	3,7
  7474  0FA9  1C33               	btfss	??_PCF8583_Read_Time_Date+2,0
  7475  0FAA  1383               	bcf	3,7
  7476  0FAB  0831               	movf	??_PCF8583_Read_Time_Date,w
  7477  0FAC  0080               	movwf	0
  7478                           
  7479                           ;pcf8583.c: 88:     time_struct_ptr->weekday = bcd_mon>>5;
  7480  0FAD  083A               	movf	PCF8583_Read_Time_Date@bcd_mon,w
  7481  0FAE  00B1               	movwf	??_PCF8583_Read_Time_Date
  7482  0FAF  3005               	movlw	5
  7483  0FB0                     u6835:	
  7484  0FB0  1003               	clrc
  7485  0FB1  0CB1               	rrf	??_PCF8583_Read_Time_Date,f
  7486  0FB2  3EFF               	addlw	-1
  7487  0FB3  1D03               	skipz
  7488  0FB4  2FB0               	goto	u6835
  7489  0FB5  0831               	movf	??_PCF8583_Read_Time_Date,w
  7490  0FB6  00B2               	movwf	??_PCF8583_Read_Time_Date+1
  7491  0FB7  082F               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  7492  0FB8  3E06               	addlw	6
  7493  0FB9  00B3               	movwf	??_PCF8583_Read_Time_Date+2
  7494  0FBA  0830               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  7495  0FBB  1803               	skipnc
  7496  0FBC  3E01               	addlw	1
  7497  0FBD  3E00               	addlw	0
  7498  0FBE  00B4               	movwf	??_PCF8583_Read_Time_Date+3
  7499  0FBF  0833               	movf	??_PCF8583_Read_Time_Date+2,w
  7500  0FC0  0084               	movwf	4
  7501  0FC1  1783               	bsf	3,7
  7502  0FC2  1C34               	btfss	??_PCF8583_Read_Time_Date+3,0
  7503  0FC3  1383               	bcf	3,7
  7504  0FC4  0832               	movf	??_PCF8583_Read_Time_Date+1,w
  7505  0FC5  0080               	movwf	0
  7506                           
  7507                           ;pcf8583.c: 90:  year_bits = bcd_day >> 6;
  7508  0FC6  0839               	movf	PCF8583_Read_Time_Date@bcd_day,w
  7509  0FC7  00B1               	movwf	??_PCF8583_Read_Time_Date
  7510  0FC8  3006               	movlw	6
  7511  0FC9                     u6845:	
  7512  0FC9  1003               	clrc
  7513  0FCA  0CB1               	rrf	??_PCF8583_Read_Time_Date,f
  7514  0FCB  3EFF               	addlw	-1
  7515  0FCC  1D03               	skipz
  7516  0FCD  2FC9               	goto	u6845
  7517  0FCE  0831               	movf	??_PCF8583_Read_Time_Date,w
  7518  0FCF  00B2               	movwf	??_PCF8583_Read_Time_Date+1
  7519  0FD0  0832               	movf	??_PCF8583_Read_Time_Date+1,w
  7520  0FD1  00B5               	movwf	PCF8583_Read_Time_Date@year_bits
  7521                           
  7522                           ;pcf8583.c: 93:  year = PCF8583_Read_Byte(0x10);
  7523  0FD2  3010               	movlw	16
  7524  0FD3  160A  118A  21EA  120A  158A  	fcall	_PCF8583_Read_Byte
  7525  0FD8  00B1               	movwf	??_PCF8583_Read_Time_Date
  7526  0FD9  0831               	movf	??_PCF8583_Read_Time_Date,w
  7527  0FDA  00BB               	movwf	PCF8583_Read_Time_Date@year
  7528  0FDB                     l7090:	
  7529                           ;pcf8583.c: 94:  while(year_bits != (year & 3))
  7530                           
  7531                           
  7532                           ;pcf8583.c: 94:  while(year_bits != (year & 3))
  7533  0FDB  083B               	movf	PCF8583_Read_Time_Date@year,w
  7534  0FDC  3903               	andlw	3
  7535  0FDD  0635               	xorwf	PCF8583_Read_Time_Date@year_bits,w
  7536  0FDE  1903               	btfsc	3,2
  7537  0FDF  2FE5               	goto	l7092
  7538                           
  7539                           ;pcf8583.c: 95:  {;pcf8583.c: 96:   year++;
  7540  0FE0  3001               	movlw	1
  7541  0FE1  00B1               	movwf	??_PCF8583_Read_Time_Date
  7542  0FE2  0831               	movf	??_PCF8583_Read_Time_Date,w
  7543  0FE3  07BB               	addwf	PCF8583_Read_Time_Date@year,f
  7544  0FE4  2FDB               	goto	l7090
  7545  0FE5                     l7092:	
  7546                           
  7547                           ;pcf8583.c: 98:  time_struct_ptr->year = year;
  7548  0FE5  083B               	movf	PCF8583_Read_Time_Date@year,w
  7549  0FE6  00B1               	movwf	??_PCF8583_Read_Time_Date
  7550  0FE7  082F               	movf	PCF8583_Read_Time_Date@time_struct_ptr,w
  7551  0FE8  3E05               	addlw	5
  7552  0FE9  00B2               	movwf	??_PCF8583_Read_Time_Date+1
  7553  0FEA  0830               	movf	PCF8583_Read_Time_Date@time_struct_ptr+1,w
  7554  0FEB  1803               	skipnc
  7555  0FEC  3E01               	addlw	1
  7556  0FED  3E00               	addlw	0
  7557  0FEE  00B3               	movwf	??_PCF8583_Read_Time_Date+2
  7558  0FEF  0832               	movf	??_PCF8583_Read_Time_Date+1,w
  7559  0FF0  0084               	movwf	4
  7560  0FF1  1783               	bsf	3,7
  7561  0FF2  1C33               	btfss	??_PCF8583_Read_Time_Date+2,0
  7562  0FF3  1383               	bcf	3,7
  7563  0FF4  0831               	movf	??_PCF8583_Read_Time_Date,w
  7564  0FF5  0080               	movwf	0
  7565                           
  7566                           ;pcf8583.c: 99:  PCF8583_Write_Byte(0x10, year);
  7567  0FF6  083B               	movf	PCF8583_Read_Time_Date@year,w
  7568  0FF7  00B1               	movwf	??_PCF8583_Read_Time_Date
  7569  0FF8  0831               	movf	??_PCF8583_Read_Time_Date,w
  7570  0FF9  00A8               	movwf	PCF8583_Write_Byte@data
  7571  0FFA  3010               	movlw	16
  7572  0FFB  160A  118A  208F   	fcall	_PCF8583_Write_Byte
  7573                           
  7574                           ;pcf8583.c: 101:     INTCONbits.GIE=1;
  7575  0FFE  178B               	bsf	11,7	;volatile
  7576  0FFF  0008               	return
  7577  1000                     __end_of_PCF8583_Read_Time_Date:	
  7578                           
  7579                           	psect	text25
  7580  108F                     __ptext25:	
  7581 ;; *************** function _PCF8583_Write_Byte *****************
  7582 ;; Defined at:
  7583 ;;		line 35 in file "pcf8583.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  address         1    wreg     unsigned char 
  7586 ;;  data            1    8[BANK0 ] unsigned char 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  address         1   11[BANK0 ] unsigned char 
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      void 
  7591 ;; Registers used:
  7592 ;;		wreg, status,2, status,0, pclath, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : 300/800
  7595 ;;		On exit  : 300/100
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7598 ;;      Params:         0       1       0       0       0
  7599 ;;      Locals:         0       1       0       0       0
  7600 ;;      Temps:          0       2       0       0       0
  7601 ;;      Totals:         0       4       0       0       0
  7602 ;;Total ram usage:        4 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    6
  7605 ;; This function calls:
  7606 ;;		_I2C_Master_Start
  7607 ;;		_I2C_Master_Stop
  7608 ;;		_I2C_Master_Write
  7609 ;; This function is called by:
  7610 ;;		_PCF8583_Read_Time_Date
  7611 ;;		_PCF8583_Set_Date_Time
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           
  7616                           ;psect for function _PCF8583_Write_Byte
  7617  108F                     _PCF8583_Write_Byte:	
  7618                           
  7619                           ;incstack = 0
  7620 ;; hardware stack exceeded
  7621                           ; Regs used in _PCF8583_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
  7622                           ;PCF8583_Write_Byte@address stored from wreg
  7623  108F  00AB               	movwf	PCF8583_Write_Byte@address
  7624                           
  7625                           ;pcf8583.c: 35: void PCF8583_Write_Byte(unsigned char address, unsigned char data);pcf85
      +                          83.c: 36: {;pcf8583.c: 37:  I2C_Master_Start();
  7626  1090  160A  158A  2682  160A  118A  	fcall	_I2C_Master_Start
  7627                           
  7628                           ;pcf8583.c: 38:  I2C_Master_Write(0xA0);
  7629  1095  30A0               	movlw	160
  7630  1096  1283               	bcf	3,5	;RP0=0, select bank0
  7631  1097  00A6               	movwf	I2C_Master_Write@data
  7632  1098  3000               	movlw	0
  7633  1099  00A7               	movwf	I2C_Master_Write@data+1
  7634  109A  160A  158A  2687  160A  118A  	fcall	_I2C_Master_Write
  7635                           
  7636                           ;pcf8583.c: 39:  I2C_Master_Write(address);
  7637  109F  082B               	movf	PCF8583_Write_Byte@address,w
  7638  10A0  00A9               	movwf	??_PCF8583_Write_Byte
  7639  10A1  01AA               	clrf	??_PCF8583_Write_Byte+1
  7640  10A2  0829               	movf	??_PCF8583_Write_Byte,w
  7641  10A3  00A6               	movwf	I2C_Master_Write@data
  7642  10A4  082A               	movf	??_PCF8583_Write_Byte+1,w
  7643  10A5  00A7               	movwf	I2C_Master_Write@data+1
  7644  10A6  160A  158A  2687  160A  118A  	fcall	_I2C_Master_Write
  7645                           
  7646                           ;pcf8583.c: 40:  I2C_Master_Write(data);
  7647  10AB  0828               	movf	PCF8583_Write_Byte@data,w
  7648  10AC  00A9               	movwf	??_PCF8583_Write_Byte
  7649  10AD  01AA               	clrf	??_PCF8583_Write_Byte+1
  7650  10AE  0829               	movf	??_PCF8583_Write_Byte,w
  7651  10AF  00A6               	movwf	I2C_Master_Write@data
  7652  10B0  082A               	movf	??_PCF8583_Write_Byte+1,w
  7653  10B1  00A7               	movwf	I2C_Master_Write@data+1
  7654  10B2  160A  158A  2687  160A  118A  	fcall	_I2C_Master_Write
  7655                           
  7656                           ;pcf8583.c: 41:  I2C_Master_Stop();
  7657  10B7  160A  118A  2048   	fcall	_I2C_Master_Stop
  7658  10BA  0008               	return
  7659  10BB                     __end_of_PCF8583_Write_Byte:	
  7660                           
  7661                           	psect	text26
  7662  11EA                     __ptext26:	
  7663 ;; *************** function _PCF8583_Read_Byte *****************
  7664 ;; Defined at:
  7665 ;;		line 45 in file "pcf8583.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  address         1    wreg     unsigned char 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  address         1   13[BANK0 ] unsigned char 
  7670 ;;  retval          1   14[BANK0 ] unsigned char 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      unsigned char 
  7673 ;; Registers used:
  7674 ;;		wreg, status,2, status,0, pclath, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 300/0
  7677 ;;		On exit  : 300/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7680 ;;      Params:         0       0       0       0       0
  7681 ;;      Locals:         0       2       0       0       0
  7682 ;;      Temps:          0       2       0       0       0
  7683 ;;      Totals:         0       4       0       0       0
  7684 ;;Total ram usage:        4 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    6
  7687 ;; This function calls:
  7688 ;;		_I2C_Master_Read
  7689 ;;		_I2C_Master_Start
  7690 ;;		_I2C_Master_Stop
  7691 ;;		_I2C_Master_Write
  7692 ;; This function is called by:
  7693 ;;		_PCF8583_Read_Time_Date
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function _PCF8583_Read_Byte
  7699  11EA                     _PCF8583_Read_Byte:	
  7700                           
  7701                           ;incstack = 0
  7702 ;; hardware stack exceeded
  7703                           ; Regs used in _PCF8583_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
  7704                           ;PCF8583_Read_Byte@address stored from wreg
  7705  11EA  00AD               	movwf	PCF8583_Read_Byte@address
  7706                           
  7707                           ;pcf8583.c: 45: unsigned char PCF8583_Read_Byte(unsigned char address);pcf8583.c: 46: {;
      +                          pcf8583.c: 47:  unsigned char retval;;pcf8583.c: 48:  I2C_Master_Start();
  7708  11EB  160A  158A  2682  160A  118A  	fcall	_I2C_Master_Start
  7709                           
  7710                           ;pcf8583.c: 49:  I2C_Master_Write(0xA0);
  7711  11F0  30A0               	movlw	160
  7712  11F1  1283               	bcf	3,5	;RP0=0, select bank0
  7713  11F2  00A6               	movwf	I2C_Master_Write@data
  7714  11F3  3000               	movlw	0
  7715  11F4  00A7               	movwf	I2C_Master_Write@data+1
  7716  11F5  160A  158A  2687  160A  118A  	fcall	_I2C_Master_Write
  7717                           
  7718                           ;pcf8583.c: 50:  I2C_Master_Write(address);
  7719  11FA  082D               	movf	PCF8583_Read_Byte@address,w
  7720  11FB  00AB               	movwf	??_PCF8583_Read_Byte
  7721  11FC  01AC               	clrf	??_PCF8583_Read_Byte+1
  7722  11FD  082B               	movf	??_PCF8583_Read_Byte,w
  7723  11FE  00A6               	movwf	I2C_Master_Write@data
  7724  11FF  082C               	movf	??_PCF8583_Read_Byte+1,w
  7725  1200  00A7               	movwf	I2C_Master_Write@data+1
  7726  1201  160A  158A  2687  160A  118A  	fcall	_I2C_Master_Write
  7727                           
  7728                           ;pcf8583.c: 51:  I2C_Master_Start();
  7729  1206  160A  158A  2682  160A  118A  	fcall	_I2C_Master_Start
  7730                           
  7731                           ;pcf8583.c: 52:  I2C_Master_Write(0xA1);
  7732  120B  30A1               	movlw	161
  7733  120C  1283               	bcf	3,5	;RP0=0, select bank0
  7734  120D  00A6               	movwf	I2C_Master_Write@data
  7735  120E  3000               	movlw	0
  7736  120F  00A7               	movwf	I2C_Master_Write@data+1
  7737  1210  160A  158A  2687  160A  118A  	fcall	_I2C_Master_Write
  7738                           
  7739                           ;pcf8583.c: 53:  retval = I2C_Master_Read(0);
  7740  1215  3000               	movlw	0
  7741  1216  160A  158A  27D8  160A  118A  	fcall	_I2C_Master_Read
  7742  121B  00AB               	movwf	??_PCF8583_Read_Byte
  7743  121C  082B               	movf	??_PCF8583_Read_Byte,w
  7744  121D  00AE               	movwf	PCF8583_Read_Byte@retval
  7745                           
  7746                           ;pcf8583.c: 54:  I2C_Master_Stop();
  7747  121E  160A  118A  2048   	fcall	_I2C_Master_Stop
  7748                           
  7749                           ;pcf8583.c: 55:  return(retval);
  7750  1221  1283               	bcf	3,5	;RP0=0, select bank0
  7751  1222  082E               	movf	PCF8583_Read_Byte@retval,w
  7752  1223  0008               	return
  7753  1224                     __end_of_PCF8583_Read_Byte:	
  7754                           
  7755                           	psect	text27
  7756  1E87                     __ptext27:	
  7757 ;; *************** function _I2C_Master_Write *****************
  7758 ;; Defined at:
  7759 ;;		line 79 in file "hw_i2c.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  data            2    6[BANK0 ] unsigned int 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      void 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0, pclath, cstack
  7768 ;; Tracked objects:
  7769 ;;		On entry : 300/800
  7770 ;;		On exit  : 300/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7773 ;;      Params:         0       2       0       0       0
  7774 ;;      Locals:         0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0
  7776 ;;      Totals:         0       2       0       0       0
  7777 ;;Total ram usage:        2 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    5
  7780 ;; This function calls:
  7781 ;;		_I2C_Master_Wait
  7782 ;; This function is called by:
  7783 ;;		_PCF8583_Write_Byte
  7784 ;;		_PCF8583_Read_Byte
  7785 ;;		_PCF8583_Read_Time_Date
  7786 ;;		_PCF8583_Set_Date_Time
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           
  7791                           ;psect for function _I2C_Master_Write
  7792  1E87                     _I2C_Master_Write:	
  7793                           
  7794                           ;hw_i2c.c: 79: void I2C_Master_Write(unsigned data);hw_i2c.c: 80: {;hw_i2c.c: 81:     I2
      +                          C_Master_Wait();
  7795                           
  7796                           ;incstack = 0
  7797 ;; hardware stack exceeded
  7798                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  7799  1E87  160A  158A  2696   	fcall	_I2C_Master_Wait
  7800                           
  7801                           ;hw_i2c.c: 82:     SSPBUF=data;
  7802  1E8A  1283               	bcf	3,5	;RP0=0, select bank0
  7803  1E8B  0826               	movf	I2C_Master_Write@data,w
  7804  1E8C  0093               	movwf	19	;volatile
  7805  1E8D  0008               	return
  7806  1E8E                     __end_of_I2C_Master_Write:	
  7807                           
  7808                           	psect	text28
  7809  1048                     __ptext28:	
  7810 ;; *************** function _I2C_Master_Stop *****************
  7811 ;; Defined at:
  7812 ;;		line 65 in file "hw_i2c.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;		None
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;		None
  7817 ;; Return value:  Size  Location     Type
  7818 ;;                  1    wreg      void 
  7819 ;; Registers used:
  7820 ;;		status,2, status,0, pclath, cstack
  7821 ;; Tracked objects:
  7822 ;;		On entry : 300/800
  7823 ;;		On exit  : 300/100
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7826 ;;      Params:         0       0       0       0       0
  7827 ;;      Locals:         0       0       0       0       0
  7828 ;;      Temps:          0       0       0       0       0
  7829 ;;      Totals:         0       0       0       0       0
  7830 ;;Total ram usage:        0 bytes
  7831 ;; Hardware stack levels used:    1
  7832 ;; Hardware stack levels required when called:    5
  7833 ;; This function calls:
  7834 ;;		_I2C_Master_Wait
  7835 ;; This function is called by:
  7836 ;;		_PCF8583_Write_Byte
  7837 ;;		_PCF8583_Read_Byte
  7838 ;;		_PCF8583_Read_Time_Date
  7839 ;;		_PCF8583_Set_Date_Time
  7840 ;; This function uses a non-reentrant model
  7841 ;;
  7842                           
  7843                           
  7844                           ;psect for function _I2C_Master_Stop
  7845  1048                     _I2C_Master_Stop:	
  7846                           
  7847                           ;hw_i2c.c: 67:     I2C_Master_Wait();
  7848                           
  7849                           ;incstack = 0
  7850 ;; hardware stack exceeded
  7851                           ; Regs used in _I2C_Master_Stop: [status,2+status,0+pclath+cstack]
  7852  1048  160A  158A  2696   	fcall	_I2C_Master_Wait
  7853                           
  7854                           ;hw_i2c.c: 68:     SSPCON2bits.PEN=1;
  7855  104B  1511               	bsf	17,2	;volatile
  7856  104C  0008               	return
  7857  104D                     __end_of_I2C_Master_Stop:	
  7858                           
  7859                           	psect	text29
  7860  1E82                     __ptext29:	
  7861 ;; *************** function _I2C_Master_Start *****************
  7862 ;; Defined at:
  7863 ;;		line 51 in file "hw_i2c.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;		None
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      void 
  7870 ;; Registers used:
  7871 ;;		status,2, status,0, pclath, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 200/900
  7874 ;;		On exit  : 300/100
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7877 ;;      Params:         0       0       0       0       0
  7878 ;;      Locals:         0       0       0       0       0
  7879 ;;      Temps:          0       0       0       0       0
  7880 ;;      Totals:         0       0       0       0       0
  7881 ;;Total ram usage:        0 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    5
  7884 ;; This function calls:
  7885 ;;		_I2C_Master_Wait
  7886 ;; This function is called by:
  7887 ;;		_PCF8583_Write_Byte
  7888 ;;		_PCF8583_Read_Byte
  7889 ;;		_PCF8583_Read_Time_Date
  7890 ;;		_PCF8583_Set_Date_Time
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function _I2C_Master_Start
  7896  1E82                     _I2C_Master_Start:	
  7897                           
  7898                           ;hw_i2c.c: 53:     I2C_Master_Wait();
  7899                           
  7900                           ;incstack = 0
  7901 ;; hardware stack exceeded
  7902                           ; Regs used in _I2C_Master_Start: [status,2+status,0+pclath+cstack]
  7903  1E82  160A  158A  2696   	fcall	_I2C_Master_Wait
  7904                           
  7905                           ;hw_i2c.c: 54:     SSPCON2bits.SEN=1;
  7906  1E85  1411               	bsf	17,0	;volatile
  7907  1E86  0008               	return
  7908  1E87                     __end_of_I2C_Master_Start:	
  7909                           
  7910                           	psect	text30
  7911  1FD8                     __ptext30:	
  7912 ;; *************** function _I2C_Master_Read *****************
  7913 ;; Defined at:
  7914 ;;		line 93 in file "hw_i2c.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;  ack             1    wreg     unsigned char 
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;  ack             1    8[BANK0 ] unsigned char 
  7919 ;;  data            2    9[BANK0 ] unsigned short 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      unsigned char 
  7922 ;; Registers used:
  7923 ;;		wreg, status,2, status,0, pclath, cstack
  7924 ;; Tracked objects:
  7925 ;;		On entry : 300/0
  7926 ;;		On exit  : 300/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7929 ;;      Params:         0       0       0       0       0
  7930 ;;      Locals:         0       3       0       0       0
  7931 ;;      Temps:          0       2       0       0       0
  7932 ;;      Totals:         0       5       0       0       0
  7933 ;;Total ram usage:        5 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    5
  7936 ;; This function calls:
  7937 ;;		_I2C_Master_Wait
  7938 ;; This function is called by:
  7939 ;;		_PCF8583_Read_Byte
  7940 ;;		_PCF8583_Read_Time_Date
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           
  7945                           ;psect for function _I2C_Master_Read
  7946  1FD8                     _I2C_Master_Read:	
  7947                           
  7948                           ;incstack = 0
  7949 ;; hardware stack exceeded
  7950                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  7951                           ;I2C_Master_Read@ack stored from wreg
  7952  1FD8  00A8               	movwf	I2C_Master_Read@ack
  7953                           
  7954                           ;hw_i2c.c: 93: unsigned char I2C_Master_Read(unsigned char ack);hw_i2c.c: 94: {;hw_i2c.c
      +                          : 95:     unsigned short data;;hw_i2c.c: 96:     I2C_Master_Wait();
  7955  1FD9  160A  158A  2696  160A  158A  	fcall	_I2C_Master_Wait
  7956                           
  7957                           ;hw_i2c.c: 97:     RCEN=1;
  7958  1FDE  1591               	bsf	17,3	;volatile
  7959                           
  7960                           ;hw_i2c.c: 98:     I2C_Master_Wait();
  7961  1FDF  160A  158A  2696  160A  158A  	fcall	_I2C_Master_Wait
  7962                           
  7963                           ;hw_i2c.c: 99:     data=SSPBUF;
  7964  1FE4  1283               	bcf	3,5	;RP0=0, select bank0
  7965  1FE5  0813               	movf	19,w	;volatile
  7966  1FE6  00A6               	movwf	??_I2C_Master_Read
  7967  1FE7  01A7               	clrf	??_I2C_Master_Read+1
  7968  1FE8  0826               	movf	??_I2C_Master_Read,w
  7969  1FE9  00A9               	movwf	I2C_Master_Read@data
  7970  1FEA  0827               	movf	??_I2C_Master_Read+1,w
  7971  1FEB  00AA               	movwf	I2C_Master_Read@data+1
  7972                           
  7973                           ;hw_i2c.c: 100:     I2C_Master_Wait();
  7974  1FEC  160A  158A  2696  160A  158A  	fcall	_I2C_Master_Wait
  7975                           
  7976                           ;hw_i2c.c: 101:     ACKDT=(ack)?0:1;
  7977  1FF1  1283               	bcf	3,5	;RP0=0, select bank0
  7978  1FF2  0828               	movf	I2C_Master_Read@ack,w
  7979  1FF3  1D03               	btfss	3,2
  7980  1FF4  2FF9               	goto	u5180
  7981  1FF5  1683               	bsf	3,5	;RP0=1, select bank1
  7982  1FF6  1303               	bcf	3,6	;RP1=0, select bank1
  7983  1FF7  1691               	bsf	17,5	;volatile
  7984  1FF8  2FFC               	goto	l5756
  7985  1FF9                     u5180:	
  7986  1FF9  1683               	bsf	3,5	;RP0=1, select bank1
  7987  1FFA  1303               	bcf	3,6	;RP1=0, select bank1
  7988  1FFB  1291               	bcf	17,5	;volatile
  7989  1FFC                     l5756:	
  7990                           
  7991                           ;hw_i2c.c: 102:     ACKEN=1;
  7992  1FFC  1611               	bsf	17,4	;volatile
  7993                           
  7994                           ;hw_i2c.c: 103:     return data;
  7995  1FFD  1283               	bcf	3,5	;RP0=0, select bank0
  7996  1FFE  0829               	movf	I2C_Master_Read@data,w
  7997  1FFF  0008               	return
  7998  2000                     __end_of_I2C_Master_Read:	
  7999                           
  8000                           	psect	text31
  8001  1E96                     __ptext31:	
  8002 ;; *************** function _I2C_Master_Wait *****************
  8003 ;; Defined at:
  8004 ;;		line 35 in file "hw_i2c.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;		None
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      void 
  8011 ;; Registers used:
  8012 ;;		None
  8013 ;; Tracked objects:
  8014 ;;		On entry : 200/800
  8015 ;;		On exit  : 300/100
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8018 ;;      Params:         0       0       0       0       0
  8019 ;;      Locals:         0       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0
  8021 ;;      Totals:         0       0       0       0       0
  8022 ;;Total ram usage:        0 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    4
  8025 ;; This function calls:
  8026 ;;		Nothing
  8027 ;; This function is called by:
  8028 ;;		_I2C_Master_Start
  8029 ;;		_I2C_Master_Stop
  8030 ;;		_I2C_Master_Write
  8031 ;;		_I2C_Master_Read
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function _I2C_Master_Wait
  8037  1E96                     _I2C_Master_Wait:	
  8038  1E96                     l204:	
  8039                           ;hw_i2c.c: 39:     {;hw_i2c.c: 40:     };
  8040                           
  8041                           ;incstack = 0
  8042 ;; hardware stack exceeded
  8043                           ; Regs used in _I2C_Master_Wait: []
  8044                           
  8045                           
  8046                           ;hw_i2c.c: 37:     while (SSPCON2bits.RCEN || SSPCON2bits.PEN || SSPCON2bits.RSEN ||
  8047  1E96  1683               	bsf	3,5	;RP0=1, select bank1
  8048  1E97  1D91               	btfss	17,3	;volatile
  8049  1E98  1911               	btfsc	17,2	;volatile
  8050  1E99  2E96               	goto	l204
  8051  1E9A  1C91               	btfss	17,1	;volatile
  8052  1E9B  1811               	btfsc	17,0	;volatile
  8053  1E9C  2E96               	goto	l204
  8054  1E9D  1A11               	btfsc	17,4	;volatile
  8055  1E9E  2E96               	goto	l204
  8056  1E9F  1D14               	btfss	20,2	;volatile
  8057  1EA0  0008               	return
  8058  1EA1  2E96               	goto	l204
  8059  1EA2                     __end_of_I2C_Master_Wait:	
  8060                           
  8061                           	psect	text32
  8062  104D                     __ptext32:	
  8063 ;; *************** function _BCD_2_DEC *****************
  8064 ;; Defined at:
  8065 ;;		line 25 in file "pcf8583.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;  bcd             1    wreg     unsigned char 
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;  bcd             1   13[BANK0 ] unsigned char 
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  1    wreg      unsigned char 
  8072 ;; Registers used:
  8073 ;;		wreg, status,2, status,0, pclath, cstack
  8074 ;; Tracked objects:
  8075 ;;		On entry : 300/0
  8076 ;;		On exit  : 300/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8079 ;;      Params:         0       0       0       0       0
  8080 ;;      Locals:         0       1       0       0       0
  8081 ;;      Temps:          0       3       0       0       0
  8082 ;;      Totals:         0       4       0       0       0
  8083 ;;Total ram usage:        4 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    5
  8086 ;; This function calls:
  8087 ;;		___bmul
  8088 ;; This function is called by:
  8089 ;;		_PCF8583_Read_Time_Date
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           
  8094                           ;psect for function _BCD_2_DEC
  8095  104D                     _BCD_2_DEC:	
  8096                           
  8097                           ;incstack = 0
  8098 ;; hardware stack exceeded
  8099                           ; Regs used in _BCD_2_DEC: [wreg+status,2+status,0+pclath+cstack]
  8100                           ;BCD_2_DEC@bcd stored from wreg
  8101  104D  00AD               	movwf	BCD_2_DEC@bcd
  8102                           
  8103                           ;pcf8583.c: 25: unsigned char BCD_2_DEC(unsigned char bcd);pcf8583.c: 26: {;pcf8583.c: 2
      +                          7:     return (((bcd>>4)*10) + (bcd&0x0F));
  8104  104E  300F               	movlw	15
  8105  104F  052D               	andwf	BCD_2_DEC@bcd,w
  8106  1050  00AA               	movwf	??_BCD_2_DEC
  8107  1051  300A               	movlw	10
  8108  1052  00AB               	movwf	??_BCD_2_DEC+1
  8109  1053  082B               	movf	??_BCD_2_DEC+1,w
  8110  1054  00A6               	movwf	___bmul@multiplicand
  8111  1055  082D               	movf	BCD_2_DEC@bcd,w
  8112  1056  00AC               	movwf	??_BCD_2_DEC+2
  8113  1057  3004               	movlw	4
  8114  1058                     u5675:	
  8115  1058  1003               	clrc
  8116  1059  0CAC               	rrf	??_BCD_2_DEC+2,f
  8117  105A  3EFF               	addlw	-1
  8118  105B  1D03               	skipz
  8119  105C  2858               	goto	u5675
  8120  105D  082C               	movf	??_BCD_2_DEC+2,w
  8121  105E  160A  158A  26D4   	fcall	___bmul
  8122  1061  072A               	addwf	??_BCD_2_DEC,w
  8123  1062  0008               	return
  8124  1063                     __end_of_BCD_2_DEC:	
  8125                           
  8126                           	psect	text33
  8127  1ED4                     __ptext33:	
  8128 ;; *************** function ___bmul *****************
  8129 ;; Defined at:
  8130 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  multiplier      1    wreg     unsigned char 
  8133 ;;  multiplicand    1    6[BANK0 ] unsigned char 
  8134 ;; Auto vars:     Size  Location     Type
  8135 ;;  multiplier      1    9[BANK0 ] unsigned char 
  8136 ;;  product         1    8[BANK0 ] unsigned char 
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  1    wreg      unsigned char 
  8139 ;; Registers used:
  8140 ;;		wreg, status,2, status,0
  8141 ;; Tracked objects:
  8142 ;;		On entry : 300/0
  8143 ;;		On exit  : 300/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8146 ;;      Params:         0       1       0       0       0
  8147 ;;      Locals:         0       2       0       0       0
  8148 ;;      Temps:          0       1       0       0       0
  8149 ;;      Totals:         0       4       0       0       0
  8150 ;;Total ram usage:        4 bytes
  8151 ;; Hardware stack levels used:    1
  8152 ;; Hardware stack levels required when called:    4
  8153 ;; This function calls:
  8154 ;;		Nothing
  8155 ;; This function is called by:
  8156 ;;		_BCD_2_DEC
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           
  8161                           ;psect for function ___bmul
  8162  1ED4                     ___bmul:	
  8163                           
  8164                           ;incstack = 0
  8165 ;; hardware stack exceeded
  8166                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8167                           ;___bmul@multiplier stored from wreg
  8168  1ED4  00A9               	movwf	___bmul@multiplier
  8169  1ED5  01A8               	clrf	___bmul@product
  8170  1ED6                     l5778:	
  8171  1ED6  1C29               	btfss	___bmul@multiplier,0
  8172  1ED7  2EDC               	goto	l5782
  8173  1ED8  0826               	movf	___bmul@multiplicand,w
  8174  1ED9  00A7               	movwf	??___bmul
  8175  1EDA  0827               	movf	??___bmul,w
  8176  1EDB  07A8               	addwf	___bmul@product,f
  8177  1EDC                     l5782:	
  8178  1EDC  1003               	clrc
  8179  1EDD  0DA6               	rlf	___bmul@multiplicand,f
  8180  1EDE  1003               	clrc
  8181  1EDF  0CA9               	rrf	___bmul@multiplier,f
  8182  1EE0  0829               	movf	___bmul@multiplier,w
  8183  1EE1  1D03               	btfss	3,2
  8184  1EE2  2ED6               	goto	l5778
  8185  1EE3  0828               	movf	___bmul@product,w
  8186  1EE4  0008               	return
  8187  1EE5                     __end_of___bmul:	
  8188                           
  8189                           	psect	text34
  8190  08B4                     __ptext34:	
  8191 ;; *************** function _Check_Event *****************
  8192 ;; Defined at:
  8193 ;;		line 239 in file "manchester_decode.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;  DataRCV         1    wreg     PTR struct .
  8196 ;;		 -> main@data_rcv(5), 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  DataRCV         1   37[BANK0 ] PTR struct .
  8199 ;;		 -> main@data_rcv(5), 
  8200 ;; Return value:  Size  Location     Type
  8201 ;;                  1    wreg      unsigned char 
  8202 ;; Registers used:
  8203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : B00/800
  8206 ;;		On exit  : 300/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8209 ;;      Params:         0       0       0       0       0
  8210 ;;      Locals:         0       1       0       0       0
  8211 ;;      Temps:          0       1       0       0       0
  8212 ;;      Totals:         0       2       0       0       0
  8213 ;;Total ram usage:        2 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    8
  8216 ;; This function calls:
  8217 ;;		_Frame_Decode
  8218 ;;		_Play_Ring
  8219 ;;		_Send_7Seg_Text
  8220 ;; This function is called by:
  8221 ;;		_Check_RCV_Data
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           
  8226                           ;psect for function _Check_Event
  8227  08B4                     _Check_Event:	
  8228                           
  8229                           ;incstack = 0
  8230 ;; hardware stack exceeded
  8231                           ; Regs used in _Check_Event: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8232                           ;Check_Event@DataRCV stored from wreg
  8233  08B4  00C5               	movwf	Check_Event@DataRCV
  8234                           
  8235                           ;manchester_decode.c: 239: unsigned char Check_Event(DataStruct *DataRCV);manchester_dec
      +                          ode.c: 240: {;manchester_decode.c: 241:     if(DataRCV->frame[0]=='G' && DataRCV->frame[
      +                          1]=='0')
  8236  08B5  0845               	movf	Check_Event@DataRCV,w
  8237  08B6  0084               	movwf	4
  8238  08B7  3047               	movlw	71
  8239  08B8  0600               	xorwf	0,w
  8240  08B9  1D03               	btfss	3,2
  8241  08BA  291F               	goto	l6566
  8242  08BB  0A45               	incf	Check_Event@DataRCV,w
  8243  08BC  0084               	movwf	4
  8244  08BD  3030               	movlw	48
  8245  08BE  0600               	xorwf	0,w
  8246  08BF  1D03               	btfss	3,2
  8247  08C0  291F               	goto	l6566
  8248                           
  8249                           ;manchester_decode.c: 242:     {;manchester_decode.c: 244:         Send_7Seg_Text("bram"
      +                          ,0);
  8250  08C1  01A6               	clrf	Send_7Seg_Text@decimal_point
  8251  08C2  3034               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  8252  08C3  120A  118A  27E2  120A  158A  	fcall	_Send_7Seg_Text
  8253                           
  8254                           ;manchester_decode.c: 245:         g_display_controll=0;
  8255  08C8  01DB               	clrf	_g_display_controll	;volatile
  8256                           
  8257                           ;manchester_decode.c: 246:         Play_Ring();
  8258  08C9  120A  158A  203B  120A  158A  	fcall	_Play_Ring
  8259  08CE                     l6554:	
  8260                           ;manchester_decode.c: 247:         while(Frame_Decode(DataRCV)!=0xFF);
  8261                           
  8262  08CE  0845               	movf	Check_Event@DataRCV,w
  8263  08CF  160A  118A  23F8  120A  158A  	fcall	_Frame_Decode
  8264  08D4  0A29               	incf	?_Frame_Decode,w
  8265  08D5  042A               	iorwf	?_Frame_Decode+1,w
  8266  08D6  1D03               	btfss	3,2
  8267  08D7  28CE               	goto	l6554
  8268  08D8  2914               	goto	L5
  8269  08D9                     l6568:	
  8270                           ;manchester_decode.c: 249:         Send_7Seg_Text("****",0);
  8271                           
  8272                           ;manchester_decode.c: 248:         g_display_controll=1;
  8273                           
  8274  08D9  0A45               	incf	Check_Event@DataRCV,w
  8275  08DA  0084               	movwf	4
  8276  08DB  3030               	movlw	48
  8277  08DC  0600               	xorwf	0,w
  8278  08DD  1D03               	btfss	3,2
  8279  08DE  2925               	goto	l6588
  8280                           
  8281                           ;manchester_decode.c: 254:     {;manchester_decode.c: 256:         Send_7Seg_Text("furt"
      +                          ,0);
  8282  08DF  01A6               	clrf	Send_7Seg_Text@decimal_point
  8283  08E0  303E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  8284  08E1  120A  118A  27E2  120A  158A  	fcall	_Send_7Seg_Text
  8285                           
  8286                           ;manchester_decode.c: 257:         g_display_controll=0;
  8287  08E6  01DB               	clrf	_g_display_controll	;volatile
  8288                           
  8289                           ;manchester_decode.c: 258:         Play_Ring();
  8290  08E7  120A  158A  203B  120A  158A  	fcall	_Play_Ring
  8291  08EC                     l6576:	
  8292                           ;manchester_decode.c: 259:         while(Frame_Decode(DataRCV)!=0xFF);
  8293                           
  8294  08EC  0845               	movf	Check_Event@DataRCV,w
  8295  08ED  160A  118A  23F8  120A  158A  	fcall	_Frame_Decode
  8296  08F2  0A29               	incf	?_Frame_Decode,w
  8297  08F3  042A               	iorwf	?_Frame_Decode+1,w
  8298  08F4  1D03               	btfss	3,2
  8299  08F5  28EC               	goto	l6576
  8300  08F6  2914               	goto	L5
  8301  08F7                     l6590:	
  8302                           ;manchester_decode.c: 261:         Send_7Seg_Text("****",0);
  8303                           
  8304                           ;manchester_decode.c: 260:         g_display_controll=1;
  8305                           
  8306  08F7  0A45               	incf	Check_Event@DataRCV,w
  8307  08F8  0084               	movwf	4
  8308  08F9  3042               	movlw	66
  8309  08FA  0600               	xorwf	0,w
  8310  08FB  1D03               	btfss	3,2
  8311  08FC  292B               	goto	l6608
  8312                           
  8313                           ;manchester_decode.c: 266:     {;manchester_decode.c: 268:         Send_7Seg_Text("dzwo"
      +                          ,0);
  8314  08FD  01A6               	clrf	Send_7Seg_Text@decimal_point
  8315  08FE  3039               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  8316  08FF  120A  118A  27E2  120A  158A  	fcall	_Send_7Seg_Text
  8317                           
  8318                           ;manchester_decode.c: 269:         g_display_controll=0;
  8319  0904  01DB               	clrf	_g_display_controll	;volatile
  8320                           
  8321                           ;manchester_decode.c: 270:         Play_Ring();
  8322  0905  120A  158A  203B  120A  158A  	fcall	_Play_Ring
  8323  090A                     l6598:	
  8324                           ;manchester_decode.c: 271:         while(Frame_Decode(DataRCV)!=0xFF);
  8325                           
  8326  090A  0845               	movf	Check_Event@DataRCV,w
  8327  090B  160A  118A  23F8  120A  158A  	fcall	_Frame_Decode
  8328  0910  0A29               	incf	?_Frame_Decode,w
  8329  0911  042A               	iorwf	?_Frame_Decode+1,w
  8330  0912  1D03               	btfss	3,2
  8331  0913  290A               	goto	l6598
  8332  0914                     L5:	
  8333                           
  8334                           ;manchester_decode.c: 272:         g_display_controll=1;
  8335  0914  3001               	movlw	1
  8336  0915  00C4               	movwf	??_Check_Event
  8337  0916  0844               	movf	??_Check_Event,w
  8338  0917  00DB               	movwf	_g_display_controll	;volatile
  8339                           
  8340                           ;manchester_decode.c: 273:         Send_7Seg_Text("****",0);
  8341  0918  01A6               	clrf	Send_7Seg_Text@decimal_point
  8342  0919  302F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  8343  091A  120A  118A  27E2   	fcall	_Send_7Seg_Text
  8344                           
  8345                           ;manchester_decode.c: 251:         return 1;
  8346  091D  3001               	movlw	1
  8347  091E  0008               	return
  8348  091F                     l6566:	
  8349  091F  0845               	movf	Check_Event@DataRCV,w
  8350  0920  0084               	movwf	4
  8351  0921  3057               	movlw	87
  8352  0922  0600               	xorwf	0,w
  8353  0923  1903               	btfsc	3,2
  8354  0924  28D9               	goto	l6568
  8355  0925                     l6588:	
  8356  0925  0845               	movf	Check_Event@DataRCV,w
  8357  0926  0084               	movwf	4
  8358  0927  3057               	movlw	87
  8359  0928  0600               	xorwf	0,w
  8360  0929  1903               	btfsc	3,2
  8361  092A  28F7               	goto	l6590
  8362  092B                     l6608:	
  8363                           
  8364                           ;manchester_decode.c: 278:     return 0;
  8365  092B  3000               	movlw	0
  8366  092C  0008               	return
  8367  092D                     __end_of_Check_Event:	
  8368                           
  8369                           	psect	text35
  8370  07E2                     __ptext35:	
  8371 ;; *************** function _Send_7Seg_Text *****************
  8372 ;; Defined at:
  8373 ;;		line 405 in file "menu.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  text            1    wreg     PTR unsigned char 
  8376 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
  8377 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
  8378 ;;		 -> STR_2(5), STR_1(5), 
  8379 ;;  decimal_poin    1    6[BANK0 ] unsigned char 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  text            1    8[BANK0 ] PTR unsigned char 
  8382 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
  8383 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
  8384 ;;		 -> STR_2(5), STR_1(5), 
  8385 ;;  i               1    9[BANK0 ] unsigned char 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8390 ;; Tracked objects:
  8391 ;;		On entry : 300/0
  8392 ;;		On exit  : B00/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8395 ;;      Params:         0       1       0       0       0
  8396 ;;      Locals:         0       2       0       0       0
  8397 ;;      Temps:          0       1       0       0       0
  8398 ;;      Totals:         0       4       0       0       0
  8399 ;;Total ram usage:        4 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    4
  8402 ;; This function calls:
  8403 ;;		Nothing
  8404 ;; This function is called by:
  8405 ;;		_Check_Event
  8406 ;;		_Menu_Set_Time
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function _Send_7Seg_Text
  8412  07E2                     _Send_7Seg_Text:	
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _Send_7Seg_Text: [wreg-fsr0h+status,2+status,0+pclath]
  8416                           ;Send_7Seg_Text@text stored from wreg
  8417  07E2  00A8               	movwf	Send_7Seg_Text@text
  8418                           
  8419                           ;menu.c: 405: void Send_7Seg_Text(char *text, unsigned char decimal_point);menu.c: 406: 
      +                          {;menu.c: 407:     unsigned char i;;menu.c: 409:     for(i=0;i<4;i++)
  8420  07E3  01A9               	clrf	Send_7Seg_Text@i
  8421  07E4                     l6284:	
  8422                           
  8423                           ;menu.c: 410:     {;menu.c: 411:         g_display_text[i]=*(text+i);
  8424  07E4  0829               	movf	Send_7Seg_Text@i,w
  8425  07E5  0728               	addwf	Send_7Seg_Text@text,w
  8426  07E6  0084               	movwf	4
  8427  07E7  160A  118A  2000  120A  118A  	fcall	stringdir
  8428  07EC  00A7               	movwf	??_Send_7Seg_Text
  8429  07ED  0829               	movf	Send_7Seg_Text@i,w
  8430  07EE  3E5D               	addlw	(low (_g_display_text| 0))& (0+255)
  8431  07EF  0084               	movwf	4
  8432  07F0  0827               	movf	??_Send_7Seg_Text,w
  8433  07F1  1383               	bcf	3,7	;select IRP bank0
  8434  07F2  0080               	movwf	0
  8435                           
  8436                           ;menu.c: 412:     }
  8437  07F3  3001               	movlw	1
  8438  07F4  00A7               	movwf	??_Send_7Seg_Text
  8439  07F5  0827               	movf	??_Send_7Seg_Text,w
  8440  07F6  07A9               	addwf	Send_7Seg_Text@i,f
  8441  07F7  3004               	movlw	4
  8442  07F8  0229               	subwf	Send_7Seg_Text@i,w
  8443  07F9  1C03               	skipc
  8444  07FA  2FE4               	goto	l6284
  8445                           
  8446                           ;menu.c: 414:     g_decimal_point=decimal_point;
  8447  07FB  0826               	movf	Send_7Seg_Text@decimal_point,w
  8448  07FC  00A7               	movwf	??_Send_7Seg_Text
  8449  07FD  0827               	movf	??_Send_7Seg_Text,w
  8450  07FE  00DA               	movwf	_g_decimal_point
  8451  07FF  0008               	return
  8452  0800                     __end_of_Send_7Seg_Text:	
  8453                           
  8454                           	psect	text36
  8455  083B                     __ptext36:	
  8456 ;; *************** function _Play_Ring *****************
  8457 ;; Defined at:
  8458 ;;		line 43 in file "melody.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;		None
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  j               2   33[BANK0 ] unsigned int 
  8463 ;;  i               1   35[BANK0 ] unsigned char 
  8464 ;;  MELODY_LENGT    1   32[BANK0 ] unsigned char 
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  1    wreg      void 
  8467 ;; Registers used:
  8468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : B00/0
  8471 ;;		On exit  : 300/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8474 ;;      Params:         0       0       0       0       0
  8475 ;;      Locals:         0       4       0       0       0
  8476 ;;      Temps:          0       4       0       0       0
  8477 ;;      Totals:         0       8       0       0       0
  8478 ;;Total ram usage:        8 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    7
  8481 ;; This function calls:
  8482 ;;		_Display_7Seg
  8483 ;;		_Generate_PWM
  8484 ;;		_Init_CaptureMode
  8485 ;;		_Init_CompareMode
  8486 ;;		_Wait_ms
  8487 ;;		___lwdiv
  8488 ;; This function is called by:
  8489 ;;		_Check_Event
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           
  8494                           ;psect for function _Play_Ring
  8495  083B                     _Play_Ring:	
  8496                           
  8497                           ;melody.c: 45:     Init_CompareMode();
  8498                           
  8499                           ;incstack = 0
  8500 ;; hardware stack exceeded
  8501                           ; Regs used in _Play_Ring: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8502  083B  160A  158A  26C7  120A  158A  	fcall	_Init_CompareMode
  8503                           
  8504                           ;melody.c: 47:     unsigned int const melody[] = {659, 523, 587, 392, 1, 392, 587, 659, 
      +                          523};;melody.c: 48:     unsigned char const beats[] = {4, 4, 4, 2, 64, 4, 4, 4, 2};;melo
      +                          dy.c: 49:     const unsigned int tempo=1800;;melody.c: 51:     unsigned char MELODY_LENG
      +                          TH = sizeof(melody) / sizeof(melody[0]);
  8505  0840  3009               	movlw	9
  8506  0841  00BC               	movwf	??_Play_Ring
  8507  0842  083C               	movf	??_Play_Ring,w
  8508  0843  00C0               	movwf	Play_Ring@MELODY_LENGTH
  8509                           
  8510                           ;melody.c: 53:     for (unsigned char i=0; i<MELODY_LENGTH; i++)
  8511  0844  01C3               	clrf	Play_Ring@i
  8512  0845                     l6312:	
  8513  0845  0840               	movf	Play_Ring@MELODY_LENGTH,w
  8514  0846  0243               	subwf	Play_Ring@i,w
  8515  0847  1803               	btfsc	3,0
  8516  0848  28B0               	goto	l6314
  8517                           
  8518                           ;melody.c: 54:     {;melody.c: 55:         Generate_PWM(melody[i]);
  8519  0849  0843               	movf	Play_Ring@i,w
  8520  084A  00BC               	movwf	??_Play_Ring
  8521  084B  073C               	addwf	??_Play_Ring,w
  8522  084C  3E01               	addlw	low ((Play_Ring@melody-__stringbase)| (0+32768))
  8523  084D  0084               	movwf	4
  8524  084E  160A  118A  2000  120A  158A  	fcall	stringdir
  8525  0853  00BD               	movwf	??_Play_Ring+1
  8526  0854  160A  118A  2000  120A  158A  	fcall	stringdir
  8527  0859  00BE               	movwf	??_Play_Ring+2
  8528  085A  083D               	movf	??_Play_Ring+1,w
  8529  085B  00B4               	movwf	Generate_PWM@freq
  8530  085C  083E               	movf	??_Play_Ring+2,w
  8531  085D  00B5               	movwf	Generate_PWM@freq+1
  8532  085E  01B6               	clrf	Generate_PWM@freq+2
  8533  085F  01B7               	clrf	Generate_PWM@freq+3
  8534  0860  160A  118A  2063  120A  158A  	fcall	_Generate_PWM
  8535                           
  8536                           ;melody.c: 57:         for(unsigned int j=0;j<(tempo/beats[i])/4;j++)
  8537  0865  1283               	bcf	3,5	;RP0=0, select bank0
  8538  0866  01C1               	clrf	Play_Ring@j
  8539  0867  01C2               	clrf	Play_Ring@j+1
  8540  0868                     l6308:	
  8541  0868  0843               	movf	Play_Ring@i,w
  8542  0869  3E13               	addlw	low ((Play_Ring@beats-__stringbase)| (0+32768))
  8543  086A  0084               	movwf	4
  8544  086B  160A  118A  2000  120A  158A  	fcall	stringdir
  8545  0870  00BC               	movwf	??_Play_Ring
  8546  0871  01BD               	clrf	??_Play_Ring+1
  8547  0872  083C               	movf	??_Play_Ring,w
  8548  0873  00A6               	movwf	___lwdiv@divisor
  8549  0874  083D               	movf	??_Play_Ring+1,w
  8550  0875  00A7               	movwf	___lwdiv@divisor+1
  8551  0876  3008               	movlw	8
  8552  0877  00A8               	movwf	___lwdiv@dividend
  8553  0878  3007               	movlw	7
  8554  0879  00A9               	movwf	___lwdiv@dividend+1
  8555  087A  160A  118A  2224  120A  158A  	fcall	___lwdiv
  8556  087F  0826               	movf	?___lwdiv,w
  8557  0880  00BE               	movwf	??_Play_Ring+2
  8558  0881  0827               	movf	?___lwdiv+1,w
  8559  0882  00BF               	movwf	??_Play_Ring+3
  8560  0883  1003               	clrc
  8561  0884  0CBF               	rrf	??_Play_Ring+3,f
  8562  0885  0CBE               	rrf	??_Play_Ring+2,f
  8563  0886  1003               	clrc
  8564  0887  0CBF               	rrf	??_Play_Ring+3,f
  8565  0888  0CBE               	rrf	??_Play_Ring+2,f
  8566  0889  083F               	movf	??_Play_Ring+3,w
  8567  088A  0242               	subwf	Play_Ring@j+1,w
  8568  088B  1D03               	skipz
  8569  088C  288F               	goto	u6135
  8570  088D  083E               	movf	??_Play_Ring+2,w
  8571  088E  0241               	subwf	Play_Ring@j,w
  8572  088F                     u6135:	
  8573  088F  1803               	btfsc	3,0
  8574  0890  28AB               	goto	l6310
  8575                           
  8576                           ;melody.c: 58:         {;melody.c: 59:             Display_7Seg(&g_display_text[0],g_dec
      +                          imal_point);
  8577  0891  085A               	movf	_g_decimal_point,w
  8578  0892  00BC               	movwf	??_Play_Ring
  8579  0893  083C               	movf	??_Play_Ring,w
  8580  0894  00B1               	movwf	Display_7Seg@decimal_point
  8581  0895  305D               	movlw	(low (_g_display_text| 0))& (0+255)
  8582  0896  160A  118A  2714  120A  158A  	fcall	_Display_7Seg
  8583                           
  8584                           ;melody.c: 60:             Wait_ms(4);
  8585  089B  3004               	movlw	4
  8586  089C  00B3               	movwf	Wait_ms@time
  8587  089D  3000               	movlw	0
  8588  089E  00B4               	movwf	Wait_ms@time+1
  8589  089F  160A  118A  20BB  120A  158A  	fcall	_Wait_ms
  8590                           
  8591                           ;melody.c: 61:         }
  8592  08A4  3001               	movlw	1
  8593  08A5  07C1               	addwf	Play_Ring@j,f
  8594  08A6  1803               	skipnc
  8595  08A7  0AC2               	incf	Play_Ring@j+1,f
  8596  08A8  3000               	movlw	0
  8597  08A9  07C2               	addwf	Play_Ring@j+1,f
  8598  08AA  2868               	goto	l6308
  8599  08AB                     l6310:	
  8600                           
  8601                           ;melody.c: 62:     }
  8602  08AB  3001               	movlw	1
  8603  08AC  00BC               	movwf	??_Play_Ring
  8604  08AD  083C               	movf	??_Play_Ring,w
  8605  08AE  07C3               	addwf	Play_Ring@i,f
  8606  08AF  2845               	goto	l6312
  8607  08B0                     l6314:	
  8608                           
  8609                           ;melody.c: 63:     Init_CaptureMode();
  8610  08B0  160A  158A  26BA   	fcall	_Init_CaptureMode
  8611  08B3  0008               	return
  8612  08B4                     __end_of_Play_Ring:	
  8613                           
  8614                           	psect	text37
  8615  1224                     __ptext37:	
  8616 ;; *************** function ___lwdiv *****************
  8617 ;; Defined at:
  8618 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;  divisor         2    6[BANK0 ] unsigned int 
  8621 ;;  dividend        2    8[BANK0 ] unsigned int 
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;  quotient        2   12[BANK0 ] unsigned int 
  8624 ;;  counter         1   11[BANK0 ] unsigned char 
  8625 ;; Return value:  Size  Location     Type
  8626 ;;                  2    6[BANK0 ] unsigned int 
  8627 ;; Registers used:
  8628 ;;		wreg, status,2, status,0
  8629 ;; Tracked objects:
  8630 ;;		On entry : 300/0
  8631 ;;		On exit  : 300/0
  8632 ;;		Unchanged: 0/0
  8633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8634 ;;      Params:         0       4       0       0       0
  8635 ;;      Locals:         0       3       0       0       0
  8636 ;;      Temps:          0       1       0       0       0
  8637 ;;      Totals:         0       8       0       0       0
  8638 ;;Total ram usage:        8 bytes
  8639 ;; Hardware stack levels used:    1
  8640 ;; Hardware stack levels required when called:    4
  8641 ;; This function calls:
  8642 ;;		Nothing
  8643 ;; This function is called by:
  8644 ;;		_Play_Ring
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           
  8649                           ;psect for function ___lwdiv
  8650  1224                     ___lwdiv:	
  8651                           
  8652                           ;incstack = 0
  8653                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8654  1224  01AC               	clrf	___lwdiv@quotient
  8655  1225  01AD               	clrf	___lwdiv@quotient+1
  8656  1226  0826               	movf	___lwdiv@divisor,w
  8657  1227  0427               	iorwf	___lwdiv@divisor+1,w
  8658  1228  1903               	btfsc	3,2
  8659  1229  2A5B               	goto	l6150
  8660  122A  01AB               	clrf	___lwdiv@counter
  8661  122B  0AAB               	incf	___lwdiv@counter,f
  8662  122C                     l6138:	
  8663  122C  1BA7               	btfsc	___lwdiv@divisor+1,7
  8664  122D  2A3A               	goto	l6140
  8665  122E  3001               	movlw	1
  8666  122F                     u5895:	
  8667  122F  1003               	clrc
  8668  1230  0DA6               	rlf	___lwdiv@divisor,f
  8669  1231  0DA7               	rlf	___lwdiv@divisor+1,f
  8670  1232  3EFF               	addlw	-1
  8671  1233  1D03               	skipz
  8672  1234  2A2F               	goto	u5895
  8673  1235  3001               	movlw	1
  8674  1236  00AA               	movwf	??___lwdiv
  8675  1237  082A               	movf	??___lwdiv,w
  8676  1238  07AB               	addwf	___lwdiv@counter,f
  8677  1239  2A2C               	goto	l6138
  8678  123A                     l6140:	
  8679  123A  3001               	movlw	1
  8680  123B                     u5915:	
  8681  123B  1003               	clrc
  8682  123C  0DAC               	rlf	___lwdiv@quotient,f
  8683  123D  0DAD               	rlf	___lwdiv@quotient+1,f
  8684  123E  3EFF               	addlw	-1
  8685  123F  1D03               	skipz
  8686  1240  2A3B               	goto	u5915
  8687  1241  0827               	movf	___lwdiv@divisor+1,w
  8688  1242  0229               	subwf	___lwdiv@dividend+1,w
  8689  1243  1D03               	skipz
  8690  1244  2A47               	goto	u5925
  8691  1245  0826               	movf	___lwdiv@divisor,w
  8692  1246  0228               	subwf	___lwdiv@dividend,w
  8693  1247                     u5925:	
  8694  1247  1C03               	skipc
  8695  1248  2A50               	goto	l6146
  8696  1249  0826               	movf	___lwdiv@divisor,w
  8697  124A  02A8               	subwf	___lwdiv@dividend,f
  8698  124B  0827               	movf	___lwdiv@divisor+1,w
  8699  124C  1C03               	skipc
  8700  124D  03A9               	decf	___lwdiv@dividend+1,f
  8701  124E  02A9               	subwf	___lwdiv@dividend+1,f
  8702  124F  142C               	bsf	___lwdiv@quotient,0
  8703  1250                     l6146:	
  8704  1250  3001               	movlw	1
  8705  1251                     u5935:	
  8706  1251  1003               	clrc
  8707  1252  0CA7               	rrf	___lwdiv@divisor+1,f
  8708  1253  0CA6               	rrf	___lwdiv@divisor,f
  8709  1254  3EFF               	addlw	-1
  8710  1255  1D03               	skipz
  8711  1256  2A51               	goto	u5935
  8712  1257  3001               	movlw	1
  8713  1258  02AB               	subwf	___lwdiv@counter,f
  8714  1259  1D03               	btfss	3,2
  8715  125A  2A3A               	goto	l6140
  8716  125B                     l6150:	
  8717  125B  082D               	movf	___lwdiv@quotient+1,w
  8718  125C  00A7               	movwf	?___lwdiv+1
  8719  125D  082C               	movf	___lwdiv@quotient,w
  8720  125E  00A6               	movwf	?___lwdiv
  8721  125F  0008               	return
  8722  1260                     __end_of___lwdiv:	
  8723                           
  8724                           	psect	text38
  8725  10BB                     __ptext38:	
  8726 ;; *************** function _Wait_ms *****************
  8727 ;; Defined at:
  8728 ;;		line 7 in file "utils.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;  time            2   19[BANK0 ] unsigned int 
  8731 ;; Auto vars:     Size  Location     Type
  8732 ;;		None
  8733 ;; Return value:  Size  Location     Type
  8734 ;;                  1    wreg      void 
  8735 ;; Registers used:
  8736 ;;		wreg, status,2, status,0, pclath, cstack
  8737 ;; Tracked objects:
  8738 ;;		On entry : 300/0
  8739 ;;		On exit  : 300/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8742 ;;      Params:         0       2       0       0       0
  8743 ;;      Locals:         0       0       0       0       0
  8744 ;;      Temps:          0       4       0       0       0
  8745 ;;      Totals:         0       6       0       0       0
  8746 ;;Total ram usage:        6 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:    5
  8749 ;; This function calls:
  8750 ;;		___lmul
  8751 ;; This function is called by:
  8752 ;;		_Play_Ring
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           
  8757                           ;psect for function _Wait_ms
  8758  10BB                     _Wait_ms:	
  8759                           
  8760                           ;utils.c: 7: void Wait_ms(unsigned int time);utils.c: 8: {;utils.c: 9:     g_generic_tim
      +                          er=(125*(unsigned long int)time)/32;
  8761                           
  8762                           ;incstack = 0
  8763 ;; hardware stack exceeded
  8764                           ; Regs used in _Wait_ms: [wreg+status,2+status,0+pclath+cstack]
  8765  10BB  0833               	movf	Wait_ms@time,w
  8766  10BC  00A6               	movwf	___lmul@multiplier
  8767  10BD  0834               	movf	Wait_ms@time+1,w
  8768  10BE  00A7               	movwf	___lmul@multiplier+1
  8769  10BF  01A8               	clrf	___lmul@multiplier+2
  8770  10C0  01A9               	clrf	___lmul@multiplier+3
  8771  10C1  3000               	movlw	0
  8772  10C2  00AD               	movwf	___lmul@multiplicand+3
  8773  10C3  3000               	movlw	0
  8774  10C4  00AC               	movwf	___lmul@multiplicand+2
  8775  10C5  3000               	movlw	0
  8776  10C6  00AB               	movwf	___lmul@multiplicand+1
  8777  10C7  307D               	movlw	125
  8778  10C8  00AA               	movwf	___lmul@multiplicand
  8779  10C9  160A  118A  229F  160A  118A  	fcall	___lmul
  8780  10CE  0826               	movf	?___lmul,w
  8781  10CF  00B5               	movwf	??_Wait_ms
  8782  10D0  0827               	movf	?___lmul+1,w
  8783  10D1  00B6               	movwf	??_Wait_ms+1
  8784  10D2  0828               	movf	?___lmul+2,w
  8785  10D3  00B7               	movwf	??_Wait_ms+2
  8786  10D4  0829               	movf	?___lmul+3,w
  8787  10D5  00B8               	movwf	??_Wait_ms+3
  8788  10D6  3005               	movlw	5
  8789  10D7                     u5645:	
  8790  10D7  1003               	clrc
  8791  10D8  0CB8               	rrf	??_Wait_ms+3,f
  8792  10D9  0CB7               	rrf	??_Wait_ms+2,f
  8793  10DA  0CB6               	rrf	??_Wait_ms+1,f
  8794  10DB  0CB5               	rrf	??_Wait_ms,f
  8795  10DC  3EFF               	addlw	-1
  8796  10DD  1D03               	skipz
  8797  10DE  28D7               	goto	u5645
  8798  10DF  0836               	movf	??_Wait_ms+1,w
  8799  10E0  00CF               	movwf	_g_generic_timer+1	;volatile
  8800  10E1  0835               	movf	??_Wait_ms,w
  8801  10E2  00CE               	movwf	_g_generic_timer	;volatile
  8802  10E3                     l5992:	
  8803                           ;utils.c: 10:     while(g_generic_timer);
  8804                           
  8805  10E3  084E               	movf	_g_generic_timer,w	;volatile
  8806  10E4  044F               	iorwf	_g_generic_timer+1,w	;volatile
  8807  10E5  1903               	btfsc	3,2
  8808  10E6  0008               	return
  8809  10E7  28E3               	goto	l5992
  8810  10E8                     __end_of_Wait_ms:	
  8811                           
  8812                           	psect	text39
  8813  129F                     __ptext39:	
  8814 ;; *************** function ___lmul *****************
  8815 ;; Defined at:
  8816 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;  multiplier      4    6[BANK0 ] unsigned long 
  8819 ;;  multiplicand    4   10[BANK0 ] unsigned long 
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;  product         4   15[BANK0 ] unsigned long 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  4    6[BANK0 ] unsigned long 
  8824 ;; Registers used:
  8825 ;;		wreg, status,2, status,0
  8826 ;; Tracked objects:
  8827 ;;		On entry : 300/0
  8828 ;;		On exit  : 300/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8831 ;;      Params:         0       8       0       0       0
  8832 ;;      Locals:         0       4       0       0       0
  8833 ;;      Temps:          0       1       0       0       0
  8834 ;;      Totals:         0      13       0       0       0
  8835 ;;Total ram usage:       13 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    4
  8838 ;; This function calls:
  8839 ;;		Nothing
  8840 ;; This function is called by:
  8841 ;;		_Wait_ms
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           
  8846                           ;psect for function ___lmul
  8847  129F                     ___lmul:	
  8848                           
  8849                           ;incstack = 0
  8850 ;; hardware stack exceeded
  8851                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  8852  129F  3000               	movlw	0
  8853  12A0  00B2               	movwf	___lmul@product+3
  8854  12A1  3000               	movlw	0
  8855  12A2  00B1               	movwf	___lmul@product+2
  8856  12A3  3000               	movlw	0
  8857  12A4  00B0               	movwf	___lmul@product+1
  8858  12A5  3000               	movlw	0
  8859  12A6  00AF               	movwf	___lmul@product
  8860  12A7                     l5764:	
  8861  12A7  1C26               	btfss	___lmul@multiplier,0
  8862  12A8  2ABD               	goto	l5768
  8863  12A9  082A               	movf	___lmul@multiplicand,w
  8864  12AA  07AF               	addwf	___lmul@product,f
  8865  12AB  082B               	movf	___lmul@multiplicand+1,w
  8866  12AC  1103               	clrz
  8867  12AD  1803               	skipnc
  8868  12AE  3E01               	addlw	1
  8869  12AF  1D03               	btfss	3,2
  8870  12B0  07B0               	addwf	___lmul@product+1,f
  8871  12B1  082C               	movf	___lmul@multiplicand+2,w
  8872  12B2  1103               	clrz
  8873  12B3  1803               	skipnc
  8874  12B4  3E01               	addlw	1
  8875  12B5  1D03               	btfss	3,2
  8876  12B6  07B1               	addwf	___lmul@product+2,f
  8877  12B7  082D               	movf	___lmul@multiplicand+3,w
  8878  12B8  1103               	clrz
  8879  12B9  1803               	skipnc
  8880  12BA  3E01               	addlw	1
  8881  12BB  1D03               	btfss	3,2
  8882  12BC  07B2               	addwf	___lmul@product+3,f
  8883  12BD                     l5768:	
  8884  12BD  3001               	movlw	1
  8885  12BE  00AE               	movwf	??___lmul
  8886  12BF                     u5225:	
  8887  12BF  1003               	clrc
  8888  12C0  0DAA               	rlf	___lmul@multiplicand,f
  8889  12C1  0DAB               	rlf	___lmul@multiplicand+1,f
  8890  12C2  0DAC               	rlf	___lmul@multiplicand+2,f
  8891  12C3  0DAD               	rlf	___lmul@multiplicand+3,f
  8892  12C4  0BAE               	decfsz	??___lmul,f
  8893  12C5  2ABF               	goto	u5225
  8894  12C6  3001               	movlw	1
  8895  12C7                     u5235:	
  8896  12C7  1003               	clrc
  8897  12C8  0CA9               	rrf	___lmul@multiplier+3,f
  8898  12C9  0CA8               	rrf	___lmul@multiplier+2,f
  8899  12CA  0CA7               	rrf	___lmul@multiplier+1,f
  8900  12CB  0CA6               	rrf	___lmul@multiplier,f
  8901  12CC  3EFF               	addlw	-1
  8902  12CD  1D03               	skipz
  8903  12CE  2AC7               	goto	u5235
  8904  12CF  0829               	movf	___lmul@multiplier+3,w
  8905  12D0  0428               	iorwf	___lmul@multiplier+2,w
  8906  12D1  0427               	iorwf	___lmul@multiplier+1,w
  8907  12D2  0426               	iorwf	___lmul@multiplier,w
  8908  12D3  1D03               	skipz
  8909  12D4  2AA7               	goto	l5764
  8910  12D5  0832               	movf	___lmul@product+3,w
  8911  12D6  00A9               	movwf	?___lmul+3
  8912  12D7  0831               	movf	___lmul@product+2,w
  8913  12D8  00A8               	movwf	?___lmul+2
  8914  12D9  0830               	movf	___lmul@product+1,w
  8915  12DA  00A7               	movwf	?___lmul+1
  8916  12DB  082F               	movf	___lmul@product,w
  8917  12DC  00A6               	movwf	?___lmul
  8918  12DD  0008               	return
  8919  12DE                     __end_of___lmul:	
  8920                           
  8921                           	psect	text40
  8922  1EC7                     __ptext40:	
  8923 ;; *************** function _Init_CompareMode *****************
  8924 ;; Defined at:
  8925 ;;		line 27 in file "melody.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;		None
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;		None
  8930 ;; Return value:  Size  Location     Type
  8931 ;;                  1    wreg      void 
  8932 ;; Registers used:
  8933 ;;		wreg, status,2, status,0
  8934 ;; Tracked objects:
  8935 ;;		On entry : B00/0
  8936 ;;		On exit  : B00/0
  8937 ;;		Unchanged: 800/0
  8938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8939 ;;      Params:         0       0       0       0       0
  8940 ;;      Locals:         0       0       0       0       0
  8941 ;;      Temps:          0       0       0       0       0
  8942 ;;      Totals:         0       0       0       0       0
  8943 ;;Total ram usage:        0 bytes
  8944 ;; Hardware stack levels used:    1
  8945 ;; Hardware stack levels required when called:    4
  8946 ;; This function calls:
  8947 ;;		Nothing
  8948 ;; This function is called by:
  8949 ;;		_Play_Ring
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           
  8954                           ;psect for function _Init_CompareMode
  8955  1EC7                     _Init_CompareMode:	
  8956                           
  8957                           ;melody.c: 29:     CCP2IE=0;
  8958                           
  8959                           ;incstack = 0
  8960                           ; Regs used in _Init_CompareMode: [wreg+status,2+status,0]
  8961  1EC7  1683               	bsf	3,5	;RP0=1, select bank1
  8962  1EC8  100D               	bcf	13,0	;volatile
  8963                           
  8964                           ;melody.c: 30:     T1CONbits.T1CKPS=0b11;
  8965  1EC9  3030               	movlw	48
  8966  1ECA  1283               	bcf	3,5	;RP0=0, select bank0
  8967  1ECB  0490               	iorwf	16,f	;volatile
  8968                           
  8969                           ;melody.c: 31:     CCP1IE=1;
  8970  1ECC  1683               	bsf	3,5	;RP0=1, select bank1
  8971  1ECD  150C               	bsf	12,2	;volatile
  8972                           
  8973                           ;melody.c: 32:     CCP1CONbits.CCP1M=0b1000;
  8974  1ECE  1283               	bcf	3,5	;RP0=0, select bank0
  8975  1ECF  0817               	movf	23,w	;volatile
  8976  1ED0  39F0               	andlw	-16
  8977  1ED1  3808               	iorlw	8
  8978  1ED2  0097               	movwf	23	;volatile
  8979  1ED3  0008               	return
  8980  1ED4                     __end_of_Init_CompareMode:	
  8981                           
  8982                           	psect	text41
  8983  1EBA                     __ptext41:	
  8984 ;; *************** function _Init_CaptureMode *****************
  8985 ;; Defined at:
  8986 ;;		line 35 in file "melody.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		wreg, status,2, status,0
  8995 ;; Tracked objects:
  8996 ;;		On entry : 300/0
  8997 ;;		On exit  : 300/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9000 ;;      Params:         0       0       0       0       0
  9001 ;;      Locals:         0       0       0       0       0
  9002 ;;      Temps:          0       0       0       0       0
  9003 ;;      Totals:         0       0       0       0       0
  9004 ;;Total ram usage:        0 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    4
  9007 ;; This function calls:
  9008 ;;		Nothing
  9009 ;; This function is called by:
  9010 ;;		_Play_Ring
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           
  9015                           ;psect for function _Init_CaptureMode
  9016  1EBA                     _Init_CaptureMode:	
  9017                           
  9018                           ;melody.c: 37:     CCP1IE=0;
  9019                           
  9020                           ;incstack = 0
  9021                           ; Regs used in _Init_CaptureMode: [wreg+status,2+status,0]
  9022  1EBA  1683               	bsf	3,5	;RP0=1, select bank1
  9023  1EBB  110C               	bcf	12,2	;volatile
  9024                           
  9025                           ;melody.c: 38:     T1CONbits.T1CKPS=0b00;
  9026  1EBC  30CF               	movlw	-49
  9027  1EBD  1283               	bcf	3,5	;RP0=0, select bank0
  9028  1EBE  0590               	andwf	16,f	;volatile
  9029                           
  9030                           ;melody.c: 39:     CCP2IE=1;
  9031  1EBF  1683               	bsf	3,5	;RP0=1, select bank1
  9032  1EC0  140D               	bsf	13,0	;volatile
  9033                           
  9034                           ;melody.c: 40:     CCP2CONbits.CCP2M=0b0100;
  9035  1EC1  1283               	bcf	3,5	;RP0=0, select bank0
  9036  1EC2  081D               	movf	29,w	;volatile
  9037  1EC3  39F0               	andlw	-16
  9038  1EC4  3804               	iorlw	4
  9039  1EC5  009D               	movwf	29	;volatile
  9040  1EC6  0008               	return
  9041  1EC7                     __end_of_Init_CaptureMode:	
  9042                           
  9043                           	psect	text42
  9044  1063                     __ptext42:	
  9045 ;; *************** function _Generate_PWM *****************
  9046 ;; Defined at:
  9047 ;;		line 22 in file "melody.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;  freq            4   20[BANK0 ] unsigned long 
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;		None
  9052 ;; Return value:  Size  Location     Type
  9053 ;;                  1    wreg      void 
  9054 ;; Registers used:
  9055 ;;		wreg, status,2, status,0, pclath, cstack
  9056 ;; Tracked objects:
  9057 ;;		On entry : 300/0
  9058 ;;		On exit  : 300/100
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9061 ;;      Params:         0       4       0       0       0
  9062 ;;      Locals:         0       0       0       0       0
  9063 ;;      Temps:          0       4       0       0       0
  9064 ;;      Totals:         0       8       0       0       0
  9065 ;;Total ram usage:        8 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    5
  9068 ;; This function calls:
  9069 ;;		___lldiv
  9070 ;; This function is called by:
  9071 ;;		_Play_Ring
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           
  9076                           ;psect for function _Generate_PWM
  9077  1063                     _Generate_PWM:	
  9078                           
  9079                           ;melody.c: 22: void Generate_PWM(unsigned long int freq);melody.c: 23: {;melody.c: 24:  
      +                             g_pwm_freq=8000000/(4*8*2*freq);
  9080                           
  9081                           ;incstack = 0
  9082 ;; hardware stack exceeded
  9083                           ; Regs used in _Generate_PWM: [wreg+status,2+status,0+pclath+cstack]
  9084  1063  0834               	movf	Generate_PWM@freq,w
  9085  1064  00B8               	movwf	??_Generate_PWM
  9086  1065  0835               	movf	Generate_PWM@freq+1,w
  9087  1066  00B9               	movwf	??_Generate_PWM+1
  9088  1067  0836               	movf	Generate_PWM@freq+2,w
  9089  1068  00BA               	movwf	??_Generate_PWM+2
  9090  1069  0837               	movf	Generate_PWM@freq+3,w
  9091  106A  00BB               	movwf	??_Generate_PWM+3
  9092  106B  3006               	movlw	6
  9093  106C                     u5635:	
  9094  106C  1003               	clrc
  9095  106D  0DB8               	rlf	??_Generate_PWM,f
  9096  106E  0DB9               	rlf	??_Generate_PWM+1,f
  9097  106F  0DBA               	rlf	??_Generate_PWM+2,f
  9098  1070  0DBB               	rlf	??_Generate_PWM+3,f
  9099  1071  3EFF               	addlw	-1
  9100  1072  1D03               	skipz
  9101  1073  286C               	goto	u5635
  9102  1074  083B               	movf	??_Generate_PWM+3,w
  9103  1075  00A9               	movwf	___lldiv@divisor+3
  9104  1076  083A               	movf	??_Generate_PWM+2,w
  9105  1077  00A8               	movwf	___lldiv@divisor+2
  9106  1078  0839               	movf	??_Generate_PWM+1,w
  9107  1079  00A7               	movwf	___lldiv@divisor+1
  9108  107A  0838               	movf	??_Generate_PWM,w
  9109  107B  00A6               	movwf	___lldiv@divisor
  9110  107C  3000               	movlw	0
  9111  107D  00AD               	movwf	___lldiv@dividend+3
  9112  107E  307A               	movlw	122
  9113  107F  00AC               	movwf	___lldiv@dividend+2
  9114  1080  3012               	movlw	18
  9115  1081  00AB               	movwf	___lldiv@dividend+1
  9116  1082  3000               	movlw	0
  9117  1083  00AA               	movwf	___lldiv@dividend
  9118  1084  160A  118A  24A6   	fcall	___lldiv
  9119  1087  0827               	movf	?___lldiv+1,w
  9120  1088  1683               	bsf	3,5	;RP0=1, select bank1
  9121  1089  00A1               	movwf	(_g_pwm_freq+1)^(0+128)	;volatile
  9122  108A  1283               	bcf	3,5	;RP0=0, select bank0
  9123  108B  0826               	movf	?___lldiv,w
  9124  108C  1683               	bsf	3,5	;RP0=1, select bank1
  9125  108D  00A0               	movwf	_g_pwm_freq^(0+128)	;volatile
  9126  108E  0008               	return
  9127  108F                     __end_of_Generate_PWM:	
  9128                           
  9129                           	psect	text43
  9130  14A6                     __ptext43:	
  9131 ;; *************** function ___lldiv *****************
  9132 ;; Defined at:
  9133 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\__lldiv.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;  divisor         4    6[BANK0 ] unsigned long 
  9136 ;;  dividend        4   10[BANK0 ] unsigned long 
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;  quotient        4   15[BANK0 ] unsigned long 
  9139 ;;  counter         1   19[BANK0 ] unsigned char 
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  4    6[BANK0 ] unsigned long 
  9142 ;; Registers used:
  9143 ;;		wreg, status,2, status,0
  9144 ;; Tracked objects:
  9145 ;;		On entry : 300/0
  9146 ;;		On exit  : 300/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9149 ;;      Params:         0       8       0       0       0
  9150 ;;      Locals:         0       5       0       0       0
  9151 ;;      Temps:          0       1       0       0       0
  9152 ;;      Totals:         0      14       0       0       0
  9153 ;;Total ram usage:       14 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    4
  9156 ;; This function calls:
  9157 ;;		Nothing
  9158 ;; This function is called by:
  9159 ;;		_Generate_PWM
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           
  9164                           ;psect for function ___lldiv
  9165  14A6                     ___lldiv:	
  9166                           
  9167                           ;incstack = 0
  9168 ;; hardware stack exceeded
  9169                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9170  14A6  3000               	movlw	0
  9171  14A7  00B2               	movwf	___lldiv@quotient+3
  9172  14A8  3000               	movlw	0
  9173  14A9  00B1               	movwf	___lldiv@quotient+2
  9174  14AA  3000               	movlw	0
  9175  14AB  00B0               	movwf	___lldiv@quotient+1
  9176  14AC  3000               	movlw	0
  9177  14AD  00AF               	movwf	___lldiv@quotient
  9178  14AE  0829               	movf	___lldiv@divisor+3,w
  9179  14AF  0428               	iorwf	___lldiv@divisor+2,w
  9180  14B0  0427               	iorwf	___lldiv@divisor+1,w
  9181  14B1  0426               	iorwf	___lldiv@divisor,w
  9182  14B2  1903               	skipnz
  9183  14B3  2CFB               	goto	l5810
  9184  14B4  01B3               	clrf	___lldiv@counter
  9185  14B5  0AB3               	incf	___lldiv@counter,f
  9186  14B6                     l5796:	
  9187  14B6  1BA9               	btfsc	___lldiv@divisor+3,7
  9188  14B7  2CC6               	goto	l5798
  9189  14B8  3001               	movlw	1
  9190  14B9  00AE               	movwf	??___lldiv
  9191  14BA                     u5285:	
  9192  14BA  1003               	clrc
  9193  14BB  0DA6               	rlf	___lldiv@divisor,f
  9194  14BC  0DA7               	rlf	___lldiv@divisor+1,f
  9195  14BD  0DA8               	rlf	___lldiv@divisor+2,f
  9196  14BE  0DA9               	rlf	___lldiv@divisor+3,f
  9197  14BF  0BAE               	decfsz	??___lldiv,f
  9198  14C0  2CBA               	goto	u5285
  9199  14C1  3001               	movlw	1
  9200  14C2  00AE               	movwf	??___lldiv
  9201  14C3  082E               	movf	??___lldiv,w
  9202  14C4  07B3               	addwf	___lldiv@counter,f
  9203  14C5  2CB6               	goto	l5796
  9204  14C6                     l5798:	
  9205  14C6  3001               	movlw	1
  9206  14C7  00AE               	movwf	??___lldiv
  9207  14C8                     u5305:	
  9208  14C8  1003               	clrc
  9209  14C9  0DAF               	rlf	___lldiv@quotient,f
  9210  14CA  0DB0               	rlf	___lldiv@quotient+1,f
  9211  14CB  0DB1               	rlf	___lldiv@quotient+2,f
  9212  14CC  0DB2               	rlf	___lldiv@quotient+3,f
  9213  14CD  0BAE               	decfsz	??___lldiv,f
  9214  14CE  2CC8               	goto	u5305
  9215  14CF  0829               	movf	___lldiv@divisor+3,w
  9216  14D0  022D               	subwf	___lldiv@dividend+3,w
  9217  14D1  1D03               	skipz
  9218  14D2  2CDD               	goto	u5315
  9219  14D3  0828               	movf	___lldiv@divisor+2,w
  9220  14D4  022C               	subwf	___lldiv@dividend+2,w
  9221  14D5  1D03               	skipz
  9222  14D6  2CDD               	goto	u5315
  9223  14D7  0827               	movf	___lldiv@divisor+1,w
  9224  14D8  022B               	subwf	___lldiv@dividend+1,w
  9225  14D9  1D03               	skipz
  9226  14DA  2CDD               	goto	u5315
  9227  14DB  0826               	movf	___lldiv@divisor,w
  9228  14DC  022A               	subwf	___lldiv@dividend,w
  9229  14DD                     u5315:	
  9230  14DD  1C03               	skipc
  9231  14DE  2CEE               	goto	l5806
  9232  14DF  0826               	movf	___lldiv@divisor,w
  9233  14E0  02AA               	subwf	___lldiv@dividend,f
  9234  14E1  0827               	movf	___lldiv@divisor+1,w
  9235  14E2  1C03               	skipc
  9236  14E3  0F27               	incfsz	___lldiv@divisor+1,w
  9237  14E4  02AB               	subwf	___lldiv@dividend+1,f
  9238  14E5  0828               	movf	___lldiv@divisor+2,w
  9239  14E6  1C03               	skipc
  9240  14E7  0F28               	incfsz	___lldiv@divisor+2,w
  9241  14E8  02AC               	subwf	___lldiv@dividend+2,f
  9242  14E9  0829               	movf	___lldiv@divisor+3,w
  9243  14EA  1C03               	skipc
  9244  14EB  0F29               	incfsz	___lldiv@divisor+3,w
  9245  14EC  02AD               	subwf	___lldiv@dividend+3,f
  9246  14ED  142F               	bsf	___lldiv@quotient,0
  9247  14EE                     l5806:	
  9248  14EE  3001               	movlw	1
  9249  14EF                     u5325:	
  9250  14EF  1003               	clrc
  9251  14F0  0CA9               	rrf	___lldiv@divisor+3,f
  9252  14F1  0CA8               	rrf	___lldiv@divisor+2,f
  9253  14F2  0CA7               	rrf	___lldiv@divisor+1,f
  9254  14F3  0CA6               	rrf	___lldiv@divisor,f
  9255  14F4  3EFF               	addlw	-1
  9256  14F5  1D03               	skipz
  9257  14F6  2CEF               	goto	u5325
  9258  14F7  3001               	movlw	1
  9259  14F8  02B3               	subwf	___lldiv@counter,f
  9260  14F9  1D03               	btfss	3,2
  9261  14FA  2CC6               	goto	l5798
  9262  14FB                     l5810:	
  9263  14FB  0832               	movf	___lldiv@quotient+3,w
  9264  14FC  00A9               	movwf	?___lldiv+3
  9265  14FD  0831               	movf	___lldiv@quotient+2,w
  9266  14FE  00A8               	movwf	?___lldiv+2
  9267  14FF  0830               	movf	___lldiv@quotient+1,w
  9268  1500  00A7               	movwf	?___lldiv+1
  9269  1501  082F               	movf	___lldiv@quotient,w
  9270  1502  00A6               	movwf	?___lldiv
  9271  1503  0008               	return
  9272  1504                     __end_of___lldiv:	
  9273                           
  9274                           	psect	text44
  9275  1714                     __ptext44:	
  9276 ;; *************** function _Display_7Seg *****************
  9277 ;; Defined at:
  9278 ;;		line 96 in file "display-7-segment.c"
  9279 ;; Parameters:    Size  Location     Type
  9280 ;;  text            1    wreg     PTR unsigned char 
  9281 ;;		 -> g_display_text(4), 
  9282 ;;  decimal_poin    1   17[BANK0 ] unsigned char 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  text            1   19[BANK0 ] PTR unsigned char 
  9285 ;;		 -> g_display_text(4), 
  9286 ;; Return value:  Size  Location     Type
  9287 ;;                  1    wreg      void 
  9288 ;; Registers used:
  9289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9290 ;; Tracked objects:
  9291 ;;		On entry : 300/0
  9292 ;;		On exit  : 300/0
  9293 ;;		Unchanged: 0/0
  9294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9295 ;;      Params:         0       1       0       0       0
  9296 ;;      Locals:         0       1       0       0       0
  9297 ;;      Temps:          0       1       0       0       0
  9298 ;;      Totals:         0       3       0       0       0
  9299 ;;Total ram usage:        3 bytes
  9300 ;; Hardware stack levels used:    1
  9301 ;; Hardware stack levels required when called:    6
  9302 ;; This function calls:
  9303 ;;		_One_Digit_Handler
  9304 ;; This function is called by:
  9305 ;;		_Play_Ring
  9306 ;; This function uses a non-reentrant model
  9307 ;;
  9308                           
  9309                           
  9310                           ;psect for function _Display_7Seg
  9311  1714                     _Display_7Seg:	
  9312                           
  9313                           ;incstack = 0
  9314 ;; hardware stack exceeded
  9315                           ; Regs used in _Display_7Seg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9316                           ;Display_7Seg@text stored from wreg
  9317  1714  00B3               	movwf	Display_7Seg@text
  9318                           
  9319                           ;display-7-segment.c: 96: void Display_7Seg(unsigned char *text, unsigned char decimal_p
      +                          oint);display-7-segment.c: 97: {;display-7-segment.c: 98:     static unsigned char enabl
      +                          e_digit=1;;display-7-segment.c: 100:     if(enable_digit<=1)
  9320  1715  3002               	movlw	2
  9321  1716  0263               	subwf	Display_7Seg@enable_digit,w
  9322  1717  1803               	skipnc
  9323  1718  2F2F               	goto	l5908
  9324                           
  9325                           ;display-7-segment.c: 101:     {;display-7-segment.c: 102:         if(decimal_point & 0b
      +                          1000)
  9326  1719  1DB1               	btfss	Display_7Seg@decimal_point,3
  9327  171A  2F20               	goto	l5904
  9328                           
  9329                           ;display-7-segment.c: 103:         {;display-7-segment.c: 104:             One_Digit_Han
      +                          dler(*text,1,1);
  9330  171B  01AC               	clrf	One_Digit_Handler@digit_number
  9331  171C  0AAC               	incf	One_Digit_Handler@digit_number,f
  9332  171D  01AD               	clrf	One_Digit_Handler@decimal_point
  9333  171E  0AAD               	incf	One_Digit_Handler@decimal_point,f
  9334  171F  2F23               	goto	L6
  9335  1720                     l5904:	
  9336                           ;display-7-segment.c: 105:         }else
  9337                           
  9338                           
  9339                           ;display-7-segment.c: 106:         {;display-7-segment.c: 107:             One_Digit_Han
      +                          dler(*text,1,0);
  9340  1720  01AC               	clrf	One_Digit_Handler@digit_number
  9341  1721  0AAC               	incf	One_Digit_Handler@digit_number,f
  9342  1722  01AD               	clrf	One_Digit_Handler@decimal_point
  9343  1723                     L6:	
  9344  1723  0833               	movf	Display_7Seg@text,w
  9345  1724  0084               	movwf	4
  9346  1725  1383               	bcf	3,7	;select IRP bank0
  9347  1726  0800               	movf	0,w
  9348  1727  160A  118A  2180   	fcall	_One_Digit_Handler
  9349                           
  9350                           ;display-7-segment.c: 109:         enable_digit=2;
  9351  172A  3002               	movlw	2
  9352  172B  00B2               	movwf	??_Display_7Seg
  9353  172C  0832               	movf	??_Display_7Seg,w
  9354  172D  00E3               	movwf	Display_7Seg@enable_digit
  9355                           
  9356                           ;display-7-segment.c: 111:     }else if(enable_digit==2)
  9357  172E  0008               	return
  9358  172F                     l5908:	
  9359  172F  3002               	movlw	2
  9360  1730  0663               	xorwf	Display_7Seg@enable_digit,w
  9361  1731  1D03               	btfss	3,2
  9362  1732  2F4D               	goto	l5918
  9363                           
  9364                           ;display-7-segment.c: 112:     {;display-7-segment.c: 113:         if(decimal_point & 0b
      +                          0100)
  9365  1733  1D31               	btfss	Display_7Seg@decimal_point,2
  9366  1734  2F3C               	goto	l5914
  9367                           
  9368                           ;display-7-segment.c: 114:         {;display-7-segment.c: 115:             One_Digit_Han
      +                          dler(*(text+1),2,1);
  9369  1735  3002               	movlw	2
  9370  1736  00B2               	movwf	??_Display_7Seg
  9371  1737  0832               	movf	??_Display_7Seg,w
  9372  1738  00AC               	movwf	One_Digit_Handler@digit_number
  9373  1739  01AD               	clrf	One_Digit_Handler@decimal_point
  9374  173A  0AAD               	incf	One_Digit_Handler@decimal_point,f
  9375  173B  2F41               	goto	L7
  9376  173C                     l5914:	
  9377                           ;display-7-segment.c: 116:         }else
  9378                           
  9379                           
  9380                           ;display-7-segment.c: 117:         {;display-7-segment.c: 118:             One_Digit_Han
      +                          dler(*(text+1),2,0);
  9381  173C  3002               	movlw	2
  9382  173D  00B2               	movwf	??_Display_7Seg
  9383  173E  0832               	movf	??_Display_7Seg,w
  9384  173F  00AC               	movwf	One_Digit_Handler@digit_number
  9385  1740  01AD               	clrf	One_Digit_Handler@decimal_point
  9386  1741                     L7:	
  9387  1741  0A33               	incf	Display_7Seg@text,w
  9388  1742  0084               	movwf	4
  9389  1743  1383               	bcf	3,7	;select IRP bank0
  9390  1744  0800               	movf	0,w
  9391  1745  160A  118A  2180   	fcall	_One_Digit_Handler
  9392                           
  9393                           ;display-7-segment.c: 120:         enable_digit=3;
  9394  1748  3003               	movlw	3
  9395  1749  00B2               	movwf	??_Display_7Seg
  9396  174A  0832               	movf	??_Display_7Seg,w
  9397  174B  00E3               	movwf	Display_7Seg@enable_digit
  9398                           
  9399                           ;display-7-segment.c: 122:     }else if(enable_digit==3)
  9400  174C  0008               	return
  9401  174D                     l5918:	
  9402  174D  3003               	movlw	3
  9403  174E  0663               	xorwf	Display_7Seg@enable_digit,w
  9404  174F  1D03               	btfss	3,2
  9405  1750  2F6C               	goto	l5928
  9406                           
  9407                           ;display-7-segment.c: 123:     {;display-7-segment.c: 124:         if(decimal_point & 0b
      +                          0010)
  9408  1751  1CB1               	btfss	Display_7Seg@decimal_point,1
  9409  1752  2F5A               	goto	l5924
  9410                           
  9411                           ;display-7-segment.c: 125:         {;display-7-segment.c: 126:            One_Digit_Hand
      +                          ler(*(text+2),3,1);
  9412  1753  3003               	movlw	3
  9413  1754  00B2               	movwf	??_Display_7Seg
  9414  1755  0832               	movf	??_Display_7Seg,w
  9415  1756  00AC               	movwf	One_Digit_Handler@digit_number
  9416  1757  01AD               	clrf	One_Digit_Handler@decimal_point
  9417  1758  0AAD               	incf	One_Digit_Handler@decimal_point,f
  9418  1759  2F5F               	goto	L8
  9419  175A                     l5924:	
  9420                           ;display-7-segment.c: 127:         }else
  9421                           
  9422                           
  9423                           ;display-7-segment.c: 128:         {;display-7-segment.c: 129:            One_Digit_Hand
      +                          ler(*(text+2),3,0);
  9424  175A  3003               	movlw	3
  9425  175B  00B2               	movwf	??_Display_7Seg
  9426  175C  0832               	movf	??_Display_7Seg,w
  9427  175D  00AC               	movwf	One_Digit_Handler@digit_number
  9428  175E  01AD               	clrf	One_Digit_Handler@decimal_point
  9429  175F                     L8:	
  9430  175F  0833               	movf	Display_7Seg@text,w
  9431  1760  3E02               	addlw	2
  9432  1761  0084               	movwf	4
  9433  1762  1383               	bcf	3,7	;select IRP bank0
  9434  1763  0800               	movf	0,w
  9435  1764  160A  118A  2180   	fcall	_One_Digit_Handler
  9436                           
  9437                           ;display-7-segment.c: 131:         enable_digit=4;
  9438  1767  3004               	movlw	4
  9439  1768  00B2               	movwf	??_Display_7Seg
  9440  1769  0832               	movf	??_Display_7Seg,w
  9441  176A  00E3               	movwf	Display_7Seg@enable_digit
  9442                           
  9443                           ;display-7-segment.c: 133:     }else if(enable_digit>=4)
  9444  176B  0008               	return
  9445  176C                     l5928:	
  9446  176C  3004               	movlw	4
  9447  176D  0263               	subwf	Display_7Seg@enable_digit,w
  9448  176E  1C03               	skipc
  9449  176F  0008               	return
  9450                           
  9451                           ;display-7-segment.c: 134:     {;display-7-segment.c: 135:         if(decimal_point & 0b
      +                          0001)
  9452  1770  1C31               	btfss	Display_7Seg@decimal_point,0
  9453  1771  2F79               	goto	l5934
  9454                           
  9455                           ;display-7-segment.c: 136:         {;display-7-segment.c: 137:             One_Digit_Han
      +                          dler(*(text+3),4,1);
  9456  1772  3004               	movlw	4
  9457  1773  00B2               	movwf	??_Display_7Seg
  9458  1774  0832               	movf	??_Display_7Seg,w
  9459  1775  00AC               	movwf	One_Digit_Handler@digit_number
  9460  1776  01AD               	clrf	One_Digit_Handler@decimal_point
  9461  1777  0AAD               	incf	One_Digit_Handler@decimal_point,f
  9462  1778  2F7E               	goto	L9
  9463  1779                     l5934:	
  9464                           ;display-7-segment.c: 138:         }else
  9465                           
  9466                           
  9467                           ;display-7-segment.c: 139:         {;display-7-segment.c: 140:             One_Digit_Han
      +                          dler(*(text+3),4,0);
  9468  1779  3004               	movlw	4
  9469  177A  00B2               	movwf	??_Display_7Seg
  9470  177B  0832               	movf	??_Display_7Seg,w
  9471  177C  00AC               	movwf	One_Digit_Handler@digit_number
  9472  177D  01AD               	clrf	One_Digit_Handler@decimal_point
  9473  177E                     L9:	
  9474  177E  0833               	movf	Display_7Seg@text,w
  9475  177F  3E03               	addlw	3
  9476  1780  0084               	movwf	4
  9477  1781  1383               	bcf	3,7	;select IRP bank0
  9478  1782  0800               	movf	0,w
  9479  1783  160A  118A  2180   	fcall	_One_Digit_Handler
  9480                           
  9481                           ;display-7-segment.c: 142:         enable_digit=1;
  9482  1786  01E3               	clrf	Display_7Seg@enable_digit
  9483  1787  0AE3               	incf	Display_7Seg@enable_digit,f
  9484  1788  0008               	return
  9485  1789                     __end_of_Display_7Seg:	
  9486                           
  9487                           	psect	text45
  9488  1180                     __ptext45:	
  9489 ;; *************** function _One_Digit_Handler *****************
  9490 ;; Defined at:
  9491 ;;		line 147 in file "display-7-segment.c"
  9492 ;; Parameters:    Size  Location     Type
  9493 ;;  sign            1    wreg     unsigned char 
  9494 ;;  digit_number    1   12[BANK0 ] unsigned char 
  9495 ;;  decimal_poin    1   13[BANK0 ] unsigned char 
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;  sign            1   16[BANK0 ] unsigned char 
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  1    wreg      void 
  9500 ;; Registers used:
  9501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9502 ;; Tracked objects:
  9503 ;;		On entry : B00/0
  9504 ;;		On exit  : 300/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9507 ;;      Params:         0       2       0       0       0
  9508 ;;      Locals:         0       1       0       0       0
  9509 ;;      Temps:          0       2       0       0       0
  9510 ;;      Totals:         0       5       0       0       0
  9511 ;;Total ram usage:        5 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    5
  9514 ;; This function calls:
  9515 ;;		_Disable_All_Digits
  9516 ;;		_Set_Anode_Outputs
  9517 ;;		_Sign_Anode_Data
  9518 ;; This function is called by:
  9519 ;;		_Display_7Seg
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           
  9524                           ;psect for function _One_Digit_Handler
  9525  1180                     _One_Digit_Handler:	
  9526                           
  9527                           ;incstack = 0
  9528 ;; hardware stack exceeded
  9529                           ; Regs used in _One_Digit_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9530                           ;One_Digit_Handler@sign stored from wreg
  9531  1180  00B0               	movwf	One_Digit_Handler@sign
  9532                           
  9533                           ;display-7-segment.c: 147: void One_Digit_Handler(unsigned char sign, unsigned char digi
      +                          t_number, unsigned char decimal_point);display-7-segment.c: 148: {;display-7-segment.c: 
      +                          150:     Disable_All_Digits();
  9534  1181  160A  158A  267D  160A  118A  	fcall	_Disable_All_Digits
  9535                           
  9536                           ;display-7-segment.c: 151:     Set_Anode_Outputs(Sign_Anode_Data(sign),decimal_point);
  9537  1186  082D               	movf	One_Digit_Handler@decimal_point,w
  9538  1187  00AE               	movwf	??_One_Digit_Handler
  9539  1188  082E               	movf	??_One_Digit_Handler,w
  9540  1189  00A9               	movwf	Set_Anode_Outputs@decimal_point
  9541  118A  0830               	movf	One_Digit_Handler@sign,w
  9542  118B  120A  158A  243B  160A  118A  	fcall	_Sign_Anode_Data
  9543  1190  160A  118A  2567  160A  118A  	fcall	_Set_Anode_Outputs
  9544                           
  9545                           ;display-7-segment.c: 152:     switch (digit_number)
  9546  1195  299E               	goto	l5728
  9547  1196                     l154:	
  9548                           ;display-7-segment.c: 153:     {;display-7-segment.c: 154:         case 1 : PORTBbits.RB
      +                          7=0; break;
  9549                           
  9550  1196  1386               	bcf	6,7	;volatile
  9551  1197  0008               	return
  9552  1198                     l156:	
  9553                           ;display-7-segment.c: 155:         case 2 : PORTBbits.RB6=0; break;
  9554                           
  9555  1198  1306               	bcf	6,6	;volatile
  9556  1199  0008               	return
  9557  119A                     l157:	
  9558                           ;display-7-segment.c: 156:         case 3 : PORTBbits.RB5=0; break;
  9559                           
  9560  119A  1286               	bcf	6,5	;volatile
  9561  119B  0008               	return
  9562  119C                     l158:	
  9563                           ;display-7-segment.c: 157:         case 4 : PORTBbits.RB4=0; break;
  9564                           
  9565  119C  1206               	bcf	6,4	;volatile
  9566  119D  0008               	return
  9567  119E                     l5728:	
  9568  119E  082C               	movf	One_Digit_Handler@digit_number,w
  9569  119F  00AE               	movwf	??_One_Digit_Handler
  9570  11A0  01AF               	clrf	??_One_Digit_Handler+1
  9571                           
  9572                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9573                           ; Switch size 1, requested type "simple"
  9574                           ; Number of cases is 1, Range of values is 0 to 0
  9575                           ; switch strategies available:
  9576                           ; Name         Instructions Cycles
  9577                           ; simple_byte            4     3 (average)
  9578                           ; direct_byte           11     8 (fixed)
  9579                           ; jumptable            260     6 (fixed)
  9580                           ;	Chosen strategy is simple_byte
  9581  11A1  082F               	movf	??_One_Digit_Handler+1,w
  9582  11A2  3A00               	xorlw	0	; case 0
  9583  11A3  1903               	skipnz
  9584  11A4  29A6               	goto	l7342
  9585  11A5  29B4               	goto	l159
  9586  11A6                     l7342:	
  9587                           
  9588                           ; Switch size 1, requested type "simple"
  9589                           ; Number of cases is 4, Range of values is 1 to 4
  9590                           ; switch strategies available:
  9591                           ; Name         Instructions Cycles
  9592                           ; simple_byte           13     7 (average)
  9593                           ; direct_byte           23    11 (fixed)
  9594                           ; jumptable            263     9 (fixed)
  9595                           ;	Chosen strategy is simple_byte
  9596  11A6  082E               	movf	??_One_Digit_Handler,w
  9597  11A7  3A01               	xorlw	1	; case 1
  9598  11A8  1903               	skipnz
  9599  11A9  2996               	goto	l154
  9600  11AA  3A03               	xorlw	3	; case 2
  9601  11AB  1903               	skipnz
  9602  11AC  2998               	goto	l156
  9603  11AD  3A01               	xorlw	1	; case 3
  9604  11AE  1903               	skipnz
  9605  11AF  299A               	goto	l157
  9606  11B0  3A07               	xorlw	7	; case 4
  9607  11B1  1903               	skipnz
  9608  11B2  299C               	goto	l158
  9609  11B3  29B4               	goto	l159
  9610  11B4                     l159:	
  9611  11B4  0008               	return
  9612  11B5                     __end_of_One_Digit_Handler:	
  9613                           
  9614                           	psect	text46
  9615  0C3B                     __ptext46:	
  9616 ;; *************** function _Sign_Anode_Data *****************
  9617 ;; Defined at:
  9618 ;;		line 27 in file "display-7-segment.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  sign            1    wreg     unsigned char 
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;  sign            1    8[BANK0 ] unsigned char 
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  1    wreg      unsigned char 
  9625 ;; Registers used:
  9626 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9627 ;; Tracked objects:
  9628 ;;		On entry : 300/0
  9629 ;;		On exit  : 300/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9632 ;;      Params:         0       0       0       0       0
  9633 ;;      Locals:         0       1       0       0       0
  9634 ;;      Temps:          0       2       0       0       0
  9635 ;;      Totals:         0       3       0       0       0
  9636 ;;Total ram usage:        3 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    4
  9639 ;; This function calls:
  9640 ;;		Nothing
  9641 ;; This function is called by:
  9642 ;;		_One_Digit_Handler
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _Sign_Anode_Data
  9648  0C3B                     _Sign_Anode_Data:	
  9649                           
  9650                           ;incstack = 0
  9651 ;; hardware stack exceeded
  9652                           ; Regs used in _Sign_Anode_Data: [wreg-fsr0h+status,2+status,0]
  9653                           ;Sign_Anode_Data@sign stored from wreg
  9654  0C3B  00A8               	movwf	Sign_Anode_Data@sign
  9655                           
  9656                           ;display-7-segment.c: 27: unsigned char Sign_Anode_Data(unsigned char sign);display-7-se
      +                          gment.c: 28: {;display-7-segment.c: 29:     switch (sign)
  9657  0C3C  2C75               	goto	l5666
  9658  0C3D                     l5480:	
  9659  0C3D  30FC               	movlw	252
  9660  0C3E  0008               	return
  9661  0C3F                     l5484:	
  9662  0C3F  3060               	movlw	96
  9663  0C40  0008               	return
  9664  0C41                     l5488:	
  9665  0C41  30DA               	movlw	218
  9666  0C42  0008               	return
  9667  0C43                     l5492:	
  9668  0C43  30F2               	movlw	242
  9669  0C44  0008               	return
  9670  0C45                     l5496:	
  9671  0C45  3066               	movlw	102
  9672  0C46  0008               	return
  9673  0C47                     l5500:	
  9674  0C47  30B6               	movlw	182
  9675  0C48  0008               	return
  9676  0C49                     l5504:	
  9677  0C49  30BE               	movlw	190
  9678  0C4A  0008               	return
  9679  0C4B                     l5508:	
  9680  0C4B  30E4               	movlw	228
  9681  0C4C  0008               	return
  9682  0C4D                     l5512:	
  9683  0C4D  30FE               	movlw	254
  9684  0C4E  0008               	return
  9685  0C4F                     l5516:	
  9686  0C4F  30F6               	movlw	246
  9687  0C50  0008               	return
  9688  0C51                     l5560:	
  9689  0C51  30EE               	movlw	238
  9690  0C52  0008               	return
  9691  0C53                     l5564:	
  9692  0C53  303E               	movlw	62
  9693  0C54  0008               	return
  9694  0C55                     l5568:	
  9695  0C55  309C               	movlw	156
  9696  0C56  0008               	return
  9697  0C57                     l5572:	
  9698  0C57  307A               	movlw	122
  9699  0C58  0008               	return
  9700  0C59                     l5576:	
  9701  0C59  309E               	movlw	158
  9702  0C5A  0008               	return
  9703  0C5B                     l5580:	
  9704  0C5B  308E               	movlw	142
  9705  0C5C  0008               	return
  9706  0C5D                     l5584:	
  9707  0C5D  30BC               	movlw	188
  9708  0C5E  0008               	return
  9709  0C5F                     l5588:	
  9710  0C5F  306E               	movlw	110
  9711  0C60  0008               	return
  9712  0C61                     l5596:	
  9713  0C61  3070               	movlw	112
  9714  0C62  0008               	return
  9715  0C63                     l5604:	
  9716  0C63  301C               	movlw	28
  9717  0C64  0008               	return
  9718  0C65                     l5608:	
  9719  0C65  30EC               	movlw	236
  9720  0C66  0008               	return
  9721  0C67                     l5612:	
  9722  0C67  302A               	movlw	42
  9723  0C68  0008               	return
  9724  0C69                     l5620:	
  9725  0C69  3073               	movlw	115
  9726  0C6A  0008               	return
  9727  0C6B                     l5624:	
  9728  0C6B  300A               	movlw	10
  9729  0C6C  0008               	return
  9730  0C6D                     l5632:	
  9731  0C6D  301E               	movlw	30
  9732  0C6E  0008               	return
  9733  0C6F                     l5636:	
  9734  0C6F  307C               	movlw	124
  9735  0C70  0008               	return
  9736  0C71                     l5652:	
  9737  0C71  3076               	movlw	118
  9738  0C72  0008               	return
  9739  0C73                     l5660:	
  9740  0C73  3000               	movlw	0
  9741  0C74  0008               	return
  9742  0C75                     l5666:	
  9743  0C75  0828               	movf	Sign_Anode_Data@sign,w
  9744  0C76  00A6               	movwf	??_Sign_Anode_Data
  9745  0C77  01A7               	clrf	??_Sign_Anode_Data+1
  9746                           
  9747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9748                           ; Switch size 1, requested type "simple"
  9749                           ; Number of cases is 1, Range of values is 0 to 0
  9750                           ; switch strategies available:
  9751                           ; Name         Instructions Cycles
  9752                           ; simple_byte            4     3 (average)
  9753                           ; direct_byte           11     8 (fixed)
  9754                           ; jumptable            260     6 (fixed)
  9755                           ;	Chosen strategy is simple_byte
  9756  0C78  0827               	movf	??_Sign_Anode_Data+1,w
  9757  0C79  3A00               	xorlw	0	; case 0
  9758  0C7A  1903               	skipnz
  9759  0C7B  2C7D               	goto	l7344
  9760  0C7C  2C73               	goto	l5660
  9761  0C7D                     l7344:	
  9762                           
  9763                           ; Switch size 1, requested type "simple"
  9764                           ; Number of cases is 46, Range of values is 0 to 122
  9765                           ; switch strategies available:
  9766                           ; Name         Instructions Cycles
  9767                           ; simple_byte          139    70 (average)
  9768                           ; jumptable            260     6 (fixed)
  9769                           ;	Chosen strategy is simple_byte
  9770  0C7D  0826               	movf	??_Sign_Anode_Data,w
  9771  0C7E  3A00               	xorlw	0	; case 0
  9772  0C7F  1903               	skipnz
  9773  0C80  2C3D               	goto	l5480
  9774  0C81  3A01               	xorlw	1	; case 1
  9775  0C82  1903               	skipnz
  9776  0C83  2C3F               	goto	l5484
  9777  0C84  3A03               	xorlw	3	; case 2
  9778  0C85  1903               	skipnz
  9779  0C86  2C41               	goto	l5488
  9780  0C87  3A01               	xorlw	1	; case 3
  9781  0C88  1903               	skipnz
  9782  0C89  2C43               	goto	l5492
  9783  0C8A  3A07               	xorlw	7	; case 4
  9784  0C8B  1903               	skipnz
  9785  0C8C  2C45               	goto	l5496
  9786  0C8D  3A01               	xorlw	1	; case 5
  9787  0C8E  1903               	skipnz
  9788  0C8F  2C47               	goto	l5500
  9789  0C90  3A03               	xorlw	3	; case 6
  9790  0C91  1903               	skipnz
  9791  0C92  2C49               	goto	l5504
  9792  0C93  3A01               	xorlw	1	; case 7
  9793  0C94  1903               	skipnz
  9794  0C95  2C4B               	goto	l5508
  9795  0C96  3A0F               	xorlw	15	; case 8
  9796  0C97  1903               	skipnz
  9797  0C98  2C4D               	goto	l5512
  9798  0C99  3A01               	xorlw	1	; case 9
  9799  0C9A  1903               	skipnz
  9800  0C9B  2C4F               	goto	l5516
  9801  0C9C  3A23               	xorlw	35	; case 42
  9802  0C9D  1903               	skipnz
  9803  0C9E  2C73               	goto	l5660
  9804  0C9F  3A1A               	xorlw	26	; case 48
  9805  0CA0  1903               	skipnz
  9806  0CA1  2C3D               	goto	l5480
  9807  0CA2  3A01               	xorlw	1	; case 49
  9808  0CA3  1903               	skipnz
  9809  0CA4  2C3F               	goto	l5484
  9810  0CA5  3A03               	xorlw	3	; case 50
  9811  0CA6  1903               	skipnz
  9812  0CA7  2C41               	goto	l5488
  9813  0CA8  3A01               	xorlw	1	; case 51
  9814  0CA9  1903               	skipnz
  9815  0CAA  2C43               	goto	l5492
  9816  0CAB  3A07               	xorlw	7	; case 52
  9817  0CAC  1903               	skipnz
  9818  0CAD  2C45               	goto	l5496
  9819  0CAE  3A01               	xorlw	1	; case 53
  9820  0CAF  1903               	skipnz
  9821  0CB0  2C47               	goto	l5500
  9822  0CB1  3A03               	xorlw	3	; case 54
  9823  0CB2  1903               	skipnz
  9824  0CB3  2C49               	goto	l5504
  9825  0CB4  3A01               	xorlw	1	; case 55
  9826  0CB5  1903               	skipnz
  9827  0CB6  2C4B               	goto	l5508
  9828  0CB7  3A0F               	xorlw	15	; case 56
  9829  0CB8  1903               	skipnz
  9830  0CB9  2C4D               	goto	l5512
  9831  0CBA  3A01               	xorlw	1	; case 57
  9832  0CBB  1903               	skipnz
  9833  0CBC  2C4F               	goto	l5516
  9834  0CBD  3A58               	xorlw	88	; case 97
  9835  0CBE  1903               	skipnz
  9836  0CBF  2C51               	goto	l5560
  9837  0CC0  3A03               	xorlw	3	; case 98
  9838  0CC1  1903               	skipnz
  9839  0CC2  2C53               	goto	l5564
  9840  0CC3  3A01               	xorlw	1	; case 99
  9841  0CC4  1903               	skipnz
  9842  0CC5  2C55               	goto	l5568
  9843  0CC6  3A07               	xorlw	7	; case 100
  9844  0CC7  1903               	skipnz
  9845  0CC8  2C57               	goto	l5572
  9846  0CC9  3A01               	xorlw	1	; case 101
  9847  0CCA  1903               	skipnz
  9848  0CCB  2C59               	goto	l5576
  9849  0CCC  3A03               	xorlw	3	; case 102
  9850  0CCD  1903               	skipnz
  9851  0CCE  2C5B               	goto	l5580
  9852  0CCF  3A01               	xorlw	1	; case 103
  9853  0CD0  1903               	skipnz
  9854  0CD1  2C5D               	goto	l5584
  9855  0CD2  3A0F               	xorlw	15	; case 104
  9856  0CD3  1903               	skipnz
  9857  0CD4  2C5F               	goto	l5588
  9858  0CD5  3A01               	xorlw	1	; case 105
  9859  0CD6  1903               	skipnz
  9860  0CD7  2C3F               	goto	l5484
  9861  0CD8  3A03               	xorlw	3	; case 106
  9862  0CD9  1903               	skipnz
  9863  0CDA  2C61               	goto	l5596
  9864  0CDB  3A01               	xorlw	1	; case 107
  9865  0CDC  1903               	skipnz
  9866  0CDD  2C5F               	goto	l5588
  9867  0CDE  3A07               	xorlw	7	; case 108
  9868  0CDF  1903               	skipnz
  9869  0CE0  2C63               	goto	l5604
  9870  0CE1  3A01               	xorlw	1	; case 109
  9871  0CE2  1903               	skipnz
  9872  0CE3  2C65               	goto	l5608
  9873  0CE4  3A03               	xorlw	3	; case 110
  9874  0CE5  1903               	skipnz
  9875  0CE6  2C67               	goto	l5612
  9876  0CE7  3A01               	xorlw	1	; case 111
  9877  0CE8  1903               	skipnz
  9878  0CE9  2C3D               	goto	l5480
  9879  0CEA  3A1F               	xorlw	31	; case 112
  9880  0CEB  1903               	skipnz
  9881  0CEC  2C69               	goto	l5620
  9882  0CED  3A02               	xorlw	2	; case 114
  9883  0CEE  1903               	skipnz
  9884  0CEF  2C6B               	goto	l5624
  9885  0CF0  3A01               	xorlw	1	; case 115
  9886  0CF1  1903               	skipnz
  9887  0CF2  2C47               	goto	l5500
  9888  0CF3  3A07               	xorlw	7	; case 116
  9889  0CF4  1903               	skipnz
  9890  0CF5  2C6D               	goto	l5632
  9891  0CF6  3A01               	xorlw	1	; case 117
  9892  0CF7  1903               	skipnz
  9893  0CF8  2C6F               	goto	l5636
  9894  0CF9  3A03               	xorlw	3	; case 118
  9895  0CFA  1903               	skipnz
  9896  0CFB  2C6F               	goto	l5636
  9897  0CFC  3A01               	xorlw	1	; case 119
  9898  0CFD  1903               	skipnz
  9899  0CFE  2C6F               	goto	l5636
  9900  0CFF  3A0F               	xorlw	15	; case 120
  9901  0D00  1903               	skipnz
  9902  0D01  2C5F               	goto	l5588
  9903  0D02  3A01               	xorlw	1	; case 121
  9904  0D03  1903               	skipnz
  9905  0D04  2C71               	goto	l5652
  9906  0D05  3A03               	xorlw	3	; case 122
  9907  0D06  1903               	skipnz
  9908  0D07  2C41               	goto	l5488
  9909  0D08  2C73               	goto	l5660
  9910  0D09  0008               	return
  9911  0D0A                     __end_of_Sign_Anode_Data:	
  9912                           
  9913                           	psect	text47
  9914  1567                     __ptext47:	
  9915 ;; *************** function _Set_Anode_Outputs *****************
  9916 ;; Defined at:
  9917 ;;		line 161 in file "display-7-segment.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;  sign            1    wreg     unsigned char 
  9920 ;;  decimal_poin    1    9[BANK0 ] unsigned char 
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;  sign            1   11[BANK0 ] unsigned char 
  9923 ;; Return value:  Size  Location     Type
  9924 ;;                  1    wreg      void 
  9925 ;; Registers used:
  9926 ;;		wreg, status,2, status,0
  9927 ;; Tracked objects:
  9928 ;;		On entry : 300/0
  9929 ;;		On exit  : 300/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9932 ;;      Params:         0       1       0       0       0
  9933 ;;      Locals:         0       1       0       0       0
  9934 ;;      Temps:          0       1       0       0       0
  9935 ;;      Totals:         0       3       0       0       0
  9936 ;;Total ram usage:        3 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    4
  9939 ;; This function calls:
  9940 ;;		Nothing
  9941 ;; This function is called by:
  9942 ;;		_One_Digit_Handler
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function _Set_Anode_Outputs
  9948  1567                     _Set_Anode_Outputs:	
  9949                           
  9950                           ;incstack = 0
  9951 ;; hardware stack exceeded
  9952                           ; Regs used in _Set_Anode_Outputs: [wreg+status,2+status,0]
  9953                           ;Set_Anode_Outputs@sign stored from wreg
  9954  1567  00AB               	movwf	Set_Anode_Outputs@sign
  9955                           
  9956                           ;display-7-segment.c: 161: void Set_Anode_Outputs(unsigned char sign, unsigned char deci
      +                          mal_point);display-7-segment.c: 162: {;display-7-segment.c: 164:     if(sign>>7 & 1)
  9957  1568  082B               	movf	Set_Anode_Outputs@sign,w
  9958  1569  00AA               	movwf	??_Set_Anode_Outputs
  9959  156A  3007               	movlw	7
  9960  156B                     u4975:	
  9961  156B  1003               	clrc
  9962  156C  0CAA               	rrf	??_Set_Anode_Outputs,f
  9963  156D  3EFF               	addlw	-1
  9964  156E  1D03               	skipz
  9965  156F  2D6B               	goto	u4975
  9966  1570  1C2A               	btfss	??_Set_Anode_Outputs,0
  9967  1571  2D74               	goto	l162
  9968                           
  9969                           ;display-7-segment.c: 165:     {;display-7-segment.c: 166:         PORTAbits.RA6=1;
  9970  1572  1705               	bsf	5,6	;volatile
  9971                           
  9972                           ;display-7-segment.c: 167:     }else
  9973  1573  2D75               	goto	l5682
  9974  1574                     l162:	
  9975                           
  9976                           ;display-7-segment.c: 168:     {;display-7-segment.c: 169:         PORTAbits.RA6=0;
  9977  1574  1305               	bcf	5,6	;volatile
  9978  1575                     l5682:	
  9979                           
  9980                           ;display-7-segment.c: 172:     if(sign>>6 & 1)
  9981  1575  082B               	movf	Set_Anode_Outputs@sign,w
  9982  1576  00AA               	movwf	??_Set_Anode_Outputs
  9983  1577  3006               	movlw	6
  9984  1578                     u4995:	
  9985  1578  1003               	clrc
  9986  1579  0CAA               	rrf	??_Set_Anode_Outputs,f
  9987  157A  3EFF               	addlw	-1
  9988  157B  1D03               	skipz
  9989  157C  2D78               	goto	u4995
  9990  157D  1C2A               	btfss	??_Set_Anode_Outputs,0
  9991  157E  2D81               	goto	l164
  9992                           
  9993                           ;display-7-segment.c: 173:     {;display-7-segment.c: 174:         PORTAbits.RA7=1;
  9994  157F  1785               	bsf	5,7	;volatile
  9995                           
  9996                           ;display-7-segment.c: 175:     }else
  9997  1580  2D82               	goto	l5686
  9998  1581                     l164:	
  9999                           
 10000                           ;display-7-segment.c: 176:     {;display-7-segment.c: 177:         PORTAbits.RA7=0;
 10001  1581  1385               	bcf	5,7	;volatile
 10002  1582                     l5686:	
 10003                           
 10004                           ;display-7-segment.c: 180:     if(sign>>5 & 1)
 10005  1582  082B               	movf	Set_Anode_Outputs@sign,w
 10006  1583  00AA               	movwf	??_Set_Anode_Outputs
 10007  1584  3005               	movlw	5
 10008  1585                     u5015:	
 10009  1585  1003               	clrc
 10010  1586  0CAA               	rrf	??_Set_Anode_Outputs,f
 10011  1587  3EFF               	addlw	-1
 10012  1588  1D03               	skipz
 10013  1589  2D85               	goto	u5015
 10014  158A  1C2A               	btfss	??_Set_Anode_Outputs,0
 10015  158B  2D8E               	goto	l166
 10016                           
 10017                           ;display-7-segment.c: 181:     {;display-7-segment.c: 182:         PORTAbits.RA5=1;
 10018  158C  1685               	bsf	5,5	;volatile
 10019                           
 10020                           ;display-7-segment.c: 183:     }else
 10021  158D  2D8F               	goto	l5690
 10022  158E                     l166:	
 10023                           
 10024                           ;display-7-segment.c: 184:     {;display-7-segment.c: 185:         PORTAbits.RA5=0;
 10025  158E  1285               	bcf	5,5	;volatile
 10026  158F                     l5690:	
 10027                           
 10028                           ;display-7-segment.c: 188:     if(sign>>4 & 1)
 10029  158F  082B               	movf	Set_Anode_Outputs@sign,w
 10030  1590  00AA               	movwf	??_Set_Anode_Outputs
 10031  1591  3004               	movlw	4
 10032  1592                     u5035:	
 10033  1592  1003               	clrc
 10034  1593  0CAA               	rrf	??_Set_Anode_Outputs,f
 10035  1594  3EFF               	addlw	-1
 10036  1595  1D03               	skipz
 10037  1596  2D92               	goto	u5035
 10038  1597  1C2A               	btfss	??_Set_Anode_Outputs,0
 10039  1598  2D9B               	goto	l168
 10040                           
 10041                           ;display-7-segment.c: 189:     {;display-7-segment.c: 190:         PORTAbits.RA4=1;
 10042  1599  1605               	bsf	5,4	;volatile
 10043                           
 10044                           ;display-7-segment.c: 191:     }else
 10045  159A  2D9C               	goto	l5694
 10046  159B                     l168:	
 10047                           
 10048                           ;display-7-segment.c: 192:     {;display-7-segment.c: 193:         PORTAbits.RA4=0;
 10049  159B  1205               	bcf	5,4	;volatile
 10050  159C                     l5694:	
 10051                           
 10052                           ;display-7-segment.c: 196:     if(sign>>3 & 1)
 10053  159C  082B               	movf	Set_Anode_Outputs@sign,w
 10054  159D  00AA               	movwf	??_Set_Anode_Outputs
 10055  159E  3003               	movlw	3
 10056  159F                     u5055:	
 10057  159F  1003               	clrc
 10058  15A0  0CAA               	rrf	??_Set_Anode_Outputs,f
 10059  15A1  3EFF               	addlw	-1
 10060  15A2  1D03               	skipz
 10061  15A3  2D9F               	goto	u5055
 10062  15A4  1C2A               	btfss	??_Set_Anode_Outputs,0
 10063  15A5  2DA8               	goto	l170
 10064                           
 10065                           ;display-7-segment.c: 197:     {;display-7-segment.c: 198:         PORTAbits.RA3=1;
 10066  15A6  1585               	bsf	5,3	;volatile
 10067                           
 10068                           ;display-7-segment.c: 199:     }else
 10069  15A7  2DA9               	goto	l5698
 10070  15A8                     l170:	
 10071                           
 10072                           ;display-7-segment.c: 200:     {;display-7-segment.c: 201:         PORTAbits.RA3=0;
 10073  15A8  1185               	bcf	5,3	;volatile
 10074  15A9                     l5698:	
 10075                           
 10076                           ;display-7-segment.c: 204:     if(sign>>2 & 1)
 10077  15A9  082B               	movf	Set_Anode_Outputs@sign,w
 10078  15AA  00AA               	movwf	??_Set_Anode_Outputs
 10079  15AB  3002               	movlw	2
 10080  15AC                     u5075:	
 10081  15AC  1003               	clrc
 10082  15AD  0CAA               	rrf	??_Set_Anode_Outputs,f
 10083  15AE  3EFF               	addlw	-1
 10084  15AF  1D03               	skipz
 10085  15B0  2DAC               	goto	u5075
 10086  15B1  1C2A               	btfss	??_Set_Anode_Outputs,0
 10087  15B2  2DB5               	goto	l172
 10088                           
 10089                           ;display-7-segment.c: 205:     {;display-7-segment.c: 206:         PORTAbits.RA2=1;
 10090  15B3  1505               	bsf	5,2	;volatile
 10091                           
 10092                           ;display-7-segment.c: 207:     }else
 10093  15B4  2DB6               	goto	l5702
 10094  15B5                     l172:	
 10095                           
 10096                           ;display-7-segment.c: 208:     {;display-7-segment.c: 209:         PORTAbits.RA2=0;
 10097  15B5  1105               	bcf	5,2	;volatile
 10098  15B6                     l5702:	
 10099                           
 10100                           ;display-7-segment.c: 212:     if(sign>>1 & 1)
 10101  15B6  082B               	movf	Set_Anode_Outputs@sign,w
 10102  15B7  00AA               	movwf	??_Set_Anode_Outputs
 10103  15B8  3001               	movlw	1
 10104  15B9                     u5095:	
 10105  15B9  1003               	clrc
 10106  15BA  0CAA               	rrf	??_Set_Anode_Outputs,f
 10107  15BB  3EFF               	addlw	-1
 10108  15BC  1D03               	skipz
 10109  15BD  2DB9               	goto	u5095
 10110  15BE  1C2A               	btfss	??_Set_Anode_Outputs,0
 10111  15BF  2DC2               	goto	l174
 10112                           
 10113                           ;display-7-segment.c: 213:     {;display-7-segment.c: 214:         PORTAbits.RA1=1;
 10114  15C0  1485               	bsf	5,1	;volatile
 10115                           
 10116                           ;display-7-segment.c: 215:     }else
 10117  15C1  2DC3               	goto	l5706
 10118  15C2                     l174:	
 10119                           
 10120                           ;display-7-segment.c: 216:     {;display-7-segment.c: 217:         PORTAbits.RA1=0;
 10121  15C2  1085               	bcf	5,1	;volatile
 10122  15C3                     l5706:	
 10123                           
 10124                           ;display-7-segment.c: 220:     if(decimal_point==1)
 10125  15C3  0329               	decf	Set_Anode_Outputs@decimal_point,w
 10126  15C4  1D03               	btfss	3,2
 10127  15C5  2DC8               	goto	l176
 10128                           
 10129                           ;display-7-segment.c: 221:     {;display-7-segment.c: 222:         PORTAbits.RA0=1;
 10130  15C6  1405               	bsf	5,0	;volatile
 10131                           
 10132                           ;display-7-segment.c: 223:     }else
 10133  15C7  0008               	return
 10134  15C8                     l176:	
 10135                           
 10136                           ;display-7-segment.c: 224:     {;display-7-segment.c: 225:         PORTAbits.RA0=0;
 10137  15C8  1005               	bcf	5,0	;volatile
 10138  15C9  0008               	return
 10139  15CA                     __end_of_Set_Anode_Outputs:	
 10140                           
 10141                           	psect	text48
 10142  1E7D                     __ptext48:	
 10143 ;; *************** function _Disable_All_Digits *****************
 10144 ;; Defined at:
 10145 ;;		line 86 in file "display-7-segment.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;		None
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		None
 10154 ;; Tracked objects:
 10155 ;;		On entry : 300/800
 10156 ;;		On exit  : 300/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10159 ;;      Params:         0       0       0       0       0
 10160 ;;      Locals:         0       0       0       0       0
 10161 ;;      Temps:          0       0       0       0       0
 10162 ;;      Totals:         0       0       0       0       0
 10163 ;;Total ram usage:        0 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:    4
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_One_Digit_Handler
 10170 ;;		_Menu_Init
 10171 ;;		_Show_Time
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           
 10176                           ;psect for function _Disable_All_Digits
 10177  1E7D                     _Disable_All_Digits:	
 10178                           
 10179                           ;display-7-segment.c: 88:     PORTBbits.RB7=1;
 10180                           
 10181                           ;incstack = 0
 10182                           ; Regs used in _Disable_All_Digits: []
 10183  1E7D  1786               	bsf	6,7	;volatile
 10184                           
 10185                           ;display-7-segment.c: 89:     PORTBbits.RB6=1;
 10186  1E7E  1706               	bsf	6,6	;volatile
 10187                           
 10188                           ;display-7-segment.c: 90:     PORTBbits.RB5=1;
 10189  1E7F  1686               	bsf	6,5	;volatile
 10190                           
 10191                           ;display-7-segment.c: 91:     PORTBbits.RB4=1;
 10192  1E80  1606               	bsf	6,4	;volatile
 10193  1E81  0008               	return
 10194  1E82                     __end_of_Disable_All_Digits:	
 10195                           
 10196                           	psect	text49
 10197  13F8                     __ptext49:	
 10198 ;; *************** function _Frame_Decode *****************
 10199 ;; Defined at:
 10200 ;;		line 165 in file "manchester_decode.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;  DataRCV         1    wreg     PTR struct .
 10203 ;;		 -> main@data_rcv(5), 
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;  DataRCV         1   13[BANK0 ] PTR struct .
 10206 ;;		 -> main@data_rcv(5), 
 10207 ;;  i               1   15[BANK0 ] unsigned char 
 10208 ;;  data            1   14[BANK0 ] unsigned char 
 10209 ;; Return value:  Size  Location     Type
 10210 ;;                  2    9[BANK0 ] unsigned int 
 10211 ;; Registers used:
 10212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10213 ;; Tracked objects:
 10214 ;;		On entry : 300/800
 10215 ;;		On exit  : 300/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10218 ;;      Params:         0       2       0       0       0
 10219 ;;      Locals:         0       3       0       0       0
 10220 ;;      Temps:          0       2       0       0       0
 10221 ;;      Totals:         0       7       0       0       0
 10222 ;;Total ram usage:        7 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:    5
 10225 ;; This function calls:
 10226 ;;		_Frame_Buffer
 10227 ;; This function is called by:
 10228 ;;		_Check_Event
 10229 ;;		_Check_RCV_Data
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _Frame_Decode
 10235  13F8                     _Frame_Decode:	
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _Frame_Decode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10239                           ;Frame_Decode@DataRCV stored from wreg
 10240  13F8  00AD               	movwf	Frame_Decode@DataRCV
 10241  13F9                     l488:	
 10242                           ;manchester_decode.c: 165: unsigned int Frame_Decode(DataStruct *DataRCV);manchester_dec
      +                          ode.c: 166: {;manchester_decode.c: 167:     unsigned char data, i;;manchester_decode.c: 
      +                          169:     while(1)
 10243                           
 10244                           
 10245                           ;manchester_decode.c: 170:     {;manchester_decode.c: 171:         if(Frame_Buffer(&data
      +                          ,0)==0xFF)
 10246  13F9  01A6               	clrf	Frame_Buffer@mode
 10247  13FA  302E               	movlw	(low (Frame_Decode@data| 0))& (0+255)
 10248  13FB  160A  118A  22DE  160A  118A  	fcall	_Frame_Buffer
 10249  1400  3AFF               	xorlw	255
 10250  1401  1D03               	skipz
 10251  1402  2C08               	goto	l6238
 10252  1403                     l6234:	
 10253                           
 10254                           ;manchester_decode.c: 172:         {;manchester_decode.c: 173:             return 0xFF;
 10255  1403  30FF               	movlw	255
 10256  1404  00A9               	movwf	?_Frame_Decode
 10257  1405  3000               	movlw	0
 10258  1406  00AA               	movwf	?_Frame_Decode+1
 10259  1407  0008               	return
 10260  1408                     l6238:	
 10261                           
 10262                           ;manchester_decode.c: 176:         if(data=='$')
 10263  1408  3024               	movlw	36
 10264  1409  062E               	xorwf	Frame_Decode@data,w
 10265  140A  1D03               	btfss	3,2
 10266  140B  2BF9               	goto	l488
 10267                           
 10268                           ;manchester_decode.c: 177:         {;manchester_decode.c: 178:             for(i=0;i<(6 
      +                          -2);i++)
 10269  140C  01AF               	clrf	Frame_Decode@i
 10270  140D                     l6246:	
 10271                           
 10272                           ;manchester_decode.c: 179:    {;manchester_decode.c: 180:     DataRCV->frame[i]=0;
 10273  140D  082F               	movf	Frame_Decode@i,w
 10274  140E  072D               	addwf	Frame_Decode@DataRCV,w
 10275  140F  00AB               	movwf	??_Frame_Decode
 10276  1410  082B               	movf	??_Frame_Decode,w
 10277  1411  0084               	movwf	4
 10278  1412  1783               	bsf	3,7	;select IRP bank2
 10279  1413  0180               	clrf	0
 10280                           
 10281                           ;manchester_decode.c: 181:    }
 10282  1414  3001               	movlw	1
 10283  1415  00AB               	movwf	??_Frame_Decode
 10284  1416  082B               	movf	??_Frame_Decode,w
 10285  1417  07AF               	addwf	Frame_Decode@i,f
 10286  1418  3004               	movlw	4
 10287  1419  022F               	subwf	Frame_Decode@i,w
 10288  141A  1C03               	skipc
 10289  141B  2C0D               	goto	l6246
 10290                           
 10291                           ;manchester_decode.c: 182:             i=0;
 10292  141C  01AF               	clrf	Frame_Decode@i
 10293  141D                     l6254:	
 10294                           
 10295                           ;manchester_decode.c: 185:             {;manchester_decode.c: 186:                 if(Fr
      +                          ame_Buffer(&data,0)==0xFF)
 10296  141D  01A6               	clrf	Frame_Buffer@mode
 10297  141E  302E               	movlw	(low (Frame_Decode@data| 0))& (0+255)
 10298  141F  160A  118A  22DE  160A  118A  	fcall	_Frame_Buffer
 10299  1424  3AFF               	xorlw	255
 10300  1425  1903               	btfsc	3,2
 10301  1426  2C03               	goto	l6234
 10302                           
 10303                           ;manchester_decode.c: 190:                 if(data=='&' && i==(6 -2))
 10304  1427  3026               	movlw	38
 10305  1428  062E               	xorwf	Frame_Decode@data,w
 10306  1429  1D03               	btfss	3,2
 10307  142A  2C3A               	goto	l6270
 10308  142B  3004               	movlw	4
 10309  142C  062F               	xorwf	Frame_Decode@i,w
 10310  142D  1D03               	btfss	3,2
 10311  142E  2C3A               	goto	l6270
 10312                           
 10313                           ;manchester_decode.c: 191:                 {;manchester_decode.c: 192:                  
      +                             DataRCV->RCV_Frame=1;
 10314  142F  082D               	movf	Frame_Decode@DataRCV,w
 10315  1430  3E04               	addlw	4
 10316  1431  0084               	movwf	4
 10317  1432  1783               	bsf	3,7	;select IRP bank2
 10318  1433  0180               	clrf	0
 10319  1434  0A80               	incf	0,f
 10320                           
 10321                           ;manchester_decode.c: 193:                     return 10;
 10322  1435  300A               	movlw	10
 10323  1436  00A9               	movwf	?_Frame_Decode
 10324  1437  3000               	movlw	0
 10325  1438  00AA               	movwf	?_Frame_Decode+1
 10326  1439  0008               	return
 10327  143A                     l6270:	
 10328                           
 10329                           ;manchester_decode.c: 195:                 DataRCV->frame[i]=data;
 10330  143A  082E               	movf	Frame_Decode@data,w
 10331  143B  00AB               	movwf	??_Frame_Decode
 10332  143C  082F               	movf	Frame_Decode@i,w
 10333  143D  072D               	addwf	Frame_Decode@DataRCV,w
 10334  143E  00AC               	movwf	??_Frame_Decode+1
 10335  143F  082C               	movf	??_Frame_Decode+1,w
 10336  1440  0084               	movwf	4
 10337  1441  082B               	movf	??_Frame_Decode,w
 10338  1442  1783               	bsf	3,7	;select IRP bank2
 10339  1443  0080               	movwf	0
 10340                           
 10341                           ;manchester_decode.c: 196:                 i++;
 10342  1444  3001               	movlw	1
 10343  1445  00AB               	movwf	??_Frame_Decode
 10344  1446  082B               	movf	??_Frame_Decode,w
 10345  1447  07AF               	addwf	Frame_Decode@i,f
 10346                           
 10347                           ;manchester_decode.c: 197:                 if(i>(6 -2))
 10348  1448  3005               	movlw	5
 10349  1449  022F               	subwf	Frame_Decode@i,w
 10350  144A  1803               	btfsc	3,0
 10351  144B  2BF9               	goto	l488
 10352  144C  2C1D               	goto	l6254
 10353  144D                     __end_of_Frame_Decode:	
 10354                           
 10355                           	psect	text50
 10356  12DE                     __ptext50:	
 10357 ;; *************** function _Frame_Buffer *****************
 10358 ;; Defined at:
 10359 ;;		line 13 in file "circular_buffer.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;  data            1    wreg     PTR unsigned char 
 10362 ;;		 -> Frame_Decode@data(1), Manchester_Decode@decoded_byte(1), 
 10363 ;;  mode            1    6[BANK0 ] unsigned char 
 10364 ;; Auto vars:     Size  Location     Type
 10365 ;;  data            1    8[BANK0 ] PTR unsigned char 
 10366 ;;		 -> Frame_Decode@data(1), Manchester_Decode@decoded_byte(1), 
 10367 ;; Return value:  Size  Location     Type
 10368 ;;                  1    wreg      unsigned char 
 10369 ;; Registers used:
 10370 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10371 ;; Tracked objects:
 10372 ;;		On entry : 300/800
 10373 ;;		On exit  : 300/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10376 ;;      Params:         0       1       0       0       0
 10377 ;;      Locals:         0       1       0       0       0
 10378 ;;      Temps:          0       1       0       0       0
 10379 ;;      Totals:         0       3       0       0       0
 10380 ;;Total ram usage:        3 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    4
 10383 ;; This function calls:
 10384 ;;		Nothing
 10385 ;; This function is called by:
 10386 ;;		_Frame_Decode
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function _Frame_Buffer
 10392  12DE                     _Frame_Buffer:	
 10393                           
 10394                           ;incstack = 0
 10395                           ; Regs used in _Frame_Buffer: [wreg-fsr0h+status,2+status,0]
 10396                           ;Frame_Buffer@data stored from wreg
 10397  12DE  00A8               	movwf	Frame_Buffer@data
 10398                           
 10399                           ;circular_buffer.c: 13: unsigned char Frame_Buffer(unsigned char *data, unsigned char mo
      +                          de);circular_buffer.c: 14: {;circular_buffer.c: 15:  static unsigned char buffer[60];;ci
      +                          rcular_buffer.c: 16:  static unsigned char read_pointer, write_pointer, write_pointer_me
      +                          m;;circular_buffer.c: 18:  if(mode==1)
 10400  12DF  0326               	decf	Frame_Buffer@mode,w
 10401  12E0  1D03               	btfss	3,2
 10402  12E1  2B18               	goto	l5880
 10403                           
 10404                           ;circular_buffer.c: 19:  {;circular_buffer.c: 20:   write_pointer_mem=write_pointer;
 10405  12E2  0858               	movf	Frame_Buffer@write_pointer,w
 10406  12E3  00A7               	movwf	??_Frame_Buffer
 10407  12E4  0827               	movf	??_Frame_Buffer,w
 10408  12E5  00D7               	movwf	Frame_Buffer@write_pointer_mem
 10409                           
 10410                           ;circular_buffer.c: 21:   write_pointer++;
 10411  12E6  3001               	movlw	1
 10412  12E7  00A7               	movwf	??_Frame_Buffer
 10413  12E8  0827               	movf	??_Frame_Buffer,w
 10414  12E9  07D8               	addwf	Frame_Buffer@write_pointer,f
 10415                           
 10416                           ;circular_buffer.c: 23:   if(write_pointer==60)
 10417  12EA  303C               	movlw	60
 10418  12EB  0658               	xorwf	Frame_Buffer@write_pointer,w
 10419  12EC  1903               	btfsc	3,2
 10420                           
 10421                           ;circular_buffer.c: 24:   {;circular_buffer.c: 25:    write_pointer=0;
 10422  12ED  01D8               	clrf	Frame_Buffer@write_pointer
 10423                           
 10424                           ;circular_buffer.c: 27:   if(write_pointer==read_pointer)
 10425  12EE  0858               	movf	Frame_Buffer@write_pointer,w
 10426  12EF  0659               	xorwf	Frame_Buffer@read_pointer,w
 10427  12F0  1D03               	skipz
 10428  12F1  2AF8               	goto	l5872
 10429                           
 10430                           ;circular_buffer.c: 28:   {;circular_buffer.c: 29:    write_pointer=write_pointer_mem;
 10431  12F2  0857               	movf	Frame_Buffer@write_pointer_mem,w
 10432  12F3  00A7               	movwf	??_Frame_Buffer
 10433  12F4  0827               	movf	??_Frame_Buffer,w
 10434  12F5  00D8               	movwf	Frame_Buffer@write_pointer
 10435                           
 10436                           ;circular_buffer.c: 30:    return 0xFE;
 10437  12F6  30FE               	movlw	254
 10438  12F7  0008               	return
 10439  12F8                     l5872:	
 10440                           
 10441                           ;circular_buffer.c: 33:   buffer[write_pointer]=*data;
 10442  12F8  0828               	movf	Frame_Buffer@data,w
 10443  12F9  0084               	movwf	4
 10444  12FA  1383               	bcf	3,7	;select IRP bank0
 10445  12FB  0800               	movf	0,w
 10446  12FC  00A7               	movwf	??_Frame_Buffer
 10447  12FD  0858               	movf	Frame_Buffer@write_pointer,w
 10448  12FE  3E90               	addlw	(low (Frame_Buffer@buffer| (0+256)))& (0+255)
 10449  12FF  0084               	movwf	4
 10450  1300  0827               	movf	??_Frame_Buffer,w
 10451  1301  1783               	bsf	3,7	;select IRP bank3
 10452  1302  2B15               	goto	L10
 10453  1303                     l5882:	
 10454                           
 10455                           ;circular_buffer.c: 40:   {;circular_buffer.c: 41:    read_pointer++;
 10456  1303  3001               	movlw	1
 10457  1304  00A7               	movwf	??_Frame_Buffer
 10458  1305  0827               	movf	??_Frame_Buffer,w
 10459  1306  07D9               	addwf	Frame_Buffer@read_pointer,f
 10460                           
 10461                           ;circular_buffer.c: 42:    if(read_pointer==60)
 10462  1307  303C               	movlw	60
 10463  1308  0659               	xorwf	Frame_Buffer@read_pointer,w
 10464  1309  1903               	btfsc	3,2
 10465                           
 10466                           ;circular_buffer.c: 43:    {;circular_buffer.c: 44:     read_pointer=0;
 10467  130A  01D9               	clrf	Frame_Buffer@read_pointer
 10468                           
 10469                           ;circular_buffer.c: 46:    *data=buffer[read_pointer];
 10470  130B  0859               	movf	Frame_Buffer@read_pointer,w
 10471  130C  3E90               	addlw	(low (Frame_Buffer@buffer| (0+256)))& (0+255)
 10472  130D  0084               	movwf	4
 10473  130E  1783               	bsf	3,7	;select IRP bank3
 10474  130F  0800               	movf	0,w
 10475  1310  00A7               	movwf	??_Frame_Buffer
 10476  1311  0828               	movf	Frame_Buffer@data,w
 10477  1312  0084               	movwf	4
 10478  1313  0827               	movf	??_Frame_Buffer,w
 10479  1314  1383               	bcf	3,7	;select IRP bank0
 10480  1315                     L10:	
 10481  1315  0080               	movwf	0
 10482                           
 10483                           ;circular_buffer.c: 35:   return 1;
 10484  1316  3001               	movlw	1
 10485  1317  0008               	return
 10486  1318                     l5880:	
 10487                           
 10488                           ;circular_buffer.c: 38:  {;circular_buffer.c: 39:   if(write_pointer!=read_pointer)
 10489  1318  0858               	movf	Frame_Buffer@write_pointer,w
 10490  1319  0659               	xorwf	Frame_Buffer@read_pointer,w
 10491  131A  1D03               	btfss	3,2
 10492  131B  2B03               	goto	l5882
 10493                           
 10494                           ;circular_buffer.c: 50:   {;circular_buffer.c: 51:    return 0xFF;
 10495  131C  30FF               	movlw	255
 10496  131D  0008               	return
 10497  131E                     __end_of_Frame_Buffer:	
 10498                           
 10499                           	psect	text51
 10500  1F30                     __ptext51:	
 10501 ;; *************** function _CRC_check *****************
 10502 ;; Defined at:
 10503 ;;		line 215 in file "manchester_decode.c"
 10504 ;; Parameters:    Size  Location     Type
 10505 ;;  DataRCV         1    wreg     PTR struct .
 10506 ;;		 -> main@data_rcv(5), 
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  DataRCV         1   19[BANK0 ] PTR struct .
 10509 ;;		 -> main@data_rcv(5), 
 10510 ;;  crc_val         2   17[BANK0 ] unsigned int 
 10511 ;; Return value:  Size  Location     Type
 10512 ;;                  1    wreg      unsigned char 
 10513 ;; Registers used:
 10514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10515 ;; Tracked objects:
 10516 ;;		On entry : B00/800
 10517 ;;		On exit  : B00/800
 10518 ;;		Unchanged: 0/0
 10519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10520 ;;      Params:         0       0       0       0       0
 10521 ;;      Locals:         0       3       0       0       0
 10522 ;;      Temps:          0       1       0       0       0
 10523 ;;      Totals:         0       4       0       0       0
 10524 ;;Total ram usage:        4 bytes
 10525 ;; Hardware stack levels used:    1
 10526 ;; Hardware stack levels required when called:    5
 10527 ;; This function calls:
 10528 ;;		_CRC16
 10529 ;; This function is called by:
 10530 ;;		_Check_RCV_Data
 10531 ;; This function uses a non-reentrant model
 10532 ;;
 10533                           
 10534                           
 10535                           ;psect for function _CRC_check
 10536  1F30                     _CRC_check:	
 10537                           
 10538                           ;incstack = 0
 10539                           ; Regs used in _CRC_check: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10540                           ;CRC_check@DataRCV stored from wreg
 10541  1F30  00B3               	movwf	CRC_check@DataRCV
 10542                           
 10543                           ;manchester_decode.c: 215: unsigned char CRC_check(DataStruct *DataRCV);manchester_decod
      +                          e.c: 216: {;manchester_decode.c: 217:  unsigned int crc_val;;manchester_decode.c: 219:  
      +                          crc_val=CRC16(&DataRCV->frame[0],6 -4);
 10544  1F31  3002               	movlw	2
 10545  1F32  00B0               	movwf	??_CRC_check
 10546  1F33  0830               	movf	??_CRC_check,w
 10547  1F34  00A6               	movwf	CRC16@size
 10548  1F35  0833               	movf	CRC_check@DataRCV,w
 10549  1F36  160A  118A  231E  160A  158A  	fcall	_CRC16
 10550  1F3B  0827               	movf	?_CRC16+1,w
 10551  1F3C  00B2               	movwf	CRC_check@crc_val+1
 10552  1F3D  0826               	movf	?_CRC16,w
 10553  1F3E  00B1               	movwf	CRC_check@crc_val
 10554                           
 10555                           ;manchester_decode.c: 221:  if((DataRCV->frame[6 -4]==crc_val>>8) &&
 10556  1F3F  0833               	movf	CRC_check@DataRCV,w
 10557  1F40  3E02               	addlw	2
 10558  1F41  0084               	movwf	4
 10559  1F42  0800               	movf	0,w
 10560  1F43  0632               	xorwf	CRC_check@crc_val+1,w
 10561  1F44  1D03               	skipz
 10562  1F45  2F4F               	goto	l6540
 10563  1F46  0833               	movf	CRC_check@DataRCV,w
 10564  1F47  3E03               	addlw	3
 10565  1F48  0084               	movwf	4
 10566  1F49  0800               	movf	0,w
 10567  1F4A  0631               	xorwf	CRC_check@crc_val,w
 10568  1F4B  1D03               	skipz
 10569  1F4C  2F4F               	goto	l6540
 10570                           
 10571                           ;manchester_decode.c: 223:     {;manchester_decode.c: 224:   return 1;
 10572  1F4D  3001               	movlw	1
 10573  1F4E  0008               	return
 10574  1F4F                     l6540:	
 10575                           
 10576                           ;manchester_decode.c: 226:  {;manchester_decode.c: 227:   return 0;
 10577  1F4F  3000               	movlw	0
 10578  1F50  0008               	return
 10579  1F51                     __end_of_CRC_check:	
 10580                           
 10581                           	psect	text52
 10582  131E                     __ptext52:	
 10583 ;; *************** function _CRC16 *****************
 10584 ;; Defined at:
 10585 ;;		line 7 in file "crc16.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;  data_tab_ptr    1    wreg     PTR unsigned char 
 10588 ;;		 -> main@data_rcv(5), 
 10589 ;;  size            1    6[BANK0 ] unsigned char 
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;  data_tab_ptr    1   11[BANK0 ] PTR unsigned char 
 10592 ;;		 -> main@data_rcv(5), 
 10593 ;;  crc             2   14[BANK0 ] unsigned int 
 10594 ;;  i               1   13[BANK0 ] unsigned char 
 10595 ;;  k               1   12[BANK0 ] unsigned char 
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  2    6[BANK0 ] unsigned int 
 10598 ;; Registers used:
 10599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
 10600 ;; Tracked objects:
 10601 ;;		On entry : B00/800
 10602 ;;		On exit  : B00/800
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10605 ;;      Params:         0       2       0       0       0
 10606 ;;      Locals:         0       5       0       0       0
 10607 ;;      Temps:          0       3       0       0       0
 10608 ;;      Totals:         0      10       0       0       0
 10609 ;;Total ram usage:       10 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:    4
 10612 ;; This function calls:
 10613 ;;		Nothing
 10614 ;; This function is called by:
 10615 ;;		_CRC_check
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           
 10620                           ;psect for function _CRC16
 10621  131E                     _CRC16:	
 10622                           
 10623                           ;incstack = 0
 10624                           ; Regs used in _CRC16: [wreg-fsr0h+status,2+status,0+btemp+1]
 10625                           ;CRC16@data_tab_ptr stored from wreg
 10626  131E  00AB               	movwf	CRC16@data_tab_ptr
 10627                           
 10628                           ;crc16.c: 7: unsigned int CRC16(unsigned char *data_tab_ptr, unsigned char size);crc16.c
      +                          : 8: {;crc16.c: 9:     const unsigned int generator = 0x1021;;crc16.c: 10:     unsigned 
      +                          int crc = 0;
 10629  131F  01AE               	clrf	CRC16@crc
 10630  1320  01AF               	clrf	CRC16@crc+1
 10631                           
 10632                           ;crc16.c: 11:     unsigned char k,i;;crc16.c: 13:     for(k=0;k<size;k++)
 10633  1321  01AC               	clrf	CRC16@k
 10634  1322                     l6174:	
 10635  1322  0826               	movf	CRC16@size,w
 10636  1323  022C               	subwf	CRC16@k,w
 10637  1324  1803               	btfsc	3,0
 10638  1325  2B5A               	goto	l6176
 10639                           
 10640                           ;crc16.c: 14:     {;crc16.c: 15:         crc ^= (*(data_tab_ptr+k) << 8);
 10641  1326  082C               	movf	CRC16@k,w
 10642  1327  072B               	addwf	CRC16@data_tab_ptr,w
 10643  1328  00A8               	movwf	??_CRC16
 10644  1329  0828               	movf	??_CRC16,w
 10645  132A  0084               	movwf	4
 10646  132B  0800               	movf	0,w
 10647  132C  00A9               	movwf	??_CRC16+1
 10648  132D  01AA               	clrf	??_CRC16+2
 10649  132E  0829               	movf	??_CRC16+1,w
 10650  132F  00AA               	movwf	??_CRC16+2
 10651  1330  01A9               	clrf	??_CRC16+1
 10652  1331  0829               	movf	??_CRC16+1,w
 10653  1332  06AE               	xorwf	CRC16@crc,f
 10654  1333  082A               	movf	??_CRC16+2,w
 10655  1334  06AF               	xorwf	CRC16@crc+1,f
 10656                           
 10657                           ;crc16.c: 17:         for (i=0;i<8;i++)
 10658  1335  01AD               	clrf	CRC16@i
 10659  1336                     l63:	
 10660                           
 10661                           ;crc16.c: 18:         {;crc16.c: 19:             if ((crc&0x8000)!=0)
 10662  1336  1FAF               	btfss	CRC16@crc+1,7
 10663  1337  2B46               	goto	l6166
 10664                           
 10665                           ;crc16.c: 20:             {;crc16.c: 21:                  crc=(crc<<1)^generator;
 10666  1338  082F               	movf	CRC16@crc+1,w
 10667  1339  00A9               	movwf	??_CRC16+1
 10668  133A  082E               	movf	CRC16@crc,w
 10669  133B  00A8               	movwf	??_CRC16
 10670  133C  1003               	clrc
 10671  133D  0DA8               	rlf	??_CRC16,f
 10672  133E  0DA9               	rlf	??_CRC16+1,f
 10673  133F  3021               	movlw	33
 10674  1340  0628               	xorwf	??_CRC16,w
 10675  1341  00AE               	movwf	CRC16@crc
 10676  1342  3010               	movlw	16
 10677  1343  0629               	xorwf	??_CRC16+1,w
 10678  1344  00AF               	movwf	CRC16@crc+1
 10679                           
 10680                           ;crc16.c: 22:             }else
 10681  1345  2B4D               	goto	l6168
 10682  1346                     l6166:	
 10683                           
 10684                           ;crc16.c: 23:             {;crc16.c: 24:                 crc<<=1;
 10685  1346  3001               	movlw	1
 10686  1347                     u5965:	
 10687  1347  1003               	clrc
 10688  1348  0DAE               	rlf	CRC16@crc,f
 10689  1349  0DAF               	rlf	CRC16@crc+1,f
 10690  134A  3EFF               	addlw	-1
 10691  134B  1D03               	skipz
 10692  134C  2B47               	goto	u5965
 10693  134D                     l6168:	
 10694                           
 10695                           ;crc16.c: 26:         }
 10696  134D  3001               	movlw	1
 10697  134E  00A8               	movwf	??_CRC16
 10698  134F  0828               	movf	??_CRC16,w
 10699  1350  07AD               	addwf	CRC16@i,f
 10700  1351  3008               	movlw	8
 10701  1352  022D               	subwf	CRC16@i,w
 10702  1353  1C03               	skipc
 10703  1354  2B36               	goto	l63
 10704                           
 10705                           ;crc16.c: 27:     }
 10706  1355  3001               	movlw	1
 10707  1356  00A8               	movwf	??_CRC16
 10708  1357  0828               	movf	??_CRC16,w
 10709  1358  07AC               	addwf	CRC16@k,f
 10710  1359  2B22               	goto	l6174
 10711  135A                     l6176:	
 10712                           
 10713                           ;crc16.c: 29:     return crc;
 10714  135A  082F               	movf	CRC16@crc+1,w
 10715  135B  00A7               	movwf	?_CRC16+1
 10716  135C  082E               	movf	CRC16@crc,w
 10717  135D  00A6               	movwf	?_CRC16
 10718  135E  0008               	return
 10719  135F                     __end_of_CRC16:	
 10720                           
 10721                           	psect	text53
 10722  0AC1                     __ptext53:	
 10723 ;; *************** function _Button_Init *****************
 10724 ;; Defined at:
 10725 ;;		line 38 in file "key-handler.c"
 10726 ;; Parameters:    Size  Location     Type
 10727 ;;  keydef          1    wreg     PTR struct .
 10728 ;;		 -> main@keydef(6), 
 10729 ;; Auto vars:     Size  Location     Type
 10730 ;;  keydef          1    7[BANK0 ] PTR struct .
 10731 ;;		 -> main@keydef(6), 
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  1    wreg      void 
 10734 ;; Registers used:
 10735 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10736 ;; Tracked objects:
 10737 ;;		On entry : B00/100
 10738 ;;		On exit  : B00/900
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10741 ;;      Params:         0       0       0       0       0
 10742 ;;      Locals:         0       1       0       0       0
 10743 ;;      Temps:          0       1       0       0       0
 10744 ;;      Totals:         0       2       0       0       0
 10745 ;;Total ram usage:        2 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    4
 10748 ;; This function calls:
 10749 ;;		Nothing
 10750 ;; This function is called by:
 10751 ;;		_main
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           
 10756                           ;psect for function _Button_Init
 10757  0AC1                     _Button_Init:	
 10758                           
 10759                           ;incstack = 0
 10760                           ; Regs used in _Button_Init: [wreg-fsr0h+status,2+status,0]
 10761                           ;Button_Init@keydef stored from wreg
 10762  0AC1  1283               	bcf	3,5	;RP0=0, select bank0
 10763  0AC2  00A7               	movwf	Button_Init@keydef
 10764                           
 10765                           ;key-handler.c: 38: void Button_Init (KeyPointerStruct *keydef);key-handler.c: 39: {;key
      +                          -handler.c: 40:     static KeyStruct set_rtc;;key-handler.c: 41:     static KeyStruct se
      +                          t_time1;;key-handler.c: 42:     static KeyStruct set_time2;;key-handler.c: 43:     stati
      +                          c KeyStruct set_right;;key-handler.c: 44:     static KeyStruct set_up;;key-handler.c: 45
      +                          :     static KeyStruct set_down;;key-handler.c: 47:     keydef->set_rtc=&set_rtc;
 10766  0AC3  30C9               	movlw	(low (Button_Init@set_rtc| 0))& (0+255)
 10767  0AC4  00A6               	movwf	??_Button_Init
 10768  0AC5  0827               	movf	Button_Init@keydef,w
 10769  0AC6  0084               	movwf	4
 10770  0AC7  0826               	movf	??_Button_Init,w
 10771  0AC8  1783               	bsf	3,7	;select IRP bank2
 10772  0AC9  0080               	movwf	0
 10773                           
 10774                           ;key-handler.c: 48:     keydef->set_time1=&set_time1;
 10775  0ACA  30C2               	movlw	(low (Button_Init@set_time1| 0))& (0+255)
 10776  0ACB  00A6               	movwf	??_Button_Init
 10777  0ACC  0A27               	incf	Button_Init@keydef,w
 10778  0ACD  0084               	movwf	4
 10779  0ACE  0826               	movf	??_Button_Init,w
 10780  0ACF  0080               	movwf	0
 10781                           
 10782                           ;key-handler.c: 49:     keydef->set_time2=&set_time2;
 10783  0AD0  30BB               	movlw	(low (Button_Init@set_time2| 0))& (0+255)
 10784  0AD1  00A6               	movwf	??_Button_Init
 10785  0AD2  0827               	movf	Button_Init@keydef,w
 10786  0AD3  3E02               	addlw	2
 10787  0AD4  0084               	movwf	4
 10788  0AD5  0826               	movf	??_Button_Init,w
 10789  0AD6  0080               	movwf	0
 10790                           
 10791                           ;key-handler.c: 50:     keydef->set_right=&set_right;
 10792  0AD7  30B4               	movlw	(low (Button_Init@set_right| 0))& (0+255)
 10793  0AD8  00A6               	movwf	??_Button_Init
 10794  0AD9  0827               	movf	Button_Init@keydef,w
 10795  0ADA  3E03               	addlw	3
 10796  0ADB  0084               	movwf	4
 10797  0ADC  0826               	movf	??_Button_Init,w
 10798  0ADD  0080               	movwf	0
 10799                           
 10800                           ;key-handler.c: 51:     keydef->set_up=&set_up;
 10801  0ADE  30AD               	movlw	(low (Button_Init@set_up| 0))& (0+255)
 10802  0ADF  00A6               	movwf	??_Button_Init
 10803  0AE0  0827               	movf	Button_Init@keydef,w
 10804  0AE1  3E04               	addlw	4
 10805  0AE2  0084               	movwf	4
 10806  0AE3  0826               	movf	??_Button_Init,w
 10807  0AE4  0080               	movwf	0
 10808                           
 10809                           ;key-handler.c: 52:     keydef->set_down=&set_down;
 10810  0AE5  30A6               	movlw	(low (Button_Init@set_down| 0))& (0+255)
 10811  0AE6  00A6               	movwf	??_Button_Init
 10812  0AE7  0827               	movf	Button_Init@keydef,w
 10813  0AE8  3E05               	addlw	5
 10814  0AE9  0084               	movwf	4
 10815  0AEA  0826               	movf	??_Button_Init,w
 10816  0AEB  0080               	movwf	0
 10817                           
 10818                           ;key-handler.c: 54:     set_rtc.pin=0;
 10819  0AEC  1683               	bsf	3,5	;RP0=1, select bank1
 10820  0AED  01CA               	clrf	(Button_Init@set_rtc^(0+128)+1)
 10821                           
 10822                           ;key-handler.c: 55:     set_rtc.port=&PORTB;
 10823  0AEE  3000               	movlw	0
 10824  0AEF  00CD               	movwf	((low ((Button_Init@set_rtc| 0+3))+1))^(0+128)
 10825  0AF0  3006               	movlw	6
 10826  0AF1  00CC               	movwf	(low ((Button_Init@set_rtc| 0+3)))^(0+128)
 10827                           
 10828                           ;key-handler.c: 56:     set_rtc.button_short_function=k_set_rtc_short;
 10829  0AF2  01CE               	clrf	(Button_Init@set_rtc^(0+128)+5)
 10830                           
 10831                           ;key-handler.c: 57:     set_rtc.button_long_function=k_set_rtc_long;
 10832  0AF3  01CF               	clrf	(Button_Init@set_rtc^(0+128)+6)
 10833  0AF4  0ACF               	incf	(Button_Init@set_rtc^(0+128)+6),f
 10834                           
 10835                           ;key-handler.c: 58:     set_rtc.klock=0;
 10836  0AF5  01C9               	clrf	Button_Init@set_rtc^(0+128)
 10837                           
 10838                           ;key-handler.c: 59:     set_rtc.lock_long_press=0;
 10839  0AF6  01CB               	clrf	(Button_Init@set_rtc^(0+128)+2)
 10840                           
 10841                           ;key-handler.c: 61:     set_time1.pin=7;
 10842  0AF7  3007               	movlw	7
 10843  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
 10844  0AF9  00A6               	movwf	??_Button_Init
 10845  0AFA  0826               	movf	??_Button_Init,w
 10846  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
 10847  0AFC  00C3               	movwf	(Button_Init@set_time1^(0+128)+1)
 10848                           
 10849                           ;key-handler.c: 62:     set_time1.port=&PORTC;
 10850  0AFD  3000               	movlw	0
 10851  0AFE  00C6               	movwf	((low ((Button_Init@set_time1| 0+3))+1))^(0+128)
 10852  0AFF  3007               	movlw	7
 10853  0B00  00C5               	movwf	(low ((Button_Init@set_time1| 0+3)))^(0+128)
 10854                           
 10855                           ;key-handler.c: 63:     set_time1.button_short_function=k_set_time1_short;
 10856  0B01  3002               	movlw	2
 10857  0B02  1283               	bcf	3,5	;RP0=0, select bank0
 10858  0B03  00A6               	movwf	??_Button_Init
 10859  0B04  0826               	movf	??_Button_Init,w
 10860  0B05  1683               	bsf	3,5	;RP0=1, select bank1
 10861  0B06  00C7               	movwf	(Button_Init@set_time1^(0+128)+5)
 10862                           
 10863                           ;key-handler.c: 64:     set_time1.button_long_function=k_set_time1_long;
 10864  0B07  3003               	movlw	3
 10865  0B08  1283               	bcf	3,5	;RP0=0, select bank0
 10866  0B09  00A6               	movwf	??_Button_Init
 10867  0B0A  0826               	movf	??_Button_Init,w
 10868  0B0B  1683               	bsf	3,5	;RP0=1, select bank1
 10869  0B0C  00C8               	movwf	(Button_Init@set_time1^(0+128)+6)
 10870                           
 10871                           ;key-handler.c: 65:     set_time1.klock=0;
 10872  0B0D  01C2               	clrf	Button_Init@set_time1^(0+128)
 10873                           
 10874                           ;key-handler.c: 66:     set_time1.lock_long_press=0;
 10875  0B0E  01C4               	clrf	(Button_Init@set_time1^(0+128)+2)
 10876                           
 10877                           ;key-handler.c: 68:     set_time2.pin=5;
 10878  0B0F  3005               	movlw	5
 10879  0B10  1283               	bcf	3,5	;RP0=0, select bank0
 10880  0B11  00A6               	movwf	??_Button_Init
 10881  0B12  0826               	movf	??_Button_Init,w
 10882  0B13  1683               	bsf	3,5	;RP0=1, select bank1
 10883  0B14  00BC               	movwf	(Button_Init@set_time2^(0+128)+1)
 10884                           
 10885                           ;key-handler.c: 69:     set_time2.port=&PORTC;
 10886  0B15  3000               	movlw	0
 10887  0B16  00BF               	movwf	((low ((Button_Init@set_time2| 0+3))+1))^(0+128)
 10888  0B17  3007               	movlw	7
 10889  0B18  00BE               	movwf	(low ((Button_Init@set_time2| 0+3)))^(0+128)
 10890                           
 10891                           ;key-handler.c: 70:     set_time2.button_short_function=k_set_time2_short;
 10892  0B19  3004               	movlw	4
 10893  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
 10894  0B1B  00A6               	movwf	??_Button_Init
 10895  0B1C  0826               	movf	??_Button_Init,w
 10896  0B1D  1683               	bsf	3,5	;RP0=1, select bank1
 10897  0B1E  00C0               	movwf	(Button_Init@set_time2^(0+128)+5)
 10898                           
 10899                           ;key-handler.c: 71:     set_time2.button_long_function=k_set_time2_long;
 10900  0B1F  3005               	movlw	5
 10901  0B20  1283               	bcf	3,5	;RP0=0, select bank0
 10902  0B21  00A6               	movwf	??_Button_Init
 10903  0B22  0826               	movf	??_Button_Init,w
 10904  0B23  1683               	bsf	3,5	;RP0=1, select bank1
 10905  0B24  00C1               	movwf	(Button_Init@set_time2^(0+128)+6)
 10906                           
 10907                           ;key-handler.c: 72:     set_time2.klock=0;
 10908  0B25  01BB               	clrf	Button_Init@set_time2^(0+128)
 10909                           
 10910                           ;key-handler.c: 73:     set_time2.lock_long_press=0;
 10911  0B26  01BD               	clrf	(Button_Init@set_time2^(0+128)+2)
 10912                           
 10913                           ;key-handler.c: 75:     set_right.pin=1;
 10914  0B27  01B5               	clrf	(Button_Init@set_right^(0+128)+1)
 10915  0B28  0AB5               	incf	(Button_Init@set_right^(0+128)+1),f
 10916                           
 10917                           ;key-handler.c: 76:     set_right.port=&PORTB;
 10918  0B29  3000               	movlw	0
 10919  0B2A  00B8               	movwf	((low ((Button_Init@set_right| 0+3))+1))^(0+128)
 10920  0B2B  3006               	movlw	6
 10921  0B2C  00B7               	movwf	(low ((Button_Init@set_right| 0+3)))^(0+128)
 10922                           
 10923                           ;key-handler.c: 77:     set_right.button_short_function= k_set_right_short;
 10924  0B2D  3006               	movlw	6
 10925  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
 10926  0B2F  00A6               	movwf	??_Button_Init
 10927  0B30  0826               	movf	??_Button_Init,w
 10928  0B31  1683               	bsf	3,5	;RP0=1, select bank1
 10929  0B32  00B9               	movwf	(Button_Init@set_right^(0+128)+5)
 10930                           
 10931                           ;key-handler.c: 78:     set_right.button_long_function=k_set_right_long;
 10932  0B33  3007               	movlw	7
 10933  0B34  1283               	bcf	3,5	;RP0=0, select bank0
 10934  0B35  00A6               	movwf	??_Button_Init
 10935  0B36  0826               	movf	??_Button_Init,w
 10936  0B37  1683               	bsf	3,5	;RP0=1, select bank1
 10937  0B38  00BA               	movwf	(Button_Init@set_right^(0+128)+6)
 10938                           
 10939                           ;key-handler.c: 79:     set_right.klock=0;
 10940  0B39  01B4               	clrf	Button_Init@set_right^(0+128)
 10941                           
 10942                           ;key-handler.c: 80:     set_right.lock_long_press=0;
 10943  0B3A  01B6               	clrf	(Button_Init@set_right^(0+128)+2)
 10944                           
 10945                           ;key-handler.c: 82:     set_up.pin=3;
 10946  0B3B  3003               	movlw	3
 10947  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
 10948  0B3D  00A6               	movwf	??_Button_Init
 10949  0B3E  0826               	movf	??_Button_Init,w
 10950  0B3F  1683               	bsf	3,5	;RP0=1, select bank1
 10951  0B40  00AE               	movwf	(Button_Init@set_up^(0+128)+1)
 10952                           
 10953                           ;key-handler.c: 83:     set_up.port=&PORTB;
 10954  0B41  3000               	movlw	0
 10955  0B42  00B1               	movwf	((low ((Button_Init@set_up| 0+3))+1))^(0+128)
 10956  0B43  3006               	movlw	6
 10957  0B44  00B0               	movwf	(low ((Button_Init@set_up| 0+3)))^(0+128)
 10958                           
 10959                           ;key-handler.c: 84:     set_up.button_short_function=k_set_up_short;
 10960  0B45  3008               	movlw	8
 10961  0B46  1283               	bcf	3,5	;RP0=0, select bank0
 10962  0B47  00A6               	movwf	??_Button_Init
 10963  0B48  0826               	movf	??_Button_Init,w
 10964  0B49  1683               	bsf	3,5	;RP0=1, select bank1
 10965  0B4A  00B2               	movwf	(Button_Init@set_up^(0+128)+5)
 10966                           
 10967                           ;key-handler.c: 85:     set_up.button_long_function=k_set_up_long;
 10968  0B4B  3009               	movlw	9
 10969  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
 10970  0B4D  00A6               	movwf	??_Button_Init
 10971  0B4E  0826               	movf	??_Button_Init,w
 10972  0B4F  1683               	bsf	3,5	;RP0=1, select bank1
 10973  0B50  00B3               	movwf	(Button_Init@set_up^(0+128)+6)
 10974                           
 10975                           ;key-handler.c: 86:     set_up.klock=0;
 10976  0B51  01AD               	clrf	Button_Init@set_up^(0+128)
 10977                           
 10978                           ;key-handler.c: 87:     set_up.lock_long_press=0;
 10979  0B52  01AF               	clrf	(Button_Init@set_up^(0+128)+2)
 10980                           
 10981                           ;key-handler.c: 89:     set_down.pin=2;
 10982  0B53  3002               	movlw	2
 10983  0B54  1283               	bcf	3,5	;RP0=0, select bank0
 10984  0B55  00A6               	movwf	??_Button_Init
 10985  0B56  0826               	movf	??_Button_Init,w
 10986  0B57  1683               	bsf	3,5	;RP0=1, select bank1
 10987  0B58  00A7               	movwf	(Button_Init@set_down^(0+128)+1)
 10988                           
 10989                           ;key-handler.c: 90:     set_down.port=&PORTB;
 10990  0B59  3000               	movlw	0
 10991  0B5A  00AA               	movwf	((low ((Button_Init@set_down| 0+3))+1))^(0+128)
 10992  0B5B  3006               	movlw	6
 10993  0B5C  00A9               	movwf	(low ((Button_Init@set_down| 0+3)))^(0+128)
 10994                           
 10995                           ;key-handler.c: 91:     set_down.button_short_function=k_set_down_short;
 10996  0B5D  300A               	movlw	10
 10997  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
 10998  0B5F  00A6               	movwf	??_Button_Init
 10999  0B60  0826               	movf	??_Button_Init,w
 11000  0B61  1683               	bsf	3,5	;RP0=1, select bank1
 11001  0B62  00AB               	movwf	(Button_Init@set_down^(0+128)+5)
 11002                           
 11003                           ;key-handler.c: 92:     set_down.button_long_function=k_set_down_long;
 11004  0B63  300B               	movlw	11
 11005  0B64  1283               	bcf	3,5	;RP0=0, select bank0
 11006  0B65  00A6               	movwf	??_Button_Init
 11007  0B66  0826               	movf	??_Button_Init,w
 11008  0B67  1683               	bsf	3,5	;RP0=1, select bank1
 11009  0B68  00AC               	movwf	(Button_Init@set_down^(0+128)+6)
 11010                           
 11011                           ;key-handler.c: 93:     set_down.klock=0;
 11012  0B69  01A6               	clrf	Button_Init@set_down^(0+128)
 11013                           
 11014                           ;key-handler.c: 94:     set_down.lock_long_press=0;
 11015  0B6A  01A8               	clrf	(Button_Init@set_down^(0+128)+2)
 11016  0B6B  0008               	return
 11017  0B6C                     __end_of_Button_Init:	
 11018                           
 11019                           	psect	text54
 11020  0A32                     __ptext54:	
 11021 ;; *************** function _ISR *****************
 11022 ;; Defined at:
 11023 ;;		line 39 in file "interrupts.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;		None
 11026 ;; Auto vars:     Size  Location     Type
 11027 ;;  pulse_time      2    4[BANK0 ] unsigned int 
 11028 ;; Return value:  Size  Location     Type
 11029 ;;                  1    wreg      void 
 11030 ;; Registers used:
 11031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11032 ;; Tracked objects:
 11033 ;;		On entry : 0/0
 11034 ;;		On exit  : 300/0
 11035 ;;		Unchanged: 0/0
 11036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11037 ;;      Params:         0       0       0       0       0
 11038 ;;      Locals:         0       2       0       0       0
 11039 ;;      Temps:          0       4       0       0       0
 11040 ;;      Totals:         0       6       0       0       0
 11041 ;;Total ram usage:        6 bytes
 11042 ;; Hardware stack levels used:    1
 11043 ;; Hardware stack levels required when called:    3
 11044 ;; This function calls:
 11045 ;;		_Manchester_Decode
 11046 ;;		i1_Display_7Seg
 11047 ;; This function is called by:
 11048 ;;		Interrupt level 1
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           
 11053                           ;psect for function _ISR
 11054  0A32                     _ISR:	
 11055                           
 11056                           ;interrupts.c: 41:     static unsigned char edge_dir, set_flag, display_timer;;interrupt
      +                          s.c: 42:     unsigned int pulse_time;;interrupts.c: 50:     if (TMR0IE && TMR0IF)
 11057  0A32  1A8B               	btfsc	11,5	;volatile
 11058  0A33  1D0B               	btfss	11,2	;volatile
 11059  0A34  2A6B               	goto	i1l5338
 11060                           
 11061                           ;interrupts.c: 51:     {;interrupts.c: 52:         if(display_timer>15 && g_display_cont
      +                          roll==1)
 11062  0A35  3010               	movlw	16
 11063  0A36  0255               	subwf	ISR@display_timer,w
 11064  0A37  1C03               	skipc
 11065  0A38  2A48               	goto	i1l5324
 11066  0A39  035B               	decf	_g_display_controll,w	;volatile
 11067  0A3A  1D03               	btfss	3,2
 11068  0A3B  2A48               	goto	i1l5324
 11069                           
 11070                           ;interrupts.c: 53:         {;interrupts.c: 54:             Display_7Seg(&g_display_text[
      +                          0],g_decimal_point);
 11071  0A3C  085A               	movf	_g_decimal_point,w
 11072  0A3D  00A0               	movwf	??_ISR
 11073  0A3E  0820               	movf	??_ISR,w
 11074  0A3F  00FB               	movwf	i1Display_7Seg@decimal_point
 11075  0A40  305D               	movlw	(low (_g_display_text| 0))& (0+255)
 11076  0A41  160A  118A  269F  120A  158A  	fcall	i1_Display_7Seg
 11077                           
 11078                           ;interrupts.c: 55:             display_timer=0;
 11079  0A46  01D5               	clrf	ISR@display_timer
 11080                           
 11081                           ;interrupts.c: 57:         }else
 11082  0A47  2A4C               	goto	i1l356
 11083  0A48                     i1l5324:	
 11084                           
 11085                           ;interrupts.c: 58:         {;interrupts.c: 59:             display_timer++;
 11086  0A48  3001               	movlw	1
 11087  0A49  00A0               	movwf	??_ISR
 11088  0A4A  0820               	movf	??_ISR,w
 11089  0A4B  07D5               	addwf	ISR@display_timer,f
 11090  0A4C                     i1l356:	
 11091                           ;interrupts.c: 60:         }
 11092                           
 11093                           
 11094                           ;interrupts.c: 62:         if(g_button_timer)
 11095  0A4C  0850               	movf	_g_button_timer,w	;volatile
 11096  0A4D  0451               	iorwf	_g_button_timer+1,w	;volatile
 11097  0A4E  1903               	btfsc	3,2
 11098  0A4F  2A56               	goto	i1l5328
 11099                           
 11100                           ;interrupts.c: 63:         {;interrupts.c: 64:             g_button_timer--;
 11101  0A50  3001               	movlw	1
 11102  0A51  02D0               	subwf	_g_button_timer,f	;volatile
 11103  0A52  3000               	movlw	0
 11104  0A53  1C03               	skipc
 11105  0A54  03D1               	decf	_g_button_timer+1,f	;volatile
 11106  0A55  02D1               	subwf	_g_button_timer+1,f	;volatile
 11107  0A56                     i1l5328:	
 11108                           
 11109                           ;interrupts.c: 67:         if(g_generic_timer)
 11110  0A56  084E               	movf	_g_generic_timer,w	;volatile
 11111  0A57  044F               	iorwf	_g_generic_timer+1,w	;volatile
 11112  0A58  1903               	btfsc	3,2
 11113  0A59  2A60               	goto	i1l5332
 11114                           
 11115                           ;interrupts.c: 68:         {;interrupts.c: 69:             g_generic_timer--;
 11116  0A5A  3001               	movlw	1
 11117  0A5B  02CE               	subwf	_g_generic_timer,f	;volatile
 11118  0A5C  3000               	movlw	0
 11119  0A5D  1C03               	skipc
 11120  0A5E  03CF               	decf	_g_generic_timer+1,f	;volatile
 11121  0A5F  02CF               	subwf	_g_generic_timer+1,f	;volatile
 11122  0A60                     i1l5332:	
 11123                           
 11124                           ;interrupts.c: 72:         if(g_com_timeout)
 11125  0A60  084C               	movf	_g_com_timeout,w	;volatile
 11126  0A61  044D               	iorwf	_g_com_timeout+1,w	;volatile
 11127  0A62  1903               	btfsc	3,2
 11128  0A63  2A6A               	goto	i1l5336
 11129                           
 11130                           ;interrupts.c: 73:         {;interrupts.c: 74:             g_com_timeout--;
 11131  0A64  3001               	movlw	1
 11132  0A65  02CC               	subwf	_g_com_timeout,f	;volatile
 11133  0A66  3000               	movlw	0
 11134  0A67  1C03               	skipc
 11135  0A68  03CD               	decf	_g_com_timeout+1,f	;volatile
 11136  0A69  02CD               	subwf	_g_com_timeout+1,f	;volatile
 11137  0A6A                     i1l5336:	
 11138                           
 11139                           ;interrupts.c: 76:         TMR0IF=0;
 11140  0A6A  110B               	bcf	11,2	;volatile
 11141  0A6B                     i1l5338:	
 11142                           
 11143                           ;interrupts.c: 85:     if(CCP2IF && CCP2IE)
 11144  0A6B  1C0D               	btfss	13,0	;volatile
 11145  0A6C  2A96               	goto	i1l5362
 11146  0A6D  1683               	bsf	3,5	;RP0=1, select bank1
 11147  0A6E  1C0D               	btfss	13,0	;volatile
 11148  0A6F  2A96               	goto	i1l5362
 11149                           
 11150                           ;interrupts.c: 86:     {;interrupts.c: 87:         g_reciver_ccp2_isr_fire_flag=1;
 11151  0A70  3001               	movlw	1
 11152  0A71  1283               	bcf	3,5	;RP0=0, select bank0
 11153  0A72  00A0               	movwf	??_ISR
 11154  0A73  0820               	movf	??_ISR,w
 11155  0A74  00DC               	movwf	_g_reciver_ccp2_isr_fire_flag	;volatile
 11156                           
 11157                           ;interrupts.c: 89:         if(edge_dir==0)
 11158  0A75  0862               	movf	ISR@edge_dir,w
 11159  0A76  1D03               	btfss	3,2
 11160  0A77  2A7F               	goto	i1l5350
 11161                           
 11162                           ;interrupts.c: 90:         {;interrupts.c: 91:             CCP2CONbits.CCP2M=0b0101;
 11163  0A78  081D               	movf	29,w	;volatile
 11164  0A79  39F0               	andlw	-16
 11165  0A7A  3805               	iorlw	5
 11166  0A7B  009D               	movwf	29	;volatile
 11167                           
 11168                           ;interrupts.c: 92:             edge_dir=1;
 11169  0A7C  01E2               	clrf	ISR@edge_dir
 11170  0A7D  0AE2               	incf	ISR@edge_dir,f
 11171                           
 11172                           ;interrupts.c: 94:         }else
 11173  0A7E  2A84               	goto	i1l5354
 11174  0A7F                     i1l5350:	
 11175                           
 11176                           ;interrupts.c: 95:         {;interrupts.c: 96:             CCP2CONbits.CCP2M=0b0100;
 11177  0A7F  081D               	movf	29,w	;volatile
 11178  0A80  39F0               	andlw	-16
 11179  0A81  3804               	iorlw	4
 11180  0A82  009D               	movwf	29	;volatile
 11181                           
 11182                           ;interrupts.c: 97:             edge_dir=0;
 11183  0A83  01E2               	clrf	ISR@edge_dir
 11184  0A84                     i1l5354:	
 11185                           
 11186                           ;interrupts.c: 100:         pulse_time=CCPR2;
 11187  0A84  081C               	movf	28,w	;volatile
 11188  0A85  00A5               	movwf	ISR@pulse_time+1
 11189  0A86  081B               	movf	27,w	;volatile
 11190  0A87  00A4               	movwf	ISR@pulse_time
 11191                           
 11192                           ;interrupts.c: 102:         Manchester_Decode(&edge_dir,&pulse_time);
 11193  0A88  3024               	movlw	(low (ISR@pulse_time| 0))& (0+255)
 11194  0A89  00A0               	movwf	??_ISR
 11195  0A8A  0820               	movf	??_ISR,w
 11196  0A8B  00F3               	movwf	Manchester_Decode@pulse_time
 11197  0A8C  3062               	movlw	(low (ISR@edge_dir| 0))& (0+255)
 11198  0A8D  120A  158A  25DF  120A  158A  	fcall	_Manchester_Decode
 11199                           
 11200                           ;interrupts.c: 104:         TMR1=0;
 11201  0A92  1283               	bcf	3,5	;RP0=0, select bank0
 11202  0A93  018E               	clrf	14	;volatile
 11203  0A94  018F               	clrf	15	;volatile
 11204                           
 11205                           ;interrupts.c: 105:         CCP2IF=0;
 11206  0A95  100D               	bcf	13,0	;volatile
 11207  0A96                     i1l5362:	
 11208                           
 11209                           ;interrupts.c: 114:     if(CCP1IF && CCP1IE)
 11210  0A96  1283               	bcf	3,5	;RP0=0, select bank0
 11211  0A97  1D0C               	btfss	12,2	;volatile
 11212  0A98  2AB7               	goto	i1l366
 11213  0A99  1683               	bsf	3,5	;RP0=1, select bank1
 11214  0A9A  1D0C               	btfss	12,2	;volatile
 11215  0A9B  2AB7               	goto	i1l366
 11216                           
 11217                           ;interrupts.c: 115:     {;interrupts.c: 116:         if(set_flag)
 11218  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
 11219  0A9D  0856               	movf	ISR@set_flag,w
 11220  0A9E  1903               	btfsc	3,2
 11221  0A9F  2AA6               	goto	i1l5372
 11222                           
 11223                           ;interrupts.c: 117:         {;interrupts.c: 118:             CCP1CONbits.CCP1M=0b1000;
 11224  0AA0  0817               	movf	23,w	;volatile
 11225  0AA1  39F0               	andlw	-16
 11226  0AA2  3808               	iorlw	8
 11227  0AA3  0097               	movwf	23	;volatile
 11228                           
 11229                           ;interrupts.c: 119:             set_flag=0;
 11230  0AA4  01D6               	clrf	ISR@set_flag
 11231                           
 11232                           ;interrupts.c: 120:         }else
 11233  0AA5  2AAC               	goto	i1l5376
 11234  0AA6                     i1l5372:	
 11235                           
 11236                           ;interrupts.c: 121:         {;interrupts.c: 122:             CCP1CONbits.CCP1M=0b1001;
 11237  0AA6  0817               	movf	23,w	;volatile
 11238  0AA7  39F0               	andlw	-16
 11239  0AA8  3809               	iorlw	9
 11240  0AA9  0097               	movwf	23	;volatile
 11241                           
 11242                           ;interrupts.c: 123:             set_flag=1;
 11243  0AAA  01D6               	clrf	ISR@set_flag
 11244  0AAB  0AD6               	incf	ISR@set_flag,f
 11245  0AAC                     i1l5376:	
 11246                           
 11247                           ;interrupts.c: 126:         CCPR1=g_pwm_freq;
 11248  0AAC  1683               	bsf	3,5	;RP0=1, select bank1
 11249  0AAD  0821               	movf	(_g_pwm_freq+1)^(0+128),w	;volatile
 11250  0AAE  1283               	bcf	3,5	;RP0=0, select bank0
 11251  0AAF  0096               	movwf	22	;volatile
 11252  0AB0  1683               	bsf	3,5	;RP0=1, select bank1
 11253  0AB1  0820               	movf	_g_pwm_freq^(0+128),w	;volatile
 11254  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
 11255  0AB3  0095               	movwf	21	;volatile
 11256                           
 11257                           ;interrupts.c: 127:         TMR1=0;
 11258  0AB4  018E               	clrf	14	;volatile
 11259  0AB5  018F               	clrf	15	;volatile
 11260                           
 11261                           ;interrupts.c: 128:         CCP1IF=0;
 11262  0AB6  110C               	bcf	12,2	;volatile
 11263  0AB7                     i1l366:	
 11264  0AB7  1283               	bcf	3,5	;RP0=0, select bank0
 11265  0AB8  0823               	movf	??_ISR+3,w
 11266  0AB9  008A               	movwf	10
 11267  0ABA  0822               	movf	??_ISR+2,w
 11268  0ABB  0084               	movwf	4
 11269  0ABC  0E21               	swapf	(??_ISR+1)^0,w
 11270  0ABD  0083               	movwf	3
 11271  0ABE  0EFE               	swapf	126,f
 11272  0ABF  0E7E               	swapf	126,w
 11273  0AC0  0009               	retfie
 11274  0AC1                     __end_of_ISR:	
 11275                           
 11276                           	psect	intentry
 11277  0004                     __pintentry:	
 11278                           ;incstack = 0
 11279 ;; hardware stack exceeded
 11280                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11281                           
 11282  0004                     interrupt_function:	
 11283  007E                     saved_w	set	btemp
 11284  0004  00FE               	movwf	btemp
 11285  0005  0E03               	swapf	3,w
 11286  0006  1283               	bcf	3,5	;RP0=0, select bank0
 11287  0007  1303               	bcf	3,6	;RP1=0, select bank0
 11288  0008  00A1               	movwf	??_ISR+1
 11289  0009  0804               	movf	4,w
 11290  000A  00A2               	movwf	??_ISR+2
 11291  000B  080A               	movf	10,w
 11292  000C  00A3               	movwf	??_ISR+3
 11293  000D  120A  158A  2A32   	ljmp	_ISR
 11294                           
 11295                           	psect	text55
 11296  169F                     __ptext55:	
 11297 ;; *************** function i1_Display_7Seg *****************
 11298 ;; Defined at:
 11299 ;;		line 96 in file "display-7-segment.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  text            1    wreg     PTR unsigned char 
 11302 ;;		 -> g_display_text(4), 
 11303 ;;  decimal_poin    1   11[COMMON] unsigned char 
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;  text            1   13[COMMON] PTR unsigned char 
 11306 ;;		 -> g_display_text(4), 
 11307 ;; Return value:  Size  Location     Type
 11308 ;;                  1    wreg      void 
 11309 ;; Registers used:
 11310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11311 ;; Tracked objects:
 11312 ;;		On entry : 300/0
 11313 ;;		On exit  : 300/0
 11314 ;;		Unchanged: 0/0
 11315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11316 ;;      Params:         1       0       0       0       0
 11317 ;;      Locals:         1       0       0       0       0
 11318 ;;      Temps:          1       0       0       0       0
 11319 ;;      Totals:         3       0       0       0       0
 11320 ;;Total ram usage:        3 bytes
 11321 ;; Hardware stack levels used:    1
 11322 ;; Hardware stack levels required when called:    2
 11323 ;; This function calls:
 11324 ;;		i1_One_Digit_Handler
 11325 ;; This function is called by:
 11326 ;;		_ISR
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           
 11331                           ;psect for function i1_Display_7Seg
 11332  169F                     i1_Display_7Seg:	
 11333                           
 11334                           ;incstack = 0
 11335 ;; hardware stack exceeded
 11336                           ; Regs used in i1_Display_7Seg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11337                           ;i1Display_7Seg@text stored from wreg
 11338  169F  00FD               	movwf	i1Display_7Seg@text
 11339                           
 11340                           ;display-7-segment.c: 96: void Display_7Seg(unsigned char *text, unsigned char decimal_p
      +                          oint);display-7-segment.c: 97: {;display-7-segment.c: 98:     static unsigned char enabl
      +                          e_digit=1;;display-7-segment.c: 100:     if(enable_digit<=1)
 11341  16A0  3002               	movlw	2
 11342  16A1  0263               	subwf	Display_7Seg@enable_digit,w
 11343  16A2  1803               	skipnc
 11344  16A3  2EBA               	goto	i1l5272
 11345                           
 11346                           ;display-7-segment.c: 101:     {;display-7-segment.c: 102:         if(decimal_point & 0b
      +                          1000)
 11347  16A4  1DFB               	btfss	i1Display_7Seg@decimal_point,3
 11348  16A5  2EAB               	goto	i1l5268
 11349                           
 11350                           ;display-7-segment.c: 103:         {;display-7-segment.c: 104:             One_Digit_Han
      +                          dler(*text,1,1);
 11351  16A6  01F6               	clrf	i1One_Digit_Handler@digit_number
 11352  16A7  0AF6               	incf	i1One_Digit_Handler@digit_number,f
 11353  16A8  01F7               	clrf	i1One_Digit_Handler@decimal_point
 11354  16A9  0AF7               	incf	i1One_Digit_Handler@decimal_point,f
 11355  16AA  2EAE               	goto	L11
 11356  16AB                     i1l5268:	
 11357                           ;display-7-segment.c: 105:         }else
 11358                           
 11359                           
 11360                           ;display-7-segment.c: 106:         {;display-7-segment.c: 107:             One_Digit_Han
      +                          dler(*text,1,0);
 11361  16AB  01F6               	clrf	i1One_Digit_Handler@digit_number
 11362  16AC  0AF6               	incf	i1One_Digit_Handler@digit_number,f
 11363  16AD  01F7               	clrf	i1One_Digit_Handler@decimal_point
 11364  16AE                     L11:	
 11365  16AE  087D               	movf	i1Display_7Seg@text,w
 11366  16AF  0084               	movwf	4
 11367  16B0  1383               	bcf	3,7	;select IRP bank0
 11368  16B1  0800               	movf	0,w
 11369  16B2  160A  118A  214B   	fcall	i1_One_Digit_Handler
 11370                           
 11371                           ;display-7-segment.c: 109:         enable_digit=2;
 11372  16B5  3002               	movlw	2
 11373  16B6  00FC               	movwf	??i1_Display_7Seg
 11374  16B7  087C               	movf	??i1_Display_7Seg,w
 11375  16B8  00E3               	movwf	Display_7Seg@enable_digit
 11376                           
 11377                           ;display-7-segment.c: 111:     }else if(enable_digit==2)
 11378  16B9  0008               	return
 11379  16BA                     i1l5272:	
 11380  16BA  3002               	movlw	2
 11381  16BB  0663               	xorwf	Display_7Seg@enable_digit,w
 11382  16BC  1D03               	btfss	3,2
 11383  16BD  2ED8               	goto	i1l5282
 11384                           
 11385                           ;display-7-segment.c: 112:     {;display-7-segment.c: 113:         if(decimal_point & 0b
      +                          0100)
 11386  16BE  1D7B               	btfss	i1Display_7Seg@decimal_point,2
 11387  16BF  2EC7               	goto	i1l5278
 11388                           
 11389                           ;display-7-segment.c: 114:         {;display-7-segment.c: 115:             One_Digit_Han
      +                          dler(*(text+1),2,1);
 11390  16C0  3002               	movlw	2
 11391  16C1  00FC               	movwf	??i1_Display_7Seg
 11392  16C2  087C               	movf	??i1_Display_7Seg,w
 11393  16C3  00F6               	movwf	i1One_Digit_Handler@digit_number
 11394  16C4  01F7               	clrf	i1One_Digit_Handler@decimal_point
 11395  16C5  0AF7               	incf	i1One_Digit_Handler@decimal_point,f
 11396  16C6  2ECC               	goto	L12
 11397  16C7                     i1l5278:	
 11398                           ;display-7-segment.c: 116:         }else
 11399                           
 11400                           
 11401                           ;display-7-segment.c: 117:         {;display-7-segment.c: 118:             One_Digit_Han
      +                          dler(*(text+1),2,0);
 11402  16C7  3002               	movlw	2
 11403  16C8  00FC               	movwf	??i1_Display_7Seg
 11404  16C9  087C               	movf	??i1_Display_7Seg,w
 11405  16CA  00F6               	movwf	i1One_Digit_Handler@digit_number
 11406  16CB  01F7               	clrf	i1One_Digit_Handler@decimal_point
 11407  16CC                     L12:	
 11408  16CC  0A7D               	incf	i1Display_7Seg@text,w
 11409  16CD  0084               	movwf	4
 11410  16CE  1383               	bcf	3,7	;select IRP bank0
 11411  16CF  0800               	movf	0,w
 11412  16D0  160A  118A  214B   	fcall	i1_One_Digit_Handler
 11413                           
 11414                           ;display-7-segment.c: 120:         enable_digit=3;
 11415  16D3  3003               	movlw	3
 11416  16D4  00FC               	movwf	??i1_Display_7Seg
 11417  16D5  087C               	movf	??i1_Display_7Seg,w
 11418  16D6  00E3               	movwf	Display_7Seg@enable_digit
 11419                           
 11420                           ;display-7-segment.c: 122:     }else if(enable_digit==3)
 11421  16D7  0008               	return
 11422  16D8                     i1l5282:	
 11423  16D8  3003               	movlw	3
 11424  16D9  0663               	xorwf	Display_7Seg@enable_digit,w
 11425  16DA  1D03               	btfss	3,2
 11426  16DB  2EF7               	goto	i1l5292
 11427                           
 11428                           ;display-7-segment.c: 123:     {;display-7-segment.c: 124:         if(decimal_point & 0b
      +                          0010)
 11429  16DC  1CFB               	btfss	i1Display_7Seg@decimal_point,1
 11430  16DD  2EE5               	goto	i1l5288
 11431                           
 11432                           ;display-7-segment.c: 125:         {;display-7-segment.c: 126:            One_Digit_Hand
      +                          ler(*(text+2),3,1);
 11433  16DE  3003               	movlw	3
 11434  16DF  00FC               	movwf	??i1_Display_7Seg
 11435  16E0  087C               	movf	??i1_Display_7Seg,w
 11436  16E1  00F6               	movwf	i1One_Digit_Handler@digit_number
 11437  16E2  01F7               	clrf	i1One_Digit_Handler@decimal_point
 11438  16E3  0AF7               	incf	i1One_Digit_Handler@decimal_point,f
 11439  16E4  2EEA               	goto	L13
 11440  16E5                     i1l5288:	
 11441                           ;display-7-segment.c: 127:         }else
 11442                           
 11443                           
 11444                           ;display-7-segment.c: 128:         {;display-7-segment.c: 129:            One_Digit_Hand
      +                          ler(*(text+2),3,0);
 11445  16E5  3003               	movlw	3
 11446  16E6  00FC               	movwf	??i1_Display_7Seg
 11447  16E7  087C               	movf	??i1_Display_7Seg,w
 11448  16E8  00F6               	movwf	i1One_Digit_Handler@digit_number
 11449  16E9  01F7               	clrf	i1One_Digit_Handler@decimal_point
 11450  16EA                     L13:	
 11451  16EA  087D               	movf	i1Display_7Seg@text,w
 11452  16EB  3E02               	addlw	2
 11453  16EC  0084               	movwf	4
 11454  16ED  1383               	bcf	3,7	;select IRP bank0
 11455  16EE  0800               	movf	0,w
 11456  16EF  160A  118A  214B   	fcall	i1_One_Digit_Handler
 11457                           
 11458                           ;display-7-segment.c: 131:         enable_digit=4;
 11459  16F2  3004               	movlw	4
 11460  16F3  00FC               	movwf	??i1_Display_7Seg
 11461  16F4  087C               	movf	??i1_Display_7Seg,w
 11462  16F5  00E3               	movwf	Display_7Seg@enable_digit
 11463                           
 11464                           ;display-7-segment.c: 133:     }else if(enable_digit>=4)
 11465  16F6  0008               	return
 11466  16F7                     i1l5292:	
 11467  16F7  3004               	movlw	4
 11468  16F8  0263               	subwf	Display_7Seg@enable_digit,w
 11469  16F9  1C03               	skipc
 11470  16FA  0008               	return
 11471                           
 11472                           ;display-7-segment.c: 134:     {;display-7-segment.c: 135:         if(decimal_point & 0b
      +                          0001)
 11473  16FB  1C7B               	btfss	i1Display_7Seg@decimal_point,0
 11474  16FC  2F04               	goto	i1l5298
 11475                           
 11476                           ;display-7-segment.c: 136:         {;display-7-segment.c: 137:             One_Digit_Han
      +                          dler(*(text+3),4,1);
 11477  16FD  3004               	movlw	4
 11478  16FE  00FC               	movwf	??i1_Display_7Seg
 11479  16FF  087C               	movf	??i1_Display_7Seg,w
 11480  1700  00F6               	movwf	i1One_Digit_Handler@digit_number
 11481  1701  01F7               	clrf	i1One_Digit_Handler@decimal_point
 11482  1702  0AF7               	incf	i1One_Digit_Handler@decimal_point,f
 11483  1703  2F09               	goto	L14
 11484  1704                     i1l5298:	
 11485                           ;display-7-segment.c: 138:         }else
 11486                           
 11487                           
 11488                           ;display-7-segment.c: 139:         {;display-7-segment.c: 140:             One_Digit_Han
      +                          dler(*(text+3),4,0);
 11489  1704  3004               	movlw	4
 11490  1705  00FC               	movwf	??i1_Display_7Seg
 11491  1706  087C               	movf	??i1_Display_7Seg,w
 11492  1707  00F6               	movwf	i1One_Digit_Handler@digit_number
 11493  1708  01F7               	clrf	i1One_Digit_Handler@decimal_point
 11494  1709                     L14:	
 11495  1709  087D               	movf	i1Display_7Seg@text,w
 11496  170A  3E03               	addlw	3
 11497  170B  0084               	movwf	4
 11498  170C  1383               	bcf	3,7	;select IRP bank0
 11499  170D  0800               	movf	0,w
 11500  170E  160A  118A  214B   	fcall	i1_One_Digit_Handler
 11501                           
 11502                           ;display-7-segment.c: 142:         enable_digit=1;
 11503  1711  01E3               	clrf	Display_7Seg@enable_digit
 11504  1712  0AE3               	incf	Display_7Seg@enable_digit,f
 11505  1713  0008               	return
 11506  1714                     __end_ofi1_Display_7Seg:	
 11507                           
 11508                           	psect	text56
 11509  114B                     __ptext56:	
 11510 ;; *************** function i1_One_Digit_Handler *****************
 11511 ;; Defined at:
 11512 ;;		line 147 in file "display-7-segment.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;  sign            1    wreg     unsigned char 
 11515 ;;  digit_number    1    6[COMMON] unsigned char 
 11516 ;;  decimal_poin    1    7[COMMON] unsigned char 
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;  sign            1   10[COMMON] unsigned char 
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  1    wreg      void 
 11521 ;; Registers used:
 11522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11523 ;; Tracked objects:
 11524 ;;		On entry : B00/0
 11525 ;;		On exit  : B00/0
 11526 ;;		Unchanged: 800/0
 11527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11528 ;;      Params:         2       0       0       0       0
 11529 ;;      Locals:         1       0       0       0       0
 11530 ;;      Temps:          2       0       0       0       0
 11531 ;;      Totals:         5       0       0       0       0
 11532 ;;Total ram usage:        5 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    1
 11535 ;; This function calls:
 11536 ;;		i1_Disable_All_Digits
 11537 ;;		i1_Set_Anode_Outputs
 11538 ;;		i1_Sign_Anode_Data
 11539 ;; This function is called by:
 11540 ;;		i1_Display_7Seg
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           
 11545                           ;psect for function i1_One_Digit_Handler
 11546  114B                     i1_One_Digit_Handler:	
 11547                           
 11548                           ;incstack = 0
 11549 ;; hardware stack exceeded
 11550                           ; Regs used in i1_One_Digit_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11551                           ;i1One_Digit_Handler@sign stored from wreg
 11552  114B  00FA               	movwf	i1One_Digit_Handler@sign
 11553                           
 11554                           ;display-7-segment.c: 147: void One_Digit_Handler(unsigned char sign, unsigned char digi
      +                          t_number, unsigned char decimal_point);display-7-segment.c: 148: {;display-7-segment.c: 
      +                          150:     Disable_All_Digits();
 11555  114C  160A  158A  2678  160A  118A  	fcall	i1_Disable_All_Digits
 11556                           
 11557                           ;display-7-segment.c: 151:     Set_Anode_Outputs(Sign_Anode_Data(sign),decimal_point);
 11558  1151  0877               	movf	i1One_Digit_Handler@decimal_point,w
 11559  1152  00F8               	movwf	??i1_One_Digit_Handler
 11560  1153  0878               	movf	??i1_One_Digit_Handler,w
 11561  1154  00F3               	movwf	i1Set_Anode_Outputs@decimal_point
 11562  1155  087A               	movf	i1One_Digit_Handler@sign,w
 11563  1156  120A  158A  236C  160A  118A  	fcall	i1_Sign_Anode_Data
 11564  115B  160A  118A  2504  160A  118A  	fcall	i1_Set_Anode_Outputs
 11565                           
 11566                           ;display-7-segment.c: 152:     switch (digit_number)
 11567  1160  2969               	goto	i1l4938
 11568  1161                     i1l154:	
 11569                           ;display-7-segment.c: 153:     {;display-7-segment.c: 154:         case 1 : PORTBbits.RB
      +                          7=0; break;
 11570                           
 11571  1161  1386               	bcf	6,7	;volatile
 11572  1162  0008               	return
 11573  1163                     i1l156:	
 11574                           ;display-7-segment.c: 155:         case 2 : PORTBbits.RB6=0; break;
 11575                           
 11576  1163  1306               	bcf	6,6	;volatile
 11577  1164  0008               	return
 11578  1165                     i1l157:	
 11579                           ;display-7-segment.c: 156:         case 3 : PORTBbits.RB5=0; break;
 11580                           
 11581  1165  1286               	bcf	6,5	;volatile
 11582  1166  0008               	return
 11583  1167                     i1l158:	
 11584                           ;display-7-segment.c: 157:         case 4 : PORTBbits.RB4=0; break;
 11585                           
 11586  1167  1206               	bcf	6,4	;volatile
 11587  1168  0008               	return
 11588  1169                     i1l4938:	
 11589  1169  0876               	movf	i1One_Digit_Handler@digit_number,w
 11590  116A  00F8               	movwf	??i1_One_Digit_Handler
 11591  116B  01F9               	clrf	??i1_One_Digit_Handler+1
 11592                           
 11593                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11594                           ; Switch size 1, requested type "simple"
 11595                           ; Number of cases is 1, Range of values is 0 to 0
 11596                           ; switch strategies available:
 11597                           ; Name         Instructions Cycles
 11598                           ; simple_byte            4     3 (average)
 11599                           ; direct_byte           11     8 (fixed)
 11600                           ; jumptable            260     6 (fixed)
 11601                           ;	Chosen strategy is simple_byte
 11602  116C  0879               	movf	??i1_One_Digit_Handler+1,w
 11603  116D  3A00               	xorlw	0	; case 0
 11604  116E  1903               	skipnz
 11605  116F  2971               	goto	i1l7346
 11606  1170  297F               	goto	i1l159
 11607  1171                     i1l7346:	
 11608                           
 11609                           ; Switch size 1, requested type "simple"
 11610                           ; Number of cases is 4, Range of values is 1 to 4
 11611                           ; switch strategies available:
 11612                           ; Name         Instructions Cycles
 11613                           ; simple_byte           13     7 (average)
 11614                           ; direct_byte           23    11 (fixed)
 11615                           ; jumptable            263     9 (fixed)
 11616                           ;	Chosen strategy is simple_byte
 11617  1171  0878               	movf	??i1_One_Digit_Handler,w
 11618  1172  3A01               	xorlw	1	; case 1
 11619  1173  1903               	skipnz
 11620  1174  2961               	goto	i1l154
 11621  1175  3A03               	xorlw	3	; case 2
 11622  1176  1903               	skipnz
 11623  1177  2963               	goto	i1l156
 11624  1178  3A01               	xorlw	1	; case 3
 11625  1179  1903               	skipnz
 11626  117A  2965               	goto	i1l157
 11627  117B  3A07               	xorlw	7	; case 4
 11628  117C  1903               	skipnz
 11629  117D  2967               	goto	i1l158
 11630  117E  297F               	goto	i1l159
 11631  117F                     i1l159:	
 11632  117F  0008               	return
 11633  1180                     __end_ofi1_One_Digit_Handler:	
 11634                           
 11635                           	psect	text57
 11636  0B6C                     __ptext57:	
 11637 ;; *************** function i1_Sign_Anode_Data *****************
 11638 ;; Defined at:
 11639 ;;		line 27 in file "display-7-segment.c"
 11640 ;; Parameters:    Size  Location     Type
 11641 ;;  sign            1    wreg     unsigned char 
 11642 ;; Auto vars:     Size  Location     Type
 11643 ;;  sign            1    2[COMMON] unsigned char 
 11644 ;; Return value:  Size  Location     Type
 11645 ;;                  1    wreg      unsigned char 
 11646 ;; Registers used:
 11647 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11648 ;; Tracked objects:
 11649 ;;		On entry : B00/0
 11650 ;;		On exit  : B00/0
 11651 ;;		Unchanged: B00/0
 11652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11653 ;;      Params:         0       0       0       0       0
 11654 ;;      Locals:         1       0       0       0       0
 11655 ;;      Temps:          2       0       0       0       0
 11656 ;;      Totals:         3       0       0       0       0
 11657 ;;Total ram usage:        3 bytes
 11658 ;; Hardware stack levels used:    1
 11659 ;; This function calls:
 11660 ;;		Nothing
 11661 ;; This function is called by:
 11662 ;;		i1_One_Digit_Handler
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           
 11667                           ;psect for function i1_Sign_Anode_Data
 11668  0B6C                     i1_Sign_Anode_Data:	
 11669                           
 11670                           ;incstack = 0
 11671 ;; hardware stack exceeded
 11672                           ; Regs used in i1_Sign_Anode_Data: [wreg-fsr0h+status,2+status,0]
 11673                           ;i1Sign_Anode_Data@sign stored from wreg
 11674  0B6C  00F2               	movwf	i1Sign_Anode_Data@sign
 11675                           
 11676                           ;display-7-segment.c: 27: unsigned char Sign_Anode_Data(unsigned char sign);display-7-se
      +                          gment.c: 28: {;display-7-segment.c: 29:     switch (sign)
 11677  0B6D  2BA6               	goto	i1l4668
 11678  0B6E                     i1l4482:	
 11679  0B6E  30FC               	movlw	252
 11680  0B6F  0008               	return
 11681  0B70                     i1l4486:	
 11682  0B70  3060               	movlw	96
 11683  0B71  0008               	return
 11684  0B72                     i1l4490:	
 11685  0B72  30DA               	movlw	218
 11686  0B73  0008               	return
 11687  0B74                     i1l4494:	
 11688  0B74  30F2               	movlw	242
 11689  0B75  0008               	return
 11690  0B76                     i1l4498:	
 11691  0B76  3066               	movlw	102
 11692  0B77  0008               	return
 11693  0B78                     i1l4502:	
 11694  0B78  30B6               	movlw	182
 11695  0B79  0008               	return
 11696  0B7A                     i1l4506:	
 11697  0B7A  30BE               	movlw	190
 11698  0B7B  0008               	return
 11699  0B7C                     i1l4510:	
 11700  0B7C  30E4               	movlw	228
 11701  0B7D  0008               	return
 11702  0B7E                     i1l4514:	
 11703  0B7E  30FE               	movlw	254
 11704  0B7F  0008               	return
 11705  0B80                     i1l4518:	
 11706  0B80  30F6               	movlw	246
 11707  0B81  0008               	return
 11708  0B82                     i1l4562:	
 11709  0B82  30EE               	movlw	238
 11710  0B83  0008               	return
 11711  0B84                     i1l4566:	
 11712  0B84  303E               	movlw	62
 11713  0B85  0008               	return
 11714  0B86                     i1l4570:	
 11715  0B86  309C               	movlw	156
 11716  0B87  0008               	return
 11717  0B88                     i1l4574:	
 11718  0B88  307A               	movlw	122
 11719  0B89  0008               	return
 11720  0B8A                     i1l4578:	
 11721  0B8A  309E               	movlw	158
 11722  0B8B  0008               	return
 11723  0B8C                     i1l4582:	
 11724  0B8C  308E               	movlw	142
 11725  0B8D  0008               	return
 11726  0B8E                     i1l4586:	
 11727  0B8E  30BC               	movlw	188
 11728  0B8F  0008               	return
 11729  0B90                     i1l4590:	
 11730  0B90  306E               	movlw	110
 11731  0B91  0008               	return
 11732  0B92                     i1l4598:	
 11733  0B92  3070               	movlw	112
 11734  0B93  0008               	return
 11735  0B94                     i1l4606:	
 11736  0B94  301C               	movlw	28
 11737  0B95  0008               	return
 11738  0B96                     i1l4610:	
 11739  0B96  30EC               	movlw	236
 11740  0B97  0008               	return
 11741  0B98                     i1l4614:	
 11742  0B98  302A               	movlw	42
 11743  0B99  0008               	return
 11744  0B9A                     i1l4622:	
 11745  0B9A  3073               	movlw	115
 11746  0B9B  0008               	return
 11747  0B9C                     i1l4626:	
 11748  0B9C  300A               	movlw	10
 11749  0B9D  0008               	return
 11750  0B9E                     i1l4634:	
 11751  0B9E  301E               	movlw	30
 11752  0B9F  0008               	return
 11753  0BA0                     i1l4638:	
 11754  0BA0  307C               	movlw	124
 11755  0BA1  0008               	return
 11756  0BA2                     i1l4654:	
 11757  0BA2  3076               	movlw	118
 11758  0BA3  0008               	return
 11759  0BA4                     i1l4662:	
 11760  0BA4  3000               	movlw	0
 11761  0BA5  0008               	return
 11762  0BA6                     i1l4668:	
 11763  0BA6  0872               	movf	i1Sign_Anode_Data@sign,w
 11764  0BA7  00F0               	movwf	??i1_Sign_Anode_Data
 11765  0BA8  01F1               	clrf	??i1_Sign_Anode_Data+1
 11766                           
 11767                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11768                           ; Switch size 1, requested type "simple"
 11769                           ; Number of cases is 1, Range of values is 0 to 0
 11770                           ; switch strategies available:
 11771                           ; Name         Instructions Cycles
 11772                           ; simple_byte            4     3 (average)
 11773                           ; direct_byte           11     8 (fixed)
 11774                           ; jumptable            260     6 (fixed)
 11775                           ;	Chosen strategy is simple_byte
 11776  0BA9  0871               	movf	??i1_Sign_Anode_Data+1,w
 11777  0BAA  3A00               	xorlw	0	; case 0
 11778  0BAB  1903               	skipnz
 11779  0BAC  2BAE               	goto	i1l7348
 11780  0BAD  2BA4               	goto	i1l4662
 11781  0BAE                     i1l7348:	
 11782                           
 11783                           ; Switch size 1, requested type "simple"
 11784                           ; Number of cases is 46, Range of values is 0 to 122
 11785                           ; switch strategies available:
 11786                           ; Name         Instructions Cycles
 11787                           ; simple_byte          139    70 (average)
 11788                           ; jumptable            260     6 (fixed)
 11789                           ;	Chosen strategy is simple_byte
 11790  0BAE  0870               	movf	??i1_Sign_Anode_Data,w
 11791  0BAF  3A00               	xorlw	0	; case 0
 11792  0BB0  1903               	skipnz
 11793  0BB1  2B6E               	goto	i1l4482
 11794  0BB2  3A01               	xorlw	1	; case 1
 11795  0BB3  1903               	skipnz
 11796  0BB4  2B70               	goto	i1l4486
 11797  0BB5  3A03               	xorlw	3	; case 2
 11798  0BB6  1903               	skipnz
 11799  0BB7  2B72               	goto	i1l4490
 11800  0BB8  3A01               	xorlw	1	; case 3
 11801  0BB9  1903               	skipnz
 11802  0BBA  2B74               	goto	i1l4494
 11803  0BBB  3A07               	xorlw	7	; case 4
 11804  0BBC  1903               	skipnz
 11805  0BBD  2B76               	goto	i1l4498
 11806  0BBE  3A01               	xorlw	1	; case 5
 11807  0BBF  1903               	skipnz
 11808  0BC0  2B78               	goto	i1l4502
 11809  0BC1  3A03               	xorlw	3	; case 6
 11810  0BC2  1903               	skipnz
 11811  0BC3  2B7A               	goto	i1l4506
 11812  0BC4  3A01               	xorlw	1	; case 7
 11813  0BC5  1903               	skipnz
 11814  0BC6  2B7C               	goto	i1l4510
 11815  0BC7  3A0F               	xorlw	15	; case 8
 11816  0BC8  1903               	skipnz
 11817  0BC9  2B7E               	goto	i1l4514
 11818  0BCA  3A01               	xorlw	1	; case 9
 11819  0BCB  1903               	skipnz
 11820  0BCC  2B80               	goto	i1l4518
 11821  0BCD  3A23               	xorlw	35	; case 42
 11822  0BCE  1903               	skipnz
 11823  0BCF  2BA4               	goto	i1l4662
 11824  0BD0  3A1A               	xorlw	26	; case 48
 11825  0BD1  1903               	skipnz
 11826  0BD2  2B6E               	goto	i1l4482
 11827  0BD3  3A01               	xorlw	1	; case 49
 11828  0BD4  1903               	skipnz
 11829  0BD5  2B70               	goto	i1l4486
 11830  0BD6  3A03               	xorlw	3	; case 50
 11831  0BD7  1903               	skipnz
 11832  0BD8  2B72               	goto	i1l4490
 11833  0BD9  3A01               	xorlw	1	; case 51
 11834  0BDA  1903               	skipnz
 11835  0BDB  2B74               	goto	i1l4494
 11836  0BDC  3A07               	xorlw	7	; case 52
 11837  0BDD  1903               	skipnz
 11838  0BDE  2B76               	goto	i1l4498
 11839  0BDF  3A01               	xorlw	1	; case 53
 11840  0BE0  1903               	skipnz
 11841  0BE1  2B78               	goto	i1l4502
 11842  0BE2  3A03               	xorlw	3	; case 54
 11843  0BE3  1903               	skipnz
 11844  0BE4  2B7A               	goto	i1l4506
 11845  0BE5  3A01               	xorlw	1	; case 55
 11846  0BE6  1903               	skipnz
 11847  0BE7  2B7C               	goto	i1l4510
 11848  0BE8  3A0F               	xorlw	15	; case 56
 11849  0BE9  1903               	skipnz
 11850  0BEA  2B7E               	goto	i1l4514
 11851  0BEB  3A01               	xorlw	1	; case 57
 11852  0BEC  1903               	skipnz
 11853  0BED  2B80               	goto	i1l4518
 11854  0BEE  3A58               	xorlw	88	; case 97
 11855  0BEF  1903               	skipnz
 11856  0BF0  2B82               	goto	i1l4562
 11857  0BF1  3A03               	xorlw	3	; case 98
 11858  0BF2  1903               	skipnz
 11859  0BF3  2B84               	goto	i1l4566
 11860  0BF4  3A01               	xorlw	1	; case 99
 11861  0BF5  1903               	skipnz
 11862  0BF6  2B86               	goto	i1l4570
 11863  0BF7  3A07               	xorlw	7	; case 100
 11864  0BF8  1903               	skipnz
 11865  0BF9  2B88               	goto	i1l4574
 11866  0BFA  3A01               	xorlw	1	; case 101
 11867  0BFB  1903               	skipnz
 11868  0BFC  2B8A               	goto	i1l4578
 11869  0BFD  3A03               	xorlw	3	; case 102
 11870  0BFE  1903               	skipnz
 11871  0BFF  2B8C               	goto	i1l4582
 11872  0C00  3A01               	xorlw	1	; case 103
 11873  0C01  1903               	skipnz
 11874  0C02  2B8E               	goto	i1l4586
 11875  0C03  3A0F               	xorlw	15	; case 104
 11876  0C04  1903               	skipnz
 11877  0C05  2B90               	goto	i1l4590
 11878  0C06  3A01               	xorlw	1	; case 105
 11879  0C07  1903               	skipnz
 11880  0C08  2B70               	goto	i1l4486
 11881  0C09  3A03               	xorlw	3	; case 106
 11882  0C0A  1903               	skipnz
 11883  0C0B  2B92               	goto	i1l4598
 11884  0C0C  3A01               	xorlw	1	; case 107
 11885  0C0D  1903               	skipnz
 11886  0C0E  2B90               	goto	i1l4590
 11887  0C0F  3A07               	xorlw	7	; case 108
 11888  0C10  1903               	skipnz
 11889  0C11  2B94               	goto	i1l4606
 11890  0C12  3A01               	xorlw	1	; case 109
 11891  0C13  1903               	skipnz
 11892  0C14  2B96               	goto	i1l4610
 11893  0C15  3A03               	xorlw	3	; case 110
 11894  0C16  1903               	skipnz
 11895  0C17  2B98               	goto	i1l4614
 11896  0C18  3A01               	xorlw	1	; case 111
 11897  0C19  1903               	skipnz
 11898  0C1A  2B6E               	goto	i1l4482
 11899  0C1B  3A1F               	xorlw	31	; case 112
 11900  0C1C  1903               	skipnz
 11901  0C1D  2B9A               	goto	i1l4622
 11902  0C1E  3A02               	xorlw	2	; case 114
 11903  0C1F  1903               	skipnz
 11904  0C20  2B9C               	goto	i1l4626
 11905  0C21  3A01               	xorlw	1	; case 115
 11906  0C22  1903               	skipnz
 11907  0C23  2B78               	goto	i1l4502
 11908  0C24  3A07               	xorlw	7	; case 116
 11909  0C25  1903               	skipnz
 11910  0C26  2B9E               	goto	i1l4634
 11911  0C27  3A01               	xorlw	1	; case 117
 11912  0C28  1903               	skipnz
 11913  0C29  2BA0               	goto	i1l4638
 11914  0C2A  3A03               	xorlw	3	; case 118
 11915  0C2B  1903               	skipnz
 11916  0C2C  2BA0               	goto	i1l4638
 11917  0C2D  3A01               	xorlw	1	; case 119
 11918  0C2E  1903               	skipnz
 11919  0C2F  2BA0               	goto	i1l4638
 11920  0C30  3A0F               	xorlw	15	; case 120
 11921  0C31  1903               	skipnz
 11922  0C32  2B90               	goto	i1l4590
 11923  0C33  3A01               	xorlw	1	; case 121
 11924  0C34  1903               	skipnz
 11925  0C35  2BA2               	goto	i1l4654
 11926  0C36  3A03               	xorlw	3	; case 122
 11927  0C37  1903               	skipnz
 11928  0C38  2B72               	goto	i1l4490
 11929  0C39  2BA4               	goto	i1l4662
 11930  0C3A  0008               	return
 11931  0C3B                     __end_ofi1_Sign_Anode_Data:	
 11932                           
 11933                           	psect	text58
 11934  1504                     __ptext58:	
 11935 ;; *************** function i1_Set_Anode_Outputs *****************
 11936 ;; Defined at:
 11937 ;;		line 161 in file "display-7-segment.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;  sign            1    wreg     unsigned char 
 11940 ;;  decimal_poin    1    3[COMMON] unsigned char 
 11941 ;; Auto vars:     Size  Location     Type
 11942 ;;  sign            1    5[COMMON] unsigned char 
 11943 ;; Return value:  Size  Location     Type
 11944 ;;                  1    wreg      void 
 11945 ;; Registers used:
 11946 ;;		wreg, status,2, status,0
 11947 ;; Tracked objects:
 11948 ;;		On entry : B00/0
 11949 ;;		On exit  : B00/0
 11950 ;;		Unchanged: 800/0
 11951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11952 ;;      Params:         1       0       0       0       0
 11953 ;;      Locals:         1       0       0       0       0
 11954 ;;      Temps:          1       0       0       0       0
 11955 ;;      Totals:         3       0       0       0       0
 11956 ;;Total ram usage:        3 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; This function calls:
 11959 ;;		Nothing
 11960 ;; This function is called by:
 11961 ;;		i1_One_Digit_Handler
 11962 ;; This function uses a non-reentrant model
 11963 ;;
 11964                           
 11965                           
 11966                           ;psect for function i1_Set_Anode_Outputs
 11967  1504                     i1_Set_Anode_Outputs:	
 11968                           
 11969                           ;incstack = 0
 11970 ;; hardware stack exceeded
 11971                           ; Regs used in i1_Set_Anode_Outputs: [wreg+status,2+status,0]
 11972                           ;i1Set_Anode_Outputs@sign stored from wreg
 11973  1504  00F5               	movwf	i1Set_Anode_Outputs@sign
 11974                           
 11975                           ;display-7-segment.c: 161: void Set_Anode_Outputs(unsigned char sign, unsigned char deci
      +                          mal_point);display-7-segment.c: 162: {;display-7-segment.c: 164:     if(sign>>7 & 1)
 11976  1505  0875               	movf	i1Set_Anode_Outputs@sign,w
 11977  1506  00F4               	movwf	??i1_Set_Anode_Outputs
 11978  1507  3007               	movlw	7
 11979  1508                     u403_25:	
 11980  1508  1003               	clrc
 11981  1509  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 11982  150A  3EFF               	addlw	-1
 11983  150B  1D03               	skipz
 11984  150C  2D08               	goto	u403_25
 11985  150D  1C74               	btfss	??i1_Set_Anode_Outputs,0
 11986  150E  2D11               	goto	i1l162
 11987                           
 11988                           ;display-7-segment.c: 165:     {;display-7-segment.c: 166:         PORTAbits.RA6=1;
 11989  150F  1705               	bsf	5,6	;volatile
 11990                           
 11991                           ;display-7-segment.c: 167:     }else
 11992  1510  2D12               	goto	i1l4684
 11993  1511                     i1l162:	
 11994                           
 11995                           ;display-7-segment.c: 168:     {;display-7-segment.c: 169:         PORTAbits.RA6=0;
 11996  1511  1305               	bcf	5,6	;volatile
 11997  1512                     i1l4684:	
 11998                           
 11999                           ;display-7-segment.c: 172:     if(sign>>6 & 1)
 12000  1512  0875               	movf	i1Set_Anode_Outputs@sign,w
 12001  1513  00F4               	movwf	??i1_Set_Anode_Outputs
 12002  1514  3006               	movlw	6
 12003  1515                     u405_25:	
 12004  1515  1003               	clrc
 12005  1516  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 12006  1517  3EFF               	addlw	-1
 12007  1518  1D03               	skipz
 12008  1519  2D15               	goto	u405_25
 12009  151A  1C74               	btfss	??i1_Set_Anode_Outputs,0
 12010  151B  2D1E               	goto	i1l164
 12011                           
 12012                           ;display-7-segment.c: 173:     {;display-7-segment.c: 174:         PORTAbits.RA7=1;
 12013  151C  1785               	bsf	5,7	;volatile
 12014                           
 12015                           ;display-7-segment.c: 175:     }else
 12016  151D  2D1F               	goto	i1l4688
 12017  151E                     i1l164:	
 12018                           
 12019                           ;display-7-segment.c: 176:     {;display-7-segment.c: 177:         PORTAbits.RA7=0;
 12020  151E  1385               	bcf	5,7	;volatile
 12021  151F                     i1l4688:	
 12022                           
 12023                           ;display-7-segment.c: 180:     if(sign>>5 & 1)
 12024  151F  0875               	movf	i1Set_Anode_Outputs@sign,w
 12025  1520  00F4               	movwf	??i1_Set_Anode_Outputs
 12026  1521  3005               	movlw	5
 12027  1522                     u407_25:	
 12028  1522  1003               	clrc
 12029  1523  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 12030  1524  3EFF               	addlw	-1
 12031  1525  1D03               	skipz
 12032  1526  2D22               	goto	u407_25
 12033  1527  1C74               	btfss	??i1_Set_Anode_Outputs,0
 12034  1528  2D2B               	goto	i1l166
 12035                           
 12036                           ;display-7-segment.c: 181:     {;display-7-segment.c: 182:         PORTAbits.RA5=1;
 12037  1529  1685               	bsf	5,5	;volatile
 12038                           
 12039                           ;display-7-segment.c: 183:     }else
 12040  152A  2D2C               	goto	i1l4692
 12041  152B                     i1l166:	
 12042                           
 12043                           ;display-7-segment.c: 184:     {;display-7-segment.c: 185:         PORTAbits.RA5=0;
 12044  152B  1285               	bcf	5,5	;volatile
 12045  152C                     i1l4692:	
 12046                           
 12047                           ;display-7-segment.c: 188:     if(sign>>4 & 1)
 12048  152C  0875               	movf	i1Set_Anode_Outputs@sign,w
 12049  152D  00F4               	movwf	??i1_Set_Anode_Outputs
 12050  152E  3004               	movlw	4
 12051  152F                     u409_25:	
 12052  152F  1003               	clrc
 12053  1530  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 12054  1531  3EFF               	addlw	-1
 12055  1532  1D03               	skipz
 12056  1533  2D2F               	goto	u409_25
 12057  1534  1C74               	btfss	??i1_Set_Anode_Outputs,0
 12058  1535  2D38               	goto	i1l168
 12059                           
 12060                           ;display-7-segment.c: 189:     {;display-7-segment.c: 190:         PORTAbits.RA4=1;
 12061  1536  1605               	bsf	5,4	;volatile
 12062                           
 12063                           ;display-7-segment.c: 191:     }else
 12064  1537  2D39               	goto	i1l4696
 12065  1538                     i1l168:	
 12066                           
 12067                           ;display-7-segment.c: 192:     {;display-7-segment.c: 193:         PORTAbits.RA4=0;
 12068  1538  1205               	bcf	5,4	;volatile
 12069  1539                     i1l4696:	
 12070                           
 12071                           ;display-7-segment.c: 196:     if(sign>>3 & 1)
 12072  1539  0875               	movf	i1Set_Anode_Outputs@sign,w
 12073  153A  00F4               	movwf	??i1_Set_Anode_Outputs
 12074  153B  3003               	movlw	3
 12075  153C                     u411_25:	
 12076  153C  1003               	clrc
 12077  153D  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 12078  153E  3EFF               	addlw	-1
 12079  153F  1D03               	skipz
 12080  1540  2D3C               	goto	u411_25
 12081  1541  1C74               	btfss	??i1_Set_Anode_Outputs,0
 12082  1542  2D45               	goto	i1l170
 12083                           
 12084                           ;display-7-segment.c: 197:     {;display-7-segment.c: 198:         PORTAbits.RA3=1;
 12085  1543  1585               	bsf	5,3	;volatile
 12086                           
 12087                           ;display-7-segment.c: 199:     }else
 12088  1544  2D46               	goto	i1l4700
 12089  1545                     i1l170:	
 12090                           
 12091                           ;display-7-segment.c: 200:     {;display-7-segment.c: 201:         PORTAbits.RA3=0;
 12092  1545  1185               	bcf	5,3	;volatile
 12093  1546                     i1l4700:	
 12094                           
 12095                           ;display-7-segment.c: 204:     if(sign>>2 & 1)
 12096  1546  0875               	movf	i1Set_Anode_Outputs@sign,w
 12097  1547  00F4               	movwf	??i1_Set_Anode_Outputs
 12098  1548  3002               	movlw	2
 12099  1549                     u413_25:	
 12100  1549  1003               	clrc
 12101  154A  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 12102  154B  3EFF               	addlw	-1
 12103  154C  1D03               	skipz
 12104  154D  2D49               	goto	u413_25
 12105  154E  1C74               	btfss	??i1_Set_Anode_Outputs,0
 12106  154F  2D52               	goto	i1l172
 12107                           
 12108                           ;display-7-segment.c: 205:     {;display-7-segment.c: 206:         PORTAbits.RA2=1;
 12109  1550  1505               	bsf	5,2	;volatile
 12110                           
 12111                           ;display-7-segment.c: 207:     }else
 12112  1551  2D53               	goto	i1l4704
 12113  1552                     i1l172:	
 12114                           
 12115                           ;display-7-segment.c: 208:     {;display-7-segment.c: 209:         PORTAbits.RA2=0;
 12116  1552  1105               	bcf	5,2	;volatile
 12117  1553                     i1l4704:	
 12118                           
 12119                           ;display-7-segment.c: 212:     if(sign>>1 & 1)
 12120  1553  0875               	movf	i1Set_Anode_Outputs@sign,w
 12121  1554  00F4               	movwf	??i1_Set_Anode_Outputs
 12122  1555  3001               	movlw	1
 12123  1556                     u415_25:	
 12124  1556  1003               	clrc
 12125  1557  0CF4               	rrf	??i1_Set_Anode_Outputs,f
 12126  1558  3EFF               	addlw	-1
 12127  1559  1D03               	skipz
 12128  155A  2D56               	goto	u415_25
 12129  155B  1C74               	btfss	??i1_Set_Anode_Outputs,0
 12130  155C  2D5F               	goto	i1l174
 12131                           
 12132                           ;display-7-segment.c: 213:     {;display-7-segment.c: 214:         PORTAbits.RA1=1;
 12133  155D  1485               	bsf	5,1	;volatile
 12134                           
 12135                           ;display-7-segment.c: 215:     }else
 12136  155E  2D60               	goto	i1l4708
 12137  155F                     i1l174:	
 12138                           
 12139                           ;display-7-segment.c: 216:     {;display-7-segment.c: 217:         PORTAbits.RA1=0;
 12140  155F  1085               	bcf	5,1	;volatile
 12141  1560                     i1l4708:	
 12142                           
 12143                           ;display-7-segment.c: 220:     if(decimal_point==1)
 12144  1560  0373               	decf	i1Set_Anode_Outputs@decimal_point,w
 12145  1561  1D03               	btfss	3,2
 12146  1562  2D65               	goto	i1l176
 12147                           
 12148                           ;display-7-segment.c: 221:     {;display-7-segment.c: 222:         PORTAbits.RA0=1;
 12149  1563  1405               	bsf	5,0	;volatile
 12150                           
 12151                           ;display-7-segment.c: 223:     }else
 12152  1564  0008               	return
 12153  1565                     i1l176:	
 12154                           
 12155                           ;display-7-segment.c: 224:     {;display-7-segment.c: 225:         PORTAbits.RA0=0;
 12156  1565  1005               	bcf	5,0	;volatile
 12157  1566  0008               	return
 12158  1567                     __end_ofi1_Set_Anode_Outputs:	
 12159                           
 12160                           	psect	text59
 12161  1E78                     __ptext59:	
 12162 ;; *************** function i1_Disable_All_Digits *****************
 12163 ;; Defined at:
 12164 ;;		line 86 in file "display-7-segment.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;		None
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;		None
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  1    wreg      void 
 12171 ;; Registers used:
 12172 ;;		None
 12173 ;; Tracked objects:
 12174 ;;		On entry : B00/0
 12175 ;;		On exit  : B00/0
 12176 ;;		Unchanged: 800/0
 12177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12178 ;;      Params:         0       0       0       0       0
 12179 ;;      Locals:         0       0       0       0       0
 12180 ;;      Temps:          0       0       0       0       0
 12181 ;;      Totals:         0       0       0       0       0
 12182 ;;Total ram usage:        0 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; This function calls:
 12185 ;;		Nothing
 12186 ;; This function is called by:
 12187 ;;		i1_One_Digit_Handler
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           
 12192                           ;psect for function i1_Disable_All_Digits
 12193  1E78                     i1_Disable_All_Digits:	
 12194                           
 12195                           ;display-7-segment.c: 88:     PORTBbits.RB7=1;
 12196                           
 12197                           ;incstack = 0
 12198 ;; hardware stack exceeded
 12199                           ; Regs used in i1_Disable_All_Digits: []
 12200  1E78  1786               	bsf	6,7	;volatile
 12201                           
 12202                           ;display-7-segment.c: 89:     PORTBbits.RB6=1;
 12203  1E79  1706               	bsf	6,6	;volatile
 12204                           
 12205                           ;display-7-segment.c: 90:     PORTBbits.RB5=1;
 12206  1E7A  1686               	bsf	6,5	;volatile
 12207                           
 12208                           ;display-7-segment.c: 91:     PORTBbits.RB4=1;
 12209  1E7B  1606               	bsf	6,4	;volatile
 12210  1E7C  0008               	return
 12211  1E7D                     __end_ofi1_Disable_All_Digits:	
 12212                           
 12213                           	psect	text60
 12214  0DDF                     __ptext60:	
 12215 ;; *************** function _Manchester_Decode *****************
 12216 ;; Defined at:
 12217 ;;		line 53 in file "manchester_decode.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;  edge_dir        1    wreg     PTR unsigned char 
 12220 ;;		 -> ISR@edge_dir(1), 
 12221 ;;  pulse_time      1    3[COMMON] PTR unsigned int 
 12222 ;;		 -> ISR@pulse_time(2), 
 12223 ;; Auto vars:     Size  Location     Type
 12224 ;;  edge_dir        1    8[COMMON] PTR unsigned char 
 12225 ;;		 -> ISR@edge_dir(1), 
 12226 ;; Return value:  Size  Location     Type
 12227 ;;                  1    wreg      void 
 12228 ;; Registers used:
 12229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12230 ;; Tracked objects:
 12231 ;;		On entry : 300/0
 12232 ;;		On exit  : 200/0
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12235 ;;      Params:         1       0       0       0       0
 12236 ;;      Locals:         1       0       0       0       0
 12237 ;;      Temps:          4       0       0       0       0
 12238 ;;      Totals:         6       0       0       0       0
 12239 ;;Total ram usage:        6 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:    1
 12242 ;; This function calls:
 12243 ;;		i1_Frame_Buffer
 12244 ;; This function is called by:
 12245 ;;		_ISR
 12246 ;; This function uses a non-reentrant model
 12247 ;;
 12248                           
 12249                           
 12250                           ;psect for function _Manchester_Decode
 12251  0DDF                     _Manchester_Decode:	
 12252                           
 12253                           ;incstack = 0
 12254 ;; hardware stack exceeded
 12255                           ; Regs used in _Manchester_Decode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12256                           ;Manchester_Decode@edge_dir stored from wreg
 12257  0DDF  00F8               	movwf	Manchester_Decode@edge_dir
 12258                           
 12259                           ;manchester_decode.c: 53: void Manchester_Decode(unsigned char *edge_dir, unsigned int *
      +                          pulse_time);manchester_decode.c: 54: {;manchester_decode.c: 55:     static unsigned char
      +                           decoded_byte, bit_pos, data_counter, start_data_flag;;manchester_decode.c: 56:     stat
      +                          ic unsigned char next_edge_also_T_flag,sync_flag;;manchester_decode.c: 58:  if(sync_flag
      +                          ==0)
 12260  0DE0  0853               	movf	Manchester_Decode@sync_flag,w
 12261  0DE1  1D03               	btfss	3,2
 12262  0DE2  2E0A               	goto	i1l5198
 12263                           
 12264                           ;manchester_decode.c: 59:     {;manchester_decode.c: 62:         if((*pulse_time>((80000
      +                          00/4)/300*2)*80/100) && (*pulse_time<((8000000/4)/300*2)*120/100))
 12265  0DE3  0873               	movf	Manchester_Decode@pulse_time,w
 12266  0DE4  0084               	movwf	4
 12267  0DE5  1383               	bcf	3,7	;select IRP bank0
 12268  0DE6  0800               	movf	0,w
 12269  0DE7  00F4               	movwf	??_Manchester_Decode
 12270  0DE8  0A84               	incf	4,f
 12271  0DE9  0800               	movf	0,w
 12272  0DEA  00F5               	movwf	??_Manchester_Decode+1
 12273  0DEB  3029               	movlw	41
 12274  0DEC  0275               	subwf	??_Manchester_Decode+1,w
 12275  0DED  30AA               	movlw	170
 12276  0DEE  1903               	skipnz
 12277  0DEF  0274               	subwf	??_Manchester_Decode,w
 12278  0DF0  1C03               	skipc
 12279  0DF1  0008               	return
 12280  0DF2  0873               	movf	Manchester_Decode@pulse_time,w
 12281  0DF3  0084               	movwf	4
 12282  0DF4  0800               	movf	0,w
 12283  0DF5  00F4               	movwf	??_Manchester_Decode
 12284  0DF6  0A84               	incf	4,f
 12285  0DF7  0800               	movf	0,w
 12286  0DF8  00F5               	movwf	??_Manchester_Decode+1
 12287  0DF9  303E               	movlw	62
 12288  0DFA  0275               	subwf	??_Manchester_Decode+1,w
 12289  0DFB  307E               	movlw	126
 12290  0DFC  1903               	skipnz
 12291  0DFD  0274               	subwf	??_Manchester_Decode,w
 12292  0DFE  1803               	skipnc
 12293  0DFF  0008               	return
 12294                           
 12295                           ;manchester_decode.c: 63:         {;manchester_decode.c: 64:             next_edge_also_
      +                          T_flag=0;
 12296  0E00  1683               	bsf	3,5	;RP0=1, select bank1
 12297  0E01  01A3               	clrf	Manchester_Decode@next_edge_also_T_flag^(0+128)
 12298                           
 12299                           ;manchester_decode.c: 65:             decoded_byte=0;
 12300  0E02  1283               	bcf	3,5	;RP0=0, select bank0
 12301  0E03  01E1               	clrf	Manchester_Decode@decoded_byte
 12302                           
 12303                           ;manchester_decode.c: 66:             bit_pos=0;
 12304  0E04  01D4               	clrf	Manchester_Decode@bit_pos
 12305                           
 12306                           ;manchester_decode.c: 67:             sync_flag=1;
 12307  0E05  01D3               	clrf	Manchester_Decode@sync_flag
 12308  0E06  0AD3               	incf	Manchester_Decode@sync_flag,f
 12309                           
 12310                           ;manchester_decode.c: 68:             data_counter=0;
 12311  0E07  1683               	bsf	3,5	;RP0=1, select bank1
 12312  0E08  01A5               	clrf	Manchester_Decode@data_counter^(0+128)
 12313  0E09  0008               	return
 12314  0E0A                     i1l5198:	
 12315  0E0A  0853               	movf	Manchester_Decode@sync_flag,w
 12316  0E0B  1903               	btfsc	3,2
 12317  0E0C  0008               	return
 12318                           
 12319                           ;manchester_decode.c: 78:     {;manchester_decode.c: 80:         if(next_edge_also_T_fla
      +                          g==0)
 12320  0E0D  1683               	bsf	3,5	;RP0=1, select bank1
 12321  0E0E  0823               	movf	Manchester_Decode@next_edge_also_T_flag^(0+128),w
 12322  0E0F  1D03               	btfss	3,2
 12323  0E10  2E79               	goto	i1l5224
 12324                           
 12325                           ;manchester_decode.c: 81:         {;manchester_decode.c: 82:             if((*pulse_time
      +                          >(8000000/4)/300*80/100) &&
 12326  0E11  0873               	movf	Manchester_Decode@pulse_time,w
 12327  0E12  0084               	movwf	4
 12328  0E13  1383               	bcf	3,7	;select IRP bank0
 12329  0E14  0800               	movf	0,w
 12330  0E15  00F4               	movwf	??_Manchester_Decode
 12331  0E16  0A84               	incf	4,f
 12332  0E17  0800               	movf	0,w
 12333  0E18  00F5               	movwf	??_Manchester_Decode+1
 12334  0E19  3014               	movlw	20
 12335  0E1A  0275               	subwf	??_Manchester_Decode+1,w
 12336  0E1B  30D5               	movlw	213
 12337  0E1C  1903               	skipnz
 12338  0E1D  0274               	subwf	??_Manchester_Decode,w
 12339  0E1E  1C03               	skipc
 12340  0E1F  2E31               	goto	i1l5210
 12341  0E20  0873               	movf	Manchester_Decode@pulse_time,w
 12342  0E21  0084               	movwf	4
 12343  0E22  0800               	movf	0,w
 12344  0E23  00F4               	movwf	??_Manchester_Decode
 12345  0E24  0A84               	incf	4,f
 12346  0E25  0800               	movf	0,w
 12347  0E26  00F5               	movwf	??_Manchester_Decode+1
 12348  0E27  301F               	movlw	31
 12349  0E28  0275               	subwf	??_Manchester_Decode+1,w
 12350  0E29  303F               	movlw	63
 12351  0E2A  1903               	skipnz
 12352  0E2B  0274               	subwf	??_Manchester_Decode,w
 12353  0E2C  1803               	skipnc
 12354  0E2D  2E31               	goto	i1l5210
 12355                           
 12356                           ;manchester_decode.c: 84:             {;manchester_decode.c: 85:                     nex
      +                          t_edge_also_T_flag=1;
 12357  0E2E  01A3               	clrf	Manchester_Decode@next_edge_also_T_flag^(0+128)
 12358  0E2F  0AA3               	incf	Manchester_Decode@next_edge_also_T_flag^(0+128),f
 12359                           
 12360                           ;manchester_decode.c: 86:                     return;
 12361  0E30  0008               	return
 12362  0E31                     i1l5210:	
 12363  0E31  0873               	movf	Manchester_Decode@pulse_time,w
 12364  0E32  0084               	movwf	4
 12365  0E33  0800               	movf	0,w
 12366  0E34  00F4               	movwf	??_Manchester_Decode
 12367  0E35  0A84               	incf	4,f
 12368  0E36  0800               	movf	0,w
 12369  0E37  00F5               	movwf	??_Manchester_Decode+1
 12370  0E38  3029               	movlw	41
 12371  0E39  0275               	subwf	??_Manchester_Decode+1,w
 12372  0E3A  30AA               	movlw	170
 12373  0E3B  1903               	skipnz
 12374  0E3C  0274               	subwf	??_Manchester_Decode,w
 12375  0E3D  1C03               	skipc
 12376  0E3E  2E76               	goto	i1l5220
 12377  0E3F  0873               	movf	Manchester_Decode@pulse_time,w
 12378  0E40  0084               	movwf	4
 12379  0E41  0800               	movf	0,w
 12380  0E42  00F4               	movwf	??_Manchester_Decode
 12381  0E43  0A84               	incf	4,f
 12382  0E44  0800               	movf	0,w
 12383  0E45  00F5               	movwf	??_Manchester_Decode+1
 12384  0E46  303E               	movlw	62
 12385  0E47  0275               	subwf	??_Manchester_Decode+1,w
 12386  0E48  307E               	movlw	126
 12387  0E49  1903               	skipnz
 12388  0E4A  0274               	subwf	??_Manchester_Decode,w
 12389  0E4B  1803               	skipnc
 12390  0E4C  2E76               	goto	i1l5220
 12391                           
 12392                           ;manchester_decode.c: 90:             {;manchester_decode.c: 91:                 if(*edg
      +                          e_dir==0)
 12393  0E4D  0878               	movf	Manchester_Decode@edge_dir,w
 12394  0E4E  0084               	movwf	4
 12395  0E4F  0800               	movf	0,w
 12396  0E50  1D03               	btfss	3,2
 12397  0E51  2E60               	goto	i1l5218
 12398                           
 12399                           ;manchester_decode.c: 92:                 {;manchester_decode.c: 93:                    
      +                           decoded_byte^=(0x80>>bit_pos);
 12400  0E52  1283               	bcf	3,5	;RP0=0, select bank0
 12401  0E53  0A54               	incf	Manchester_Decode@bit_pos,w
 12402  0E54  00F4               	movwf	??_Manchester_Decode
 12403  0E55  3080               	movlw	128
 12404  0E56  00F5               	movwf	??_Manchester_Decode+1
 12405  0E57  3000               	movlw	0
 12406  0E58  00F6               	movwf	??_Manchester_Decode+2
 12407  0E59  2E5D               	goto	u465_24
 12408  0E5A                     u465_25:	
 12409  0E5A  0D76               	rlf	??_Manchester_Decode+2,w
 12410  0E5B  0CF6               	rrf	??_Manchester_Decode+2,f
 12411  0E5C  0CF5               	rrf	??_Manchester_Decode+1,f
 12412  0E5D                     u465_24:	
 12413  0E5D  0BF4               	decfsz	??_Manchester_Decode,f
 12414  0E5E  2E5A               	goto	u465_25
 12415  0E5F  2E6B               	goto	L15
 12416  0E60                     i1l5218:	
 12417                           ;manchester_decode.c: 94:                 }else
 12418                           
 12419                           
 12420                           ;manchester_decode.c: 95:                 {;manchester_decode.c: 96:                    
      +                           decoded_byte^=(0x00>>bit_pos);
 12421  0E60  1283               	bcf	3,5	;RP0=0, select bank0
 12422  0E61  0A54               	incf	Manchester_Decode@bit_pos,w
 12423  0E62  00F4               	movwf	??_Manchester_Decode
 12424  0E63  01F5               	clrf	??_Manchester_Decode+1
 12425  0E64  01F6               	clrf	??_Manchester_Decode+2
 12426  0E65  2E69               	goto	u466_24
 12427  0E66                     u466_25:	
 12428  0E66  0D76               	rlf	??_Manchester_Decode+2,w
 12429  0E67  0CF6               	rrf	??_Manchester_Decode+2,f
 12430  0E68  0CF5               	rrf	??_Manchester_Decode+1,f
 12431  0E69                     u466_24:	
 12432  0E69  0BF4               	decfsz	??_Manchester_Decode,f
 12433  0E6A  2E66               	goto	u466_25
 12434  0E6B                     L15:	
 12435  0E6B  0875               	movf	??_Manchester_Decode+1,w
 12436  0E6C  00F7               	movwf	??_Manchester_Decode+3
 12437  0E6D  0877               	movf	??_Manchester_Decode+3,w
 12438  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
 12439  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
 12440  0E70  06E1               	xorwf	Manchester_Decode@decoded_byte,f
 12441                           
 12442                           ;manchester_decode.c: 98:                 bit_pos++;
 12443                           
 12444                           ;manchester_decode.c: 97:                 }
 12445  0E71  3001               	movlw	1
 12446  0E72  00F4               	movwf	??_Manchester_Decode
 12447  0E73  0874               	movf	??_Manchester_Decode,w
 12448  0E74  07D4               	addwf	Manchester_Decode@bit_pos,f
 12449                           
 12450                           ;manchester_decode.c: 100:             }else
 12451  0E75  2EC0               	goto	i1l5240
 12452  0E76                     i1l5220:	
 12453                           
 12454                           ;manchester_decode.c: 101:             {;manchester_decode.c: 103:                 sync_
      +                          flag=0;
 12455  0E76  1283               	bcf	3,5	;RP0=0, select bank0
 12456  0E77  01D3               	clrf	Manchester_Decode@sync_flag
 12457  0E78  0008               	return
 12458  0E79                     i1l5224:	
 12459                           
 12460                           ;manchester_decode.c: 108:         {;manchester_decode.c: 109:             if((*pulse_ti
      +                          me>(8000000/4)/300*80/100) &&
 12461  0E79  0873               	movf	Manchester_Decode@pulse_time,w
 12462  0E7A  0084               	movwf	4
 12463  0E7B  1383               	bcf	3,7	;select IRP bank0
 12464  0E7C  0800               	movf	0,w
 12465  0E7D  00F4               	movwf	??_Manchester_Decode
 12466  0E7E  0A84               	incf	4,f
 12467  0E7F  0800               	movf	0,w
 12468  0E80  00F5               	movwf	??_Manchester_Decode+1
 12469  0E81  3014               	movlw	20
 12470  0E82  0275               	subwf	??_Manchester_Decode+1,w
 12471  0E83  30D5               	movlw	213
 12472  0E84  1903               	skipnz
 12473  0E85  0274               	subwf	??_Manchester_Decode,w
 12474  0E86  1C03               	skipc
 12475  0E87  2E76               	goto	i1l5220
 12476  0E88  0873               	movf	Manchester_Decode@pulse_time,w
 12477  0E89  0084               	movwf	4
 12478  0E8A  0800               	movf	0,w
 12479  0E8B  00F4               	movwf	??_Manchester_Decode
 12480  0E8C  0A84               	incf	4,f
 12481  0E8D  0800               	movf	0,w
 12482  0E8E  00F5               	movwf	??_Manchester_Decode+1
 12483  0E8F  301F               	movlw	31
 12484  0E90  0275               	subwf	??_Manchester_Decode+1,w
 12485  0E91  303F               	movlw	63
 12486  0E92  1903               	skipnz
 12487  0E93  0274               	subwf	??_Manchester_Decode,w
 12488  0E94  1803               	skipnc
 12489  0E95  2E76               	goto	i1l5220
 12490                           
 12491                           ;manchester_decode.c: 111:             {;manchester_decode.c: 112:                 if(*e
      +                          dge_dir==0)
 12492  0E96  0878               	movf	Manchester_Decode@edge_dir,w
 12493  0E97  0084               	movwf	4
 12494  0E98  0800               	movf	0,w
 12495  0E99  1D03               	btfss	3,2
 12496  0E9A  2EA9               	goto	i1l5232
 12497                           
 12498                           ;manchester_decode.c: 113:                 {;manchester_decode.c: 114:                  
      +                             decoded_byte^=(0x80>>bit_pos);
 12499  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
 12500  0E9C  0A54               	incf	Manchester_Decode@bit_pos,w
 12501  0E9D  00F4               	movwf	??_Manchester_Decode
 12502  0E9E  3080               	movlw	128
 12503  0E9F  00F5               	movwf	??_Manchester_Decode+1
 12504  0EA0  3000               	movlw	0
 12505  0EA1  00F6               	movwf	??_Manchester_Decode+2
 12506  0EA2  2EA6               	goto	u470_24
 12507  0EA3                     u470_25:	
 12508  0EA3  0D76               	rlf	??_Manchester_Decode+2,w
 12509  0EA4  0CF6               	rrf	??_Manchester_Decode+2,f
 12510  0EA5  0CF5               	rrf	??_Manchester_Decode+1,f
 12511  0EA6                     u470_24:	
 12512  0EA6  0BF4               	decfsz	??_Manchester_Decode,f
 12513  0EA7  2EA3               	goto	u470_25
 12514  0EA8  2EB4               	goto	L16
 12515  0EA9                     i1l5232:	
 12516                           ;manchester_decode.c: 115:                 }else
 12517                           
 12518                           
 12519                           ;manchester_decode.c: 116:                 {;manchester_decode.c: 117:                  
      +                             decoded_byte^=(0x00>>bit_pos);
 12520  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
 12521  0EAA  0A54               	incf	Manchester_Decode@bit_pos,w
 12522  0EAB  00F4               	movwf	??_Manchester_Decode
 12523  0EAC  01F5               	clrf	??_Manchester_Decode+1
 12524  0EAD  01F6               	clrf	??_Manchester_Decode+2
 12525  0EAE  2EB2               	goto	u471_24
 12526  0EAF                     u471_25:	
 12527  0EAF  0D76               	rlf	??_Manchester_Decode+2,w
 12528  0EB0  0CF6               	rrf	??_Manchester_Decode+2,f
 12529  0EB1  0CF5               	rrf	??_Manchester_Decode+1,f
 12530  0EB2                     u471_24:	
 12531  0EB2  0BF4               	decfsz	??_Manchester_Decode,f
 12532  0EB3  2EAF               	goto	u471_25
 12533  0EB4                     L16:	
 12534  0EB4  0875               	movf	??_Manchester_Decode+1,w
 12535  0EB5  00F7               	movwf	??_Manchester_Decode+3
 12536  0EB6  0877               	movf	??_Manchester_Decode+3,w
 12537  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
 12538  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
 12539  0EB9  06E1               	xorwf	Manchester_Decode@decoded_byte,f
 12540                           
 12541                           ;manchester_decode.c: 119:                 bit_pos++;
 12542                           
 12543                           ;manchester_decode.c: 118:                 }
 12544  0EBA  3001               	movlw	1
 12545  0EBB  00F4               	movwf	??_Manchester_Decode
 12546  0EBC  0874               	movf	??_Manchester_Decode,w
 12547  0EBD  07D4               	addwf	Manchester_Decode@bit_pos,f
 12548                           
 12549                           ;manchester_decode.c: 120:                 next_edge_also_T_flag=0;
 12550  0EBE  1683               	bsf	3,5	;RP0=1, select bank1
 12551  0EBF  01A3               	clrf	Manchester_Decode@next_edge_also_T_flag^(0+128)
 12552  0EC0                     i1l5240:	
 12553                           ;manchester_decode.c: 122:             }else
 12554                           
 12555                           
 12556                           ;manchester_decode.c: 130:         if(bit_pos>7)
 12557  0EC0  3008               	movlw	8
 12558  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
 12559  0EC2  0254               	subwf	Manchester_Decode@bit_pos,w
 12560  0EC3  1C03               	skipc
 12561  0EC4  0008               	return
 12562                           
 12563                           ;manchester_decode.c: 131:         {;manchester_decode.c: 132:             if(decoded_by
      +                          te=='$')
 12564  0EC5  3024               	movlw	36
 12565  0EC6  0661               	xorwf	Manchester_Decode@decoded_byte,w
 12566  0EC7  1D03               	btfss	3,2
 12567  0EC8  2ECC               	goto	i1l5246
 12568                           
 12569                           ;manchester_decode.c: 133:             {;manchester_decode.c: 134:                 start
      +                          _data_flag=1;
 12570  0EC9  1683               	bsf	3,5	;RP0=1, select bank1
 12571  0ECA  01A4               	clrf	Manchester_Decode@start_data_flag^(0+128)
 12572  0ECB  0AA4               	incf	Manchester_Decode@start_data_flag^(0+128),f
 12573  0ECC                     i1l5246:	
 12574                           
 12575                           ;manchester_decode.c: 137:             if(start_data_flag)
 12576  0ECC  1683               	bsf	3,5	;RP0=1, select bank1
 12577  0ECD  0824               	movf	Manchester_Decode@start_data_flag^(0+128),w
 12578  0ECE  1903               	btfsc	3,2
 12579  0ECF  2EDD               	goto	i1l5252
 12580                           
 12581                           ;manchester_decode.c: 138:             {;manchester_decode.c: 140:                 Frame
      +                          _Buffer(&decoded_byte,1);
 12582  0ED0  01F0               	clrf	i1Frame_Buffer@mode
 12583  0ED1  0AF0               	incf	i1Frame_Buffer@mode,f
 12584  0ED2  3061               	movlw	(low (Manchester_Decode@decoded_byte| 0))& (0+255)
 12585  0ED3  160A  118A  2260  120A  158A  	fcall	i1_Frame_Buffer
 12586                           
 12587                           ;manchester_decode.c: 141:                 data_counter++;
 12588  0ED8  3001               	movlw	1
 12589  0ED9  00F4               	movwf	??_Manchester_Decode
 12590  0EDA  0874               	movf	??_Manchester_Decode,w
 12591  0EDB  1683               	bsf	3,5	;RP0=1, select bank1
 12592  0EDC  07A5               	addwf	Manchester_Decode@data_counter^(0+128),f
 12593  0EDD                     i1l5252:	
 12594                           
 12595                           ;manchester_decode.c: 144:             decoded_byte=0;
 12596  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
 12597  0EDE  01E1               	clrf	Manchester_Decode@decoded_byte
 12598                           
 12599                           ;manchester_decode.c: 145:             bit_pos=0;
 12600  0EDF  01D4               	clrf	Manchester_Decode@bit_pos
 12601                           
 12602                           ;manchester_decode.c: 147:             if(data_counter>=6)
 12603  0EE0  3006               	movlw	6
 12604  0EE1  1683               	bsf	3,5	;RP0=1, select bank1
 12605  0EE2  0225               	subwf	Manchester_Decode@data_counter^(0+128),w
 12606  0EE3  1C03               	skipc
 12607  0EE4  0008               	return
 12608                           
 12609                           ;manchester_decode.c: 148:             {;manchester_decode.c: 149:                 start
      +                          _data_flag=0;
 12610  0EE5  01A4               	clrf	Manchester_Decode@start_data_flag^(0+128)
 12611                           
 12612                           ;manchester_decode.c: 150:                 sync_flag=0;
 12613  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
 12614  0EE7  01D3               	clrf	Manchester_Decode@sync_flag
 12615  0EE8  0008               	return
 12616  0EE9                     __end_of_Manchester_Decode:	
 12617                           
 12618                           	psect	text61
 12619  1260                     __ptext61:	
 12620 ;; *************** function i1_Frame_Buffer *****************
 12621 ;; Defined at:
 12622 ;;		line 13 in file "circular_buffer.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;  data            1    wreg     PTR unsigned char 
 12625 ;;		 -> Frame_Decode@data(1), Manchester_Decode@decoded_byte(1), 
 12626 ;;  mode            1    0[COMMON] unsigned char 
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;  data            1    2[COMMON] PTR unsigned char 
 12629 ;;		 -> Frame_Decode@data(1), Manchester_Decode@decoded_byte(1), 
 12630 ;; Return value:  Size  Location     Type
 12631 ;;                  1    wreg      unsigned char 
 12632 ;; Registers used:
 12633 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12634 ;; Tracked objects:
 12635 ;;		On entry : 300/100
 12636 ;;		On exit  : 300/0
 12637 ;;		Unchanged: 0/0
 12638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12639 ;;      Params:         1       0       0       0       0
 12640 ;;      Locals:         1       0       0       0       0
 12641 ;;      Temps:          1       0       0       0       0
 12642 ;;      Totals:         3       0       0       0       0
 12643 ;;Total ram usage:        3 bytes
 12644 ;; Hardware stack levels used:    1
 12645 ;; This function calls:
 12646 ;;		Nothing
 12647 ;; This function is called by:
 12648 ;;		_Manchester_Decode
 12649 ;; This function uses a non-reentrant model
 12650 ;;
 12651                           
 12652                           
 12653                           ;psect for function i1_Frame_Buffer
 12654  1260                     i1_Frame_Buffer:	
 12655                           
 12656                           ;incstack = 0
 12657 ;; hardware stack exceeded
 12658                           ; Regs used in i1_Frame_Buffer: [wreg-fsr0h+status,2+status,0]
 12659                           ;i1Frame_Buffer@data stored from wreg
 12660  1260  00F2               	movwf	i1Frame_Buffer@data
 12661                           
 12662                           ;circular_buffer.c: 13: unsigned char Frame_Buffer(unsigned char *data, unsigned char mo
      +                          de);circular_buffer.c: 14: {;circular_buffer.c: 15:  static unsigned char buffer[60];;ci
      +                          rcular_buffer.c: 16:  static unsigned char read_pointer, write_pointer, write_pointer_me
      +                          m;;circular_buffer.c: 18:  if(mode==1)
 12663  1261  0370               	decf	i1Frame_Buffer@mode,w
 12664  1262  1D03               	btfss	3,2
 12665  1263  2A86               	goto	i1l4920
 12666                           
 12667                           ;circular_buffer.c: 19:  {;circular_buffer.c: 20:   write_pointer_mem=write_pointer;
 12668  1264  1283               	bcf	3,5	;RP0=0, select bank0
 12669  1265  0858               	movf	Frame_Buffer@write_pointer,w
 12670  1266  00F1               	movwf	??i1_Frame_Buffer
 12671  1267  0871               	movf	??i1_Frame_Buffer,w
 12672  1268  00D7               	movwf	Frame_Buffer@write_pointer_mem
 12673                           
 12674                           ;circular_buffer.c: 21:   write_pointer++;
 12675  1269  3001               	movlw	1
 12676  126A  00F1               	movwf	??i1_Frame_Buffer
 12677  126B  0871               	movf	??i1_Frame_Buffer,w
 12678  126C  07D8               	addwf	Frame_Buffer@write_pointer,f
 12679                           
 12680                           ;circular_buffer.c: 23:   if(write_pointer==60)
 12681  126D  303C               	movlw	60
 12682  126E  0658               	xorwf	Frame_Buffer@write_pointer,w
 12683  126F  1903               	btfsc	3,2
 12684                           
 12685                           ;circular_buffer.c: 24:   {;circular_buffer.c: 25:    write_pointer=0;
 12686  1270  01D8               	clrf	Frame_Buffer@write_pointer
 12687                           
 12688                           ;circular_buffer.c: 27:   if(write_pointer==read_pointer)
 12689  1271  0858               	movf	Frame_Buffer@write_pointer,w
 12690  1272  0659               	xorwf	Frame_Buffer@read_pointer,w
 12691  1273  1D03               	skipz
 12692  1274  2A7A               	goto	i1l4914
 12693                           
 12694                           ;circular_buffer.c: 28:   {;circular_buffer.c: 29:    write_pointer=write_pointer_mem;
 12695  1275  0857               	movf	Frame_Buffer@write_pointer_mem,w
 12696  1276  00F1               	movwf	??i1_Frame_Buffer
 12697  1277  0871               	movf	??i1_Frame_Buffer,w
 12698  1278  00D8               	movwf	Frame_Buffer@write_pointer
 12699  1279  0008               	return
 12700  127A                     i1l4914:	
 12701                           
 12702                           ;circular_buffer.c: 33:   buffer[write_pointer]=*data;
 12703  127A  0872               	movf	i1Frame_Buffer@data,w
 12704  127B  0084               	movwf	4
 12705  127C  1383               	bcf	3,7	;select IRP bank0
 12706  127D  0800               	movf	0,w
 12707  127E  00F1               	movwf	??i1_Frame_Buffer
 12708  127F  0858               	movf	Frame_Buffer@write_pointer,w
 12709  1280  3E90               	addlw	(low (Frame_Buffer@buffer| (0+256)))& (0+255)
 12710  1281  0084               	movwf	4
 12711  1282  0871               	movf	??i1_Frame_Buffer,w
 12712  1283  1783               	bsf	3,7	;select IRP bank3
 12713  1284  0080               	movwf	0
 12714  1285  0008               	return
 12715  1286                     i1l4920:	
 12716                           
 12717                           ;circular_buffer.c: 38:  {;circular_buffer.c: 39:   if(write_pointer!=read_pointer)
 12718  1286  1283               	bcf	3,5	;RP0=0, select bank0
 12719  1287  0858               	movf	Frame_Buffer@write_pointer,w
 12720  1288  0659               	xorwf	Frame_Buffer@read_pointer,w
 12721  1289  1903               	skipnz
 12722  128A  0008               	return
 12723                           
 12724                           ;circular_buffer.c: 40:   {;circular_buffer.c: 41:    read_pointer++;
 12725  128B  3001               	movlw	1
 12726  128C  00F1               	movwf	??i1_Frame_Buffer
 12727  128D  0871               	movf	??i1_Frame_Buffer,w
 12728  128E  07D9               	addwf	Frame_Buffer@read_pointer,f
 12729                           
 12730                           ;circular_buffer.c: 42:    if(read_pointer==60)
 12731  128F  303C               	movlw	60
 12732  1290  0659               	xorwf	Frame_Buffer@read_pointer,w
 12733  1291  1903               	btfsc	3,2
 12734                           
 12735                           ;circular_buffer.c: 43:    {;circular_buffer.c: 44:     read_pointer=0;
 12736  1292  01D9               	clrf	Frame_Buffer@read_pointer
 12737                           
 12738                           ;circular_buffer.c: 46:    *data=buffer[read_pointer];
 12739  1293  0859               	movf	Frame_Buffer@read_pointer,w
 12740  1294  3E90               	addlw	(low (Frame_Buffer@buffer| (0+256)))& (0+255)
 12741  1295  0084               	movwf	4
 12742  1296  1783               	bsf	3,7	;select IRP bank3
 12743  1297  0800               	movf	0,w
 12744  1298  00F1               	movwf	??i1_Frame_Buffer
 12745  1299  0872               	movf	i1Frame_Buffer@data,w
 12746  129A  0084               	movwf	4
 12747  129B  0871               	movf	??i1_Frame_Buffer,w
 12748  129C  1383               	bcf	3,7	;select IRP bank0
 12749  129D  0080               	movwf	0
 12750  129E  0008               	return
 12751  129F                     __end_ofi1_Frame_Buffer:	
 12752  007E                     btemp	set	126	;btemp
 12753  007E                     wtemp0	set	126


Data Sizes:
    Strings     35
    Constant    31
    Data        1
    BSS         155
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     44      68
    BANK1            80     20      68
    BANK3            96      0      84
    BANK2            96     25      25

Pointer List with Targets:

    Menu_Handler@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Handler@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Handler@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Handler@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Handler@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Handler@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Handler@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Handler@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Init@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Button_Init@keydef.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Menu_Set_Time@menudef.next_menu	PTR struct MenuParamStruct size(1) Largest target is 8
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Button_Handler@keydef.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    PCF8583_Set_Date_Time@time_struct_ptr	PTR struct . size(1) Largest target is 7
		 -> Menu_Set_Time@time(BANK1[7]), 

    PCF8583_Read_Time_Date@time_struct_ptr	PTR struct . size(2) Largest target is 7
		 -> Menu_Set_Time@time(BANK1[7]), main@time(BANK2[7]), 

    Send_7Seg_Text@text	PTR unsigned char  size(1) Largest target is 5
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    Read_Limit_From_EEprom@limit2.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Read_Limit_From_EEprom@limit2	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Read_Limit_From_EEprom@limit1.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Read_Limit_From_EEprom@limit1	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Write_Limit_To_EEprom@limit2.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Write_Limit_To_EEprom@limit2	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Write_Limit_To_EEprom@limit1.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Write_Limit_To_EEprom@limit1	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Handler@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK2[7]), 

    Menu_Handler@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK2[7]), 

    Menu_Handler@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK2[6]), 

    Menu_Set_Param_Time_Limit@menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Set_Param_Time_Limit@menu	PTR struct MenuParamStruct size(2) Largest target is 9
		 -> Menu_Set_Time@current_menu(BANK1[8]), NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_work_day_1(BANK3[8]), 
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Set_Time@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK2[6]), 

    Menu_Set_Time@menudef.hours_minutes_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Set_Time@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Set_Time@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Set_Time@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Set_Time@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Set_Time@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Set_Time@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Set_Time@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK2[7]), 

    Menu_Set_Time@current_menu_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Set_Time@current_menu_ptr	PTR struct MenuParamStruct size(2) Largest target is 9
		 -> Menu_Set_Time@current_menu(BANK1[8]), NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), Menu_Init@time_limit_work_day_1(BANK3[8]), 
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    current_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Show_Time@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK2[6]), 

    Show_Time@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK2[7]), 

    F1339.next_menu.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Init@menudef.hours_minutes_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Init@menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Init@menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Init@menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Menu_Init@menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Menu_Init@menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Init@menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Menu_Init@menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Menu_Init@menudef	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK2[7]), 

    F1340.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    F1339.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    F1338.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_2_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    S51MenuParamStruct$next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_1_ptr.next_menu	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> NULL(NULL[0]), Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Check_Time_Date@time_limit.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Check_Time_Date@time_limit.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    Check_Time_Date@time_limit.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    Check_Time_Date@time_limit.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Check_Time_Date@time_limit.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    Check_Time_Date@time_limit.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    Check_Time_Date@time_limit	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK2[7]), 

    Check_Time_Date@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK2[7]), 

    Check_RCV_Data@time_limit	PTR struct . size(1) Largest target is 14
		 -> main@menudef(BANK2[7]), 

    Check_RCV_Data@time	PTR struct . size(1) Largest target is 7
		 -> main@time(BANK2[7]), 

    Check_RCV_Data@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK2[5]), 

    Check_Event@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK2[5]), 

    CRC_check@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK2[5]), 

    Frame_Decode@DataRCV	PTR struct . size(1) Largest target is 5
		 -> main@data_rcv(BANK2[5]), 

    Manchester_Decode@edge_dir	PTR unsigned char  size(1) Largest target is 1
		 -> ISR@edge_dir(BANK0[1]), 

    Manchester_Decode@pulse_time	PTR unsigned int  size(1) Largest target is 2
		 -> ISR@pulse_time(BANK0[2]), 

    Button_Handler@keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK1[7]), 

    Button_Handler@keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK1[7]), 

    Button_Handler@keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    Button_Handler@keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    Button_Handler@keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    Button_Handler@keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    Button_Handler@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK2[6]), 

    Button_Init@keydef.set_down.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_up.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_right.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_time2.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_time1.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_rtc.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Button_Init@keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK1[7]), 

    Button_Init@keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK1[7]), 

    Button_Init@keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    Button_Init@keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    Button_Init@keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    Button_Init@keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    Button_Init@keydef	PTR struct . size(1) Largest target is 12
		 -> main@keydef(BANK2[6]), 

    F1309.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1308.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1307.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1306.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1305.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    F1304.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    S37$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Key_Press@button.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTB(SFR0[1]), 

    Key_Press@button	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK1[7]), Button_Init@set_up(BANK1[7]), Button_Init@set_right(BANK1[7]), Button_Init@set_time2(BANK1[7]), 
		 -> Button_Init@set_time1(BANK1[7]), Button_Init@set_rtc(BANK1[7]), 

    Display_7Seg@text	PTR unsigned char  size(1) Largest target is 4
		 -> g_display_text(BANK0[4]), 

    CRC16@data_tab_ptr	PTR unsigned char  size(1) Largest target is 5
		 -> main@data_rcv(BANK2[5]), 

    Frame_Buffer@data	PTR unsigned char  size(1) Largest target is 1
		 -> Frame_Decode@data(BANK0[1]), Manchester_Decode@decoded_byte(BANK0[1]), 

    S60$time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    menudef.time_limit_free_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    S60$time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    menudef.time_limit_free_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    S60$time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    menudef.time_limit_work_day_2_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_2(BANK3[8]), 

    S60$time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    menudef.time_limit_work_day_1_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@time_limit_work_day_1(BANK3[8]), 

    S60$year_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    menudef.year_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    S60$day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    menudef.day_month_ptr	PTR struct MenuParamStruct size(1) Largest target is 0

    S60$hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    menudef.hours_minutes_ptr	PTR struct MenuParamStruct size(1) Largest target is 9
		 -> Menu_Init@hours_minutes(BANK3[8]), 

    S44$set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK1[7]), 

    keydef.set_down	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_down(BANK1[7]), 

    S44$set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK1[7]), 

    keydef.set_up	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_up(BANK1[7]), 

    S44$set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    keydef.set_right	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_right(BANK1[7]), 

    S44$set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    keydef.set_time2	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time2(BANK1[7]), 

    S44$set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    keydef.set_time1	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_time1(BANK1[7]), 

    S44$set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 

    keydef.set_rtc	PTR struct . size(1) Largest target is 7
		 -> Button_Init@set_rtc(BANK1[7]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_Display_7Seg
    i1_Display_7Seg->i1_One_Digit_Handler
    i1_One_Digit_Handler->i1_Set_Anode_Outputs
    i1_Set_Anode_Outputs->i1_Sign_Anode_Data
    _Manchester_Decode->i1_Frame_Buffer

Critical Paths under _main in BANK0

    _main->_Check_RCV_Data
    _Menu_Init->_Read_Limit_From_EEprom
    _Menu_Handler->_Menu_Set_Time
    _Show_Time->_PCF8583_Read_Time_Date
    _Menu_Set_Time->_Menu_Set_Param_Time_Limit
    _Write_Limit_To_EEprom->_Write_EEprom
    _Read_Limit_From_EEprom->_Read_EEprom
    _PCF8583_Set_Date_Time->_DEC_2_BCD
    _DEC_2_BCD->___lbmod
    _Menu_Set_Param_Time_Limit->___awdiv
    _Button_Handler->_Key_Press
    _Check_RCV_Data->_Check_Event
    _Check_Time_Date->_PCF8583_Read_Time_Date
    _PCF8583_Read_Time_Date->_PCF8583_Read_Byte
    _PCF8583_Write_Byte->_I2C_Master_Write
    _PCF8583_Read_Byte->_I2C_Master_Read
    _BCD_2_DEC->___bmul
    _Check_Event->_Play_Ring
    _Play_Ring->_Generate_PWM
    _Wait_ms->___lmul
    _Generate_PWM->___lldiv
    _Display_7Seg->_One_Digit_Handler
    _One_Digit_Handler->_Set_Anode_Outputs
    _Set_Anode_Outputs->_Sign_Anode_Data
    _Frame_Decode->_Frame_Buffer
    _CRC_check->_CRC16

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Menu_Handler->_Menu_Set_Time

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   59251
                                             42 BANK0      2     2      0
                                              0 BANK2     25    25      0
                        _Button_Init
                     _Check_RCV_Data
                        _Global_Init
                           _I2C_Init
                     _Interrupt_Init
                       _Menu_Handler
                          _Menu_Init
 ---------------------------------------------------------------------------------
 (1) _Menu_Init                                            2     2      0     598
                                             10 BANK0      2     2      0
                 _Disable_All_Digits
             _Read_Limit_From_EEprom
 ---------------------------------------------------------------------------------
 (1) _Menu_Handler                                         5     3      2   40988
                                             36 BANK0      5     3      2
                     _Button_Handler
                      _Menu_Set_Time
                          _Show_Time
 ---------------------------------------------------------------------------------
 (2) _Show_Time                                            3     2      1   12640
                                             28 BANK0      3     2      1
                     _Button_Handler
                 _Disable_All_Digits
             _PCF8583_Read_Time_Date
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _Menu_Set_Time                                       25    23      2   26337
                                             31 BANK0      5     3      2
                                              0 BANK1     20    20      0
                     _Button_Handler
          _Menu_Set_Param_Time_Limit
             _PCF8583_Read_Time_Date
              _PCF8583_Set_Date_Time
             _Read_Limit_From_EEprom
                     _Send_7Seg_Text
              _Write_Limit_To_EEprom
 ---------------------------------------------------------------------------------
 (3) _Write_Limit_To_EEprom                                3     2      1     672
                                              8 BANK0      3     2      1
                       _Write_EEprom
 ---------------------------------------------------------------------------------
 (4) _Write_EEprom                                         2     1      1     422
                                              6 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _Read_Limit_From_EEprom                               3     2      1     407
                                              7 BANK0      3     2      1
                        _Read_EEprom
 ---------------------------------------------------------------------------------
 (3) _Read_EEprom                                          1     1      0      31
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PCF8583_Set_Date_Time                                8     8      0    5163
                                             17 BANK0      8     8      0
                          _DEC_2_BCD
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                 _PCF8583_Write_Byte
 ---------------------------------------------------------------------------------
 (4) _DEC_2_BCD                                            4     4      0    1345
                                             13 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _Menu_Set_Param_Time_Limit                           16    13      3    8582
                                             15 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              7     6      1     772
                                              6 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              5     4      1     511
                                              6 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    2413
                                              6 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2245
                                              6 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _Button_Handler                                       3     3      0    1334
                                             11 BANK0      3     3      0
                          _Key_Press
 ---------------------------------------------------------------------------------
 (4) _Key_Press                                            5     5      0     650
                                              6 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Global_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Check_RCV_Data                                       4     2      2   16639
                                             38 BANK0      4     2      2
                          _CRC_check
                        _Check_Event
                    _Check_Time_Date
                       _Frame_Decode
 ---------------------------------------------------------------------------------
 (2) _Check_Time_Date                                      8     7      1    7552
                                             28 BANK0      8     7      1
             _PCF8583_Read_Time_Date
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     676
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _PCF8583_Read_Time_Date                              13    11      2    6251
                                             15 BANK0     13    11      2
                          _BCD_2_DEC
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                  _PCF8583_Read_Byte
                 _PCF8583_Write_Byte
 ---------------------------------------------------------------------------------
 (4) _PCF8583_Write_Byte                                   4     3      1    1893
                                              8 BANK0      4     3      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _PCF8583_Read_Byte                                    4     4      0    1601
                                             11 BANK0      4     4      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2    1471
                                              6 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      5     5      0      65
                                              6 BANK0      5     5      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _BCD_2_DEC                                            4     4      0     288
                                             10 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     226
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Check_Event                                          2     2      0    6872
                                             36 BANK0      2     2      0
                       _Frame_Decode
                          _Play_Ring
                     _Send_7Seg_Text
 ---------------------------------------------------------------------------------
 (3) _Send_7Seg_Text                                       4     3      1    1452
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _Play_Ring                                            8     8      0    4061
                                             28 BANK0      8     8      0
                       _Display_7Seg
                       _Generate_PWM
                   _Init_CaptureMode
                   _Init_CompareMode
                            _Wait_ms
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     421
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _Wait_ms                                              6     4      2     437
                                             19 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     316
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Init_CompareMode                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Init_CaptureMode                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Generate_PWM                                         8     4      4     542
                                             20 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     421
                                              6 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _Display_7Seg                                         3     2      1    2491
                                             17 BANK0      3     2      1
                  _One_Digit_Handler
 ---------------------------------------------------------------------------------
 (5) _One_Digit_Handler                                    5     3      2    1902
                                             12 BANK0      5     3      2
                 _Disable_All_Digits
                  _Set_Anode_Outputs
                    _Sign_Anode_Data
 ---------------------------------------------------------------------------------
 (6) _Sign_Anode_Data                                      3     3      0      31
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _Set_Anode_Outputs                                    3     2      1     338
                                              9 BANK0      3     2      1
                    _Sign_Anode_Data (ARG)
 ---------------------------------------------------------------------------------
 (2) _Disable_All_Digits                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Frame_Decode                                         7     5      2    1044
                                              9 BANK0      7     5      2
                       _Frame_Buffer
 ---------------------------------------------------------------------------------
 (3) _Frame_Buffer                                         3     2      1     436
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _CRC_check                                            4     4      0     626
                                             16 BANK0      4     4      0
                              _CRC16
 ---------------------------------------------------------------------------------
 (3) _CRC16                                               10     8      2     429
                                              6 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _Button_Init                                          2     2      0     222
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  6     6      0    1448
                                              0 BANK0      6     6      0
                  _Manchester_Decode
                     i1_Display_7Seg
 ---------------------------------------------------------------------------------
 (8) i1_Display_7Seg                                       3     2      1     996
                                             11 COMMON     3     2      1
                i1_One_Digit_Handler
 ---------------------------------------------------------------------------------
 (9) i1_One_Digit_Handler                                  5     3      2     706
                                              6 COMMON     5     3      2
               i1_Disable_All_Digits
                i1_Set_Anode_Outputs
                  i1_Sign_Anode_Data
 ---------------------------------------------------------------------------------
 (10) i1_Sign_Anode_Data                                   3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) i1_Set_Anode_Outputs                                 3     2      1     202
                                              3 COMMON     3     2      1
                  i1_Sign_Anode_Data (ARG)
 ---------------------------------------------------------------------------------
 (10) i1_Disable_All_Digits                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Manchester_Decode                                    6     5      1     421
                                              3 COMMON     6     5      1
                     i1_Frame_Buffer
 ---------------------------------------------------------------------------------
 (9) i1_Frame_Buffer                                       3     2      1      92
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Button_Init
   _Check_RCV_Data
     _CRC_check
       _CRC16
     _Check_Event
       _Frame_Decode
         _Frame_Buffer
       _Play_Ring
         _Display_7Seg
           _One_Digit_Handler
             _Disable_All_Digits
             _Set_Anode_Outputs
               _Sign_Anode_Data (ARG)
             _Sign_Anode_Data
         _Generate_PWM
           ___lldiv
         _Init_CaptureMode
         _Init_CompareMode
         _Wait_ms
           ___lmul
         ___lwdiv
       _Send_7Seg_Text
     _Check_Time_Date
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       ___wmul
     _Frame_Decode
       _Frame_Buffer
   _Global_Init
   _I2C_Init
   _Interrupt_Init
   _Menu_Handler
     _Button_Handler
       _Key_Press
     _Menu_Set_Time
       _Button_Handler
         _Key_Press
       _Menu_Set_Param_Time_Limit
         ___awdiv
         ___awmod
         ___lbdiv
         ___lbmod
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _PCF8583_Set_Date_Time
         _DEC_2_BCD
           ___lbdiv
           ___lbmod
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _Read_Limit_From_EEprom
         _Read_EEprom
       _Send_7Seg_Text
       _Write_Limit_To_EEprom
         _Write_EEprom
     _Show_Time
       _Button_Handler
         _Key_Press
       _Disable_All_Digits
       _PCF8583_Read_Time_Date
         _BCD_2_DEC
           ___bmul
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _PCF8583_Read_Byte
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _PCF8583_Write_Byte
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       ___awdiv
       ___awmod
   _Menu_Init
     _Disable_All_Digits
     _Read_Limit_From_EEprom
       _Read_EEprom

 _ISR (ROOT)
   _Manchester_Decode
     i1_Frame_Buffer
   i1_Display_7Seg
     i1_One_Digit_Handler
       i1_Disable_All_Digits
       i1_Set_Anode_Outputs
         i1_Sign_Anode_Data (ARG)
       i1_Sign_Anode_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      54       9       87.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     19      19      11       26.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     14      44       7       85.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     103      12        0.0%
ABS                  0      0     103       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Aug 30 21:13:36 2020

                      ??_Interrupt_Init 0026                                       pc 0002  
                        ___bmul@product 0028                             __CFG_CP$OFF 0000  
                           _SSPSTATbits 0094                                      l63 1336  
                                    _RD 0C60                                      _WR 0C61  
                          ___awdiv@sign 002C                          ??_Frame_Decode 002B  
                    __size_of_DEC_2_BCD 001C                                      fsr 0004  
                   ___wmul@multiplicand 0028                           ??_Global_Init 0026  
                        ??_Frame_Buffer 0027                   _Write_Limit_To_EEprom 10E8  
             _Menu_Set_Param_Time_Limit 0035                                     l204 1E96  
                                   l170 15A8                                     l162 1574  
                                   l154 1196                                     l172 15B5  
                                   l164 1581                                     l156 1198  
                                   l157 119A                                     l174 15C2  
                                   l166 158E                                     l158 119C  
                                   l159 11B4                                     l176 15C8  
                                   l168 159B                                     l800 1F24  
                                   l488 13F9                                     l684 01EC  
                                   l892 1F5B                            __CFG_CPD$OFF 0000  
                                   _ISR 0A32                                     fsr0 0004  
                      ??_Send_7Seg_Text 0027                                     indf 0000  
                          ___awmod@sign 002C                ??_Read_Limit_From_EEprom 0028  
          __size_ofi1_One_Digit_Handler 0035                       ?_Init_CompareMode 0070  
                 __size_of_Write_EEprom 001C                            __CFG_LVP$OFF 0000  
               __end_of_Sign_Anode_Data 0D0A                                    ?_ISR 0070  
           __size_of_PCF8583_Write_Byte 002C                        ISR@display_timer 0055  
                                  l1102 1FD2                      ??_Init_CompareMode 0026  
                                  l6110 1376                                    l6102 1370  
                                  l6112 1384                                    l6120 139D  
                                  l5500 0C47                                    l6140 123A  
                                  l6060 1462                                    l6124 13A5  
                                  l6116 1392                                    l6150 125B  
                                  l6310 08AB                                    l7110 0A30  
                                  l6070 146A                                    l6054 1457  
                                  l5512 0C4D                                    l5504 0C49  
                                  l6312 0845                                    l6072 1478  
                                  l6234 1403                                    l6146 1250  
                                  l6138 122C                                    l6314 08B0  
                                  l6082 1499                                    l6402 0128  
                                  l6410 016D                                    l5620 0C69  
                                  l5612 0C67                                    l5604 0C63  
                                  l5516 0C4F                                    l5508 0C4B  
                                  l6308 0868                                    l6420 025F  
                                  l6166 1346                                    l6174 1322  
                                  l6270 143A                                    l6254 141D  
                                  l6246 140D                                    l6238 1408  
                                  l5702 15B6                                    l7222 13F0  
                                  l6086 14A1                                    l6078 148E  
                                  l6406 014B                                    l7150 06F4  
                                  l6176 135A                                    l6168 134D  
                                  l5632 0C6D                                    l5624 0C6B  
                                  l5608 0C65                                    l5560 0C51  
                                  l5480 0C3D                                    l7224 13C0  
                                  l7208 13B8                                    l6184 15DB  
                                  l6432 0349                                    l7128 17F2  
                                  l5706 15C3                                    l5810 14FB  
                                  l7090 0FDB                                    l7226 13F6  
                                  l6098 1369                                    l6426 02B5  
                                  l7234 112F                                    l6540 1F4F  
                                  l5660 0C73                                    l5652 0C71  
                                  l5636 0C6F                                    l5580 0C5B  
                                  l5572 0C57                                    l5564 0C53  
                                  l5492 0C43                                    l5484 0C3F  
                                  l6284 07E4                                    l7092 0FE5  
                                  l6516 1F53                                    l6188 15DD  
                                  l6380 00C3                                    l7180 078A  
                                  l7342 11A6                                    l5806 14EE  
                                  l6462 0526                                    l6438 03B4  
                                  l7190 07AC                                    l7166 0739  
                                  l7238 113D                                    l7344 0C7D  
                                  l5584 0C5D                                    l5576 0C59  
                                  l5568 0C55                                    l5496 0C45  
                                  l5488 0C41                                    l5728 119E  
                                  l5904 1720                                    l6608 092B  
                                  l5824 1F79                                    l6456 04C2  
                                  l6448 0436                                    l7168 073E  
                                  l7248 081C                                    l5690 158F  
                                  l5682 1575                                    l5666 0C75  
                                  l5914 173C                                    l6554 08CE  
                                  l5826 1F82                                    l6474 062C  
                                  l5596 0C61                                    l5588 0C5F  
                                  l5924 175A                                    l5908 172F  
                                  l5764 12A7                                    l5756 1FFC  
                                  l5836 1F91                                    l5844 1FBB  
                                  l6468 05BF                                    l6388 00D7  
                                  l5694 159C                                    l5686 1582  
                                  l5934 1779                                    l5918 174D  
                                  l6590 08F7                                    l6566 091F  
                                  l5782 1EDC                                    l6398 0104  
                                  l7198 07CB                                    l5872 12F8  
                                  l5880 1318                                    l5928 176C  
                                  l5768 12BD                                    l6576 08EC  
                                  l6568 08D9                                    l5882 1303  
                                  l5698 15A9                                    l5778 1ED6  
                                  l5954 0965                                    l5796 14B6  
                                  l6588 0925                                    l5972 09AB  
                                  l5964 0998                                    l5798 14C6  
                                  l6598 090A                                    l5992 10E3  
                                  _EEIF 006C                                    STR_1 1039  
                                  STR_2 1034                                    STR_3 1043  
                                  STR_4 1034                                    STR_5 103E  
                                  STR_6 1034                                    STR_7 1025  
                                  STR_8 102A                                    STR_9 102F  
                                  u5015 1585                                    u5035 1592  
                                  u5055 159F                                    u5305 14C8  
                                  u5225 12BF                                    u5075 15AC  
                                  u5315 14DD                                    u5235 12C7  
                                  u5180 1FF9                                    u5325 14EF  
                                  u5095 15B9                                    u6135 088F  
                                  u6315 029F                                    _RCEN 048B  
                                  u5285 14BA                                    u6405 050C  
                                  u6335 02FE                                    u5385 1FBE  
                                  u6425 0571                                    u5554 094C  
                                  u5635 106C                                    u5555 094A  
                                  u6355 0392                       ??_Check_Time_Date 003D  
                                  u5645 10D7                                    u5725 146D  
                                  u6445 060A                                    u6285 01B1  
                                  u7077 06CA                                    u5574 097D  
                                  u5575 097B                                    u6455 0D39  
                                  u7087 0706                                    u5745 1479  
                                  u5825 1379                                    u6385 0484  
                                  u6465 0D52                                    u7097 07BC  
                                  u5915 123B                                    u5675 1058  
                                  u5755 1485                                    u5925 1247  
                                  u6485 1F5C                                    u5765 148F  
                                  u5845 138A                                    u5685 1F05  
                                  u4975 156B                                    u5935 1251  
                                  u6495 1F63                                    u5855 1393  
                                  u4995 1578                                    u6835 0FB0  
                                  u5965 1347                                    u6845 0FC9  
                                  u5895 122F                                    u6865 0A24  
                                  u6875 0A2C                                    _TMR1 000E  
                                  _WREN 0C62                  __size_of_Menu_Set_Time 0135  
                           main@menudef 0122                            __CFG_WRT$OFF 0000  
                                  _main 0801                        __end_of_I2C_Init 1EAE  
                    __size_of_CRC_check 0021               PCF8583_Write_Byte@address 002B  
          PCF8583_Set_Date_Time@bcd_day 0036                                    btemp 007E  
          PCF8583_Set_Date_Time@bcd_min 0034            PCF8583_Set_Date_Time@bcd_hrs 0035  
          PCF8583_Set_Date_Time@bcd_sec 0033            PCF8583_Set_Date_Time@bcd_mon 0037  
          Read_Limit_From_EEprom@limit1 0029            Read_Limit_From_EEprom@limit2 0027  
                                  start 0010                           __CFG_IESO$OFF 0000  
                         ??_Read_EEprom 0026                Display_7Seg@enable_digit 0063  
                     CRC16@data_tab_ptr 002B                       ___bmul@multiplier 0029  
                         __CFG_MCLRE$ON 0000                            main@data_rcv 0110  
               __size_of_Button_Handler 0069                                   ??_ISR 0020  
                      Menu_Handler@time 0045                             _Check_Event 08B4  
                      ?_I2C_Master_Read 0070                        ?_I2C_Master_Wait 0070  
                       __end_of_Wait_ms 10E8              __end_of_Disable_All_Digits 1E82  
                      ?_I2C_Master_Stop 0070                           ??_Button_Init 0026  
                          _Write_EEprom 1F14                                   ?_main 0070  
                                 _ACKEN 048C                                   _ACKDT 048D  
                       __end_of___awdiv 14A6                         __end_of___lbdiv 1F93  
                                 _EEADR 010D                                   _CCPR1 0015  
                                 STR_10 1034                                   _EEDAT 010C  
                                 _CCPR2 001B                                   _CRC16 131E  
                         __CFG_WDTE$OFF 0000                         __end_of___awmod 13AA  
                       __end_of___lbmod 1FD8                                   _EEPGD 0C67  
                                 _ANSEL 0188                         __end_of___lldiv 1504  
                       ___awdiv@divisor 0026              __size_of_One_Digit_Handler 0035  
                       __end_of___lwdiv 1260                                   i1l170 1545  
                                 i1l162 1511                                   i1l154 1161  
                                 i1l172 1552                                   i1l164 151E  
                                 i1l156 1163                                   i1l157 1165  
                                 i1l174 155F                                   i1l166 152B  
                                 i1l158 1167                                   i1l159 117F  
                                 i1l176 1565                                   i1l168 1538  
                                 i1l356 0A4C                                   i1l366 0AB7  
                       ___awdiv@counter 002B                           ?_Menu_Handler 0044  
                                 _PORTB 0006                                   _PORTC 0007  
                 Set_Anode_Outputs@sign 002B           One_Digit_Handler@digit_number 002C  
                   ___lmul@multiplicand 002A                          __CFG_FCMEN$OFF 0000  
                   __end_of_Global_Init 1FB5                       __end_of_BCD_2_DEC 1063  
                  i1_Disable_All_Digits 1E78                      i1Display_7Seg@text 007D  
        __size_of_PCF8583_Set_Date_Time 00D5                          __CFG_BOREN$OFF 0000  
                                 pclath 000A           __end_of_PCF8583_Set_Date_Time 0DDF  
                     __end_of_DEC_2_BCD 1F14           Manchester_Decode@decoded_byte 0061  
                                 status 0003                                   wtemp0 007E  
                       ___lbdiv@divisor 0026                    __end_of_Generate_PWM 108F  
                       ___lbdiv@counter 0029                          Play_Ring@beats 1018  
                            Play_Ring@i 0043                              Play_Ring@j 0041  
                       __initialization 0013           Manchester_Decode@data_counter 00A5  
                        Play_Ring@tempo 1021                            __end_of_main 083B  
              ??_PCF8583_Read_Time_Date 0031                  ?_Write_Limit_To_EEprom 0028  
                         _Menu_Set_Time 06AD                                  CRC16@i 002D  
                                CRC16@k 002C                     __end_of_Read_EEprom 1EBA  
                  Button_Handler@keydef 002C                    Button_Handler@button 002D  
                                ??_main 004A                                  ?_CRC16 0026  
                        ??_Menu_Handler 0046                       __end_of_CRC_check 1F51  
                     ?_I2C_Master_Start 0070                    __end_of_Display_7Seg 1789  
                     ?_I2C_Master_Write 0026         __size_of_Read_Limit_From_EEprom 0035  
                   __end_of_Button_Init 0B6C                   ?i1_Disable_All_Digits 0070  
                        _g_display_text 005D                      ??_I2C_Master_Start 0026  
                    ??_I2C_Master_Write 0028                                  _CCP1IE 0462  
                                _CCP1IF 0062                                  _CCP2IE 0468  
                                _CCP2IF 0068                                  _EECON2 018D  
                      ?_Sign_Anode_Data 0070                        ___awdiv@dividend 0028  
                                _ANSELH 0189           Frame_Buffer@write_pointer_mem 0057  
                                i1l5210 0E31                                  i1l5220 0E76  
                                i1l4510 0B7C                                  i1l4502 0B78  
                                i1l5232 0EA9                                  i1l5240 0EC0  
                                i1l5224 0E79                                  i1l5218 0E60  
                                i1l4610 0B96                                  i1l4514 0B7E  
                                i1l4506 0B7A                                  i1l5252 0EDD  
                                i1l4700 1546                                  i1l5332 0A60  
                                i1l5324 0A48                                  i1l5246 0ECC  
                                i1l4622 0B9A                                  i1l4614 0B98  
                                i1l4606 0B94                                  i1l4518 0B80  
                                i1l5350 0A7F                                  i1l4704 1553  
                                i1l5272 16BA                                  i1l5336 0A6A  
                                i1l5328 0A56                                  i1l4634 0B9E  
                                i1l4626 0B9C                                  i1l4570 0B86  
                                i1l4562 0B82                                  i1l4490 0B72  
                                i1l4482 0B6E                                  i1l5282 16D8  
                                i1l5354 0A84                                  i1l5362 0A96  
                                i1l5338 0A6B                                  i1l4708 1560  
                                i1l5292 16F7                                  i1l5268 16AB  
                                i1l5372 0AA6                                  i1l5198 0E0A  
                                i1l4662 0BA4                                  i1l4654 0BA2  
                                i1l4638 0BA0                                  i1l4590 0B90  
                                i1l4582 0B8C                                  i1l4574 0B88  
                                i1l4566 0B84                                  i1l4494 0B74  
                                i1l4486 0B70                                  i1l5278 16C7  
                                i1l4920 1286                                  i1l5288 16E5  
                                i1l5376 0AAC                                  i1l4914 127A  
                                i1l4586 0B8E                                  i1l4578 0B8A  
                                i1l4498 0B76                                  i1l5298 1704  
                                i1l4692 152C                                  i1l4684 1512  
                                i1l4668 0BA6                                  i1l4598 0B92  
                                i1l4696 1539                                  i1l4688 151F  
                                i1l7346 1171                                  i1l4938 1169  
                                i1l7348 0BAE                                  u411_25 153C  
                                u403_25 1508                                  u413_25 1549  
                                u405_25 1515                                  u415_25 1556  
                                u407_25 1522                                  u409_25 152F  
                    __size_of_Key_Press 0080                                  u470_24 0EA6  
                                u470_25 0EA3                               CRC16@size 0026  
                                u471_24 0EB2                                  u471_25 0EAF  
                  __end_of_Frame_Decode 144D                                  u465_24 0E5D  
                                u465_25 0E5A                                  u466_24 0E69  
                                u466_25 0E66                                  _TMR0IE 005D  
                                _TMR0IF 005A                    __end_of_Frame_Buffer 131E  
                                _SSPADD 0093                                  _TRISA0 0428  
                                _TRISA1 0429                                  _TRISA2 042A  
                                _TRISB0 0430                                  _TRISA3 042B  
                                _TRISB1 0431                                  _TRISC0 0438  
                                _TRISA4 042C                                  _TRISB2 0432  
                                _TRISC1 0439                                  _TRISA5 042D  
                                _TRISB3 0433                                  _TRISC2 043A  
                                _TRISA6 042E                                  _TRISB4 0434  
                                _TRISC3 043B                                  _TRISA7 042F  
                                _TRISB5 0435                                  _TRISC4 043C  
                                _TRISB6 0436                                  _TRISC5 043D  
                                _TRISB7 0437                                  _TRISC6 043E  
                                _TRISC7 043F                                  _SSPBUF 0013  
                    __size_of_Menu_Init 006C                  __end_ofPlay_Ring@beats 1021  
                        __CFG_PWRTE$OFF 0000                  __end_ofPlay_Ring@tempo 1023  
                             ??_Wait_ms 0035                         Key_Press@button 002A  
                                ___bmul 1ED4                                  ___lmul 129F  
                                ___wmul 1F51                      __size_of_Play_Ring 0079  
                             ??___awdiv 002A                               ??___lbdiv 0027  
                             ??___awmod 002A                               ??___lbmod 0027  
                             ??___lldiv 002E                          ?_Menu_Set_Time 003F  
                             ??___lwdiv 002A                        ___awdiv@quotient 002D  
                       ___awmod@divisor 0026             __end_ofi1_Set_Anode_Outputs 1567  
                       ___awmod@counter 002B                             _Global_Init 1F93  
                    __size_of_Show_Time 0077                               ?_I2C_Init 0070  
                                saved_w 007E      __size_of_Menu_Set_Param_Time_Limit 0678  
                      ___lbdiv@dividend 0028         i1One_Digit_Handler@digit_number 0076  
      i1One_Digit_Handler@decimal_point 0077                       _Manchester_Decode 0DDF  
                       ___lbmod@divisor 0026                         _g_generic_timer 004E  
               __end_of__initialization 0031                Menu_Handler@check_button 0048  
                       ___lbmod@counter 002B                            BCD_2_DEC@bcd 002D  
             __size_of_Init_CaptureMode 000D                      ?_Manchester_Decode 0073  
                         __end_of_CRC16 135F                       _PCF8583_Read_Byte 11EA  
                _Read_Limit_From_EEprom 11B5                     Frame_Decode@DataRCV 002D  
                   i1_One_Digit_Handler 114B                     ___bmul@multiplicand 0026  
                 i1Sign_Anode_Data@sign 0072                             _Read_EEprom 1EAE  
                         ISR@pulse_time 0024                             ISR@edge_dir 0062  
                    ?_PCF8583_Read_Byte 0070                          __pcstackCOMMON 0070  
                        _Button_Handler 15CA                         Play_Ring@melody 1006  
                          __pidataBANK0 0003                        Menu_Init@menudef 002B  
                   ??_Manchester_Decode 0074                 __size_ofi1_Display_7Seg 0075  
       __size_of_PCF8583_Read_Time_Date 0117                        ___lbdiv@quotient 002A  
                     __end_of_Key_Press 09AD                             _Button_Init 0AC1  
                   ??_PCF8583_Read_Byte 002B                                 ??_CRC16 0028  
                       _Check_Time_Date 09AD                      Menu_Handler@keydef 0044  
                     __end_of_Menu_Init 169F                              ??_I2C_Init 0026  
                        _OPTION_REGbits 0081                    ?i1_One_Digit_Handler 0076  
                ??i1_Disable_All_Digits 0070                 __size_ofi1_Frame_Buffer 003F  
                           ISR@set_flag 0056               __end_of_Manchester_Decode 0EE9  
                     __end_of_Play_Ring 08B4                  PCF8583_Write_Byte@data 0028  
                 __size_of_Generate_PWM 002C                              __pbssBANK0 004C  
                            __pbssBANK1 00A0                              __pbssBANK3 0190  
             __end_of_PCF8583_Read_Byte 1224                    __end_of_Menu_Handler 114B  
                     __end_of_Show_Time 1800                       Read_EEprom@adress 0026  
                __end_of_Button_Handler 1633               Menu_Set_Time@current_menu 00DC  
             __size_of_Init_CompareMode 000D                              __pmaintext 0801  
                       ??_Menu_Set_Time 0041                                 ?___bmul 0026  
                               ?___lmul 0026                                 ?___wmul 0026  
                        _g_button_timer 0050                              __pintentry 0004  
                          ?_Check_Event 0070        i1Set_Anode_Outputs@decimal_point 0073  
                        ___lmul@product 002F                   __size_of_Display_7Seg 0075  
                            _g_pwm_freq 00A0                   ??i1_One_Digit_Handler 0078  
                          _Generate_PWM 1063         Check_Time_Date@current_time_min 0041  
            __end_of_PCF8583_Write_Byte 10BB                      Check_RCV_Data@time 0046  
                 __size_of_Frame_Decode 0055                   __size_of_Frame_Buffer 0040  
                               _SSPCON2 0091                      _Disable_All_Digits 1E7D  
         PCF8583_Read_Time_Date@bcd_day 0039                                 _SSPSTAT 0094  
         PCF8583_Read_Time_Date@bcd_min 0037           PCF8583_Read_Time_Date@bcd_hrs 0038  
         PCF8583_Read_Time_Date@bcd_sec 0036           PCF8583_Read_Time_Date@bcd_mon 003A  
                            __stringtab 1000                  _PCF8583_Read_Time_Date 0EE9  
                             _BCD_2_DEC 104D                 __size_of_Check_RCV_Data 004E  
               __end_ofPlay_Ring@melody 1018                     ?_Disable_All_Digits 0070  
                           Wait_ms@time 0033                Frame_Buffer@read_pointer 0059  
                             _DEC_2_BCD 1EF8                         ?_Button_Handler 0070  
                          _Display_7Seg 1714                 ??_Write_Limit_To_EEprom 0029  
                               _Wait_ms 10BB                         __size_of___bmul 0011  
               __end_of_Check_Time_Date 0A32                                 ___awdiv 144D  
                               ___lbdiv 1F72                         __size_of___lmul 003F  
                               ___awmod 135F                                 ___lbmod 1FB5  
                               ___lldiv 14A6                         __size_of___wmul 0021  
                               ___lwdiv 1224               Manchester_Decode@edge_dir 0078  
      Manchester_Decode@start_data_flag 00A4               Frame_Buffer@write_pointer 0058  
                          _Frame_Decode 13F8                                 __ptext1 1633  
                               __ptext2 1118                                 __ptext3 1789  
                               __ptext4 06AD                                 __ptext5 10E8  
                               __ptext6 1F14                                 __ptext7 11B5  
                               __ptext8 1EAE                                 __ptext9 0D0A  
                          _Frame_Buffer 12DE                    ??_Disable_All_Digits 0026  
                          __size_of_ISR 008F                               _T1CONbits 0010  
                    Send_7Seg_Text@text 0028                 __size_of_Interrupt_Init 0013  
           Manchester_Decode@pulse_time 0073                        ___awmod@dividend 0028  
                Play_Ring@MELODY_LENGTH 0040                __size_of_I2C_Master_Read 0028  
              __size_of_I2C_Master_Wait 000C                __size_of_I2C_Master_Stop 0005  
                             _CRC_check 1F30                            DEC_2_BCD@dec 0030  
                     _Set_Anode_Outputs 1567                                 clrloop0 1E8F  
            __size_of_Manchester_Decode 010A                    end_of_initialization 0031  
                    ?_Set_Anode_Outputs 0029               Display_7Seg@decimal_point 0031  
                            ?_BCD_2_DEC 0070                 __size_of_Send_7Seg_Text 001E  
            __size_of_PCF8583_Read_Byte 003A                        _Init_CaptureMode 1EBA  
                 _PCF8583_Set_Date_Time 0D0A               __size_of_I2C_Master_Start 0005  
                   ??_Set_Anode_Outputs 002A                              ?_DEC_2_BCD 0070  
             __size_of_I2C_Master_Write 0007                         ___lldiv@divisor 0026  
                       ___lldiv@counter 0033                Check_RCV_Data@time_limit 0047  
                        i1_Display_7Seg 169F         Check_Time_Date@time_limit_min_1 003D  
       Check_Time_Date@time_limit_min_2 003F                            ?_Global_Init 0070  
                             _PORTAbits 0005                               _PORTBbits 0006  
                             _PORTCbits 0007               __end_of_Set_Anode_Outputs 15CA  
                    Button_Init@set_rtc 00C9                          i1_Frame_Buffer 1260  
                      ___lbmod@dividend 002A                        Menu_Set_Time@key 00D0  
                            ?_CRC_check 0070                       __size_of_I2C_Init 000C  
                 __size_of_Menu_Handler 0033                       i1_Sign_Anode_Data 0B6C  
                           ___lbmod@rem 002C                 ?_Read_Limit_From_EEprom 0027  
                           _CCP1CONbits 0017                      ?i1_Sign_Anode_Data 0070  
                           _CCP2CONbits 001D                              main@keydef 0115  
              __size_of_Sign_Anode_Data 00CF                        _Init_CompareMode 1EC7  
                __end_ofi1_Display_7Seg 1714                            ?_Read_EEprom 0070  
                      Frame_Decode@data 002E                     ??i1_Sign_Anode_Data 0070  
                      ?_Check_Time_Date 003C                          __end_of___bmul 1EE5  
        One_Digit_Handler@decimal_point 002D             i1Display_7Seg@decimal_point 007B  
                        __end_of___lmul 12DE                          __end_of___wmul 1F72  
                   Check_Time_Date@time 0043                            ?_Button_Init 0070  
                      CRC_check@DataRCV 0033                  __end_ofi1_Frame_Buffer 129F  
                  __size_of_Check_Event 0079                            _Menu_Handler 1118  
                   start_initialization 0013                               _Key_Press 092D  
                    Frame_Buffer@buffer 0190                             __end_of_ISR 0AC1  
                         _g_com_timeout 004C            __size_ofi1_Set_Anode_Outputs 0063  
                    Write_EEprom@adress 0026                               _Menu_Init 1633  
             __end_ofi1_Sign_Anode_Data 0C3B          __end_of_Read_Limit_From_EEprom 11EA  
                           ??_BCD_2_DEC 002A                     Menu_Handler@menudef 0047  
                     ??_I2C_Master_Read 0026                  ?_PCF8583_Set_Date_Time 0070  
                     ??_I2C_Master_Wait 0026                          _Check_RCV_Data 13AA  
                     ??_I2C_Master_Stop 0026                               _Play_Ring 083B  
                              CRC16@crc 002E                __CFG_FOSC$INTRC_NOCLKOUT 0000  
                      CRC_check@crc_val 0031                             ??_DEC_2_BCD 002D  
                       Show_Time@keydef 003C                         ?i1_Display_7Seg 007B  
                              ??___bmul 0027                                ??___lmul 002E  
                             _Show_Time 1789                                ??___wmul 002A  
       PCF8583_Read_Time_Date@year_bits 0035                             __pdataBANK0 0063  
                         ?_Write_EEprom 0026                         ?i1_Frame_Buffer 0070  
                        _Interrupt_Init 1EE5              __size_of_Set_Anode_Outputs 0063  
                            ?_Key_Press 0070                               ___latbits 0002  
                         __pcstackBANK0 0020                           __pcstackBANK1 00D0  
                         __pcstackBANK2 0110   Menu_Set_Param_Time_Limit@check_button 0031  
               ?_PCF8583_Read_Time_Date 002F                             ??_CRC_check 0030  
 Menu_Set_Param_Time_Limit@change_digit 0052                              ?_Menu_Init 0070  
        Menu_Init@time_limit_work_day_1 01D4          Menu_Init@time_limit_work_day_2 01CC  
         __size_ofi1_Disable_All_Digits 0005                        Frame_Buffer@data 0028  
                      Frame_Buffer@mode 0026          Set_Anode_Outputs@decimal_point 0029  
                __end_of_Check_RCV_Data 13F8                        ??_Button_Handler 002B  
                        _Send_7Seg_Text 07E2                           Show_Time@time 003E  
            ?_Menu_Set_Param_Time_Limit 002F                              ?_Play_Ring 0070  
                Menu_Init@hours_minutes 01DC                      _PCF8583_Write_Byte 108F  
                      _I2C_Master_Start 1E82                        _I2C_Master_Write 1E87  
                      ___lwdiv@dividend 0028                                ?_Wait_ms 0033  
                      Generate_PWM@freq 0034                              ?_Show_Time 003C  
                   ?_PCF8583_Write_Byte 0028                                ?___awdiv 0026  
                              ?___lbdiv 0026          __size_of_Write_Limit_To_EEprom 0030  
                              ?___awmod 0026                                ?___lbmod 0026  
                              ?___lldiv 0026           __end_of_Write_Limit_To_EEprom 1118  
                 __end_of_Menu_Set_Time 07E2                                ?___lwdiv 0026  
                       Send_7Seg_Text@i 0029             __end_ofi1_One_Digit_Handler 1180  
                     ??_Sign_Anode_Data 0026           Menu_Set_Param_Time_Limit@flag 00A2  
                        ??_Write_EEprom 0027           Menu_Set_Param_Time_Limit@menu 002F  
                  I2C_Master_Write@data 0026                  __end_of_Interrupt_Init 1EF8  
                             __pstrings 1000                      Check_Event@DataRCV 0045  
              __end_of_Init_CaptureMode 1EC7                          __size_of_CRC16 0041  
Manchester_Decode@next_edge_also_T_flag 00A3                    __size_of_Global_Init 0022  
        __end_of_PCF8583_Read_Time_Date 1000                                _I2C_Init 1EA2  
           Send_7Seg_Text@decimal_point 0026                 i1One_Digit_Handler@sign 007A  
                    _g_display_controll 005B                        ___lwdiv@quotient 002C  
                  ??_PCF8583_Write_Byte 0029              __size_ofi1_Sign_Anode_Data 00CF  
                __end_of_Send_7Seg_Text 0800                         ?_Check_RCV_Data 0046  
                     interrupt_function 0004                          ___wmul@product 002A  
     __end_of_Menu_Set_Param_Time_Limit 06AD                               clear_ram0 1E8E  
                              _PIE2bits 008D                    __size_of_Read_EEprom 000C  
           Write_Limit_To_EEprom@limit1 002A             Write_Limit_To_EEprom@limit2 0028  
                     Button_Init@keydef 0027                       Button_Init@set_up 00AD  
                       ?_Interrupt_Init 0070                             __stringbase 1005  
                     ___wmul@multiplier 0026             __size_of_Disable_All_Digits 0005  
                  __size_of_Button_Init 00AB                             ??_Key_Press 0026  
              __end_of_Init_CompareMode 1ED4                             ??_Menu_Init 002A  
                   I2C_Master_Read@data 0029                       ___lmul@multiplier 0026  
                       ?_Send_7Seg_Text 0026              PCF8583_Read_Time_Date@year 003B  
                        CRC16@generator 1023                             ??_Play_Ring 003C  
          _g_reciver_ccp2_isr_fire_flag 005C                     Sign_Anode_Data@sign 0028  
                   i1_Set_Anode_Outputs 1504                             ??_Show_Time 003D  
                      __size_of_Wait_ms 002D                        __size_of___awdiv 0059  
                      __size_of___lbdiv 0021                        __size_of___awmod 004B  
                      __size_of___lbmod 0023                        __size_of___lldiv 005E  
                      __size_of___lwdiv 003C           Menu_Set_Time@current_menu_ptr 00D2  
                    __end_of__stringtab 1006               Check_Time_Date@time_limit 003C  
                    i1Frame_Buffer@data 0072                      i1Frame_Buffer@mode 0070  
                       _I2C_Master_Read 1FD8                         _I2C_Master_Wait 1E96  
                       _I2C_Master_Stop 1048                         ___lwdiv@divisor 0026  
                  ?i1_Set_Anode_Outputs 0073                         ___lwdiv@counter 002B  
              PCF8583_Read_Byte@address 002D                                __ptext10 1EF8  
                              __ptext11 0035                                __ptext20 1F93  
                              __ptext12 1FB5                                __ptext21 13AA  
                              __ptext13 1F72                                __ptext30 1FD8  
                              __ptext22 09AD                                __ptext14 135F  
                              __ptext31 1E96                                __ptext23 1F51  
                              __ptext15 144D                                __ptext40 1EC7  
                              __ptext32 104D                                __ptext24 0EE9  
                              __ptext16 15CA                                __ptext41 1EBA  
                              __ptext33 1ED4                                __ptext25 108F  
                              __ptext17 092D                                __ptext50 12DE  
                              __ptext42 1063                                __ptext34 08B4  
                              __ptext26 11EA                                __ptext18 1EE5  
                              __ptext51 1F30                                __ptext43 14A6  
                              __ptext35 07E2                                __ptext27 1E87  
                              __ptext19 1EA2                                __ptext60 0DDF  
                              __ptext52 131E                                __ptext44 1714  
                              __ptext36 083B                                __ptext28 1048  
                              __ptext61 1260                                __ptext53 0AC1  
                              __ptext45 1180                                __ptext37 1224  
                              __ptext29 1E82                                __ptext54 0A32  
                              __ptext46 0C3B                                __ptext38 10BB  
                              __ptext55 169F                                __ptext47 1567  
                              __ptext39 129F                                __ptext56 114B  
                              __ptext48 1E7D                                __ptext57 0B6C  
                              __ptext49 13F8                                __ptext58 1504  
                              __ptext59 1E78                  __end_ofCRC16@generator 1025  
                     __CFG_BOR4V$BOR40V 0000                 ??_PCF8583_Set_Date_Time 0031  
                 One_Digit_Handler@sign 0030                  Menu_Set_Time@menu_type 0040  
                  __end_of_Write_EEprom 1F30                        ??i1_Display_7Seg 007C  
                         __size_of_main 003A                         _g_decimal_point 005A  
                      ??i1_Frame_Buffer 0071                           ??_Check_Event 0044  
                 Check_RCV_Data@DataRCV 0049                                main@time 011B  
                    I2C_Master_Read@ack 0028                           ?_Generate_PWM 0034  
                      Write_EEprom@data 0027                __end_of_I2C_Master_Start 1E87  
              __end_of_I2C_Master_Write 1E8E                              _INTCONbits 000B  
              __size_of_Check_Time_Date 0085   PCF8583_Read_Time_Date@time_struct_ptr 002F  
                     _One_Digit_Handler 1180                   ??i1_Set_Anode_Outputs 0074  
                    ?_One_Digit_Handler 002C                                intlevel1 0000  
              Manchester_Decode@bit_pos 0054                        ___lldiv@dividend 002A  
           ??_Menu_Set_Param_Time_Limit 0032                     ??_One_Digit_Handler 002E  
                       _Sign_Anode_Data 0C3B                        Display_7Seg@text 0033  
                             stringcode 1000                 PCF8583_Read_Byte@retval 002E  
                            _OSCCONbits 008F                           ?_Display_7Seg 0031  
             Menu_Set_Time@check_button 00D1              Manchester_Decode@sync_flag 0053  
          __end_ofi1_Disable_All_Digits 1E7D                           Frame_Decode@i 002F  
               __end_of_I2C_Master_Read 2000                 __end_of_I2C_Master_Wait 1EA2  
               __end_of_I2C_Master_Stop 104D                           ?_Frame_Decode 0029  
               i1Set_Anode_Outputs@sign 0075                           ?_Frame_Buffer 0026  
                        ??_Generate_PWM 0038    PCF8583_Set_Date_Time@time_struct_ptr 0038  
             __end_of_One_Digit_Handler 11B5                       ?_Init_CaptureMode 0070  
                      ___lldiv@quotient 002F                     __end_of_Check_Event 092D  
                  Menu_Set_Time@menudef 00D4                        ??_Check_RCV_Data 0048  
                              stringdir 1000                                stringtab 1000  
                    ??_Init_CaptureMode 0026                             _SSPCON2bits 0091  
                  Button_Init@set_time1 00C2                    Button_Init@set_time2 00BB  
                  Button_Init@set_right 00B4                     Menu_Set_Time@keydef 003F  
                   Button_Init@set_down 00A6                              _SSPCONbits 0014  
                        ??_Display_7Seg 0032                       Menu_Set_Time@time 00D5  
                    __size_of_BCD_2_DEC 0016  
