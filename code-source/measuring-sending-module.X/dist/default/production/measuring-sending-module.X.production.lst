

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Aug 30 21:22:54 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F819
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F819 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0094                     	;# 
    97  009E                     	;# 
    98  009F                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  010E                     	;# 
   102  010F                     	;# 
   103  018C                     	;# 
   104  018D                     	;# 
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  0081                     	;# 
   131  0085                     	;# 
   132  0086                     	;# 
   133  008C                     	;# 
   134  008D                     	;# 
   135  008E                     	;# 
   136  008F                     	;# 
   137  0090                     	;# 
   138  0092                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  010F                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  0000                     	;# 
   194  0001                     	;# 
   195  0002                     	;# 
   196  0003                     	;# 
   197  0004                     	;# 
   198  0005                     	;# 
   199  0006                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000E                     	;# 
   206  000F                     	;# 
   207  0010                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0013                     	;# 
   211  0014                     	;# 
   212  0015                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  001E                     	;# 
   217  001F                     	;# 
   218  0081                     	;# 
   219  0085                     	;# 
   220  0086                     	;# 
   221  008C                     	;# 
   222  008D                     	;# 
   223  008E                     	;# 
   224  008F                     	;# 
   225  0090                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0094                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  000A                     	;# 
   245  000B                     	;# 
   246  000C                     	;# 
   247  000D                     	;# 
   248  000E                     	;# 
   249  000E                     	;# 
   250  000F                     	;# 
   251  0010                     	;# 
   252  0011                     	;# 
   253  0012                     	;# 
   254  0013                     	;# 
   255  0014                     	;# 
   256  0015                     	;# 
   257  0015                     	;# 
   258  0016                     	;# 
   259  0017                     	;# 
   260  001E                     	;# 
   261  001F                     	;# 
   262  0081                     	;# 
   263  0085                     	;# 
   264  0086                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0092                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  000E                     	;# 
   294  000F                     	;# 
   295  0010                     	;# 
   296  0011                     	;# 
   297  0012                     	;# 
   298  0013                     	;# 
   299  0014                     	;# 
   300  0015                     	;# 
   301  0015                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  001E                     	;# 
   305  001F                     	;# 
   306  0081                     	;# 
   307  0085                     	;# 
   308  0086                     	;# 
   309  008C                     	;# 
   310  008D                     	;# 
   311  008E                     	;# 
   312  008F                     	;# 
   313  0090                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  009E                     	;# 
   318  009F                     	;# 
   319  010C                     	;# 
   320  010D                     	;# 
   321  010E                     	;# 
   322  010F                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  000A                     	;# 
   333  000B                     	;# 
   334  000C                     	;# 
   335  000D                     	;# 
   336  000E                     	;# 
   337  000E                     	;# 
   338  000F                     	;# 
   339  0010                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0013                     	;# 
   343  0014                     	;# 
   344  0015                     	;# 
   345  0015                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  001E                     	;# 
   349  001F                     	;# 
   350  0081                     	;# 
   351  0085                     	;# 
   352  0086                     	;# 
   353  008C                     	;# 
   354  008D                     	;# 
   355  008E                     	;# 
   356  008F                     	;# 
   357  0090                     	;# 
   358  0092                     	;# 
   359  0093                     	;# 
   360  0094                     	;# 
   361  009E                     	;# 
   362  009F                     	;# 
   363  010C                     	;# 
   364  010D                     	;# 
   365  010E                     	;# 
   366  010F                     	;# 
   367  018C                     	;# 
   368  018D                     	;# 
   369                           
   370                           	psect	strings
   371  015E                     __pstrings:	
   372  015E                     stringtab:	
   373  015E                     __stringtab:	
   374  015E                     stringcode:	
   375                           ;	String table - string pointers are 1 byte each
   376                           
   377  015E                     stringdir:	
   378  015E  3001               	movlw	high stringdir
   379  015F  008A               	movwf	10
   380  0160  0804               	movf	4,w
   381  0161  0A84               	incf	4,f
   382  0162  0782               	addwf	2,f
   383  0163                     __stringbase:	
   384  0163  3400               	retlw	0
   385  0164                     __end_of__stringtab:	
   386  0164                     CRC16@generator:	
   387  0164  3421               	retlw	33
   388  0165  3410               	retlw	16
   389  0166                     __end_ofCRC16@generator:	
   390  0166                     InterruptConfig@k_baud_rate:	
   391  0166  342C               	retlw	44
   392  0167  3401               	retlw	1
   393  0168  3400               	retlw	0
   394  0169  3400               	retlw	0
   395  016A                     __end_ofInterruptConfig@k_baud_rate:	
   396  000E                     _TMR1	set	14
   397  0015                     _CCPR1	set	21
   398  000C                     _PIR1bits	set	12
   399  000B                     _INTCONbits	set	11
   400  0017                     _CCP1CONbits	set	23
   401  0012                     _T2CONbits	set	18
   402  0010                     _T1CONbits	set	16
   403  0006                     _PORTBbits	set	6
   404  0005                     _PORTAbits	set	5
   405  0061                     _TMR2IF	set	97
   406  008C                     _PIE1bits	set	140
   407  0081                     _OPTION_REGbits	set	129
   408  009F                     _ADCON1bits	set	159
   409  008F                     _OSCCONbits	set	143
   410  0461                     _TMR2IE	set	1121
   411  0435                     _TRISB5	set	1077
   412  0434                     _TRISB4	set	1076
   413  0433                     _TRISB3	set	1075
   414  0432                     _TRISB2	set	1074
   415  0431                     _TRISB1	set	1073
   416  0430                     _TRISB0	set	1072
   417  042F                     _TRISA7	set	1071
   418  042E                     _TRISA6	set	1070
   419  042C                     _TRISA4	set	1068
   420  042B                     _TRISA3	set	1067
   421  042A                     _TRISA2	set	1066
   422  0429                     _TRISA1	set	1065
   423  0428                     _TRISA0	set	1064
   424                           
   425                           ; #config settings
   426  0000                     
   427                           	psect	cinit
   428  000B                     start_initialization:	
   429  000B                     __initialization:	
   430                           
   431                           ; Clear objects allocated to COMMON
   432  000B  01FB               	clrf	__pbssCOMMON& (0+127)
   433  000C                     end_of_initialization:	
   434                           ;End of C runtime variable initialization code
   435                           
   436  000C                     __end_of__initialization:	
   437  000C  0183               	clrf	3
   438  000D  299E               	ljmp	_main	;jump to C main() function
   439                           
   440                           	psect	bssCOMMON
   441  007B                     __pbssCOMMON:	
   442  007B                     _g_key_timer:	
   443  007B                     	ds	1
   444                           
   445                           	psect	cstackCOMMON
   446  0070                     __pcstackCOMMON:	
   447  0070                     ?_LineState:	
   448  0070                     ?_CheckGateCloseSwitch:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?_DebounceWait:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ?_GateStartHighTime:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ?_GlobalInits:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ?_InterruptConfig:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ?_ISR:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     ??_ISR:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ?_main:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ?_WaitManchesterT:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ?_ManchesterSendOne:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0070                     ?_ManchesterSendZero:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0070                     ?_SendFrame:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0070                     ?_CheckInputState:	
   485                           ; 1 bytes @ 0x0
   486                           
   487                           
   488                           ; 1 bytes @ 0x0
   489  0070                     	ds	2
   490  0072                     ??_DebounceWait:	
   491  0072                     ??_GateStartHighTime:	
   492                           ; 1 bytes @ 0x2
   493                           
   494  0072                     ??_GlobalInits:	
   495                           ; 1 bytes @ 0x2
   496                           
   497  0072                     ??_InterruptConfig:	
   498                           ; 1 bytes @ 0x2
   499                           
   500  0072                     ??_WaitManchesterT:	
   501                           ; 1 bytes @ 0x2
   502                           
   503  0072                     ??_ManchesterSendOne:	
   504                           ; 1 bytes @ 0x2
   505                           
   506  0072                     ??_ManchesterSendZero:	
   507                           ; 1 bytes @ 0x2
   508                           
   509  0072                     ?_ManchesteEncode:	
   510                           ; 1 bytes @ 0x2
   511                           
   512  0072                     ?_CRC16:	
   513                           ; 1 bytes @ 0x2
   514                           
   515  0072                     CRC16@size:	
   516                           ; 2 bytes @ 0x2
   517                           
   518  0072                     ManchesteEncode@data_lenght:	
   519                           ; 1 bytes @ 0x2
   520                           
   521                           
   522                           ; 1 bytes @ 0x2
   523  0072                     	ds	1
   524  0073                     ??_CheckGateCloseSwitch:	
   525  0073                     ??_ManchesteEncode:	
   526                           ; 1 bytes @ 0x3
   527                           
   528  0073                     ??_CheckInputState:	
   529                           ; 1 bytes @ 0x3
   530                           
   531  0073                     CheckInputState@input:	
   532                           ; 1 bytes @ 0x3
   533                           
   534                           
   535                           ; 1 bytes @ 0x3
   536  0073                     	ds	1
   537  0074                     ??_CRC16:	
   538                           
   539                           ; 1 bytes @ 0x4
   540  0074                     	ds	2
   541  0076                     ManchesteEncode@data_to_send:	
   542                           
   543                           ; 1 bytes @ 0x6
   544  0076                     	ds	1
   545  0077                     ManchesteEncode@data_loop:	
   546                           
   547                           ; 1 bytes @ 0x7
   548  0077                     	ds	1
   549  0078                     ManchesteEncode@bit_loop:	
   550                           
   551                           ; 1 bytes @ 0x8
   552  0078                     	ds	1
   553  0079                     ??_SendFrame:	
   554                           
   555                           ; 1 bytes @ 0x9
   556  0079                     	ds	1
   557  007A                     ??_LineState:	
   558                           
   559                           ; 1 bytes @ 0xA
   560  007A                     	ds	1
   561  007B                     ??_main:	
   562                           
   563                           	psect	cstackBANK0
   564  0020                     __pcstackBANK0:	
   565                           ; 1 bytes @ 0xB
   566                           
   567  0020                     CRC16@data_tab_ptr:	
   568                           
   569                           ; 1 bytes @ 0x0
   570  0020                     	ds	1
   571  0021                     CRC16@k:	
   572                           
   573                           ; 1 bytes @ 0x1
   574  0021                     	ds	1
   575  0022                     CRC16@i:	
   576                           
   577                           ; 1 bytes @ 0x2
   578  0022                     	ds	1
   579  0023                     CRC16@crc:	
   580                           
   581                           ; 2 bytes @ 0x3
   582  0023                     	ds	2
   583  0025                     SendFrame@data_table:	
   584                           
   585                           ; 10 bytes @ 0x5
   586  0025                     	ds	10
   587  002F                     SendFrame@crc_val:	
   588                           
   589                           ; 2 bytes @ 0xF
   590  002F                     	ds	2
   591  0031                     SendFrame@i:	
   592                           
   593                           ; 1 bytes @ 0x11
   594  0031                     	ds	1
   595  0032                     SendFrame@j:	
   596                           
   597                           ; 1 bytes @ 0x12
   598  0032                     	ds	1
   599  0033                     SendFrame@type:	
   600                           
   601                           ; 1 bytes @ 0x13
   602  0033                     	ds	1
   603                           
   604                           	psect	maintext
   605  019E                     __pmaintext:	
   606 ;;
   607 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   608 ;;
   609 ;; *************** function _main *****************
   610 ;; Defined at:
   611 ;;		line 18 in file "main.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;		None
   614 ;; Auto vars:     Size  Location     Type
   615 ;;		None
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : B00/0
   622 ;;		On exit  : 300/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   625 ;;      Params:         0       0       0       0
   626 ;;      Locals:         0       0       0       0
   627 ;;      Temps:          0       0       0       0
   628 ;;      Totals:         0       0       0       0
   629 ;;Total ram usage:        0 bytes
   630 ;; Hardware stack levels required when called:    6
   631 ;; This function calls:
   632 ;;		_CheckGateCloseSwitch
   633 ;;		_GlobalInits
   634 ;;		_InterruptConfig
   635 ;;		_LineState
   636 ;; This function is called by:
   637 ;;		Startup code after reset
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           
   642                           ;psect for function _main
   643  019E                     _main:	
   644                           
   645                           ;main.c: 20:     GlobalInits();
   646                           
   647                           ;incstack = 0
   648                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   649  019E  2132               	fcall	_GlobalInits
   650                           
   651                           ;main.c: 21:     InterruptConfig();
   652  019F  2112               	fcall	_InterruptConfig
   653  01A0                     l96:	
   654                           ;main.c: 23:     while(1)
   655                           
   656  01A0  0064               	clrwdt	;# 
   657                           
   658                           ;main.c: 26:         LineState();
   659  01A1  20F2               	fcall	_LineState
   660                           
   661                           ;main.c: 27:         CheckGateCloseSwitch();
   662  01A2  2176               	fcall	_CheckGateCloseSwitch
   663  01A3  29A0               	goto	l96
   664  01A4                     __end_of_main:	
   665                           
   666                           	psect	text1
   667  00F2                     __ptext1:	
   668 ;; *************** function _LineState *****************
   669 ;; Defined at:
   670 ;;		line 40 in file "input_handler.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 200/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   684 ;;      Params:         0       0       0       0
   685 ;;      Locals:         0       0       0       0
   686 ;;      Temps:          1       0       0       0
   687 ;;      Totals:         1       0       0       0
   688 ;;Total ram usage:        1 bytes
   689 ;; Hardware stack levels used:    1
   690 ;; Hardware stack levels required when called:    5
   691 ;; This function calls:
   692 ;;		_CheckInputState
   693 ;;		_SendFrame
   694 ;; This function is called by:
   695 ;;		_main
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           
   700                           ;psect for function _LineState
   701  00F2                     _LineState:	
   702                           
   703                           ;input_handler.c: 43:     if(CheckInputState(PORTAbits.RA4)==1)
   704                           
   705                           ;incstack = 0
   706                           ; Regs used in _LineState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   707  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   708  00F3  1303               	bcf	3,6	;RP1=0, select bank0
   709  00F4  0E05               	swapf	5,w	;volatile
   710  00F5  3901               	andlw	1
   711  00F6  216A               	fcall	_CheckInputState
   712  00F7  3A01               	xorlw	1
   713  00F8  1D03               	skipz
   714  00F9  28FD               	goto	l1252
   715                           
   716                           ;input_handler.c: 44:     {;input_handler.c: 45:          SendFrame(1);
   717  00FA  3001               	movlw	1
   718  00FB  200E               	fcall	_SendFrame
   719                           
   720                           ;input_handler.c: 47:     }else if(CheckInputState(PORTAbits.RA3)==1)
   721  00FC  0008               	return
   722  00FD                     l1252:	
   723  00FD  0C05               	rrf	5,w	;volatile
   724  00FE  00FA               	movwf	??_LineState
   725  00FF  0CFA               	rrf	??_LineState,f
   726  0100  0C7A               	rrf	??_LineState,w
   727  0101  3901               	andlw	1
   728  0102  216A               	fcall	_CheckInputState
   729  0103  3A01               	xorlw	1
   730  0104  1D03               	skipz
   731  0105  2909               	goto	l1256
   732                           
   733                           ;input_handler.c: 48:     {;input_handler.c: 49:         SendFrame(0);
   734  0106  3000               	movlw	0
   735  0107  200E               	fcall	_SendFrame
   736                           
   737                           ;input_handler.c: 51:     }else if(CheckInputState(PORTBbits.RB0)==1)
   738  0108  0008               	return
   739  0109                     l1256:	
   740  0109  0806               	movf	6,w	;volatile
   741  010A  3901               	andlw	1
   742  010B  216A               	fcall	_CheckInputState
   743  010C  3A01               	xorlw	1
   744  010D  1D03               	skipz
   745  010E  0008               	return
   746                           
   747                           ;input_handler.c: 52:     {;input_handler.c: 53:         SendFrame(2);
   748  010F  3002               	movlw	2
   749  0110  200E               	fcall	_SendFrame
   750  0111  0008               	return
   751  0112                     __end_of_LineState:	
   752                           
   753                           	psect	text2
   754  000E                     __ptext2:	
   755 ;; *************** function _SendFrame *****************
   756 ;; Defined at:
   757 ;;		line 71 in file "manchester_encode.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;  type            1    wreg     unsigned char 
   760 ;; Auto vars:     Size  Location     Type
   761 ;;  type            1   19[BANK0 ] unsigned char 
   762 ;;  data_table     10    5[BANK0 ] unsigned char [10]
   763 ;;  crc_val         2   15[BANK0 ] unsigned int 
   764 ;;  j               1   18[BANK0 ] unsigned char 
   765 ;;  i               1   17[BANK0 ] unsigned char 
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 300/0
   772 ;;		On exit  : 300/100
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   775 ;;      Params:         0       0       0       0
   776 ;;      Locals:         0      15       0       0
   777 ;;      Temps:          1       0       0       0
   778 ;;      Totals:         1      15       0       0
   779 ;;Total ram usage:       16 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    4
   782 ;; This function calls:
   783 ;;		_CRC16
   784 ;;		_ManchesteEncode
   785 ;;		_WaitManchesterT
   786 ;; This function is called by:
   787 ;;		_LineState
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           
   792                           ;psect for function _SendFrame
   793  000E                     _SendFrame:	
   794                           
   795                           ;incstack = 0
   796                           ; Regs used in _SendFrame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   797                           ;SendFrame@type stored from wreg
   798  000E  00B3               	movwf	SendFrame@type
   799                           
   800                           ;manchester_encode.c: 71: void SendFrame(unsigned char type);manchester_encode.c: 72: {;
      +                          manchester_encode.c: 74:     unsigned char data_table[6 +4];;manchester_encode.c: 77:  d
      +                          ata_table[0]=0xFE;
   801  000F  30FE               	movlw	254
   802  0010  00F9               	movwf	??_SendFrame
   803  0011  0879               	movf	??_SendFrame,w
   804  0012  00A5               	movwf	SendFrame@data_table
   805                           
   806                           ;manchester_encode.c: 78:     data_table[1]=0xFE;
   807  0013  30FE               	movlw	254
   808  0014  00F9               	movwf	??_SendFrame
   809  0015  0879               	movf	??_SendFrame,w
   810  0016  00A6               	movwf	SendFrame@data_table+1
   811                           
   812                           ;manchester_encode.c: 79:     data_table[2]=0xFE;
   813  0017  30FE               	movlw	254
   814  0018  00F9               	movwf	??_SendFrame
   815  0019  0879               	movf	??_SendFrame,w
   816  001A  00A7               	movwf	SendFrame@data_table+2
   817                           
   818                           ;manchester_encode.c: 80:     data_table[3]=0xFE;
   819  001B  30FE               	movlw	254
   820  001C  00F9               	movwf	??_SendFrame
   821  001D  0879               	movf	??_SendFrame,w
   822  001E  00A8               	movwf	SendFrame@data_table+3
   823                           
   824                           ;manchester_encode.c: 82:  data_table[4]='$';
   825  001F  3024               	movlw	36
   826  0020  00F9               	movwf	??_SendFrame
   827  0021  0879               	movf	??_SendFrame,w
   828  0022  00A9               	movwf	SendFrame@data_table+4
   829                           
   830                           ;manchester_encode.c: 84:     if(type==1)
   831  0023  0333               	decf	SendFrame@type,w
   832  0024  1D03               	btfss	3,2
   833  0025  2828               	goto	l1202
   834                           
   835                           ;manchester_encode.c: 85:     {;manchester_encode.c: 86:         data_table[5]='G';
   836  0026  3047               	movlw	71
   837  0027  282C               	goto	L2
   838  0028                     l1202:	
   839                           ;manchester_encode.c: 89:     }else if(type==0)
   840                           
   841                           ;manchester_encode.c: 87:         data_table[6]='0';
   842                           
   843  0028  0833               	movf	SendFrame@type,w
   844  0029  1D03               	btfss	3,2
   845  002A  2831               	goto	l1206
   846                           
   847                           ;manchester_encode.c: 90:     {;manchester_encode.c: 91:         data_table[5]='W';
   848  002B  3057               	movlw	87
   849  002C                     L2:	
   850  002C  00F9               	movwf	??_SendFrame
   851  002D  0879               	movf	??_SendFrame,w
   852  002E  00AA               	movwf	SendFrame@data_table+5
   853                           
   854                           ;manchester_encode.c: 92:         data_table[6]='0';
   855  002F  3030               	movlw	48
   856  0030  283A               	goto	L1
   857  0031                     l1206:	
   858                           ;manchester_encode.c: 94:     }else if(type==2)
   859                           
   860  0031  3002               	movlw	2
   861  0032  0633               	xorwf	SendFrame@type,w
   862  0033  1D03               	btfss	3,2
   863  0034  283D               	goto	l1210
   864                           
   865                           ;manchester_encode.c: 95:     {;manchester_encode.c: 96:         data_table[5]='W';
   866  0035  3057               	movlw	87
   867  0036  00F9               	movwf	??_SendFrame
   868  0037  0879               	movf	??_SendFrame,w
   869  0038  00AA               	movwf	SendFrame@data_table+5
   870                           
   871                           ;manchester_encode.c: 97:         data_table[6]='B';
   872  0039  3042               	movlw	66
   873  003A                     L1:	
   874  003A  00F9               	movwf	??_SendFrame
   875  003B  0879               	movf	??_SendFrame,w
   876  003C  00AB               	movwf	SendFrame@data_table+6
   877  003D                     l1210:	
   878                           
   879                           ;manchester_encode.c: 103:     unsigned int crc_val;;manchester_encode.c: 104:     crc_v
      +                          al=CRC16(&data_table[5],2);
   880  003D  3002               	movlw	2
   881  003E  00F9               	movwf	??_SendFrame
   882  003F  0879               	movf	??_SendFrame,w
   883  0040  00F2               	movwf	CRC16@size
   884  0041  302A               	movlw	(low ((SendFrame@data_table| 0+5)))& (0+255)
   885  0042  2077               	fcall	_CRC16
   886  0043  0873               	movf	?_CRC16+1,w
   887  0044  00B0               	movwf	SendFrame@crc_val+1
   888  0045  0872               	movf	?_CRC16,w
   889  0046  00AF               	movwf	SendFrame@crc_val
   890                           
   891                           ;manchester_encode.c: 105:     data_table[7]=crc_val>>8;
   892  0047  0830               	movf	SendFrame@crc_val+1,w
   893  0048  00F9               	movwf	??_SendFrame
   894  0049  0879               	movf	??_SendFrame,w
   895  004A  00AC               	movwf	SendFrame@data_table+7
   896                           
   897                           ;manchester_encode.c: 106:  data_table[8]=crc_val & 0x00FF;
   898  004B  082F               	movf	SendFrame@crc_val,w
   899  004C  00F9               	movwf	??_SendFrame
   900  004D  0879               	movf	??_SendFrame,w
   901  004E  00AD               	movwf	SendFrame@data_table+8
   902                           
   903                           ;manchester_encode.c: 107:  data_table[9]='&';
   904  004F  3026               	movlw	38
   905  0050  00F9               	movwf	??_SendFrame
   906  0051  0879               	movf	??_SendFrame,w
   907  0052  00AE               	movwf	SendFrame@data_table+9
   908                           
   909                           ;manchester_encode.c: 110:     T1CONbits.TMR1ON=1;
   910  0053  1410               	bsf	16,0	;volatile
   911                           
   912                           ;manchester_encode.c: 111:     PIE1bits.TMR2IE=0;
   913  0054  1683               	bsf	3,5	;RP0=1, select bank1
   914  0055  108C               	bcf	12,1	;volatile
   915                           
   916                           ;manchester_encode.c: 112:     PORTAbits.RA0=1;
   917  0056  1283               	bcf	3,5	;RP0=0, select bank0
   918  0057  1405               	bsf	5,0	;volatile
   919                           
   920                           ;manchester_encode.c: 114:     unsigned char i,j;;manchester_encode.c: 115:     for(i=0;
      +                          i<10;i++)
   921  0058  01B1               	clrf	SendFrame@i
   922  0059                     l143:	
   923  0059  0064               	clrwdt	;# 
   924                           
   925                           ;manchester_encode.c: 118:         ManchesteEncode(&data_table[0], 6 +4);
   926  005A  300A               	movlw	10
   927  005B  00F9               	movwf	??_SendFrame
   928  005C  0879               	movf	??_SendFrame,w
   929  005D  00F2               	movwf	ManchesteEncode@data_lenght
   930  005E  3025               	movlw	(low (SendFrame@data_table| 0))& (0+255)
   931  005F  20B9               	fcall	_ManchesteEncode
   932                           
   933                           ;manchester_encode.c: 122:         for(j=0;j<6;j++)
   934  0060  01B2               	clrf	SendFrame@j
   935  0061                     l1238:	
   936                           
   937                           ;manchester_encode.c: 123:         {;manchester_encode.c: 124:             WaitMancheste
      +                          rT();
   938  0061  21A4               	fcall	_WaitManchesterT
   939                           
   940                           ;manchester_encode.c: 125:         }
   941  0062  3001               	movlw	1
   942  0063  00F9               	movwf	??_SendFrame
   943  0064  0879               	movf	??_SendFrame,w
   944  0065  07B2               	addwf	SendFrame@j,f
   945  0066  3006               	movlw	6
   946  0067  0232               	subwf	SendFrame@j,w
   947  0068  1C03               	skipc
   948  0069  2861               	goto	l1238
   949                           
   950                           ;manchester_encode.c: 126:     }
   951  006A  3001               	movlw	1
   952  006B  00F9               	movwf	??_SendFrame
   953  006C  0879               	movf	??_SendFrame,w
   954  006D  07B1               	addwf	SendFrame@i,f
   955  006E  300A               	movlw	10
   956  006F  0231               	subwf	SendFrame@i,w
   957  0070  1C03               	skipc
   958  0071  2859               	goto	l143
   959                           
   960                           ;manchester_encode.c: 128:     PORTAbits.RA0=0;
   961  0072  1005               	bcf	5,0	;volatile
   962                           
   963                           ;manchester_encode.c: 129:     T1CONbits.TMR1ON=0;
   964  0073  1010               	bcf	16,0	;volatile
   965                           
   966                           ;manchester_encode.c: 130:     PIE1bits.TMR2IE=1;
   967  0074  1683               	bsf	3,5	;RP0=1, select bank1
   968  0075  148C               	bsf	12,1	;volatile
   969  0076  0008               	return
   970  0077                     __end_of_SendFrame:	
   971                           
   972                           	psect	text3
   973  00B9                     __ptext3:	
   974 ;; *************** function _ManchesteEncode *****************
   975 ;; Defined at:
   976 ;;		line 49 in file "manchester_encode.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  data_to_send    1    wreg     PTR unsigned char 
   979 ;;		 -> SendFrame@data_table(10), 
   980 ;;  data_lenght     1    2[COMMON] unsigned char 
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  data_to_send    1    6[COMMON] PTR unsigned char 
   983 ;;		 -> SendFrame@data_table(10), 
   984 ;;  bit_loop        1    8[COMMON] char 
   985 ;;  data_loop       1    7[COMMON] char 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 300/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   995 ;;      Params:         1       0       0       0
   996 ;;      Locals:         3       0       0       0
   997 ;;      Temps:          3       0       0       0
   998 ;;      Totals:         7       0       0       0
   999 ;;Total ram usage:        7 bytes
  1000 ;; Hardware stack levels used:    1
  1001 ;; Hardware stack levels required when called:    3
  1002 ;; This function calls:
  1003 ;;		_ManchesterSendOne
  1004 ;;		_ManchesterSendZero
  1005 ;; This function is called by:
  1006 ;;		_SendFrame
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           
  1011                           ;psect for function _ManchesteEncode
  1012  00B9                     _ManchesteEncode:	
  1013                           
  1014                           ;incstack = 0
  1015                           ; Regs used in _ManchesteEncode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1016                           ;ManchesteEncode@data_to_send stored from wreg
  1017  00B9  00F6               	movwf	ManchesteEncode@data_to_send
  1018                           
  1019                           ;manchester_encode.c: 49: void ManchesteEncode(unsigned char *data_to_send, unsigned cha
      +                          r data_lenght);manchester_encode.c: 50: {;manchester_encode.c: 51:  signed char bit_loop
      +                          , data_loop;;manchester_encode.c: 53:  for(data_loop=0;data_loop<data_lenght;data_loop++
      +                          )
  1020  00BA  01F7               	clrf	ManchesteEncode@data_loop
  1021  00BB                     l1098:	
  1022  00BB  0877               	movf	ManchesteEncode@data_loop,w
  1023  00BC  00F3               	movwf	??_ManchesteEncode
  1024  00BD  01F4               	clrf	??_ManchesteEncode+1
  1025  00BE  1BF3               	btfsc	??_ManchesteEncode,7
  1026  00BF  03F4               	decf	??_ManchesteEncode+1,f
  1027  00C0  0874               	movf	??_ManchesteEncode+1,w
  1028  00C1  3A80               	xorlw	128
  1029  00C2  00F5               	movwf	??_ManchesteEncode+2
  1030  00C3  3080               	movlw	128
  1031  00C4  0275               	subwf	??_ManchesteEncode+2,w
  1032  00C5  1D03               	skipz
  1033  00C6  28C9               	goto	u355
  1034  00C7  0872               	movf	ManchesteEncode@data_lenght,w
  1035  00C8  0273               	subwf	??_ManchesteEncode,w
  1036  00C9                     u355:	
  1037  00C9  1803               	btfsc	3,0
  1038  00CA  28EE               	goto	l134
  1039                           
  1040                           ;manchester_encode.c: 54:  {;manchester_encode.c: 55:   for(bit_loop=7;bit_loop>=0;bit_l
      +                          oop--)
  1041  00CB  3007               	movlw	7
  1042  00CC  00F3               	movwf	??_ManchesteEncode
  1043  00CD  0873               	movf	??_ManchesteEncode,w
  1044  00CE  00F8               	movwf	ManchesteEncode@bit_loop
  1045  00CF                     l1086:	
  1046                           
  1047                           ;manchester_encode.c: 56:   {;manchester_encode.c: 57:    if(((*(data_to_send+data_loop)
      +                          )>>bit_loop) & 0x01)
  1048  00CF  0877               	movf	ManchesteEncode@data_loop,w
  1049  00D0  0776               	addwf	ManchesteEncode@data_to_send,w
  1050  00D1  00F3               	movwf	??_ManchesteEncode
  1051  00D2  0873               	movf	??_ManchesteEncode,w
  1052  00D3  0084               	movwf	4
  1053  00D4  1383               	bcf	3,7	;select IRP bank0
  1054  00D5  0800               	movf	0,w
  1055  00D6  00F4               	movwf	??_ManchesteEncode+1
  1056  00D7  0A78               	incf	ManchesteEncode@bit_loop,w
  1057  00D8  28DB               	goto	u324
  1058  00D9                     u325:	
  1059  00D9  1003               	clrc
  1060  00DA  0CF4               	rrf	??_ManchesteEncode+1,f
  1061  00DB                     u324:	
  1062  00DB  3EFF               	addlw	-1
  1063  00DC  1D03               	skipz
  1064  00DD  28D9               	goto	u325
  1065  00DE  1C74               	btfss	??_ManchesteEncode+1,0
  1066  00DF  28E2               	goto	l1090
  1067                           
  1068                           ;manchester_encode.c: 58:    {;manchester_encode.c: 59:     ManchesterSendOne();
  1069  00E0  2197               	fcall	_ManchesterSendOne
  1070                           
  1071                           ;manchester_encode.c: 60:    }else
  1072  00E1  28E3               	goto	l1092
  1073  00E2                     l1090:	
  1074                           
  1075                           ;manchester_encode.c: 61:     ManchesterSendZero();
  1076  00E2  2190               	fcall	_ManchesterSendZero
  1077  00E3                     l1092:	
  1078                           
  1079                           ;manchester_encode.c: 62:    }
  1080  00E3  30FF               	movlw	255
  1081  00E4  00F3               	movwf	??_ManchesteEncode
  1082  00E5  0873               	movf	??_ManchesteEncode,w
  1083  00E6  07F8               	addwf	ManchesteEncode@bit_loop,f
  1084  00E7  1FF8               	btfss	ManchesteEncode@bit_loop,7
  1085  00E8  28CF               	goto	l1086
  1086                           
  1087                           ;manchester_encode.c: 63:  }
  1088  00E9  3001               	movlw	1
  1089  00EA  00F3               	movwf	??_ManchesteEncode
  1090  00EB  0873               	movf	??_ManchesteEncode,w
  1091  00EC  07F7               	addwf	ManchesteEncode@data_loop,f
  1092  00ED  28BB               	goto	l1098
  1093  00EE                     l134:	
  1094                           
  1095                           ;manchester_encode.c: 65:     PORTAbits.RA2=1;
  1096  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  1097  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  1098  00F0  1505               	bsf	5,2	;volatile
  1099  00F1  0008               	return
  1100  00F2                     __end_of_ManchesteEncode:	
  1101                           
  1102                           	psect	text4
  1103  0190                     __ptext4:	
  1104 ;; *************** function _ManchesterSendZero *****************
  1105 ;; Defined at:
  1106 ;;		line 41 in file "manchester_encode.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		status,2, status,0, pclath, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 800/0
  1117 ;;		On exit  : 300/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1120 ;;      Params:         0       0       0       0
  1121 ;;      Locals:         0       0       0       0
  1122 ;;      Temps:          0       0       0       0
  1123 ;;      Totals:         0       0       0       0
  1124 ;;Total ram usage:        0 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; Hardware stack levels required when called:    2
  1127 ;; This function calls:
  1128 ;;		_WaitManchesterT
  1129 ;; This function is called by:
  1130 ;;		_ManchesteEncode
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           
  1135                           ;psect for function _ManchesterSendZero
  1136  0190                     _ManchesterSendZero:	
  1137                           
  1138                           ;manchester_encode.c: 43:  PORTAbits.RA2=1;
  1139                           
  1140                           ;incstack = 0
  1141                           ; Regs used in _ManchesterSendZero: [status,2+status,0+pclath+cstack]
  1142  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1143  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1144  0192  1505               	bsf	5,2	;volatile
  1145                           
  1146                           ;manchester_encode.c: 44:  WaitManchesterT();
  1147  0193  21A4               	fcall	_WaitManchesterT
  1148                           
  1149                           ;manchester_encode.c: 45:  PORTAbits.RA2=0;
  1150  0194  1105               	bcf	5,2	;volatile
  1151                           
  1152                           ;manchester_encode.c: 46:  WaitManchesterT();
  1153  0195  21A4               	fcall	_WaitManchesterT
  1154  0196  0008               	return
  1155  0197                     __end_of_ManchesterSendZero:	
  1156                           
  1157                           	psect	text5
  1158  0197                     __ptext5:	
  1159 ;; *************** function _ManchesterSendOne *****************
  1160 ;; Defined at:
  1161 ;;		line 33 in file "manchester_encode.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;		None
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		status,2, status,0, pclath, cstack
  1170 ;; Tracked objects:
  1171 ;;		On entry : 800/0
  1172 ;;		On exit  : 300/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1175 ;;      Params:         0       0       0       0
  1176 ;;      Locals:         0       0       0       0
  1177 ;;      Temps:          0       0       0       0
  1178 ;;      Totals:         0       0       0       0
  1179 ;;Total ram usage:        0 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; Hardware stack levels required when called:    2
  1182 ;; This function calls:
  1183 ;;		_WaitManchesterT
  1184 ;; This function is called by:
  1185 ;;		_ManchesteEncode
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           
  1190                           ;psect for function _ManchesterSendOne
  1191  0197                     _ManchesterSendOne:	
  1192                           
  1193                           ;manchester_encode.c: 35:  PORTAbits.RA2=0;
  1194                           
  1195                           ;incstack = 0
  1196                           ; Regs used in _ManchesterSendOne: [status,2+status,0+pclath+cstack]
  1197  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1198  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1199  0199  1105               	bcf	5,2	;volatile
  1200                           
  1201                           ;manchester_encode.c: 36:  WaitManchesterT();
  1202  019A  21A4               	fcall	_WaitManchesterT
  1203                           
  1204                           ;manchester_encode.c: 37:  PORTAbits.RA2=1;
  1205  019B  1505               	bsf	5,2	;volatile
  1206                           
  1207                           ;manchester_encode.c: 38:  WaitManchesterT();
  1208  019C  21A4               	fcall	_WaitManchesterT
  1209  019D  0008               	return
  1210  019E                     __end_of_ManchesterSendOne:	
  1211                           
  1212                           	psect	text6
  1213  01A4                     __ptext6:	
  1214 ;; *************** function _WaitManchesterT *****************
  1215 ;; Defined at:
  1216 ;;		line 23 in file "manchester_encode.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		status,2
  1225 ;; Tracked objects:
  1226 ;;		On entry : 300/0
  1227 ;;		On exit  : 300/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1230 ;;      Params:         0       0       0       0
  1231 ;;      Locals:         0       0       0       0
  1232 ;;      Temps:          0       0       0       0
  1233 ;;      Totals:         0       0       0       0
  1234 ;;Total ram usage:        0 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; Hardware stack levels required when called:    1
  1237 ;; This function calls:
  1238 ;;		Nothing
  1239 ;; This function is called by:
  1240 ;;		_ManchesterSendOne
  1241 ;;		_ManchesterSendZero
  1242 ;;		_SendFrame
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _WaitManchesterT
  1248  01A4                     _WaitManchesterT:	
  1249                           
  1250                           ;manchester_encode.c: 25:     PIR1bits.CCP1IF=0;
  1251                           
  1252                           ;incstack = 0
  1253                           ; Regs used in _WaitManchesterT: [status,2]
  1254  01A4  110C               	bcf	12,2	;volatile
  1255                           
  1256                           ;manchester_encode.c: 26:     TMR1=0;
  1257  01A5  018E               	clrf	14	;volatile
  1258  01A6  018F               	clrf	15	;volatile
  1259  01A7                     l116:	
  1260                           ;manchester_encode.c: 28:     {;manchester_encode.c: 29:     }
  1261                           
  1262                           
  1263                           ;manchester_encode.c: 27:     while(PIR1bits.CCP1IF==0)
  1264  01A7  190C               	btfsc	12,2	;volatile
  1265  01A8  0008               	return
  1266  01A9  29A7               	goto	l116
  1267  01AA                     __end_of_WaitManchesterT:	
  1268                           
  1269                           	psect	text7
  1270  0077                     __ptext7:	
  1271 ;; *************** function _CRC16 *****************
  1272 ;; Defined at:
  1273 ;;		line 8 in file "crc16.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;  data_tab_ptr    1    wreg     PTR unsigned char 
  1276 ;;		 -> SendFrame@data_table(10), 
  1277 ;;  size            1    2[COMMON] unsigned char 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  data_tab_ptr    1    0[BANK0 ] PTR unsigned char 
  1280 ;;		 -> SendFrame@data_table(10), 
  1281 ;;  crc             2    3[BANK0 ] unsigned int 
  1282 ;;  i               1    2[BANK0 ] unsigned char 
  1283 ;;  k               1    1[BANK0 ] unsigned char 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  2    2[COMMON] unsigned int 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1288 ;; Tracked objects:
  1289 ;;		On entry : 300/0
  1290 ;;		On exit  : 300/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1293 ;;      Params:         2       0       0       0
  1294 ;;      Locals:         0       5       0       0
  1295 ;;      Temps:          3       0       0       0
  1296 ;;      Totals:         5       5       0       0
  1297 ;;Total ram usage:       10 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    1
  1300 ;; This function calls:
  1301 ;;		Nothing
  1302 ;; This function is called by:
  1303 ;;		_SendFrame
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           
  1308                           ;psect for function _CRC16
  1309  0077                     _CRC16:	
  1310                           
  1311                           ;incstack = 0
  1312                           ; Regs used in _CRC16: [wreg-fsr0h+status,2+status,0+btemp+1]
  1313                           ;CRC16@data_tab_ptr stored from wreg
  1314  0077  00A0               	movwf	CRC16@data_tab_ptr
  1315                           
  1316                           ;crc16.c: 8: unsigned int CRC16(unsigned char *data_tab_ptr, unsigned char size);crc16.c
      +                          : 9: {;crc16.c: 10:     const unsigned int generator = 0x1021;;crc16.c: 11:     unsigned
      +                           int crc = 0;
  1317  0078  01A3               	clrf	CRC16@crc
  1318  0079  01A4               	clrf	CRC16@crc+1
  1319                           
  1320                           ;crc16.c: 12:     unsigned char k,i;;crc16.c: 14:     for(k=0;k<size;k++)
  1321  007A  01A1               	clrf	CRC16@k
  1322  007B                     l1190:	
  1323  007B  0872               	movf	CRC16@size,w
  1324  007C  0221               	subwf	CRC16@k,w
  1325  007D  1803               	btfsc	3,0
  1326  007E  28B4               	goto	l1192
  1327                           
  1328                           ;crc16.c: 15:     {;crc16.c: 16:         crc ^= (*(data_tab_ptr+k) << 8);
  1329  007F  0821               	movf	CRC16@k,w
  1330  0080  0720               	addwf	CRC16@data_tab_ptr,w
  1331  0081  00F4               	movwf	??_CRC16
  1332  0082  0874               	movf	??_CRC16,w
  1333  0083  0084               	movwf	4
  1334  0084  1383               	bcf	3,7	;select IRP bank0
  1335  0085  0800               	movf	0,w
  1336  0086  00F5               	movwf	??_CRC16+1
  1337  0087  01F6               	clrf	??_CRC16+2
  1338  0088  0875               	movf	??_CRC16+1,w
  1339  0089  00F6               	movwf	??_CRC16+2
  1340  008A  01F5               	clrf	??_CRC16+1
  1341  008B  0875               	movf	??_CRC16+1,w
  1342  008C  06A3               	xorwf	CRC16@crc,f
  1343  008D  0876               	movf	??_CRC16+2,w
  1344  008E  06A4               	xorwf	CRC16@crc+1,f
  1345                           
  1346                           ;crc16.c: 18:         for (i=0;i<8;i++)
  1347  008F  01A2               	clrf	CRC16@i
  1348  0090                     l7:	
  1349                           
  1350                           ;crc16.c: 19:         {;crc16.c: 20:             if ((crc&0x8000)!=0)
  1351  0090  1FA4               	btfss	CRC16@crc+1,7
  1352  0091  28A0               	goto	l1182
  1353                           
  1354                           ;crc16.c: 21:             {;crc16.c: 22:                  crc=(crc<<1)^generator;
  1355  0092  0824               	movf	CRC16@crc+1,w
  1356  0093  00F5               	movwf	??_CRC16+1
  1357  0094  0823               	movf	CRC16@crc,w
  1358  0095  00F4               	movwf	??_CRC16
  1359  0096  1003               	clrc
  1360  0097  0DF4               	rlf	??_CRC16,f
  1361  0098  0DF5               	rlf	??_CRC16+1,f
  1362  0099  3021               	movlw	33
  1363  009A  0674               	xorwf	??_CRC16,w
  1364  009B  00A3               	movwf	CRC16@crc
  1365  009C  3010               	movlw	16
  1366  009D  0675               	xorwf	??_CRC16+1,w
  1367  009E  00A4               	movwf	CRC16@crc+1
  1368                           
  1369                           ;crc16.c: 23:             }else
  1370  009F  28A7               	goto	l1184
  1371  00A0                     l1182:	
  1372                           
  1373                           ;crc16.c: 24:             {;crc16.c: 25:                 crc<<=1;
  1374  00A0  3001               	movlw	1
  1375  00A1                     u455:	
  1376  00A1  1003               	clrc
  1377  00A2  0DA3               	rlf	CRC16@crc,f
  1378  00A3  0DA4               	rlf	CRC16@crc+1,f
  1379  00A4  3EFF               	addlw	-1
  1380  00A5  1D03               	skipz
  1381  00A6  28A1               	goto	u455
  1382  00A7                     l1184:	
  1383                           
  1384                           ;crc16.c: 27:         }
  1385  00A7  3001               	movlw	1
  1386  00A8  00F4               	movwf	??_CRC16
  1387  00A9  0874               	movf	??_CRC16,w
  1388  00AA  07A2               	addwf	CRC16@i,f
  1389  00AB  3008               	movlw	8
  1390  00AC  0222               	subwf	CRC16@i,w
  1391  00AD  1C03               	skipc
  1392  00AE  2890               	goto	l7
  1393                           
  1394                           ;crc16.c: 28:     }
  1395  00AF  3001               	movlw	1
  1396  00B0  00F4               	movwf	??_CRC16
  1397  00B1  0874               	movf	??_CRC16,w
  1398  00B2  07A1               	addwf	CRC16@k,f
  1399  00B3  287B               	goto	l1190
  1400  00B4                     l1192:	
  1401                           
  1402                           ;crc16.c: 30:     return crc;
  1403  00B4  0824               	movf	CRC16@crc+1,w
  1404  00B5  00F3               	movwf	?_CRC16+1
  1405  00B6  0823               	movf	CRC16@crc,w
  1406  00B7  00F2               	movwf	?_CRC16
  1407  00B8  0008               	return
  1408  00B9                     __end_of_CRC16:	
  1409                           
  1410                           	psect	text8
  1411  016A                     __ptext8:	
  1412 ;; *************** function _CheckInputState *****************
  1413 ;; Defined at:
  1414 ;;		line 25 in file "input_handler.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  input           1    wreg     unsigned char 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  input           1    3[COMMON] unsigned char 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      unsigned char 
  1421 ;; Registers used:
  1422 ;;		wreg, status,2, status,0, pclath, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 300/0
  1425 ;;		On exit  : 300/0
  1426 ;;		Unchanged: 300/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1428 ;;      Params:         0       0       0       0
  1429 ;;      Locals:         1       0       0       0
  1430 ;;      Temps:          0       0       0       0
  1431 ;;      Totals:         1       0       0       0
  1432 ;;Total ram usage:        1 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    2
  1435 ;; This function calls:
  1436 ;;		_DebounceWait
  1437 ;; This function is called by:
  1438 ;;		_LineState
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           
  1443                           ;psect for function _CheckInputState
  1444  016A                     _CheckInputState:	
  1445                           
  1446                           ;incstack = 0
  1447                           ; Regs used in _CheckInputState: [wreg+status,2+status,0+pclath+cstack]
  1448                           ;CheckInputState@input stored from wreg
  1449  016A  00F3               	movwf	CheckInputState@input
  1450                           
  1451                           ;input_handler.c: 25: unsigned char CheckInputState(unsigned char input);input_handler.c
      +                          : 26: {;input_handler.c: 27:  if(input==1)
  1452  016B  0373               	decf	CheckInputState@input,w
  1453  016C  1D03               	btfss	3,2
  1454  016D  2974               	goto	l940
  1455                           
  1456                           ;input_handler.c: 28:  {;input_handler.c: 29:         DebounceWait();
  1457  016E  2188               	fcall	_DebounceWait
  1458                           
  1459                           ;input_handler.c: 31:         if(input==1)
  1460  016F  0373               	decf	CheckInputState@input,w
  1461  0170  1D03               	btfss	3,2
  1462  0171  2974               	goto	l940
  1463                           
  1464                           ;input_handler.c: 32:         {;input_handler.c: 33:             return 1;
  1465  0172  3001               	movlw	1
  1466  0173  0008               	return
  1467  0174                     l940:	
  1468                           
  1469                           ;input_handler.c: 37:     return 0;
  1470  0174  3000               	movlw	0
  1471  0175  0008               	return
  1472  0176                     __end_of_CheckInputState:	
  1473                           
  1474                           	psect	text9
  1475  0112                     __ptext9:	
  1476 ;; *************** function _InterruptConfig *****************
  1477 ;; Defined at:
  1478 ;;		line 12 in file "interrupts.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;		None
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;		None
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg, status,2, status,0
  1487 ;; Tracked objects:
  1488 ;;		On entry : B00/0
  1489 ;;		On exit  : B00/0
  1490 ;;		Unchanged: 800/0
  1491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1492 ;;      Params:         0       0       0       0
  1493 ;;      Locals:         0       0       0       0
  1494 ;;      Temps:          0       0       0       0
  1495 ;;      Totals:         0       0       0       0
  1496 ;;Total ram usage:        0 bytes
  1497 ;; Hardware stack levels used:    1
  1498 ;; Hardware stack levels required when called:    1
  1499 ;; This function calls:
  1500 ;;		Nothing
  1501 ;; This function is called by:
  1502 ;;		_main
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           
  1507                           ;psect for function _InterruptConfig
  1508  0112                     _InterruptConfig:	
  1509                           
  1510                           ;interrupts.c: 15:     OPTION_REGbits.T0CS=0;
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in _InterruptConfig: [wreg+status,2+status,0]
  1514  0112  1683               	bsf	3,5	;RP0=1, select bank1
  1515  0113  1281               	bcf	1,5	;volatile
  1516                           
  1517                           ;interrupts.c: 16:     OPTION_REGbits.PSA=1;
  1518  0114  1581               	bsf	1,3	;volatile
  1519                           
  1520                           ;interrupts.c: 17:     OPTION_REGbits.PS=0b111;
  1521  0115  3007               	movlw	7
  1522  0116  0481               	iorwf	1,f	;volatile
  1523                           
  1524                           ;interrupts.c: 20:     T1CONbits.TMR1CS=0;
  1525  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0118  1090               	bcf	16,1	;volatile
  1527                           
  1528                           ;interrupts.c: 21:     T1CONbits.T1CKPS=0;
  1529  0119  30CF               	movlw	-49
  1530  011A  0590               	andwf	16,f	;volatile
  1531                           
  1532                           ;interrupts.c: 24:     T2CONbits.TMR2ON=1;
  1533  011B  1512               	bsf	18,2	;volatile
  1534                           
  1535                           ;interrupts.c: 25:     T2CONbits.TOUTPS=0b0001;
  1536  011C  0812               	movf	18,w	;volatile
  1537  011D  3987               	andlw	-121
  1538  011E  3808               	iorlw	8
  1539  011F  0092               	movwf	18	;volatile
  1540                           
  1541                           ;interrupts.c: 26:     T2CONbits.T2CKPS=0b01;
  1542  0120  0812               	movf	18,w	;volatile
  1543  0121  39FC               	andlw	-4
  1544  0122  3801               	iorlw	1
  1545  0123  0092               	movwf	18	;volatile
  1546                           
  1547                           ;interrupts.c: 27:     PIE1bits.TMR2IE=1;
  1548  0124  1683               	bsf	3,5	;RP0=1, select bank1
  1549  0125  148C               	bsf	12,1	;volatile
  1550                           
  1551                           ;interrupts.c: 31:     CCP1CONbits.CCP1M=0b1010;
  1552  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1553  0127  0817               	movf	23,w	;volatile
  1554  0128  39F0               	andlw	-16
  1555  0129  380A               	iorlw	10
  1556  012A  0097               	movwf	23	;volatile
  1557                           
  1558                           ;interrupts.c: 35:     const unsigned long int k_baud_rate=300;;interrupts.c: 36:     CC
      +                          PR1=8000000/(4*k_baud_rate);
  1559  012B  301A               	movlw	26
  1560  012C  0096               	movwf	22	;volatile
  1561  012D  300A               	movlw	10
  1562  012E  0095               	movwf	21	;volatile
  1563                           
  1564                           ;interrupts.c: 39:     INTCONbits.GIE=1;
  1565  012F  178B               	bsf	11,7	;volatile
  1566                           
  1567                           ;interrupts.c: 40:     INTCONbits.PEIE=1;
  1568  0130  170B               	bsf	11,6	;volatile
  1569  0131  0008               	return
  1570  0132                     __end_of_InterruptConfig:	
  1571                           
  1572                           	psect	text10
  1573  0132                     __ptext10:	
  1574 ;; *************** function _GlobalInits *****************
  1575 ;; Defined at:
  1576 ;;		line 5 in file "inits.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0
  1585 ;; Tracked objects:
  1586 ;;		On entry : B00/0
  1587 ;;		On exit  : B00/0
  1588 ;;		Unchanged: 800/0
  1589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1590 ;;      Params:         0       0       0       0
  1591 ;;      Locals:         0       0       0       0
  1592 ;;      Temps:          0       0       0       0
  1593 ;;      Totals:         0       0       0       0
  1594 ;;Total ram usage:        0 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    1
  1597 ;; This function calls:
  1598 ;;		Nothing
  1599 ;; This function is called by:
  1600 ;;		_main
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           
  1605                           ;psect for function _GlobalInits
  1606  0132                     _GlobalInits:	
  1607                           
  1608                           ;inits.c: 8:     OSCCONbits.IRCF=0b111;
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in _GlobalInits: [wreg+status,2+status,0]
  1612  0132  3070               	movlw	112
  1613  0133  1683               	bsf	3,5	;RP0=1, select bank1
  1614  0134  048F               	iorwf	15,f	;volatile
  1615                           
  1616                           ;inits.c: 9:     ADCON1bits.PCFG=0b0110;
  1617  0135  081F               	movf	31,w	;volatile
  1618  0136  39F0               	andlw	-16
  1619  0137  3806               	iorlw	6
  1620  0138  009F               	movwf	31	;volatile
  1621                           
  1622                           ;inits.c: 12:     TRISA0=0;
  1623  0139  1005               	bcf	5,0	;volatile
  1624                           
  1625                           ;inits.c: 13:     TRISA1=1;
  1626  013A  1485               	bsf	5,1	;volatile
  1627                           
  1628                           ;inits.c: 14:     TRISA2=0;
  1629  013B  1105               	bcf	5,2	;volatile
  1630                           
  1631                           ;inits.c: 15:     TRISA3=1;
  1632  013C  1585               	bsf	5,3	;volatile
  1633                           
  1634                           ;inits.c: 16:     TRISA4=1;
  1635  013D  1605               	bsf	5,4	;volatile
  1636                           
  1637                           ;inits.c: 17:     TRISA6=1;
  1638  013E  1705               	bsf	5,6	;volatile
  1639                           
  1640                           ;inits.c: 18:     TRISA7=1;
  1641  013F  1785               	bsf	5,7	;volatile
  1642                           
  1643                           ;inits.c: 20:     TRISB0=1;
  1644  0140  1406               	bsf	6,0	;volatile
  1645                           
  1646                           ;inits.c: 21:     TRISB1=1;
  1647  0141  1486               	bsf	6,1	;volatile
  1648                           
  1649                           ;inits.c: 22:     TRISB2=0;
  1650  0142  1106               	bcf	6,2	;volatile
  1651                           
  1652                           ;inits.c: 23:     TRISB3=0;
  1653  0143  1186               	bcf	6,3	;volatile
  1654                           
  1655                           ;inits.c: 24:     TRISB4=0;
  1656  0144  1206               	bcf	6,4	;volatile
  1657                           
  1658                           ;inits.c: 25:     TRISB5=0;
  1659  0145  1286               	bcf	6,5	;volatile
  1660                           
  1661                           ;inits.c: 27:     PORTAbits.RA0=0;
  1662  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1663  0147  1005               	bcf	5,0	;volatile
  1664                           
  1665                           ;inits.c: 28:     PORTBbits.RB3=0;
  1666  0148  1186               	bcf	6,3	;volatile
  1667  0149  0008               	return
  1668  014A                     __end_of_GlobalInits:	
  1669                           
  1670                           	psect	text11
  1671  0176                     __ptext11:	
  1672 ;; *************** function _CheckGateCloseSwitch *****************
  1673 ;; Defined at:
  1674 ;;		line 57 in file "input_handler.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0, pclath, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 200/0
  1685 ;;		On exit  : 300/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1688 ;;      Params:         0       0       0       0
  1689 ;;      Locals:         0       0       0       0
  1690 ;;      Temps:          0       0       0       0
  1691 ;;      Totals:         0       0       0       0
  1692 ;;Total ram usage:        0 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    2
  1695 ;; This function calls:
  1696 ;;		_DebounceWait
  1697 ;;		_GateStartHighTime
  1698 ;; This function is called by:
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           
  1704                           ;psect for function _CheckGateCloseSwitch
  1705  0176                     _CheckGateCloseSwitch:	
  1706                           
  1707                           ;input_handler.c: 59:  if(PORTAbits.RA1==1)
  1708                           
  1709                           ;incstack = 0
  1710                           ; Regs used in _CheckGateCloseSwitch: [wreg+status,2+status,0+pclath+cstack]
  1711  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0177  1C85               	btfss	5,1	;volatile
  1713  0178  0008               	return
  1714                           
  1715                           ;input_handler.c: 60:  {;input_handler.c: 61:         DebounceWait();
  1716  0179  2188               	fcall	_DebounceWait
  1717                           
  1718                           ;input_handler.c: 63:         if(PORTAbits.RA1==1)
  1719  017A  1C85               	btfss	5,1	;volatile
  1720  017B  0008               	return
  1721                           
  1722                           ;input_handler.c: 64:         {;input_handler.c: 65:             PORTBbits.RB3=1;
  1723  017C  1586               	bsf	6,3	;volatile
  1724                           
  1725                           ;input_handler.c: 66:             GateStartHighTime();
  1726  017D  2180               	fcall	_GateStartHighTime
  1727                           
  1728                           ;input_handler.c: 67:             PORTBbits.RB3=0;
  1729  017E  1186               	bcf	6,3	;volatile
  1730  017F  0008               	return
  1731  0180                     __end_of_CheckGateCloseSwitch:	
  1732                           
  1733                           	psect	text12
  1734  0180                     __ptext12:	
  1735 ;; *************** function _GateStartHighTime *****************
  1736 ;; Defined at:
  1737 ;;		line 81 in file "input_handler.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;		None
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2, status,0
  1746 ;; Tracked objects:
  1747 ;;		On entry : 300/0
  1748 ;;		On exit  : 300/0
  1749 ;;		Unchanged: 300/0
  1750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1751 ;;      Params:         0       0       0       0
  1752 ;;      Locals:         0       0       0       0
  1753 ;;      Temps:          1       0       0       0
  1754 ;;      Totals:         1       0       0       0
  1755 ;;Total ram usage:        1 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_CheckGateCloseSwitch
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           
  1766                           ;psect for function _GateStartHighTime
  1767  0180                     _GateStartHighTime:	
  1768                           
  1769                           ;input_handler.c: 86:     g_key_timer=200;
  1770                           
  1771                           ;incstack = 0
  1772                           ; Regs used in _GateStartHighTime: [wreg+status,2+status,0]
  1773  0180  30C8               	movlw	200
  1774  0181  00F2               	movwf	??_GateStartHighTime
  1775  0182  0872               	movf	??_GateStartHighTime,w
  1776  0183  00FB               	movwf	_g_key_timer	;volatile
  1777  0184                     l946:	
  1778                           ;input_handler.c: 87:     while(g_key_timer>0);
  1779                           
  1780  0184  087B               	movf	_g_key_timer,w	;volatile
  1781  0185  1903               	btfsc	3,2
  1782  0186  0008               	return
  1783  0187  2984               	goto	l946
  1784  0188                     __end_of_GateStartHighTime:	
  1785                           
  1786                           	psect	text13
  1787  0188                     __ptext13:	
  1788 ;; *************** function _DebounceWait *****************
  1789 ;; Defined at:
  1790 ;;		line 72 in file "input_handler.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;		None
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      void 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0
  1799 ;; Tracked objects:
  1800 ;;		On entry : 300/0
  1801 ;;		On exit  : 300/0
  1802 ;;		Unchanged: 300/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1804 ;;      Params:         0       0       0       0
  1805 ;;      Locals:         0       0       0       0
  1806 ;;      Temps:          1       0       0       0
  1807 ;;      Totals:         1       0       0       0
  1808 ;;Total ram usage:        1 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_CheckInputState
  1815 ;;		_CheckGateCloseSwitch
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           
  1820                           ;psect for function _DebounceWait
  1821  0188                     _DebounceWait:	
  1822                           
  1823                           ;input_handler.c: 76:     g_key_timer=20;
  1824                           
  1825                           ;incstack = 0
  1826                           ; Regs used in _DebounceWait: [wreg+status,2+status,0]
  1827  0188  3014               	movlw	20
  1828  0189  00F2               	movwf	??_DebounceWait
  1829  018A  0872               	movf	??_DebounceWait,w
  1830  018B  00FB               	movwf	_g_key_timer	;volatile
  1831  018C                     l876:	
  1832                           ;input_handler.c: 77:     while(g_key_timer>0);
  1833                           
  1834  018C  087B               	movf	_g_key_timer,w	;volatile
  1835  018D  1903               	btfsc	3,2
  1836  018E  0008               	return
  1837  018F  298C               	goto	l876
  1838  0190                     __end_of_DebounceWait:	
  1839                           
  1840                           	psect	text14
  1841  014A                     __ptext14:	
  1842 ;; *************** function _ISR *****************
  1843 ;; Defined at:
  1844 ;;		line 44 in file "interrupts.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 200/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1858 ;;      Params:         0       0       0       0
  1859 ;;      Locals:         0       0       0       0
  1860 ;;      Temps:          2       0       0       0
  1861 ;;      Totals:         2       0       0       0
  1862 ;;Total ram usage:        2 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		Interrupt level 1
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _ISR
  1873  014A                     _ISR:	
  1874                           
  1875                           ;interrupts.c: 54:     if (TMR2IE && TMR2IF)
  1876  014A  1683               	bsf	3,5	;RP0=1, select bank1
  1877  014B  1303               	bcf	3,6	;RP1=0, select bank1
  1878  014C  1C8C               	btfss	12,1	;volatile
  1879  014D  2957               	goto	i1l81
  1880  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1881  014F  1C8C               	btfss	12,1	;volatile
  1882  0150  2957               	goto	i1l81
  1883                           
  1884                           ;interrupts.c: 55:     {;interrupts.c: 56:         if(g_key_timer>0)
  1885  0151  087B               	movf	_g_key_timer,w	;volatile
  1886  0152  1903               	btfsc	3,2
  1887  0153  2956               	goto	i1l1028
  1888                           
  1889                           ;interrupts.c: 57:         {;interrupts.c: 58:            g_key_timer--;
  1890  0154  3001               	movlw	1
  1891  0155  02FB               	subwf	_g_key_timer,f	;volatile
  1892  0156                     i1l1028:	
  1893                           
  1894                           ;interrupts.c: 60:          TMR2IF=0;
  1895  0156  108C               	bcf	12,1	;volatile
  1896  0157                     i1l81:	
  1897  0157  0871               	movf	??_ISR+1,w
  1898  0158  008A               	movwf	10
  1899  0159  0E70               	swapf	??_ISR^(0+4294967168),w
  1900  015A  0083               	movwf	3
  1901  015B  0EFE               	swapf	126,f
  1902  015C  0E7E               	swapf	126,w
  1903  015D  0009               	retfie
  1904  015E                     __end_of_ISR:	
  1905  007E                     btemp	set	126	;btemp
  1906  007E                     wtemp0	set	126
  1907                           
  1908                           	psect	intentry
  1909  0004                     __pintentry:	
  1910                           ;incstack = 0
  1911                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1912                           
  1913  0004                     interrupt_function:	
  1914  007E                     saved_w	set	btemp
  1915  0004  00FE               	movwf	btemp
  1916  0005  0E03               	swapf	3,w
  1917  0006  00F0               	movwf	??_ISR
  1918  0007  080A               	movf	10,w
  1919  0008  00F1               	movwf	??_ISR+1
  1920  0009  294A               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    6
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     20      20
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    ManchesteEncode@data_to_send	PTR unsigned char  size(1) Largest target is 10
		 -> SendFrame@data_table(BANK0[10]), 

    CRC16@data_tab_ptr	PTR unsigned char  size(1) Largest target is 10
		 -> SendFrame@data_table(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_LineState
    _LineState->_SendFrame
    _SendFrame->_ManchesteEncode
    _CheckInputState->_DebounceWait
    _CheckGateCloseSwitch->_DebounceWait
    _CheckGateCloseSwitch->_GateStartHighTime

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _LineState->_SendFrame
    _SendFrame->_CRC16

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1575
               _CheckGateCloseSwitch
                        _GlobalInits
                    _InterruptConfig
                          _LineState
 ---------------------------------------------------------------------------------
 (1) _LineState                                            1     1      0    1575
                                             10 COMMON     1     1      0
                    _CheckInputState
                          _SendFrame
 ---------------------------------------------------------------------------------
 (2) _SendFrame                                           16    16      0    1545
                                              9 COMMON     1     1      0
                                              5 BANK0     15    15      0
                              _CRC16
                    _ManchesteEncode
                    _WaitManchesterT
 ---------------------------------------------------------------------------------
 (3) _ManchesteEncode                                      7     6      1     267
                                              2 COMMON     7     6      1
                  _ManchesterSendOne
                 _ManchesterSendZero
 ---------------------------------------------------------------------------------
 (4) _ManchesterSendZero                                   0     0      0       0
                    _WaitManchesterT
 ---------------------------------------------------------------------------------
 (4) _ManchesterSendOne                                    0     0      0       0
                    _WaitManchesterT
 ---------------------------------------------------------------------------------
 (3) _WaitManchesterT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CRC16                                               10     8      2     429
                                              2 COMMON     5     3      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _CheckInputState                                      1     1      0      30
                                              3 COMMON     1     1      0
                       _DebounceWait
 ---------------------------------------------------------------------------------
 (1) _InterruptConfig                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GlobalInits                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckGateCloseSwitch                                 0     0      0       0
                       _DebounceWait
                  _GateStartHighTime
 ---------------------------------------------------------------------------------
 (2) _GateStartHighTime                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _DebounceWait                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckGateCloseSwitch
     _DebounceWait
     _GateStartHighTime
   _GlobalInits
   _InterruptConfig
   _LineState
     _CheckInputState
       _DebounceWait
     _SendFrame
       _CRC16
       _ManchesteEncode
         _ManchesterSendOne
           _WaitManchesterT
         _ManchesterSendZero
           _WaitManchesterT
       _WaitManchesterT

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     14      14       3       25.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      20       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      20      10        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Aug 30 21:22:54 2020

                 ??_CheckInputState 0073                                   l7 0090  
                                 pc 0002                         __CFG_CP$OFF 0000  
                                l96 01A0                                  fsr 0004  
                     ??_GlobalInits 0072                                 l116 01A7  
                               l134 00EE                                 l143 0059  
                               l940 0174                                 l946 0184  
                               l876 018C                                 u324 00DB  
                               u325 00D9                        __CFG_CPD$OFF 0000  
                               u355 00C9                                 _ISR 014A  
                               u455 00A1                                 fsr0 0004  
                               indf 0000                        __CFG_LVP$OFF 0000  
                              ?_ISR 0070                                l1210 003D  
                              l1202 0028                                l1206 0031  
                              l1090 00E2                                l1092 00E3  
                              l1252 00FD                                l1182 00A0  
                              l1190 007B                                l1086 00CF  
                              l1238 0061                                l1192 00B4  
                              l1184 00A7                                l1256 0109  
                              l1098 00BB                        __CFG_WDTE$ON 0000  
                              i1l81 0157                                _TMR1 000E  
                  ?_ManchesteEncode 0072                        __CFG_WRT$OFF 0000  
                              _main 019E                                btemp 007E  
                              start 000A                   CRC16@data_tab_ptr 0020  
                     __CFG_MCLRE$ON 0000                               ??_ISR 0070  
                             ?_main 0070                               _CCPR1 0015  
                             _CRC16 0077                      __CFG_CCPMX$RB2 0000  
               __end_of_GlobalInits 014A            ManchesteEncode@data_loop 0077  
                    __CFG_BOREN$OFF 0000                               pclath 000A  
                             status 0003                               wtemp0 007E  
                        SendFrame@i 0031                          SendFrame@j 0032  
                   __initialization 000B                        __end_of_main 01A4  
                            CRC16@i 0022                              CRC16@k 0021  
                            ??_main 007B                              ?_CRC16 0072  
             __size_of_DebounceWait 0008                              i1l1028 0156  
                         CRC16@size 0072                              _TMR2IE 0461  
                            _TMR2IF 0061                              _TRISA0 0428  
                            _TRISA1 0429                              _TRISA2 042A  
                            _TRISB0 0430                              _TRISA3 042B  
                            _TRISB1 0431                              _TRISA4 042C  
                            _TRISB2 0432                              _TRISB3 0433  
                            _TRISA6 042E                              _TRISB4 0434  
                            _TRISA7 042F                              _TRISB5 0435  
                __size_of_LineState 0020                      __CFG_PWRTE$OFF 0000  
                __size_of_SendFrame 0069                        _DebounceWait 0188  
                       _GlobalInits 0132                     _WaitManchesterT 01A4  
        __end_of_ManchesterSendZero 0197                              saved_w 007E  
               SendFrame@data_table 0025                     _InterruptConfig 0112  
                   _CheckInputState 016A             __end_of__initialization 000C  
                 _ManchesterSendOne 0197                       __end_of_CRC16 00B9  
                ?_ManchesterSendOne 0070                      __pcstackCOMMON 0070  
     __size_of_CheckGateCloseSwitch 000A                 ??_ManchesterSendOne 0072  
                           ??_CRC16 0074                   __end_of_LineState 0112  
                    _OPTION_REGbits 0081                   __end_of_SendFrame 0077  
         __end_of_ManchesterSendOne 019E                          __pmaintext 019E  
           __end_of_WaitManchesterT 01AA                          __pintentry 0004  
           __end_of_InterruptConfig 0132             __end_of_CheckInputState 0176  
                        __stringtab 015E            __size_of_ManchesteEncode 0039  
                 _GateStartHighTime 0180                             __ptext1 00F2  
                           __ptext2 000E                             __ptext3 00B9  
                           __ptext4 0190                             __ptext5 0197  
                           __ptext6 01A4                             __ptext7 0077  
                           __ptext8 016A                             __ptext9 0112  
                ?_GateStartHighTime 0070                        __size_of_ISR 0014  
                         _T1CONbits 0010                CheckInputState@input 0073  
                         _T2CONbits 0012                 ??_GateStartHighTime 0072  
              end_of_initialization 000C          __size_of_ManchesterSendOne 0007  
                  ?_WaitManchesterT 0070           __end_of_GateStartHighTime 0188  
                      ?_GlobalInits 0070                           _PORTAbits 0005  
                         _PORTBbits 0006                    ?_InterruptConfig 0070  
                  ?_CheckInputState 0070                  _ManchesterSendZero 0190  
                       _CCP1CONbits 0017                 ?_ManchesterSendZero 0070  
                 ??_ManchesteEncode 0073                ??_ManchesterSendZero 0072  
           ManchesteEncode@bit_loop 0078                 start_initialization 000B  
                       __end_of_ISR 015E                           _LineState 00F2  
      __end_of_CheckGateCloseSwitch 0180                           _SendFrame 000E  
                          CRC16@crc 0023  __end_ofInterruptConfig@k_baud_rate 016A  
        InterruptConfig@k_baud_rate 0166          __size_of_GateStartHighTime 0008  
        ManchesteEncode@data_lenght 0072                         __pbssCOMMON 007B  
                         ___latbits 0000                       __pcstackBANK0 0020  
                        ?_LineState 0070                          ?_SendFrame 0070  
                       _g_key_timer 007B                           __pstrings 015E  
                    __size_of_CRC16 0042                __size_of_GlobalInits 0018  
                 interrupt_function 0004                            _PIE1bits 008C  
                          _PIR1bits 000C                _CheckGateCloseSwitch 0176  
                     ?_DebounceWait 0070                         __stringbase 0163  
                        _ADCON1bits 009F                         ??_LineState 007A  
                    CRC16@generator 0164                         ??_SendFrame 0079  
                   _ManchesteEncode 00B9                      ??_DebounceWait 0072  
             ?_CheckGateCloseSwitch 0070                  __end_of__stringtab 0164  
          __size_of_WaitManchesterT 0006                            __ptext10 0132  
                          __ptext11 0176                            __ptext12 0180  
                          __ptext13 0188                            __ptext14 014A  
            __end_ofCRC16@generator 0166            __size_of_InterruptConfig 0020  
          __size_of_CheckInputState 000C                       __size_of_main 0006  
       ManchesteEncode@data_to_send 0076                          _INTCONbits 000B  
       __size_of_ManchesterSendZero 0007                    SendFrame@crc_val 002F  
                          intlevel1 0000             __end_of_ManchesteEncode 00F2  
                         stringcode 015E                          _OSCCONbits 008F  
            ??_CheckGateCloseSwitch 0073                            stringdir 015E  
                          stringtab 015E                   ??_WaitManchesterT 0072  
              __end_of_DebounceWait 0190                  __CFG_FOSC$INTOSCIO 0000  
                     SendFrame@type 0033                   ??_InterruptConfig 0072  
